<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.html5jscss.com/"/>
  <updated>2019-08-29T13:21:30.364Z</updated>
  <id>http://blog.html5jscss.com/</id>
  
  <author>
    <name>wei gu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-communication</title>
    <link href="http://blog.html5jscss.com/react-communication/"/>
    <id>http://blog.html5jscss.com/react-communication/</id>
    <published>2019-08-15T02:06:44.000Z</published>
    <updated>2019-08-29T13:21:30.364Z</updated>
    
    <content type="html"><![CDATA[<ul><li>父子组件传通信<ul><li>父组件通过props传递信息</li><li>子组件通过回调函数传递信息</li></ul></li><li>跨级组件通信<ul><li>层层传递props</li><li>context</li></ul></li><li>兄弟组件通信<ul><li>利用自定义事件</li></ul></li></ul><p><code>React</code>组件式开发的最大好处就是可组合性。所以也会经常遇到组件之间通信的问题，以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。</p><h2 id="父子组件传通信"><a href="#父子组件传通信" class="headerlink" title="父子组件传通信"></a>父子组件传通信</h2><p>在<code>react</code>中数据流是单向的，自上往下流动的，所以不能从下往上获取数据。所以解决父子组件的双向通信问题的话，我们只能通过以下方法：</p><ol><li>父组件通过<code>props</code>传递给子组件，子组件就能通过<code>props</code>获取父组件传递过来的数据。</li><li><code>props</code>可以传递的<code>number、bool、object、string、function</code>等多个类型的，所以子组件通过调用父组件通过<code>props</code>传递过来的<code>function</code>类型的回调函数去改变父组件的值。</li><li><code>react</code>提供了<code>ref</code>来获取组件实例，所以结合<code>props</code>和<code>ref</code>，父组件获取子组件实例的属性和方法。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Child.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t'</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changeChildTxt = e =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.changeChildTxt(e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi () &#123;</span><br><span class="line">        console.log(<span class="symbol">'H</span>i')</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt; &#123;<span class="keyword">this</span>.props.title&#125; &lt;/h1&gt;</span><br><span class="line">                &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> </span><br><span class="line">                onChange=&#123;<span class="keyword">this</span>.changeChildTxt&#125; <span class="comment">// 调用父组件传进来的方法</span></span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Parent.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t'</span><br><span class="line"><span class="keyword">import</span> <span class="type">Child</span> from './<span class="type">Child</span>'</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            txt: ''</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changeChildTxt = txt =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            txt: txt</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                    <span class="keyword">this</span>.<span class="type">ChildRef</span>.sayHi()</span><br><span class="line">                &#125;&#125;&gt;通过ref获取子组件的方法&lt;/button&gt;</span><br><span class="line">                &lt;<span class="type">Child</span> </span><br><span class="line">                    title=<span class="string">"1"</span> <span class="comment">// 将父组件的属性传递给子组件</span></span><br><span class="line">                    changeChildTxt=&#123;<span class="keyword">this</span>.changeChildTxt&#125; <span class="comment">// 将父组件的方法传递给子组件</span></span><br><span class="line">                    ref=&#123;(ref)=&gt;&#123;</span><br><span class="line">                        <span class="keyword">this</span>.<span class="type">ChildRef</span> = ref <span class="comment">// 将子组件实例赋值给ChildRef</span></span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                &gt;&lt;/<span class="type">Child</span>&gt;</span><br><span class="line">                &lt;p&gt;子组件传的值：&#123;<span class="keyword">this</span>.state.txt&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨级组件通信"><a href="#跨级组件通信" class="headerlink" title="跨级组件通信"></a>跨级组件通信</h2><p>以上我们通过<code>props</code>解决父子级组件，也可以通过<code>props</code>层层传递来解决跨级通信的问题，但是组件层级深一点，就很难维护，所以我们使用<code>context</code>。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`</span><br></pre></td></tr></table></figure><p><code>context</code>是一个全局变量，在任何一个地方都能访问到。但是react官方不建议大量使用<code>context</code>，尽管他可以解决<code>props</code>层层传递的问题，但是一旦组件复杂，可能很难知道<code>context</code>是从哪里传过来的，跟全局变量一样要慎用。</p><h2 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;父子组件传通信&lt;ul&gt;
&lt;li&gt;父组件通过props传递信息&lt;/li&gt;
&lt;li&gt;子组件通过回调函数传递信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跨级组件通信&lt;ul&gt;
&lt;li&gt;层层传递props&lt;/li&gt;
&lt;li&gt;context&lt;/li&gt;
&lt;/ul&gt;
&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue组件通信</title>
    <link href="http://blog.html5jscss.com/vue-communication/"/>
    <id>http://blog.html5jscss.com/vue-communication/</id>
    <published>2019-08-09T07:49:50.000Z</published>
    <updated>2019-08-29T13:21:30.365Z</updated>
    
    <content type="html"><![CDATA[<p><code>Vue</code>组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。</p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a>props / $emit</h3><p>父组件通过<code>props</code>属性传值的方式给子组件，子组件通过<code>$emit</code>定义事件向父组件传递值。<br><a id="more"></a></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>使用一个简单的例子来验证下<code>props / $emit</code>，其中<code>List.vue</code>是<code>Bank.vue</code>的父组件。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// List.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bank-item</span> <span class="attr">:list</span>=<span class="string">"banks"</span> @<span class="attr">onEmitCurBankIndex</span>=<span class="string">"onEmitCurBankIndex"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">bank-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>开户地：</span><span class="template-variable">&#123;&#123;curCity&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> bankItem <span class="keyword">from</span> <span class="string">'./Bank.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'List'</span>,</span><br><span class="line">  components: &#123; bankItem &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      banks: [</span><br><span class="line">          &#123;name: <span class="string">'众邦银行'</span>, info: <span class="string">'武汉'</span>&#125;,</span><br><span class="line">          &#123;name: <span class="string">'营口银行'</span>, info: <span class="string">'营口'</span>&#125;,</span><br><span class="line">          &#123;name: <span class="string">'金城银行'</span>, info: <span class="string">'天津'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        curCity: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      onEmitCurBankIndex(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.curCity = <span class="keyword">this</span>.banks[index].info;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Bank.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span> @<span class="attr">click</span>=<span class="string">"emitCurBankIndex(index)"</span>&gt;</span></span><br><span class="line">            </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'list'</span>],</span><br><span class="line">  methods: &#123;</span><br><span class="line">      emitCurBankIndex(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$emit(<span class="string">'onEmitCurBankIndex'</span>, index)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>注意：通过prop传递的数据，子组件只能使用，不能修改；而父组件也只能通过监听事件才能获取传递的值。</p><h3 id="ref-refs"><a href="#ref-refs" class="headerlink" title="ref / $refs"></a>ref / $refs</h3><p><code>ref</code>被用来给元素或者子组件注册引用信息。在父组件中可以使用<code>$refs</code>来获取引用信息。如果用在普通的DOM元素上，则引用信息指向DOM元素，如果是子元素，引用信息则指向子组件的实例。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>我们拿<code>props / $emit</code>中的例子，当前银行索引从子元素中获取。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// List.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bank-item</span> <span class="attr">:list</span>=<span class="string">"banks"</span> @<span class="attr">onEmitCurBankIndex</span>=<span class="string">"onEmitCurBankIndex"</span>  <span class="attr">ref</span>=<span class="string">"bankItem"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">bank-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>开户地：</span><span class="template-variable">&#123;&#123;curCity&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> bankItem <span class="keyword">from</span> <span class="string">'./Bank.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'List'</span>,</span><br><span class="line">  components: &#123; bankItem &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      banks: [</span><br><span class="line">          &#123;name: <span class="string">'众邦银行'</span>, info: <span class="string">'武汉'</span>&#125;,</span><br><span class="line">          &#123;name: <span class="string">'营口银行'</span>, info: <span class="string">'营口'</span>&#125;,</span><br><span class="line">          &#123;name: <span class="string">'金城银行'</span>, info: <span class="string">'天津'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        curCity: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      <span class="comment">// 父组件通过v-on监听并接受传参   </span></span><br><span class="line">      onEmitCurBankIndex(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.curCity = <span class="keyword">this</span>.banks[index].info;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      <span class="keyword">var</span> bank = <span class="keyword">this</span>.$refs.bankItem.curCity;</span><br><span class="line">      <span class="keyword">this</span>.curCity = <span class="keyword">this</span>.banks[bank].info; <span class="comment">// 默认选中通过$refs从子元素中获取</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Bank.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span> @<span class="attr">click</span>=<span class="string">"emitCurBankIndex(index)"</span>&gt;</span></span><br><span class="line">            </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'list'</span>],</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      curCity:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">        <span class="comment">// 自定义时间，通过传参将值传给父组件 </span></span><br><span class="line">        emitCurBankIndex(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$emit(<span class="string">'onEmitCurBankIndex'</span>, index)</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="children-parent"><a href="#children-parent" class="headerlink" title="$children / $parent"></a>$children / $parent</h3><p>指定已创建的父实例，在两者之间建立父子关系。子实例可以用<code>this.$parent</code>访问父实例，子实例被推入父实例的<code>$children</code>数组中。<code>this.$parent</code>返回的是包含父组件实例的对象，而<code>$children</code>返回的是由该父组件所包含的所有子组件的数组。</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p>使用一个简单的例子来验证下<code>$children / $parent</code>，其中<code>Parent.vue</code>是<code>Children.vue</code>的父组件。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// Parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-el"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        我是子组件的值</span><span class="template-variable">&#123;&#123;tmp&#125;&#125;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">children-a</span>&gt;</span><span class="tag">&lt;/<span class="name">children-a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setChildtVal"</span>&gt;</span>点击改变子集的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> ChildrenA <span class="keyword">from</span> <span class="string">'./ChildrenA.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'Parent'</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        ChildrenA</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            parentMsg: <span class="string">'我是父级的值'</span>,</span><br><span class="line">            tmp: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        setChildtVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$children[<span class="number">0</span>].childrenMsg = <span class="string">'改变子级的值'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Children.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        </span><span class="template-variable">&#123;&#123;childrenMsg&#125;&#125;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件的值：</span><span class="template-variable">&#123;&#123;getParentVal&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            childrenMsg: <span class="string">'子组件的值'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        getParentVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$parent.parentMsg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>注意：官网建议要节制地使用<code>$parent</code>和<code>$children</code>- 它们的主要目的是作为访问组件的应急方法。更推荐用<code>props</code>和<code>events</code>实现父子组件通信。</p><h3 id="父子通信小结"><a href="#父子通信小结" class="headerlink" title="父子通信小结"></a>父子通信小结</h3><p><code>$refs</code> 和 <code>$children</code> 都只有在组件渲染完成后才填充，都是在<code>mounted</code>之后才存在，所以</p><h2 id="跨级传递"><a href="#跨级传递" class="headerlink" title="跨级传递"></a>跨级传递</h2><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/ inject"></a>provide/ inject</h3><p><code>provide/ inject</code> 是<code>vue2.2.0</code>新增的API。它解决了不管子组件嵌套多深，只要在父级组件中使用<code>provide</code>来提供变量，在子组件中就可以通过<code>inject</code>来注入变量。所以只要在祖先组件中使用<code>provide</code>定义了变量，子孙组件就能通过<code>inject</code>来获取，而不需要通过<code>prop</code>一层层的往下传递。</p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><p><code>Provider.vue</code>使用<code>provide</code>定义<code>title/titleA</code>属性，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>titleA</code>值，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>title</code>值。如下：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// Provider.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child-b</span>&gt;</span><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> ChildB <span class="keyword">from</span> <span class="string">'./ChildrenB.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    provide: &#123;</span><br><span class="line">        title: <span class="string">'跨级传递'</span>,</span><br><span class="line">        titleA: <span class="string">'子组件传递'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        ChildB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// ChildrenB.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><span class="template-variable">&#123;&#123;tittle&#125;&#125;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">child-c</span>&gt;</span><span class="tag">&lt;/<span class="name">child-c</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">import</span> ChildC <span class="keyword">from</span> <span class="string">"./ChildrenC.vue"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">'ChildB'</span>,</span><br><span class="line">        inject: [ <span class="string">'titleA'</span> ], <span class="comment">// 获取父组件定义的titleA值</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            ChildC</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                tittle: <span class="keyword">this</span>.titleA</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// InjectChild.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'grand'</span>,</span><br><span class="line">    inject: [<span class="string">'title'</span>], <span class="comment">// 获取祖先组件定义的title值</span></span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            titie: <span class="keyword">this</span>.titie</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs  $listeners"></a>$attrs  $listeners</h3><p><code>provide/ inject</code>解决了<code>props</code>一级一级往下传递信息的问题，但是没解决子孙组件通过事件通信祖先组件也得一级一级网上传递。所以，在<code>vue2.4</code>中又引入了<code>$attrs</code> 和 <code>$listeners</code>。</p><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><p><code>ChildrenD</code>组件调用<code>ChildrenE</code>组件时，使用<code>v-on</code>绑定了<code>$listeners</code>,<code>Ancestors</code>组件中能直接触发<code>ChildrenE</code>组件定义的的<code>postName</code>方法；<code>v-bind</code>绑定 <code>$attrs</code>属性，<code>ChildrenE</code>组件可以直接获取到<code>Ancestors</code>组件中传递下来的属性值。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// Ancestors.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>祖先组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child-d</span> <span class="attr">:titled</span>=<span class="string">"titleD"</span> <span class="attr">:titlee</span>=<span class="string">"titleE"</span> <span class="attr">v-on:postName</span>=<span class="string">"postName"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-d</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> ChildD <span class="keyword">from</span> <span class="string">'./ChildrenD'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            titleD: <span class="string">'传递给childrenD的值'</span>,</span><br><span class="line">            titleE: <span class="string">'传递给childrenE的值'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        ChildD</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        postName(val) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'从childrenE传递过来的值：'</span> + val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// ChildrenD.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child-e</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-e</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> ChildE <span class="keyword">from</span> <span class="string">'./ChildrenE.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: <span class="keyword">this</span>.$attrs.titled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        ChildE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// ChildrenE.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> @<span class="attr">input</span>=<span class="string">"postName(name)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">            title: <span class="keyword">this</span>.$attrs.titlee</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        postName(val)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'postName'</span>,val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h2><p>没有<code>API</code>能直接实现兄弟组件的通信。</p><h3 id="事件中转"><a href="#事件中转" class="headerlink" title="事件中转"></a>事件中转</h3><p>父子通信可以通过官方的<code>API</code>一步来传递，但是兄弟间的数据传递要麻烦一点。得利用<code>vue</code>内部的一个事件机制，将其作为兄弟事件处理的中转站。</p><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h4><p>将<code>EventBus</code>定义在父级元素，这样子的话子元素可以直接获取到时间对象。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//EventBus.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brother-a</span>&gt;</span><span class="tag">&lt;/<span class="name">brother-a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brother-b</span>&gt;</span><span class="tag">&lt;/<span class="name">brother-b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> BrotherA <span class="keyword">from</span> <span class="string">'./BrotherA.vue'</span></span><br><span class="line"><span class="keyword">import</span> BrotherB <span class="keyword">from</span> <span class="string">'./BrotherB.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue()</span><br><span class="line">Vue.prototype.$EventBus = EventBus; <span class="comment">// 将vue内部的事件赋值给vue的原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        BrotherA,</span><br><span class="line">        BrotherB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">//BrotherA.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"title"</span> @<span class="attr">input</span>=<span class="string">"passTitle(title)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        passTitle(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$EventBus.$emit(<span class="string">'passTitle'</span>, val) <span class="comment">// 子元素获取到$EventBus对象，然后定义事件名passTitle</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//BrotherB.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>BrotherB组件<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>BrotherA组件传递过来的值：</span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$EventBus.$on(<span class="string">'passTitle'</span>, (val)=&gt; &#123; <span class="comment">// 接受passTitle事件</span></span><br><span class="line">            <span class="keyword">this</span>.title = val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>当然也可以定义一个<code>eventBus.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure></p><p>然后每次使用引入使用<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">'./event-bus.js'</span></span><br></pre></td></tr></table></figure></p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p><code>Vuex</code>是一个专为 Vue.js 应用程序开发的状态管理模式。具体怎么使用移步<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="external">官网</a>。</p><h3 id="兄弟组件通信小结"><a href="#兄弟组件通信小结" class="headerlink" title="兄弟组件通信小结"></a>兄弟组件通信小结</h3><p>事件中转和<code>Vuex</code>能实现跨级通信，所以父子间通信也是能实现的，但是相比于其他直接能实现父子通信的<code>API</code>，用事件中转和<code>Vuex</code>去实现就有点不够优雅了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><code>props / $emit</code>和<code>$children / $parent</code>只能解决父子组件的通信。</li><li><code>$children</code>和<code>$refs</code>都不是响应式的，因此不能用它们在模板中做数据绑定。</li><li><code>Vuex</code>能解决所有关系组件通信问题，但是要根据实际项目情况去使用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。&lt;/p&gt;
&lt;h2 id=&quot;父子组件通信&quot;&gt;&lt;a href=&quot;#父子组件通信&quot; class=&quot;headerlink&quot; title=&quot;父子组件通信&quot;&gt;&lt;/a&gt;父子组件通信&lt;/h2&gt;&lt;h3 id=&quot;props-emit&quot;&gt;&lt;a href=&quot;#props-emit&quot; class=&quot;headerlink&quot; title=&quot;props / $emit&quot;&gt;&lt;/a&gt;props / $emit&lt;/h3&gt;&lt;p&gt;父组件通过&lt;code&gt;props&lt;/code&gt;属性传值的方式给子组件，子组件通过&lt;code&gt;$emit&lt;/code&gt;定义事件向父组件传递值。&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.html5jscss.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://blog.html5jscss.com/tags/Vue/"/>
    
      <category term="Vue实操" scheme="http://blog.html5jscss.com/tags/Vue%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>mongoose联表查询</title>
    <link href="http://blog.html5jscss.com/mongoose-populate/"/>
    <id>http://blog.html5jscss.com/mongoose-populate/</id>
    <published>2019-08-01T06:07:19.000Z</published>
    <updated>2019-08-07T11:13:59.710Z</updated>
    
    <content type="html"><![CDATA[<p>很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲<code>populate</code>方法和聚合查询。<br><a id="more"></a></p><h2 id="Schema增加外键增加联系"><a href="#Schema增加外键增加联系" class="headerlink" title="Schema增加外键增加联系"></a>Schema增加外键增加联系</h2><p>增加一张书籍和人物的表，通过外键指向需要关联的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    _id: Schema.Types.ObjectId,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    stories: [&#123; type: Schema.Types.ObjectId, ref: <span class="string">'Story'</span> &#125;] <span class="comment">// 以id作为外键值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storySchema = Schema(&#123;</span><br><span class="line">    author: &#123; type: Schema.Types.ObjectId, ref: <span class="string">'Person'</span> &#125;,  <span class="comment">// 以id作为外键值</span></span><br><span class="line">    title: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Story = mongoose.model(<span class="string">'Story'</span>, storySchema)</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br></pre></td></tr></table></figure></p><h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>保存时，只要把关联的文档的<code>_id</code>值赋给它就好了:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> author = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    _id: <span class="keyword">new</span> mongoose.Types.ObjectId(),</span><br><span class="line">    name: <span class="string">'Ian Flemin'</span>,</span><br><span class="line">    age: <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> story = <span class="keyword">new</span> Story(&#123;</span><br><span class="line">    title: <span class="string">'Casino Royale'</span>,</span><br><span class="line">    author: author._id    <span class="comment">// 将author的_id赋值给story实例</span></span><br><span class="line">&#125;);</span><br><span class="line">author.save(); <span class="comment">// 保存</span></span><br><span class="line">story.save(); <span class="comment">// 保存</span></span><br></pre></td></tr></table></figure></p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>使用<code>populate()</code>方法查询<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Story.</span><br><span class="line">    find().</span><br><span class="line">    populate(<span class="string">'author'</span>).</span><br><span class="line">    exec( (err, stories) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="built_in">console</span>.log(stories) <span class="comment">// [ &#123; fans: [],_id: 5d4a65c2fa5ac0f1403b9e86,title: 'Casino Royale',author:&#123; stories: [],_id: 5d4a65c2fa5ac0f1403b9e85, name: 'Ian Flemin',age: 50,__v: 0 &#125;,__v: 0 &#125; ] &#125; )</span></span><br><span class="line">    &#125; )</span><br></pre></td></tr></table></figure></p><p>##聚合方法</p><h3 id="定义Schema"><a href="#定义Schema" class="headerlink" title="定义Schema"></a>定义Schema</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankSchema = Schema(&#123;</span><br><span class="line">    bank_id: <span class="built_in">String</span>, <span class="comment">// 定义表之间关联的键</span></span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BankModel = mongoose.model(<span class="string">'Bank'</span>,bankSchema,<span class="string">'banks'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> projectSchema = Schema(&#123;</span><br><span class="line">    bank_id: <span class="built_in">String</span>, <span class="comment">// 定义表之间关联的键</span></span><br><span class="line">    title:<span class="built_in">String</span>,</span><br><span class="line">    rate:<span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ProjectModel = mongoose.model(<span class="string">'Project'</span>,projectSchema,<span class="string">'projects'</span>); <span class="comment">// 定义集合名称，聚合查询会用到</span></span><br></pre></td></tr></table></figure><h3 id="保存数据-1"><a href="#保存数据-1" class="headerlink" title="保存数据"></a>保存数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> insetArray = [</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"1"</span>,<span class="string">"name"</span>:<span class="string">"众邦银行"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"2"</span>,<span class="string">"name"</span>:<span class="string">"营口银行"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"2"</span>,<span class="string">"name"</span>:<span class="string">"金城金行"</span>&#125;,</span><br><span class="line">]</span><br><span class="line">BankModel.create(insetArray, (err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> insetArrayP = [</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"1"</span>,<span class="string">"title"</span>:<span class="string">'众邦宝活期'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"1"</span>,<span class="string">"title"</span>:<span class="string">'众邦宝定期'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"2"</span>,<span class="string">"title"</span>:<span class="string">'祥云宝1号'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"3"</span>,<span class="string">"title"</span>:<span class="string">'金慧存1号'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"3"</span>,<span class="string">"title"</span>:<span class="string">'金慧存2号'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"bank_id"</span>:<span class="string">"3"</span>,<span class="string">"title"</span>:<span class="string">'金慧存3号'</span>,<span class="string">"rate"</span>:<span class="string">"4.6%"</span>&#125;,</span><br><span class="line">]</span><br><span class="line">ProjectModel.create(insetArrayP, (err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BankModel.aggregate([&#123;</span><br><span class="line">           $lookup:&#123;</span><br><span class="line">               <span class="keyword">from</span>:<span class="string">"projects"</span>,</span><br><span class="line">               localField:<span class="string">"bank_id"</span>,</span><br><span class="line">               foreignField:<span class="string">"bank_id"</span>,</span><br><span class="line">               <span class="keyword">as</span>:<span class="string">"projects_item"</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;],(err,docs)=&gt;&#123;</span><br><span class="line">           <span class="keyword">if</span>(err)&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(err);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">console</span>.log(docs) <span class="comment">// [&#123;"_id":"5d4a972f70be25ec68f35f6b","bank_id":"1","name":"众邦银行","__v":0,"projects_item":"众邦宝定期","rate":"4.6%","__v":0&#125;]&#125;,&#123;"_id":"5d4a972f70be2:[&#123;"_id":"5d4a972f70be25ec68f35f6e","bank_id":"1","title":"众邦宝活期","rate":"4.6%","__v":0&#125;,&#123;"_id":"5d4a972f70be25ec68f35f6f","bank_id":"1","title":"众邦宝定期","rate":"4.6%","__v":0&#125;]&#125;,&#123;"_id":"5d4a972f70be25ec68f35f6c","bank_id":"2","name":"营口银行","__v":0,"projects_item":[&#123;"_id":"5d4a972f70be25ec68f35f70","bank_id":"2","title":"祥云宝1号","rate":"4.6%","__v":0&#125;]&#125;,&#123;"_id":"5d4a972f70be25ec68f35f6d","bank_id":"2","name":"金城金行","__v":0,"projects_item":[&#123;"_id":"5d4a972f70be25ec68f35f70","bank_id":"2","title":"祥云宝1号","rate":"4.6%","__v":0&#125;]&#125;]</span></span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲&lt;code&gt;populate&lt;/code&gt;方法和聚合查询。&lt;br&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="http://blog.html5jscss.com/categories/mongoDB/"/>
    
    
      <category term="mongoose" scheme="http://blog.html5jscss.com/tags/mongoose/"/>
    
      <category term="nodeJs" scheme="http://blog.html5jscss.com/tags/nodeJs/"/>
    
      <category term="mongoDB" scheme="http://blog.html5jscss.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>入门 mongoose</title>
    <link href="http://blog.html5jscss.com/mongoose-api/"/>
    <id>http://blog.html5jscss.com/mongoose-api/</id>
    <published>2019-08-01T06:07:19.000Z</published>
    <updated>2019-08-07T10:04:02.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.</p><p>Mongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。</p><footer><strong>mongoose</strong><cite><a href="https://github.com/Automattic/mongoose" target="_blank" rel="external">github.com/Automattic/mongoose</a></cite></footer></blockquote><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>首先电脑必须安装 <a href="https://www.mongodb.com/" target="_blank" rel="external">MongoDB</a> 和 <a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a>。</li><li>项目中使用npm来安装mongoose <code>npm install mongoose --save</code></li><li>引入<code>mongoose</code>就能使用了。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using Node.js `require()`</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using ES6 imports</span></span><br><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><code>connect</code>用于创建连接数据库，也可以调用使用<code>disconnect</code>断开连接。如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dbPath = <span class="string">'mongodb://localhost/test'</span>;</span><br><span class="line"><span class="keyword">const</span> database = () =&gt; &#123;</span><br><span class="line">    mongoose.set(<span class="string">'debug'</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        mongoose.connect(dbPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'连接成功'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connect();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 断开重新连接</span><br><span class="line">    */</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'disconnected'</span>, () =&gt; &#123;</span><br><span class="line">        connect();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 连接成功</span><br><span class="line">    */</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经连接成功'</span>);  </span><br><span class="line">    &#125;); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 连接异常</span><br><span class="line">    */</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'异常'</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    mongoose.connection.on(<span class="string">'open'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected to MongoDB '</span>, dbPath)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">database()</span><br></pre></td></tr></table></figure></p><p>如果要指定用户，可在连接的数据库地址上形如 ‘mongodb://用户名:密码@IP地址/数据库名称’ 结构上修改。</p><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>每一个<code>schema</code>都是一个文档的映射结构，无法操作数据库，但是在<code>schema</code>上可以定义属性、静态方法、实例方法、查询辅助、索引、虚拟字段以及配置项。</p><h3 id="允许的类型"><a href="#允许的类型" class="headerlink" title="允许的类型"></a>允许的类型</h3><p>文档中字段允许的属性：</p><ol><li>String</li><li>Number</li><li>Date</li><li>Buffer</li><li>Boolean</li><li>Mixed</li><li>ObjectId</li><li>Array</li><li>Decimal128</li><li>Map</li></ol><p>实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name:    <span class="built_in">String</span>,</span><br><span class="line">    binary:  Buffer,</span><br><span class="line">    living:  <span class="built_in">Boolean</span>,</span><br><span class="line">    updated: &#123; type: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">    age:     &#123; type: <span class="built_in">Number</span>, min: <span class="number">18</span>, max: <span class="number">65</span> &#125;,</span><br><span class="line">    mixed:   Schema.Types.Mixed,</span><br><span class="line">    _someId: Schema.Types.ObjectId,</span><br><span class="line">    decimal: Schema.Types.Decimal128,</span><br><span class="line">    array: [],</span><br><span class="line">    ofString: [<span class="built_in">String</span>],</span><br><span class="line">    ofNumber: [<span class="built_in">Number</span>],</span><br><span class="line">    ofDates: [<span class="built_in">Date</span>],</span><br><span class="line">    ofBuffer: [Buffer],</span><br><span class="line">    ofBoolean: [<span class="built_in">Boolean</span>],</span><br><span class="line">    ofMixed: [Schema.Types.Mixed],</span><br><span class="line">    ofObjectId: [Schema.Types.ObjectId],</span><br><span class="line">    ofArrays: [[]],</span><br><span class="line">    ofArrayOfNumbers: [[<span class="built_in">Number</span>]],</span><br><span class="line">    nested: &#123;</span><br><span class="line">        stuff: &#123; type: <span class="built_in">String</span>, lowercase: <span class="literal">true</span>, trim: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    map: <span class="built_in">Map</span>,</span><br><span class="line">    mapOfString: &#123;</span><br><span class="line">    type: <span class="built_in">Map</span>,</span><br><span class="line">    <span class="keyword">of</span>: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如下使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Thing = mongoose.model(<span class="string">'Thing'</span>, schema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Thing;</span><br><span class="line">m.name = <span class="string">'Statue of Liberty'</span>;</span><br><span class="line">m.age = <span class="number">125</span>;</span><br><span class="line">m.updated = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">m.binary = Buffer.alloc(<span class="number">0</span>);</span><br><span class="line">m.living = <span class="literal">false</span>;</span><br><span class="line">m.mixed = &#123; any: &#123; thing: <span class="string">'i want'</span> &#125; &#125;;</span><br><span class="line">m.markModified(<span class="string">'mixed'</span>);</span><br><span class="line">m._someId = <span class="keyword">new</span> mongoose.Types.ObjectId;</span><br><span class="line">m.array.push(<span class="number">1</span>);</span><br><span class="line">m.ofString.push(<span class="string">"strings!"</span>);</span><br><span class="line">m.ofNumber.unshift(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">m.ofDates.addToSet(<span class="keyword">new</span> <span class="built_in">Date</span>);</span><br><span class="line">m.ofBuffer.pop();</span><br><span class="line">m.ofMixed = [<span class="number">1</span>, [], <span class="string">'three'</span>, &#123; four: <span class="number">5</span> &#125;];</span><br><span class="line">m.nested.stuff = <span class="string">'good'</span>;</span><br><span class="line">m.map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'key'</span>, <span class="string">'value'</span>]]);</span><br><span class="line">m.save(callback);</span><br></pre></td></tr></table></figure></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><code>mongoose</code>自动会给每个<code>document</code>增加索引，可以在<code>connect</code>设置关闭所有的自动索引，也可以单独针对某个<code>doucument</code>设置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schema.set(<span class="string">'autoIndex'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">new</span> Schema(&#123;&#125;, &#123;autoIndex: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="虚拟字段"><a href="#虚拟字段" class="headerlink" title="虚拟字段"></a>虚拟字段</h3><p>虚拟字段不会写入数据库中，可以利用它来格式化和组合属性值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addressSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    address: &#123;   </span><br><span class="line">        city: <span class="built_in">String</span>,   </span><br><span class="line">        street: <span class="built_in">String</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 设置获取虚拟字段的get方法</span></span><br><span class="line">addressSchema.virtual(<span class="string">'address.full'</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.address.city + <span class="string">'/'</span> + <span class="keyword">this</span>.address.street</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置赋值虚拟字段的set方法</span></span><br><span class="line">addressSchema.virtual(<span class="string">'address.full'</span>).set(<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> split = address.split(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">this</span>.address.city = split[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.address.street = split[<span class="number">1</span>];</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Address = mongoose.model(<span class="string">'Address'</span>, addressSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> address1 = <span class="keyword">new</span> Address(&#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">        city: <span class="string">'shanghai'</span>,</span><br><span class="line">        street: <span class="string">'jinzhong road'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 通过虚拟字段获取地址详情</span></span><br><span class="line"><span class="built_in">console</span>.log(address1.address.full) <span class="comment">// shanghai/jinzhong road</span></span><br><span class="line"><span class="comment">// 通过虚拟字段设置地址详情</span></span><br><span class="line">address1.address.full = <span class="string">"beijing/gugong"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(address1.address.city) <span class="comment">// beijing</span></span><br><span class="line"><span class="built_in">console</span>.log(address1.address.street) <span class="comment">// gugong</span></span><br><span class="line">address1.save() <span class="comment">// address.full将不会被保存到数据库中</span></span><br></pre></td></tr></table></figure></p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p><code>Schema</code>可以使用配置项来设置，有两种方式设置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Schema(&#123;…&#125;, options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(&#123;...&#125;);</span><br><span class="line">schema.set(option, value);</span><br></pre></td></tr></table></figure></p><h4 id="有效的配置项"><a href="#有效的配置项" class="headerlink" title="有效的配置项"></a>有效的配置项</h4><ul><li>autoIndex（默认true），创建默认索引（_id）。</li><li>capped，限制一次操作的量。</li><li>collection，定义集合的名字，默认是model名+s</li><li>id _id（默认true），如果<code>schema</code>中没有定义id，<code>mongoose</code>默认分配一个id域</li><li>read </li><li>safe（默认true），在操作的时候要等待返回的MongoDB返回的结果；否则则不等待</li><li>shardKey 让mongodb做分布式操作 </li><li>strict（默认enabled）如果实例中的字段没在schema中定义过，那么这个字段就不会被保存进数据库</li><li>toJSON，实例调用toJson方法后，针对返回的数据做处理</li><li>toObject，实例调用toJson方法后，针对返回的数据做处理</li><li>versionKey 版本锁，设置在每个文档上，默认键名为 <code>_v</code>。</li><li>typeKey </li><li>validateBeforeSave 保存数据库时会自动验证</li><li>skipVersioning </li><li>timestamps 在schema设置这个选项，会被自动添加createdAt和updatedAt，默认的名字是createdAt和updatedAt</li><li>useNestedStrict 是否检查childSchem的配置</li><li>retainKeyOrder，是否改变键的顺序</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><code>Schmema</code>里只设置属性的话，缺少字段也能保存；多了属性的话，虽然不会把多余的属性保存，但是还是进入数据库了。所以可以需要增加验证属性来限制下，就能避免像上面这些情况的发生了。常用的验证如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">required  数据必须填写</span><br><span class="line"><span class="keyword">default</span>  默认值</span><br><span class="line">validate  自定义匹配</span><br><span class="line">min  最小值(只适用于数字)</span><br><span class="line">max  最大值(只适用于数字)</span><br><span class="line">match  正则匹配(只适用于字符串)</span><br><span class="line">enum   枚举匹配(只适用于字符串)</span><br></pre></td></tr></table></figure></p><ol><li>required：将某个字段设置为必填字段，如果没有这个必填字段，则不会被保存。</li><li>default: 如果不设置某个字段，则会取默认值</li><li>min | max: 将某个字段设置取值范围</li><li>match: 字段必须包含指定字符</li><li>enum: 枚举值必须在枚举的范围内</li><li>validate：定义一个函数，返回<code>true</code>则通过验证；<code>false</code>则不通过验证。</li></ol><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>就是由<code>Schema</code>生成的模型，可以对数据进行操作。</p><h3 id="自定义静态方法"><a href="#自定义静态方法" class="headerlink" title="自定义静态方法"></a>自定义静态方法</h3><p>通过<code>Schema</code>的<code>statics</code>属性给<code>model</code>添加方法，如下使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有同名的用户</span></span><br><span class="line">personSchema.statics.findByName = <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model(<span class="string">'Person'</span>).find(&#123;<span class="string">'name'</span>:name&#125;, callback);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line">Person.findByName(<span class="string">'lan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, persons</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(persons);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="查询辅助"><a href="#查询辅助" class="headerlink" title="查询辅助"></a>查询辅助</h3><p>通过<code>Schema</code>给<code>model</code>的查询增加辅助函数，如下使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查询所有同名的用户</span></span><br><span class="line">personSchema.query.byName = <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;name: name&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Person.find().byName(<span class="string">'lan'</span>).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, users</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(users);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>由<code>Model</code>生成的实例，可以定义实例方法，由生成的实例对数据进行操作。</p><h3 id="自定义实例方法"><a href="#自定义实例方法" class="headerlink" title="自定义实例方法"></a>自定义实例方法</h3><p>通过<code>Schema</code>的<code>methods</code>属性给<code>document</code>添加方法，如下使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查询所有同名的用户</span></span><br><span class="line">personSchema.methods.findByName = <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model(<span class="string">'Person'</span>).find(&#123;<span class="string">'name'</span>:name&#125;, callback);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义 showName 方法</span></span><br><span class="line">personSchema.methods.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line"><span class="keyword">var</span> felyne = <span class="keyword">new</span> Person(&#123;name: <span class="string">'lan'</span>&#125;)</span><br><span class="line">felyne.showName()</span><br><span class="line">felyne.findByName(<span class="string">'lan'</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>以上讲完了mongoose的基本模型，接着我们介绍下mongoose的基本方法。也就是“增删改查”的四种方法。</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="实例的save方法"><a href="#实例的save方法" class="headerlink" title="实例的save方法"></a>实例的save方法</h3><p>先实例化，然后再调用<code>save</code>方法。<br>语法：<code>save([options], [options.safe], [options.validateBeforeSave], [fn])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line"><span class="keyword">var</span> felyne = <span class="keyword">new</span> Person(&#123;name: <span class="string">'lan'</span>&#125;)</span><br><span class="line">felyne.save((err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Model的create方法"><a href="#Model的create方法" class="headerlink" title="Model的create方法"></a>Model的create方法</h3><p>直接用<code>Model</code>调用<code>create</code>方法。<br>语法：<code>Model.create(doc(s), [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line">Person.create(&#123;name: <span class="string">'lan'</span>&#125;,&#123;name: <span class="string">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Model的insertMany方法"><a href="#Model的insertMany方法" class="headerlink" title="Model的insertMany方法"></a>Model的insertMany方法</h3><p>也是用<code>Model</code>调用，跟<code>create</code>相比就是多了<code>operation</code>参数。<br>语法：<code>Model.insertMany(doc(s), [options], [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personSchema = Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema)</span><br><span class="line">Person.insertMany(&#123;name: <span class="string">'lan'</span>&#125;,&#123;name: <span class="string">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="实例的remove方法"><a href="#实例的remove方法" class="headerlink" title="实例的remove方法"></a>实例的remove方法</h3><p>删除实例。<br>语法：<code>document.remove([callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.remove((err, doc) =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure></p><h3 id="Model的remove方法"><a href="#Model的remove方法" class="headerlink" title="Model的remove方法"></a>Model的remove方法</h3><p>删除符合条件的所有数据。<br>语法：<code>model.remove(conditions, [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.remove(&#123;name:<span class="regexp">/60/</span>&#125;,(err, doc) =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure></p><h3 id="findOneAndRemove方法"><a href="#findOneAndRemove方法" class="headerlink" title="findOneAndRemove方法"></a>findOneAndRemove方法</h3><p>只删除符合条件的第一条数据<br>语法：<code>Model.findOneAndRemove(conditions, [options], [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findOneAndRemove(&#123;age:&#123;$lt:<span class="number">60</span>&#125;&#125;,(err, doc) =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure></p><h3 id="findByIdAndRemove方法"><a href="#findByIdAndRemove方法" class="headerlink" title="findByIdAndRemove方法"></a>findByIdAndRemove方法</h3><p>通过ID删数据<br>语法：<code>Model.findByIdAndRemove(id, [options], [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findByIdAndRemove(id, (err, doc) =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure></p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>更改符合条件的数据<br>语法：<code>Model.update(conditions, doc, [options], [callback])</code>，第一个参数表示查询条件，第二个参数是需要修改的数据，第三个参数控制选项，第四个参数是回调函数。options有如下选项</p><ul><li>safe (boolean)： 默认为true。安全模式。</li><li>upsert (boolean)： 默认为false。如果不存在则创建新记录。</li><li>multi (boolean)： 默认为false。是否更新多个查询记录。</li><li>runValidators： 如果值为true，执行Validation验证。</li><li>setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。</li><li>strict (boolean)： 以strict模式进行更新。</li><li>overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Model.update(&#123;age:&#123;$gte:<span class="number">60</span>&#125;&#125;,&#123;age:<span class="number">61</span>&#125;, (err,raw) =&gt; &#123;</span><br><span class="line">    <span class="comment">//&#123; n: 1, nModified: 1, ok: 1 &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(raw);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany"></a>updateMany</h3><p>只能更新多个的update，就是options为<code>{multi:true}</code>的update。<br>语法：<code>Model.updateMany(conditions, doc, [options], [callback])</code>。例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将姓名为lan的用户年龄变为70</span></span><br><span class="line">Model.updateMany(&#123;name:<span class="regexp">/lan/</span>&#125;,&#123;age:<span class="number">50</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,raw</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(raw);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne"></a>updateOne</h3><p>只能更新一个的update，就是options为<code>{multi:false}</code>的update。<br>语法：<code>Model.updateOne(conditions, doc, [options], [callback])</code>，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将姓名为lan的第一个用户年龄变为70</span></span><br><span class="line">Model.updateOne(&#123;name:<span class="regexp">/lan/</span>&#125;,&#123;age:<span class="number">70</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err,raw</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(raw);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="修改更改器"><a href="#修改更改器" class="headerlink" title="修改更改器"></a>修改更改器</h3><ol><li><code>$inc</code>:增减修改器，只对数字有效。</li><li><code>$set</code>:指定键并修改，不存在则创建。</li><li><code>$unset</code>:删除一个键。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inc </span></span><br><span class="line"> Model.update(&#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">60</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'$inc'</span>: &#123;</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">61</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行后: age=23</span></span><br><span class="line"><span class="comment">// set </span></span><br><span class="line"> Model.update(&#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">60</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'$set'</span>: &#123;</span><br><span class="line">        <span class="string">'age'</span>: <span class="string">'百岁老人'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行后: age=百岁老人</span></span><br><span class="line"><span class="comment">// set </span></span><br><span class="line"> Model.update(&#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">60</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'$unset'</span>: &#123;</span><br><span class="line">        <span class="string">'age'</span>: <span class="string">'百岁老人'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行后: 删除了age键</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数组更改器"><a href="#数组更改器" class="headerlink" title="数组更改器"></a>数组更改器</h3><ol><li><code>$push</code>: 给一个键push一个数组成员,键不存在会创建</li><li><code>$addToSet</code>:向数组中添加一个元素,如果存在就不添加。</li><li><code>$each</code>:遍历数组。</li><li><code>$pop</code>:向数组中尾部删除一个元素</li><li><code>$pull</code>:向数组中删除指定元素。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inc </span></span><br><span class="line"> Model.update(&#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">60</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'$push'</span>: &#123;</span><br><span class="line">        <span class="string">'array'</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行后: 增加一个 array 键,类型为数组, 有一个成员 10</span></span><br><span class="line">Model.update(&#123;</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">60</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'$push'</span>: &#123;</span><br><span class="line">        <span class="string">'array'</span>: &#123;</span><br><span class="line">            <span class="string">'$each'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行后: array : [10,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查询所有符合条件的数据。<br>语法：<code>Model.find(conditions, [projection], [options], [callback])</code>,第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数。如果参数为空则传null</p><h4 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h4><ul><li>$or　　　　或关系</li><li>$nor　　　 或关系取反</li><li>$gt　　　　大于</li><li>$gte　　　 大于等于</li><li>$lt　　　　小于</li><li>$lte　　　 小于等于</li><li>$ne　　　　不等于</li><li>$in　　　　在多个值范围内</li><li>$nin　　　 不在多个值范围内</li><li>$all　　　 匹配数组中多个值</li><li>$regex　　 正则，用于模糊查询</li><li>$size　　　匹配数组大小</li><li>$maxDistance　范围查询，距离（基于LBS）</li><li>$mod　　　　取模运算</li><li>$near　　　 邻域查询，查询附近的位置（基于LBS）</li><li>$exists　　 字段是否存在</li><li>$elemMatch　匹配内数组内的元素</li><li>$within　　　范围查询（基于LBS）</li><li>$box　　　　 范围查询，矩形范围（基于LBS）</li><li>$center　　　范围醒询，圆形范围（基于LBS）</li><li>$centerSphere　范围查询，球形范围（基于LBS）</li><li>$slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素</li><li>$where       可以使用任意JavaScript作为条件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询名为lan年龄大于60的用户</span></span><br><span class="line">Model.find(&#123;name:<span class="regexp">/lan/</span>,age:&#123;$gte:<span class="number">60</span>&#125;&#125;,(err,docs)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(docs);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查询名为lan的用户，只输出name，不输出id</span></span><br><span class="line">Model.find(&#123;name:<span class="regexp">/lan/</span>&#125;,&#123;name:<span class="number">1</span>,_id:<span class="number">0</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(docs);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 找出跳过前两条的所有数据</span></span><br><span class="line">Model.find(<span class="literal">null</span>,<span class="literal">null</span>,&#123;skip:<span class="number">2</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(docs);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="findById"><a href="#findById" class="headerlink" title="findById"></a>findById</h3><p>通过id查询数据。<br>语法：<code>Model.findById(id, [projection], [options], [callback])</code>，除了查询条件是id，其他参数跟<code>find</code>一样，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询某个id的用户</span></span><br><span class="line">Model.findById(id,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="findOne"><a href="#findOne" class="headerlink" title="findOne"></a>findOne</h3><p>返回查询到的第一个数据<br>语法：<code>Model.findOne([conditions], [projection], [options], [callback])</code>，用法跟<code>find</code>一样，只是只返回查到的第一个数据，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询某个id的用户</span></span><br><span class="line">Model.findOne(&#123;name:<span class="regexp">/lan/</span>,age:&#123;$gte:<span class="number">60</span>&#125;&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="查询后处理"><a href="#查询后处理" class="headerlink" title="查询后处理"></a>查询后处理</h3><p>所谓的查询后处理，就是在查询到的结果里通过以下方法再处理，方法如下：</p><ul><li>sort     排序</li><li>skip     跳过</li><li>limit    限制</li><li>select   显示字段</li><li>exect    执行</li><li>count    计数</li><li>distinct 去重</li></ul><h2 id="前后钩子"><a href="#前后钩子" class="headerlink" title="前后钩子"></a>前后钩子</h2><p>中间件函数，在执行某些操作之前执行某些函数，在schema上定义。<br>以下函数可以设置前后钩子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">validate</span><br><span class="line">save</span><br><span class="line">remove</span><br><span class="line">count</span><br><span class="line">find</span><br><span class="line">findOne</span><br><span class="line">findOneAndRemove</span><br><span class="line">findOneAndUpdate</span><br><span class="line">insertMany</span><br><span class="line">update</span><br></pre></td></tr></table></figure></p><h3 id="pre"><a href="#pre" class="headerlink" title="pre()"></a>pre()</h3><p><code>pre()</code>是在执行方法之前执行的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; age:<span class="built_in">Number</span>, name: <span class="built_in">String</span>, &#125;);  </span><br><span class="line">schema.pre(<span class="string">'find'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是pre方法1'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">schema.pre(<span class="string">'find'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是pre方法2'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="keyword">var</span> user = mongoose.model(<span class="string">'user'</span>, schema);</span><br><span class="line">user.find(<span class="literal">null</span>, &#123;name:<span class="number">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(docs[<span class="number">0</span>]);</span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">/*</span><br><span class="line">我是pre方法1</span><br><span class="line">我是pre方法2</span><br><span class="line">&#123; name: 'lan'&#125;</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h3><p><code>post()</code>是执行某些操作前最后执行的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; age:<span class="built_in">Number</span>, name: <span class="built_in">String</span>, &#125;);  </span><br><span class="line">schema.pre(<span class="string">'post'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是pre方法1'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">schema.pre(<span class="string">'post'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是pre方法2'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="keyword">var</span> user = mongoose.model(<span class="string">'user'</span>, schema);</span><br><span class="line">user.find(<span class="literal">null</span>, &#123;name:<span class="number">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(docs[<span class="number">0</span>]);</span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">/*</span><br><span class="line">我是pre方法1</span><br><span class="line">我是pre方法2</span><br><span class="line">&#123; name: 'lan'&#125;</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a>聚合管道</h2><p>可以理解为高级的查询方法。<br>语法：<code>Model.aggregate([options], [callback])</code>，<code>options</code>说明如下：</p><ul><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。对应project()方法</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。对应match()。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。对应limit()方法</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。对应skip()。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。对应unwind()方法</li><li>$group：将集合中的文档分组，可用于统计结果。对应group()方法</li><li>$sort：将输入文档排序后输出。对应sort()方法</li><li>$geoNear：输出接近某一地理位置的有序文档。对应near()。</li><li>$sample：随机选择N个</li><li>$lookup：连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于populate,<a href="../mongoose-populate">联表查询</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.&lt;/p&gt;
&lt;p&gt;Mongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;mongoose&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot;&gt;github.com/Automattic/mongoose&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="http://blog.html5jscss.com/categories/mongoDB/"/>
    
    
      <category term="mongoose" scheme="http://blog.html5jscss.com/tags/mongoose/"/>
    
      <category term="nodeJs" scheme="http://blog.html5jscss.com/tags/nodeJs/"/>
    
      <category term="mongoDB" scheme="http://blog.html5jscss.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>使用原生函数代替underscore/lodash</title>
    <link href="http://blog.html5jscss.com/you-dont-not-need-lodash-underscore/"/>
    <id>http://blog.html5jscss.com/you-dont-not-need-lodash-underscore/</id>
    <published>2019-07-16T01:23:26.000Z</published>
    <updated>2019-07-25T06:39:54.183Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的理解函数式变成，我们可以先从替换<code>underscore/lodash</code>开始。从<a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="external">You-Dont-Need-Lodash-Underscore</a>代替方法的学习过程中，我们发现有些<code>underscore/lodash</code>来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生<code>reduce</code>代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。</p><p>如果项目小，也没必要引入经常爆出bug的<code>loadsh</code>。<br><a id="more"></a><br>PS：其中数组方法中的 <code>concat</code>(合并生成一个新数组)、<code>fill</code>（填充数组）、<code>reverse</code>(颠倒数组顺序)、<code>slice</code>(切割数组)等等跟原生方法一样就不列举出来了。</p><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><h3 id="each"><a href="#each" class="headerlink" title="_.each"></a>_.each</h3><p>按顺序遍历list的所有元素。Es6的forEach只支持循环数组，可以使用<code>Object.entries</code>将对象转成数组。有两个参数：</p><ol><li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.each([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index  + value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// output: 0a 1b 2c</span></span><br><span class="line">_.each(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key  + value)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// output: one1 two2 three3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native </span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].forEach( (value, index) =&gt; <span class="built_in">console</span>.log(index + value))</span><br><span class="line"><span class="comment">// output: 0a 1b 2c</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;).forEach( (value, key) =&gt;<span class="built_in">console</span>.log(value[<span class="number">0</span>] + value[<span class="number">1</span>] ) )</span><br><span class="line"><span class="comment">// output one1 two2 three3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="map"><a href="#map" class="headerlink" title="_.map"></a>_.map</h3><p><code>_.map</code>跟<code>_.each</code>都是遍历list的所有元素，<code>_.each</code>只是在原list上操作，而<code>_.map</code>会创建一个新的list。所以native中我们使用同名函数<code>map</code>来实现就够了。有两个参数：</p><ol><li>生成新数组的回调函数三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> array2 = _.map(array1, <span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi '</span> + value </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(array2)</span><br><span class="line"><span class="comment">// output: ["Hi a", "Hi b", "Hi c"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native </span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> array2 = array1.map( (value, index) =&gt; <span class="string">'Hi '</span> + value )</span><br><span class="line"><span class="built_in">console</span>.log(array2)</span><br><span class="line"><span class="comment">// output: ["Hi a", "Hi b", "Hi c"]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="reduce"><a href="#reduce" class="headerlink" title="_.reduce"></a>_.reduce</h3><p><code>reduce</code>可以用原生数组的<code>reduce</code>方法来模拟。<code>reduce</code>提供了两个参数：</p><ol><li>累加器函数：四个参数分别是：上一次调用的值或者传入的初始值、正在处理的元素、正在处理元素的索引值以及调用的<code>reduce</code>的源数组。<br>有。</li><li>第一次执行累加函数的初始值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> result = _.reduce(array, <span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + currentValue</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> result = array.reduce( (previousValue, currentValue, currentIndex, array) =&gt; previousValue + currentValue )</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: 10</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="_.reduceRight"></a>_.reduceRight</h3><p><code>reduce</code>的从右往左累加的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> result = _.reduceRight(array, <span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue - currentValue</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> result = array.reduceRight( (previousValue, currentValue, currentIndex, array) =&gt; previousValue - currentValue )</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: -2</span></span><br></pre></td></tr></table></figure></p><h3 id="every"><a href="#every" class="headerlink" title="_.every"></a>_.every</h3><p>every表示是否每一项都必须都符合条件。换句话说如果全部都符合条件，则返回true；有一项不符合则返回false。有两个参数：</p><ol><li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<br>若收到一个空数组，此方法在一切情况下都会返回 true。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> result = _.every(array, <span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt;= <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> result = array.every( (element, index, array) =&gt; element &gt;= <span class="number">10</span> )</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="some"><a href="#some" class="headerlink" title="_.some"></a>_.some</h3><p>some则是只要有一项符合条件就返回true。换句话说如果有一项符合条件，则返回true；除非一项都不符合条件才返回false。有两个参数：</p><ol><li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<br>对于空数组上的任何条件，此方法返回false。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> result = _.some(array, <span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt;= <span class="number">30</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> result = array.some( (element, index, array) =&gt; element &gt;= <span class="number">30</span> )</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="find"><a href="#find" class="headerlink" title="_.find"></a>_.find</h3><p>返回第一个满足条件的元素，如果不存在则放回<code>undefined</code>。有两个参数：</p><ol><li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"> <span class="keyword">var</span> users = [</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaoming'</span>,  <span class="string">'age'</span>: <span class="number">36</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaohong'</span>,    <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">1</span>,  <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = _.find(users,  <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123; <span class="keyword">return</span> o.age &lt; <span class="number">40</span>; &#125;)</span><br><span class="line"><span class="built_in">console</span>.dir(result)</span><br><span class="line"><span class="comment">// output: active: true age: 36 user: "xiaoming"</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaoming'</span>,  <span class="string">'age'</span>: <span class="number">36</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaohong'</span>,    <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">1</span>,  <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = users.find( (o) =&gt;  o.age &lt; <span class="number">40</span> )</span><br><span class="line"><span class="built_in">console</span>.dir(result)</span><br><span class="line"><span class="comment">// output: active: true age: 36 user: "xiaoming"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="pluck"><a href="#pluck" class="headerlink" title="_.pluck"></a>_.pluck</h3><p>原生JS中没有pluck方法，但是我们可以使用map模拟。<br><code>Lodash</code> v4.0 已经移除<code>pluck</code>函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [&#123;name: <span class="string">"Alice"</span>&#125;, &#123;name: <span class="string">"Bob"</span>&#125;, &#123;name: <span class="string">"Jeremy"</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> names = _.pluck(users, <span class="string">"name"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(names)</span><br><span class="line"><span class="comment">// output: ["Alice", "Bob", "Jeremy"]</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> users = [&#123;name: <span class="string">"Alice"</span>&#125;, &#123;name: <span class="string">"Bob"</span>&#125;, &#123;name: <span class="string">"Jeremy"</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> names = users.map( (o) =&gt; o.name )</span><br><span class="line"><span class="built_in">console</span>.log(names)</span><br><span class="line"><span class="comment">// output:["Alice", "Bob", "Jeremy"]</span></span><br></pre></td></tr></table></figure></p><h3 id="includes"><a href="#includes" class="headerlink" title="_.includes"></a>_.includes</h3><p>判断是否包含某个特定的值，如果有则返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// Underscore/Lodash - also called _.contains</span></span><br><span class="line"><span class="keyword">var</span> isIncludes = _.includes(array, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(isIncludes)</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> isIncludes = array.includes(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(isIncludes)</span><br><span class="line"><span class="keyword">var</span> isIndexOf = array.indexOf(<span class="number">1</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"><span class="built_in">console</span>.log(isIndexOf)</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></p><h3 id="toArray"><a href="#toArray" class="headerlink" title="_.toArray"></a>_.toArray</h3><p><code>toArray</code>方法则可以用数组扩展符以及<code>Array.from</code>来模拟。<code>Array.from</code>跟数组扩展符都是浅拷贝，只能拷贝第一层的值，第二次及其之后的值无法进行深拷贝，他们的引用地址任然是同一个。<br>其中<code>Array.from</code>不仅可以生成转换成数组，也可以运行对每个元素执行回调函数。<br><code>Array.from({length:10})</code>生成的新数组，及时里面的值都是<code>undefined</code>也是可以循环遍历。<code>Array.from</code>有三个参数：</p><ol><li>想要转为成数组的元素</li><li><code>map</code>回调函数</li><li>回调的执行函数<br>所以，<code>Array.from(obj, mapFn, thisArg)</code> 就相当于 <code>Array.from(obj).map(mapFn, thisArg)</code>,</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.toArray(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment">// output: ["a", "b", "c"]</span></span><br><span class="line">_.toArray([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br><span class="line">_.toArray(&#123; <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span> &#125;)</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">[...<span class="string">'abc'</span>]</span><br><span class="line"><span class="comment">// output: ["a", "b", "c"]</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">Object</span>.values(&#123; <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span> &#125;))</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="object"><a href="#object" class="headerlink" title="_.object"></a>_.object</h3><p><code>_.object</code>将数组转换为对象。原生js中没有此方法，但是我们可以使用数组的<code>reduce</code>方法以及对象的<code>assign</code>来模拟。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.object([<span class="string">'moe'</span>, <span class="string">'larry'</span>, <span class="string">'curly'</span>], [<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"><span class="comment">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class="line">_.object([[<span class="string">'moe'</span>, <span class="number">30</span>], [<span class="string">'larry'</span>, <span class="number">40</span>], [<span class="string">'curly'</span>, <span class="number">50</span>]])</span><br><span class="line"><span class="comment">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [[<span class="string">'moe'</span>, <span class="number">30</span>], [<span class="string">'larry'</span>, <span class="number">40</span>], [<span class="string">'curly'</span>, <span class="number">50</span>]];</span><br><span class="line">array.reduce((result, [key, val]) =&gt; <span class="built_in">Object</span>.assign(result, &#123;[key]: val&#125;), &#123;&#125;)</span><br><span class="line"><span class="comment">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class="line"><span class="keyword">var</span> array = [[<span class="string">'moe'</span>, <span class="string">'larry'</span>, <span class="string">'curly'</span>], [<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]];</span><br><span class="line">array.slice(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>].reduce( (result, key, index, _array) =&gt; <span class="built_in">Object</span>.assign(result, &#123;[key]: array[<span class="number">1</span>][index]&#125;) ,&#123;&#125;)</span><br><span class="line"><span class="comment">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="compact"><a href="#compact" class="headerlink" title="_.compact"></a>_.compact</h3><p>去除数组中的所有false的值。原生中没有，但是可以使用filter来模拟。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// output: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>].filter(<span class="built_in">Boolean</span>)</span><br><span class="line"><span class="comment">// output: [1, 2, 3]</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>].filter(x =&gt; !!x)</span><br><span class="line"><span class="comment">// output: [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><h3 id="uniq"><a href="#uniq" class="headerlink" title="_.uniq"></a>_.uniq</h3><p>数组去重。<code>Set</code> 对象可以去重，再转成数组来模拟。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> result = _.uniq([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: [1, 2, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> result = [...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>])]</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: [1, 2, 4, 3]</span></span><br></pre></td></tr></table></figure></p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="_.indexOf"></a>_.indexOf</h3><p>数组中寻找一个给定元素的第一个索引，如果不存在，则返回-1，跟原生数组中的<code>indexOf</code>方法一样。<br><code>indexOf</code>有两个参数：</p><ol><li>要查找的元素</li><li>开始查找的索引位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> result = _.indexOf([<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>], <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>].indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: 0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="_.findIndex"></a>_.findIndex</h3><p>返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。有两个参数：</p><ol><li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li><li>执行回调函数的 <code>this</code> 值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaoming'</span>,  <span class="string">'age'</span>: <span class="number">36</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaohong'</span>,    <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">1</span>,  <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> index = _.findIndex(users, <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123; <span class="keyword">return</span> o.age &gt;= <span class="number">40</span>; &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(index)</span><br><span class="line"><span class="comment">// output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaoming'</span>,  <span class="string">'age'</span>: <span class="number">36</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaohong'</span>,    <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'user'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">1</span>,  <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> index = users.findIndex( (o) =&gt; o.age &gt;=<span class="number">40</span> )</span><br><span class="line"><span class="built_in">console</span>.log(index)</span><br><span class="line"><span class="comment">// output: 0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="range"><a href="#range" class="headerlink" title="_.range"></a>_.range</h3><p>原生Js中没有<code>range</code>。所以直接使用<code>map</code>函数来处理，并最终处理成数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.range(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">_.range(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line"><span class="comment">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">_.range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class="line">_.range(<span class="number">0</span>, <span class="number">-10</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class="line">_.range(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// output: []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;length:<span class="number">10</span>&#125;, (_, i) =&gt; i)</span><br><span class="line"><span class="comment">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;length:<span class="number">10</span>&#125;, (_, i) =&gt; i+<span class="number">1</span>)</span><br><span class="line"><span class="comment">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;length:<span class="number">6</span>&#125;, (_, i) =&gt; i*<span class="number">5</span>)</span><br><span class="line"><span class="comment">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;length:<span class="number">10</span>&#125;, (_, i) =&gt; -i)</span><br><span class="line"><span class="comment">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;length:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// output: []</span></span><br><span class="line"></span><br><span class="line">[...Array(<span class="number">10</span>).keys() ] )</span><br><span class="line"><span class="comment">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">[...Array(<span class="number">10</span>).keys()].map(k =&gt; k + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">[...Array(<span class="number">6</span>).keys()].map(k =&gt; k*<span class="number">5</span> )</span><br><span class="line"><span class="comment">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class="line">[...Array(<span class="number">10</span>).keys()].map(k =&gt; -k)</span><br><span class="line"><span class="comment">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class="line">[]</span><br><span class="line"><span class="comment">// output: []</span></span><br></pre></td></tr></table></figure></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="_.chunk"></a>_.chunk</h3><p>将数组拆分成多个size长度的小数组，并且将这些小数组组成一个新的大数组，如果最后剩余的元素不够size长度，那么最后剩余的元素组成一个小数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class="line"></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> chunk = (input, size) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> input.reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> currentIndex % size === <span class="number">0</span></span><br><span class="line">        ? [...previousValue, [currentValue]] <span class="comment">//当前索引跟size余数为0时，新增一个小数组</span></span><br><span class="line">        : [...previousValue.slice(<span class="number">0</span>, <span class="number">-1</span>), [...previousValue.slice(<span class="number">-1</span>)[<span class="number">0</span>], currentValue]]; <span class="comment">//当前索引跟size余数不为0时，往length - 1的小数组里推值</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class="line"></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br></pre></td></tr></table></figure></p><h3 id="difference"><a href="#difference" class="headerlink" title="_.difference"></a>_.difference</h3><p>原生中没有此方法，所以得模拟。<code>difference</code>会返回一个过滤值不包含排除值的新数组。接受两个参数：</p><ol><li>原数组</li><li>要排除的值，[values]<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>]];</span><br><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> a =_.difference([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>]);</span><br><span class="line"><span class="comment">// output: [1, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">console</span>.log(arrays.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> !target.includes(value); <span class="comment">// 如果过滤数组中函数该值includes则返回true，filter则会创建返回值是true的新数组</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// output: [1, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrays.reduce((source, target) =&gt; source.filter(value =&gt; !target.includes(value))));</span><br><span class="line"><span class="comment">// output: [1, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="drop"><a href="#drop" class="headerlink" title="_.drop"></a>_.drop</h3><p>原生<code>slice</code>方法的阉割版。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// =&gt; [2, 3]</span></span><br><span class="line">_.drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">_.drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">5</span>);</span><br><span class="line"><span class="comment">// =&gt; []</span></span><br><span class="line"> </span><br><span class="line">_.drop([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><h3 id="first"><a href="#first" class="headerlink" title="_.first"></a>_.first</h3><p>获取数组 array 的第一个元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.first([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line">_.first([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2]</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">[].concat(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).shift()</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">[].concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).shift()</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (works even with potentially undefined/null, like _.first)</span></span><br><span class="line">[].concat(<span class="literal">undefined</span>).shift()</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].slice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2]</span></span><br></pre></td></tr></table></figure></p><h3 id="last"><a href="#last" class="headerlink" title="_.last"></a>_.last</h3><p>获取array中的最后一个元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">_.last(numbers);</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br><span class="line"></span><br><span class="line">_.last(numbers, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">numbers[numbers.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">numbers.slice(<span class="number">-1</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br><span class="line">[].concat(numbers).pop()</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">[].concat(<span class="literal">undefined</span>).pop()</span><br><span class="line"><span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">numbers.slice(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// =&gt; [4, 5]</span></span><br></pre></td></tr></table></figure></p><h3 id="flatten"><a href="#flatten" class="headerlink" title="_.flatten"></a>_.flatten</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.flatten([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> flatten = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]].reduce( (a, b) =&gt; a.concat(b), []) <span class="comment">// 合并一级层级</span></span><br><span class="line"><span class="comment">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native(ES2019)</span></span><br><span class="line"><span class="keyword">const</span> flatten = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]].flat()</span><br><span class="line"><span class="comment">// =&gt; [1, 2, [3, [4]], 5]</span></span><br></pre></td></tr></table></figure><h3 id="flattenDeep"><a href="#flattenDeep" class="headerlink" title="_.flattenDeep"></a>_.flattenDeep</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.flattenDeep([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> flattenDeep = (arr) =&gt; <span class="built_in">Array</span>.isArray(arr)</span><br><span class="line">  ? arr.reduce( (a, b) =&gt; a.concat(flattenDeep(b)) , []) <span class="comment">// 如果是数组则继续合并</span></span><br><span class="line">  : [arr] <span class="comment">// 知道不是数组为止</span></span><br><span class="line"></span><br><span class="line">flattenDeep([<span class="number">1</span>, [[<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]])</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native(ES2019)</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]].flat(<span class="literal">Infinity</span>) <span class="comment">// 使用 Infinity 作为深度，展开为一维数组</span></span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="isArrayBuffer"><a href="#isArrayBuffer" class="headerlink" title="_.isArrayBuffer"></a>_.isArrayBuffer</h3><p>检查 value 是否是 ArrayBuffer 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.isArrayBuffer(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>) <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>);</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></p><h3 id="intersection"><a href="#intersection" class="headerlink" title="_.intersection"></a>_.intersection</h3><p>创建唯一值的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="built_in">console</span>.log(_.intersection([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">101</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">101</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="comment">// 因为是包含共同值，所以很自然的使用filter来过滤并创建新数组</span></span><br><span class="line">    <span class="keyword">return</span> b.includes(value); <span class="comment">// 为true则保留该元素</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)));</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">101</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arrays.reduce((a, b) =&gt; a.filter(c =&gt; b.includes(c))));</span><br><span class="line"><span class="comment">// output: [1, 2]</span></span><br></pre></td></tr></table></figure></p><h3 id="without"><a href="#without" class="headerlink" title="_.without"></a>_.without</h3><p>创建一个剔除所有给定值的新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(_.without(array, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// output: [1, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="number">2</span>;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// output: [1, 3]</span></span><br></pre></td></tr></table></figure></p><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><h3 id="keys"><a href="#keys" class="headerlink" title="_.keys"></a>_.keys</h3><p>返回一个可枚举的直属属性的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.keys(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// output: ["one", "two", "three"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Object</span>.keys(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: ["one", "two", "three"]</span></span><br></pre></td></tr></table></figure></p><h3 id="size"><a href="#size" class="headerlink" title="_.size"></a>_.size</h3><p>返回对象的长度，原生没有size方法，用<code>keys</code>返回一个数组，再获取长度来模拟。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.size(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// output:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Object</span>.keys(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;).length</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// output: 3</span></span><br></pre></td></tr></table></figure></p><h3 id="allKeys"><a href="#allKeys" class="headerlink" title="_.allKeys"></a>_.allKeys</h3><p><code>Reflect.enumerate(..)</code>：返回一个产生所有（直属和“继承的”）非symbol、可枚举的键的迭代器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stooge</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Stooge.prototype.silly = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="built_in">console</span>.log(__.allKeys(<span class="keyword">new</span> Stooge(<span class="string">"Hi"</span>)))</span><br><span class="line"><span class="comment">// output:["name", "silly"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">console</span>.log( [...Reflect.enumerate( <span class="keyword">new</span> Stooge(<span class="string">"Hi"</span>) )] )</span><br><span class="line"><span class="comment">// output: ["name", "silly"]</span></span><br></pre></td></tr></table></figure></p><h3 id="values"><a href="#values" class="headerlink" title="_.values"></a>_.values</h3><p>返回对象所有的属性值。原生中没有<code>values</code>方法，可使用<code>Object.keys</code>和<code>map</code>来模拟。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.values(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// output: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Object</span>.values(&#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// output: [1, 2， 3]</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;one: <span class="number">1</span>, two: <span class="number">2</span>, three: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).map(key =&gt; obj[key])</span><br><span class="line"><span class="comment">// output: [1, 2， 3]</span></span><br></pre></td></tr></table></figure></p><h3 id="create"><a href="#create" class="headerlink" title="_.create"></a>_.create</h3><p>使用现有的对象来提供新创建的对象。基本上和<code>Object.create</code>一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stooge</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Stooge.prototype.silly = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"> <span class="keyword">var</span> hi = _.create(Stooge.prototype, &#123;name: <span class="string">"hi"</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(hi)</span><br><span class="line"><span class="comment">// output &#123;name: "hi"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> hi = <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(Stooge.prototype), &#123;name: <span class="string">"hi"</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( hi )</span><br></pre></td></tr></table></figure></p><h3 id="assign"><a href="#assign" class="headerlink" title="_.assign"></a>_.assign</h3><p>通过合并自身属性到目标对象来创建新对象，基本上和<code>Object.assign</code>一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.assign(&#123;&#125;, &#123;b: <span class="number">1</span>,c: <span class="number">2</span>&#125;, &#123; a: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="comment">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, &#123;b: <span class="number">1</span>,c: <span class="number">2</span>&#125;, &#123; a: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="comment">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class="line">&#123;  ...&#123;b: <span class="number">1</span>,c: <span class="number">2</span>&#125;, a: <span class="literal">false</span> &#125;</span><br><span class="line"><span class="comment">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="isArray"><a href="#isArray" class="headerlink" title="_.isArray"></a>_.isArray</h3><p>判断是否是一个数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="built_in">console</span>.log(_.isArray(array))</span><br><span class="line"><span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(array))</span><br><span class="line"><span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></p><h3 id="isFinite"><a href="#isFinite" class="headerlink" title="_.isFinite"></a>_.isFinite</h3><p>判断是否是一个有限的数字。只要是数字就返回true，其他值都是false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">_.isFinite(<span class="number">-101</span>)</span><br><span class="line"><span class="comment">// output true</span></span><br><span class="line">_.isFinite(-<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// output false</span></span><br><span class="line">_.isFinite(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">// output false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">-101</span>)</span><br><span class="line"><span class="comment">// output true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(-<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// output true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">// output false</span></span><br></pre></td></tr></table></figure></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="bind"><a href="#bind" class="headerlink" title="_.bind"></a>_.bind</h3><p>指定调用函数的作用域，函数里的this都指向传入的<code>this</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objA = &#123;</span><br><span class="line">    x: <span class="number">66</span>,</span><br><span class="line">    offsetX: <span class="function"><span class="keyword">function</span>(<span class="params">offset</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x + offset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objB = &#123;</span><br><span class="line">    x: <span class="number">67</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Underscore/Lodash</span></span><br><span class="line">boundOffsetX = _.bind(objA.offsetX, objB, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// output 67</span></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">boundOffsetX = objA.offsetX.bind(objB, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// output 67</span></span><br></pre></td></tr></table></figure></p><p>大部分方法都从以下文章搬过来，觉得很有学习价值，就一个个修修改改搬过来。从中又熟悉了一遍ES6的函数方法，特别是逼格满满的<code>reduce</code>方法，^_^</p><p>参考文章：</p><ol><li><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="external">You-Dont-Need-Lodash-Underscore</a></li><li><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="external">You don’t (may not) need Lodash/Underscore</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的理解函数式变成，我们可以先从替换&lt;code&gt;underscore/lodash&lt;/code&gt;开始。从&lt;a href=&quot;https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore&quot;&gt;You-Dont-Need-Lodash-Underscore&lt;/a&gt;代替方法的学习过程中，我们发现有些&lt;code&gt;underscore/lodash&lt;/code&gt;来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生&lt;code&gt;reduce&lt;/code&gt;代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。&lt;/p&gt;
&lt;p&gt;如果项目小，也没必要引入经常爆出bug的&lt;code&gt;loadsh&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://blog.html5jscss.com/functional-programming/"/>
    <id>http://blog.html5jscss.com/functional-programming/</id>
    <published>2019-07-15T01:46:49.000Z</published>
    <updated>2019-07-16T01:30:25.834Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Redux源码解析</title>
    <link href="http://blog.html5jscss.com/redux/"/>
    <id>http://blog.html5jscss.com/redux/</id>
    <published>2019-05-24T05:53:51.000Z</published>
    <updated>2019-08-11T12:43:12.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此源码分析时，redux版本号是4.0.1</p></blockquote><p>#API</p><p><code>Redux</code>的API只有以下五个：</p><ol><li>createStore</li><li>combineReducers</li><li>bindActionCreators</li><li>applyMiddleware</li><li>compose</li></ol><p>我们分别针对这五个接口进行分析。<br><a id="more"></a></p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p><code>createStore</code>创建一个Redux store 来存储所有state，接受三个参数: <code>reducer</code>, <code>preloadedState</code>, <code>enhancer</code> ：</p><ul><li><code>reducer</code>:  reducer 是一个函数，接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 statetree，</li><li><code>preloadedState</code>：初始化state，设置store中默认值 , 可以将服务端传来经过处理后的 state 传给它，如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象。</li><li><code>enhancer</code>：高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。</li></ul><p>返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方：</p><ul><li><code>dispatch</code>:接收一个action， 是一个object{type：’a_action_type’}作为参数，之后其内部会调用reducer，根据这个action，和当前state，返回新的state。</li><li><code>getState</code>:获取最新state。</li><li><code>subscribe</code>: 订阅函数，当 dispatch 的时候调用的，从listener数组中获取当前执行的dispatch，并执行。</li><li><code>replaceReducer</code>:替换reducer，改变state修改的逻辑</li></ul><p><code>createStore.js</code> 源码分析如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $$observable <span class="keyword">from</span> <span class="string">'symbol-observable'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ActionTypes <span class="keyword">from</span> <span class="string">'./utils/actionTypes'</span></span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'./utils/isPlainObject'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保证 传入的 preloadedState, enhancer 是非函数 </span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'function'</span>) ||</span><br><span class="line">    (<span class="keyword">typeof</span> enhancer === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">3</span>] === <span class="string">'function'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'It looks like you are passing several store enhancers to '</span> +</span><br><span class="line">        <span class="string">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class="line">        <span class="string">'together to a single function'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果第二个参数是函数，则将 preloadedState 赋给 enhancer </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// enhancer必须是函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// reducer必须是函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer <span class="comment">// 当前的reducer</span></span><br><span class="line">  <span class="keyword">let</span> currentState = preloadedState <span class="comment">// 当前的 state</span></span><br><span class="line">  <span class="keyword">let</span> currentListeners = [] <span class="comment">// 当前dispatch将会触发的更新函数数组</span></span><br><span class="line">  <span class="keyword">let</span> nextListeners = currentListeners <span class="comment">// 下个dispatch将会触发的函数数组 </span></span><br><span class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span> <span class="comment">// 变量开关，是否正在执行dispatch</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.slice()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'The reducer has already received the state as an argument. '</span> +</span><br><span class="line">          <span class="string">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the listener to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变</span></span><br><span class="line">    <span class="comment">// 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class="line">          <span class="string">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class="line">          <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="comment">// 将listener推入到nextListeners数组</span></span><br><span class="line">    nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">            <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 将listener从nextListeners数组中删除      </span></span><br><span class="line">      ensureCanMutateNextListeners()</span><br><span class="line">      <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">      nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">          <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">          <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能同时dispatch 多个 action 函数</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 通过reducer函数，获取当前的 state </span></span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历调用</span></span><br><span class="line">    <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">      listener()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 替换计算 state的 reducer。</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 必须是个函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将传入的 currentReducer 赋值给 currentReducer</span></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 改变 state最小的 observabl</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      subscribe(observer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span> || observer === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 订阅state的更新函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">            observer.next(getState())</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消订阅state的更新函数</span></span><br><span class="line">        observeState()</span><br><span class="line">        <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">        <span class="keyword">return</span> &#123; unsubscribe &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      [$$observable]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化 默认的 store 里的 statetree</span></span><br><span class="line">  dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露出去的方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>将多个reducer合并为一个reducer，传入的是一个对象，不定义reducer的键值的话，就是reducer的名词。<br><code>combineReducers.js</code> 源码分析如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUndefinedStateErrorMessage</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> actionType = action &amp;&amp; action.type</span><br><span class="line">  <span class="keyword">const</span> actionDescription =</span><br><span class="line">    (actionType &amp;&amp; <span class="string">`action "<span class="subst">$&#123;String(actionType)&#125;</span>"`</span>) || <span class="string">'an action'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`Given <span class="subst">$&#123;actionDescription&#125;</span>, reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined. `</span> +</span><br><span class="line">    <span class="string">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class="line">    <span class="string">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnexpectedStateShapeWarningMessage</span>(<span class="params"></span><br><span class="line">  inputState,</span><br><span class="line">  reducers,</span><br><span class="line">  action,</span><br><span class="line">  unexpectedKeyCache</span><br><span class="line"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> argumentName =</span><br><span class="line">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class="line">      ? <span class="string">'preloadedState argument passed to createStore'</span></span><br><span class="line">      : <span class="string">'previous state received by the reducer'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reducerKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class="line">      <span class="string">'to combineReducers is an object whose values are reducers.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`The <span class="subst">$&#123;argumentName&#125;</span> has unexpected type of "`</span> +</span><br><span class="line">      &#123;&#125;.toString.call(inputState).match(<span class="regexp">/\s([a-z|A-Z]+)/</span>)[<span class="number">1</span>] +</span><br><span class="line">      <span class="string">`". Expected argument to be an object with the following `</span> +</span><br><span class="line">      <span class="string">`keys: "<span class="subst">$&#123;reducerKeys.join('", "')&#125;</span>"`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unexpectedKeys = <span class="built_in">Object</span>.keys(inputState).filter(</span><br><span class="line">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  unexpectedKeys.forEach(key =&gt; &#123;</span><br><span class="line">    unexpectedKeyCache[key] = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (unexpectedKeys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`Unexpected <span class="subst">$&#123;unexpectedKeys.length &gt; 1 ? 'keys' : 'key'&#125;</span> `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;unexpectedKeys.join('", "')&#125;</span>" found in <span class="subst">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;reducerKeys.join('", "')&#125;</span>". Unexpected keys will be ignored.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查reducers的state是否有默认返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerShape</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(key =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reducer = reducers[key]</span><br><span class="line">    <span class="comment">// 以默认值来执行reducer </span></span><br><span class="line">    <span class="keyword">const</span> initialState = reducer(<span class="literal">undefined</span>, &#123; type: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">          <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">          <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">          <span class="string">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class="line">          <span class="string">`you can use null instead of undefined.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class="line">      &#125;) === <span class="string">'undefined'</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">          <span class="string">`Don't try to handle <span class="subst">$&#123;</span><br><span class="line">            ActionTypes.INIT</span><br><span class="line">          &#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">          <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">          <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">          <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">          <span class="string">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span><br><span class="line"> 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如</span><br><span class="line"> &#123;</span><br><span class="line">   reducerA: funA</span><br><span class="line">   reducerB: funB</span><br><span class="line"> &#125;</span><br><span class="line"> 并且生成新的state tree，形如：</span><br><span class="line"> &#123;</span><br><span class="line">   reducerA: &#123;</span><br><span class="line">     key: 'value'</span><br><span class="line">   &#125;,</span><br><span class="line">   reducerB: &#123;</span><br><span class="line">     key: 'value'</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="comment">// 过滤掉reducers中不是function的键值对</span></span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 存放最终的 state 树</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 获取每个reducer的key名</span></span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="comment">// 获取 reducer</span></span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="comment">// 获取传入的state树</span></span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="comment">// 执行该key的reducer函数，生成新state tree</span></span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree</span></span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      <span class="comment">// 判断所有的state有没有变化</span></span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果state tree 变化了，就返回新的；否则，返回旧的</span></span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>回顾下<code>createStore</code>方法，<code>createStore(reducer, preloadedState, enhancer)</code>，<code>applyMiddleware</code>作为第三个参数<code>enhancer</code>传入，对dispatch进行包装，处理各种actin。</p><p><code>applyMiddleware.js</code> 源码分析如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span><br><span class="line"> applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createStore =&gt; (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = () =&gt; &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 middlewares 作为参数注入，函数科里化后返回新的函数链。</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 以 store.dispatch 来注入 </span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>自动把多个 action 创建函数 绑定到相应的 dispatch() 方法上，可直接使用，不需要引入 action。<br>接受两个参数：</p><ul><li><code>actionCreator</code>可以是对象也可以是函数，如果是对象则返回对象，如果是函数则返回函数。</li><li><code>dispatch</code> dispatch函数<br><code>bindActionCreators.js</code> 源码分析如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 将dispatch包装好来直接使用</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;</span><br><span class="line">        actionCreators === null ? 'null' : typeof actionCreators</span><br><span class="line">      &#125;</span>. `</span> +</span><br><span class="line">        <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历 actionCreators ， 返回 dispatch 设置为相应key对应的 action 的对象</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>从里往外把接受到函数合成最终函数，能让传入的函数依次执行。</p><p><code>compose.js</code> 源码分析如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) =&gt; f(g(h(...args)))</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg =&gt; arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此源码分析时，redux版本号是4.0.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#API&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Redux&lt;/code&gt;的API只有以下五个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;createStore&lt;/li&gt;
&lt;li&gt;combineReducers&lt;/li&gt;
&lt;li&gt;bindActionCreators&lt;/li&gt;
&lt;li&gt;applyMiddleware&lt;/li&gt;
&lt;li&gt;compose&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们分别针对这五个接口进行分析。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
      <category term="React" scheme="http://blog.html5jscss.com/categories/JavaScript/React/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://blog.html5jscss.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>graphql初探</title>
    <link href="http://blog.html5jscss.com/graphql-introduction/"/>
    <id>http://blog.html5jscss.com/graphql-introduction/</id>
    <published>2019-05-08T06:07:58.000Z</published>
    <updated>2019-07-15T02:28:24.868Z</updated>
    
    <content type="html"><![CDATA[<p>编写graphql的大致过程如下：</p><ul><li>定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。</li><li>定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作类型query(查询)或mutation(变更)等。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写graphql的大致过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。&lt;/li&gt;
&lt;li&gt;定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作
      
    
    </summary>
    
      <category term="Node.js" scheme="http://blog.html5jscss.com/categories/Node-js/"/>
    
      <category term="MongoDB" scheme="http://blog.html5jscss.com/categories/Node-js/MongoDB/"/>
    
      <category term="React" scheme="http://blog.html5jscss.com/categories/Node-js/MongoDB/React/"/>
    
    
      <category term="GraphQL" scheme="http://blog.html5jscss.com/tags/GraphQL/"/>
    
      <category term="Koa" scheme="http://blog.html5jscss.com/tags/Koa/"/>
    
      <category term="Mongoose" scheme="http://blog.html5jscss.com/tags/Mongoose/"/>
    
  </entry>
  
  <entry>
    <title>webpack-4-x</title>
    <link href="http://blog.html5jscss.com/webpack-4-x/"/>
    <id>http://blog.html5jscss.com/webpack-4-x/</id>
    <published>2019-04-30T06:17:27.000Z</published>
    <updated>2019-04-30T06:18:57.554Z</updated>
    
    <content type="html"><![CDATA[<p>占坑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;占坑&lt;/p&gt;

      
    
    </summary>
    
      <category term="前端构建工具" scheme="http://blog.html5jscss.com/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://blog.html5jscss.com/tags/webpack/"/>
    
      <category term="webpack4.x" scheme="http://blog.html5jscss.com/tags/webpack4-x/"/>
    
  </entry>
  
  <entry>
    <title>send-beacon</title>
    <link href="http://blog.html5jscss.com/send-beacon/"/>
    <id>http://blog.html5jscss.com/send-beacon/</id>
    <published>2018-06-14T08:06:45.000Z</published>
    <updated>2019-08-11T12:43:12.959Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgPing</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">'__SOME_RANDOM_KEY__'</span> + (+<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="built_in">window</span>[key] = img;</span><br><span class="line">    img.onload = img.onerror = img.onabort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        img.onload = img.onerror = img.onabort = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">window</span>[key] = <span class="literal">null</span>;</span><br><span class="line">        img = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = concatUrl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>哪些会导致重绘和回流</title>
    <link href="http://blog.html5jscss.com/what-forces-layout-reflow/"/>
    <id>http://blog.html5jscss.com/what-forces-layout-reflow/</id>
    <published>2018-05-15T05:53:51.000Z</published>
    <updated>2019-04-30T06:04:29.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译自 《What forces layout / reflow》</p><footer><strong>paulirish/what-forces-layout,</strong><cite><a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" target="_blank" rel="external">gist.github.com/paulirish/5d52fb081b3570c81e3a</a></cite></footer></blockquote><p>当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。<br><a id="more"></a></p><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h3 id="盒子度量"><a href="#盒子度量" class="headerlink" title="盒子度量"></a>盒子度量</h3><ul><li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>, <code>elem.offsetParent</code></li><li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>, <code>elem.clientHeight</code></li><li><code>elem.getClientRects()</code>, <code>elem.getBoundingClientRect()</code></li></ul><h3 id="Scroll之类的"><a href="#Scroll之类的" class="headerlink" title="Scroll之类的"></a>Scroll之类的</h3><ul><li><code>elem.scrollBy()</code>, <code>elem.scrollTo()</code></li><li><code>elem.scrollIntoView()</code>, <code>elem.scrollIntoViewIfNeeded()</code></li><li><code>elem.scrollWidth</code>, <code>elem.scrollHeight</code></li><li><code>elem.scrollLeft</code>, <code>elem.scrollTop</code> 设置也会影响他们</li></ul><h3 id="Focus"><a href="#Focus" class="headerlink" title="Focus"></a>Focus</h3><ul><li><code>elem.focus()</code> 会触发两次重绘 <a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C" target="_blank" rel="external">source</a>&amp;l=2923</li></ul><h3 id="还有…"><a href="#还有…" class="headerlink" title="还有…"></a>还有…</h3><ul><li><code>elem.computedRole</code>, <code>elem.computedName</code></li><li><code>elem.innerText</code> <a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C" target="_blank" rel="external">source</a>&amp;l=3440</li></ul><h3 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h3><p><code>window.getComputedStyle()</code> 会触发典型的样式重新计算<br><code>window.getComputedStyle()</code> 会触发重绘:</p><ol><li>任何<code>Shadow DOM</code></li><li>使用了 media queries （viewport-related中的其中一些）,以下属性<ul><li><code>min-width</code>, <code>min-height</code>, <code>max-width</code>, <code>max-height</code>, <code>width</code>, <code>height</code></li><li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code></li><li><code>device-pixel-ratio</code>, <code>resolution</code>, <code>orientation</code> , <code>min-device-pixel-ratio</code>, <code>max-device-pixel-ratio</code></li></ul></li><li>获取以下任一属性<ul><li><code>height</code>, <code>width</code></li><li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></li><li><code>margin</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>margin</code>是固定的.</li><li><code>padding</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>padding</code>是固定的.</li><li><code>transform</code>, <code>transform-origin</code>, <code>perspective-origin</code></li><li><code>translate</code>, <code>rotate</code>, <code>scale</code></li><li><code>grid</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code></li><li><code>perspective-origin</code></li><li>以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): <code>motion-path</code>, <code>motion-offset</code>, <code>motion-rotation</code>, <code>x</code>, <code>y</code>, <code>rx</code>, <code>ry</code></li></ul></li></ol><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><ol><li><code>window.scrollX</code>, <code>window.scrollY</code></li><li><code>window.innerHeight</code>, <code>window.innerWidth</code></li><li><code>window.getMatchedCSSRules()</code> 仅重新计算样式</li></ol><h3 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h3><ol><li><code>inputElem.focus()</code></li><li><code>inputElem.select()</code>, <code>textareaElem.select()</code></li></ol><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ol><li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code></li></ol><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><ol><li><code>doc.scrollingElement</code> 仅重新计算样式</li></ol><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><ol><li><code>range.getClientRects()</code>, <code>range.getBoundingClientRect()</code></li></ol><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><ol><li>很多，没有详尽的列表，但是(Tony Gentilcore’s 2011 Layout Triggering List )[<a href="http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。" target="_blank" rel="external">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。</a></li></ol><h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><ol><li>很多很多。</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）</li><li>如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。</li><li>改怎么避免回流跟重绘呢？<ol><li>尽量避免在 for 循环中重绘和改变DOM</li><li>使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。</li><li>批处理读/写DOM，可以使用(FastDom)[<a href="https://github.com/wilsonpage/fastdom]或者虚拟DOM" target="_blank" rel="external">https://github.com/wilsonpage/fastdom]或者虚拟DOM</a></li></ol></li></ul><h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><pre><code>因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。</code></pre><h2 id="CSS-Triggers"><a href="#CSS-Triggers" class="headerlink" title="CSS Triggers"></a>CSS Triggers</h2><p>(CSS Triggers)[<a href="https://csstriggers.com/" target="_blank" rel="external">https://csstriggers.com/</a>] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。</p><h2 id="更多参考资料"><a href="#更多参考资料" class="headerlink" title="更多参考资料"></a>更多参考资料</h2><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en" target="_blank" rel="external">Avoiding layout thrashing — Web Fundamentals</a></li><li><a href="https://mattandre.ws/2014/05/really-fixing-layout-thrashing/" target="_blank" rel="external">Fixing Layout thrashing in the real world | Matt Andrews</a></li><li><a href="https://developer.chrome.com/devtools/docs/demos/too-much-layout" target="_blank" rel="external">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a></li><li><a href="http://wilsonpage.co.uk/preventing-layout-thrashing/" target="_blank" rel="external">Preventing &apos;layout thrashing&apos; | Wilson Page</a></li><li><a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="external">wilsonpage/fastdom</a></li><li><a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/" target="_blank" rel="external">Rendering: repaint, reflow/relayout, restyle / Stoyan</a></li><li><a href="http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/" target="_blank" rel="external">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a></li><li><a href="https://developers.google.com/speed/articles/reflow?hl=en" target="_blank" rel="external">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a></li><li><a href="https://developer.apple.com/videos/wwdc/2012/?id=601" target="_blank" rel="external">Optimizing Web Content in UIWebViews and Websites on iOS</a></li><li><a href="http://www.html5rocks.com/en/tutorials/speed/layers/" target="_blank" rel="external">Accelerated Rendering in Chrome</a></li><li><a href="https://www.igvita.com/slides/2012/web-performance-for-the-curious/" target="_blank" rel="external">web performance for the curious</a></li><li><a href="http://jankfree.org/" target="_blank" rel="external">Jank Free</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;翻译自 《What forces layout / reflow》&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;paulirish/what-forces-layout,&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://gist.github.com/paulirish/5d52fb081b3570c81e3a&quot;&gt;gist.github.com/paulirish/5d52fb081b3570c81e3a&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://blog.html5jscss.com/categories/Js/"/>
    
    
      <category term="技术细节" scheme="http://blog.html5jscss.com/tags/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    
      <category term="reflow" scheme="http://blog.html5jscss.com/tags/reflow/"/>
    
      <category term="前端性能" scheme="http://blog.html5jscss.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>javascript-number-range</title>
    <link href="http://blog.html5jscss.com/javascript-number-range/"/>
    <id>http://blog.html5jscss.com/javascript-number-range/</id>
    <published>2018-03-09T03:11:52.000Z</published>
    <updated>2019-08-11T12:43:12.954Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code> 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。<br><a id="more"></a></p><h2 id="JavaScript运算"><a href="#JavaScript运算" class="headerlink" title="JavaScript运算"></a>JavaScript运算</h2><p>在JavaScript里面，数字使用<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="external">IEEE 754</a>中规定的<a href="https://zh.wikipedia.org/wiki/雙精度浮點數" target="_blank" rel="external">双精度浮点类型</a>。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用<code>Number.MIN_SAFE_INTEGER</code>,<code>Number.MAX_SAFE_INTEGER</code>来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">9007199254740992</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num + <span class="number">5</span>); <span class="comment">// 9007199254740996</span></span><br></pre></td></tr></table></figure></p><p>正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。</p><h2 id="JavaScript位运算"><a href="#JavaScript位运算" class="headerlink" title="JavaScript位运算"></a>JavaScript位运算</h2><p>JavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSum = <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">31</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pow&amp;pow) <span class="comment">// -2147483648</span></span><br><span class="line"><span class="built_in">console</span>.log(pow&gt;&gt;<span class="number">1</span>) <span class="comment">// -1073741824</span></span><br></pre></td></tr></table></figure></p><p>自己与自己正确应该是还是自己，但是他显示<code>-2147483648</code>, <code>pow&gt;&gt;1</code> 正确结果应该是跟<code>pow/2</code>的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;和&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="JS实际应用" scheme="http://blog.html5jscss.com/tags/JS%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>css3-transfrom</title>
    <link href="http://blog.html5jscss.com/css3-transfrom/"/>
    <id>http://blog.html5jscss.com/css3-transfrom/</id>
    <published>2017-11-07T02:42:59.000Z</published>
    <updated>2019-08-11T12:43:12.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. </p><footer><strong>W3C</strong><cite><a href="https://www.w3.org/TR/css-transforms-1/" target="_blank" rel="external">css-transforms</a></cite></footer></blockquote><p>以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。<br><a id="more"></a></p><h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform：<span class="keyword">none</span> | matrix(<span class="variable">&lt;number&gt;</span>,<span class="variable">&lt;number&gt;</span>,<span class="variable">&lt;number&gt;</span>,<span class="variable">&lt;number&gt;</span>,<span class="variable">&lt;number&gt;</span>,<span class="variable">&lt;number&gt;</span>)? translate(<span class="variable">&lt;length&gt;</span>[,<span class="variable">&lt;length&gt;</span>])? translateX(<span class="variable">&lt;length&gt;</span>)? translateY(<span class="variable">&lt;length&gt;</span>)? rotate(<span class="variable">&lt;angle&gt;</span>)? scale(<span class="variable">&lt;number&gt;</span>[,<span class="variable">&lt;number&gt;</span>])? scaleX(<span class="variable">&lt;number&gt;</span>)? scaleY(<span class="variable">&lt;number&gt;</span>)? skew(<span class="variable">&lt;angle&gt;</span>[,<span class="variable">&lt;angle&gt;</span>])? skewX(<span class="variable">&lt;&lt;angle&gt;</span>) || skewY(<span class="variable">&lt;angle&gt;</span>)?</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 实际用法*/</span><br><span class="line">-webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+</span><br><span class="line">-moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+</span><br><span class="line">-o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+</span><br><span class="line">-ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+</span><br><span class="line">transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准</span><br></pre></td></tr></table></figure><p>Transform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p><h3 id="Transfrom（变形）取值"><a href="#Transfrom（变形）取值" class="headerlink" title="Transfrom（变形）取值"></a>Transfrom（变形）取值</h3><ul><li>translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</length></length></li><li>translateX(<length>)：指定对象X轴（水平方向）的平移 </length></li><li>translateY(<length>)：指定对象Y轴（垂直方向）的平移</length></li><li>rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center</angle></li><li>scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值</number></number></li><li>scaleX(<number>)：指定对象X轴的（水平方向）缩放</number></li><li>scaleY(<number>)：指定对象Y轴的（垂直方向）缩放</number></li><li>skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</angle></angle></li><li>skewX(<angle>)：指定对象X轴的（水平方向）扭曲</angle></li><li>skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 </angle></li><li>matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵</number></number></number></number></number></number></li></ul><p>直接看DEMO，加深印象</p><div class="transfrom"><br><ul class="clearfix"> <li class="item translate">Translate</li> <li class="item translate-x">TranslateX</li> <li class="item translate-y">TranslateY</li> <li class="item rotate">Rotate</li> <li class="item scale">Scale</li> <li class="item scale-x">ScaleX</li> <li class="item scale-y">ScaleY</li> <li class="item skew">Skew</li> <li class="item skew-x">SkewX</li> <li class="item skew-y">SkewY</li> <li class="item matrix">Matrix</li> </ul> </div><style type="text/css">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style><h3 id="transform-origin（改变元素基点）"><a href="#transform-origin（改变元素基点）" class="headerlink" title="transform-origin（改变元素基点）"></a>transform-origin（改变元素基点）</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>：<span class="selector-attr">[ &lt;percentage&gt; | &lt;length&gt; | left | center | right ]</span> <span class="selector-attr">[ &lt;percentage&gt; | &lt;length&gt; | top | center | bottom ]</span>?</span><br><span class="line"><span class="comment">/* 实际用法*/</span></span><br><span class="line">-webkit-<span class="attribute">transform-origin</span>:top left;<span class="comment">//chrome1.0x+ safari3.1+</span></span><br><span class="line">-moz-<span class="attribute">transform-origin</span>:top left;<span class="comment">//firefox3.5+</span></span><br><span class="line">-o-<span class="attribute">transform-origin</span>:top left;<span class="comment">//opera 10.5+</span></span><br><span class="line">-ms-<span class="attribute">transform-origin</span>:top left;<span class="comment">//IE9+</span></span><br><span class="line">-<span class="attribute">transform-origin</span>:top left;<span class="comment">//W3C标准</span></span><br></pre></td></tr></table></figure><ul><li><percentage>：用百分比指定坐标值。可以为负值。</percentage></li><li><length>：用长度值指定坐标值。可以为负值。</length></li><li>left：指定原点的横坐标为left</li><li>center：指定原点的横坐标为center</li><li>right：指定原点的横坐标为right</li><li>top：指定原点的纵坐标为top</li><li>center：指定原点的纵坐标为center </li><li>bottom：指定原点的纵坐标为bottom </li></ul><p>left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. &lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;W3C&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://www.w3.org/TR/css-transforms-1/&quot;&gt;css-transforms&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css3-transition</title>
    <link href="http://blog.html5jscss.com/css3-transition/"/>
    <id>http://blog.html5jscss.com/css3-transition/</id>
    <published>2017-11-06T09:29:25.000Z</published>
    <updated>2019-08-11T12:43:12.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.</p><footer><strong>W3C</strong><cite><a href="https://www.w3.org/TR/css3-transitions/" target="_blank" rel="external">css3-transitions</a></cite></footer></blockquote><p>以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。<br><a id="more"></a></p><h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-<span class="built_in">delay</span> ]</span><br><span class="line"><span class="comment">/* 实际用法*/</span></span><br><span class="line"><span class="comment">/*缩写方式：*/</span></span><br><span class="line">-webkit-transition:<span class="built_in">border</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">background</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s;<span class="comment">/*chrome2.0x+ safari3.1+*/</span></span><br><span class="line">-moz-transition:<span class="built_in">border</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">background</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s;<span class="comment">/*Firefox 4 */</span></span><br><span class="line">-o-transition:<span class="built_in">border</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">background</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s;<span class="comment">/*opera 10.5+ */</span></span><br><span class="line"><span class="comment">/*IE9不支持，所以-ms-就没了 */</span></span><br><span class="line">transition:<span class="built_in">border</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">background</span>-<span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s, <span class="built_in">color</span> .5s ease-<span class="keyword">in</span> .1s;<span class="comment">/*W3C */</span></span><br><span class="line"><span class="comment">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class="line">transition-property:<span class="built_in">border</span>-<span class="built_in">color</span>, <span class="built_in">background</span>-<span class="built_in">color</span>, <span class="built_in">color</span>;</span><br><span class="line">transition-duration:.5s, .5s, .5s;</span><br><span class="line">transition-timing-function:ease-<span class="keyword">in</span>, ease-<span class="keyword">in</span>, ease-<span class="keyword">in</span>;</span><br><span class="line">transition-<span class="built_in">delay</span>:.1s, .1s, .1s;</span><br></pre></td></tr></table></figure><p>Transitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p><h3 id="Transitions取值"><a href="#Transitions取值" class="headerlink" title="Transitions取值"></a>Transitions取值</h3><ul><li>[ transition-property ]：设置对象中的参与过渡的属性</li><li>[ transition-duration ]：设置对象过渡的持续时间</li><li>[ transition-timing-function ]：设置对象中过渡的动画类型</li><li>[ transition-delay ]：设置对象延迟过渡的时间</li></ul><h3 id="参与过渡的属性"><a href="#参与过渡的属性" class="headerlink" title="参与过渡的属性"></a>参与过渡的属性</h3><p>transition-property是用来指定元素需要过渡的css属性。语法如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-property：<span class="literal">all</span> | <span class="keyword">none</span> | <span class="variable">&lt;property&gt;</span>[ ,<span class="variable">&lt;property&gt;</span> ]*</span><br></pre></td></tr></table></figure></p><h4 id="transition-property取值"><a href="#transition-property取值" class="headerlink" title="transition-property取值"></a>transition-property取值</h4><ul><li>all：所有可以进行过渡的css属性</li><li>none：不指定过渡的css属性</li><li><property>：指定要进行过渡的css属性</property></li></ul><p>当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性<a href="https://www.w3.org/TR/css3-animations/" target="_blank" rel="external">点击查看</a> </p><h3 id="过渡持续时间"><a href="#过渡持续时间" class="headerlink" title="过渡持续时间"></a>过渡持续时间</h3><p>transition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-duration：&lt;<span class="built_in">time</span>&gt;[ ,&lt;<span class="built_in">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p><h3 id="过渡的变化速率"><a href="#过渡的变化速率" class="headerlink" title="过渡的变化速率"></a>过渡的变化速率</h3><p>transition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-timing-<span class="function"><span class="keyword">function</span></span>：linear | ease | ease-<span class="keyword">in</span> | ease-<span class="keyword">out</span> | ease-<span class="keyword">in</span>-<span class="keyword">out</span> | cubic-bezier(&lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;)[ ,linear | ease | ease-<span class="keyword">in</span> | ease-<span class="keyword">out</span> | ease-<span class="keyword">in</span>-<span class="keyword">out</span> | cubic-bezier(&lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p><p>所有过渡效果都涉及到一个：贝塞尔曲线 的东西<a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="external">点击</a>了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：</p><ol><li>ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).</li><li>linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). </li><li>ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).</li><li>ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).</li><li>ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).</li><li><p>cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.</p><p>贝塞尔曲线，如下图</p><img src="http://om64pi295.bkt.clouddn.com/TimingFunction.png" class="[贝塞尔曲线（cubic-bezier曲线）]"><p>图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。</p><p>所以所有值需在[0, 1]区域内，否则无效。<code>cubic-bezier(x1, y1, x2, y2)</code> 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。</p><h3 id="过渡的延迟执行时间"><a href="#过渡的延迟执行时间" class="headerlink" title="过渡的延迟执行时间"></a>过渡的延迟执行时间</h3><p>transition-delay是用来指定一个过渡延迟执行的时间。语法如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-<span class="built_in">delay</span>：&lt;<span class="built_in">time</span>&gt;[ ,&lt;<span class="built_in">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></li></ol><h2 id="Transitions实现的简单hover按钮"><a href="#Transitions实现的简单hover按钮" class="headerlink" title="Transitions实现的简单hover按钮"></a>Transitions实现的简单hover按钮</h2><p>asda</p><p><style type="text/css">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;<br>}</style></p><figure><br><div id="demo"><br>    <a class="button" href="">Transitions按钮</a><br></div><br></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;W3C&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-transitions/&quot;&gt;css3-transitions&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css3-animation</title>
    <link href="http://blog.html5jscss.com/css3-animation/"/>
    <id>http://blog.html5jscss.com/css3-animation/</id>
    <published>2017-11-03T02:16:57.000Z</published>
    <updated>2019-08-11T12:43:12.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.</p><footer><strong>W3C</strong><cite><a href="https://www.w3.org/TR/css3-animations/" target="_blank" rel="external">css3-animations</a></cite></footer></blockquote><p>以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。<br><a id="more"></a><br>看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。</p><style type="text/css">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }    .cloud-2 { left: 50px; top: 0; }    .cloud-3 { left: 110px; top: 20px; }    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style><p>点击下面DEMO观看动画：</p><p><figure></figure></p><p><div id="sky" class="target"><br>    <div id="cloud" class="target"><br>    <div class="cloud cloud-1"></div><br>    <div class="cloud cloud-2"></div><br>    <div class="cloud cloud-3"></div><br>    </div><br>    <div id="sun" class="target"></div><br>    <div id="moon" class="target"><br>    <div class="moon"><br>    </div><br>    <div class="moon moon-2"><br>    </div><br>    </div><br>    <div id="ground" class="target"></div><br></div></p><p></p><p><input type="button" id="startbutton" value="开始动画"></p><p></p><p><figcaption>animation动画 ”一天日月轮回 “</figcaption></p><figure><script type="text/javascript">window.onload = function(){    jQuery.noConflict();jQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $("#startbutton") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $("div.target").toggleClass("animate"); if (s.startButton.attr("value") === "开始动画") { s.startButton.attr("value", "重置动画"); } else { s.startButton.attr("value", "开始动画"); } }); } }; AnimationSpace.init(); });}</script><p>以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o</p><p>Animation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。</p><h2 id="Animation动画"><a href="#Animation动画" class="headerlink" title="Animation动画"></a>Animation动画</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>：<span class="selector-attr">[[ animation-name ]</span> || <span class="selector-attr">[ animation-duration ]</span> || <span class="selector-attr">[ animation-timing-function ]</span> || <span class="selector-attr">[ animation-delay ]</span> || <span class="selector-attr">[ animation-iteration-count ]</span> || <span class="selector-attr">[ animation-direction ]</span>|| <span class="selector-attr">[animation-fill-mode]</span>] <span class="selector-attr">[ , [ animation-name ]</span> || <span class="selector-attr">[ animation-duration ]</span> || <span class="selector-attr">[ animation-timing-function ]</span> || <span class="selector-attr">[ animation-delay ]</span> || <span class="selector-attr">[ animation-iteration-count ]</span> || <span class="selector-attr">[ animation-direction ]</span> || <span class="selector-attr">[animation-fill-mode]</span>]*</span><br><span class="line">相关属性：<span class="selector-attr">[ animation-play-state ]</span></span><br><span class="line"><span class="comment">/* 实际用法*/</span></span><br><span class="line"><span class="comment">/*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/</span></span><br><span class="line">@<span class="selector-tag">keyframes</span> <span class="selector-tag">sky</span> &#123;</span><br><span class="line">    <span class="selector-tag">0%</span> &#123; <span class="attribute">background-color</span>: <span class="number">#525252</span>; &#125;</span><br><span class="line">    <span class="selector-tag">33%</span> &#123; <span class="attribute">background-color</span>: <span class="number">#6293e5</span>; &#125;</span><br><span class="line">    <span class="selector-tag">66%</span> &#123; <span class="attribute">background-color</span>:<span class="number">#6293e5</span>; &#125;</span><br><span class="line">    <span class="selector-tag">100%</span> &#123; <span class="attribute">background-color</span>: <span class="number">#525252</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*缩写方式：*/</span></span><br><span class="line"><span class="selector-class">.classname</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>:sky <span class="number">10s</span> ease <span class="number">1s</span> <span class="number">1</span> normal forwards;</span><br><span class="line">    <span class="attribute">-webkit-animation-play-state</span>: running;<span class="comment">/*animation附加属性*/</span></span><br><span class="line">    <span class="attribute">-moz-animation</span>:sky  <span class="number">10s</span> ease <span class="number">1s</span> <span class="number">1</span> normal forwards;</span><br><span class="line">    <span class="attribute">-moz-animation-play-state</span>: running;<span class="comment">/*animation附加属性*/</span></span><br><span class="line">    <span class="attribute">animation</span>:sky  <span class="number">10s</span> ease <span class="number">1s</span> <span class="number">1</span> normal forwards;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: running;<span class="comment">/*animation附加属性*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class="line"><span class="attribute">animation-name</span>: sky;</span><br><span class="line"><span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line"><span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line"><span class="attribute">animation-iteration-count</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">animation-direction</span>: normal;</span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line"><span class="attribute">animation-play-state</span>: running;</span><br></pre></td></tr></table></figure><h2 id="animation取值"><a href="#animation取值" class="headerlink" title="animation取值"></a>animation取值</h2><ol><li>animation-name：设置对象所应用的动画名称</li><li>animation-duration：设置对象动画的持续时间</li><li>animation-timing-function：设置对象动画的过渡类型</li><li>animation-delay：设置对象动画延迟的时间</li><li>animation-iteration-count：设置对象动画的循环次数</li><li>animation-direction：设置对象动画在循环中是否反向运动</li><li>animation-fill-mode：设置对象动画结束时的状态</li><li>animation-play-state：animation的相关属性，设置对象动画的状态</li></ol><h3 id="动画名称以及keyframes"><a href="#动画名称以及keyframes" class="headerlink" title="动画名称以及keyframes"></a>动画名称以及keyframes</h3><h4 id="动画名称"><a href="#动画名称" class="headerlink" title="动画名称"></a>动画名称</h4><p>animation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-name：<span class="keyword">none</span> | <span class="variable">&lt;identifier&gt;</span> [ , <span class="keyword">none</span> | <span class="variable">&lt;identifier&gt;</span> ]*</span><br></pre></td></tr></table></figure><p>动画具体名字得设置成 Keyframes 一样的名字。</p><h4 id="Keyframes"><a href="#Keyframes" class="headerlink" title="Keyframes"></a>Keyframes</h4><p>keyframes 语法<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyframes-rule: <span class="string">'@keyframes'</span> <span class="symbol">IDENT</span> <span class="string">'&#123;'</span> keyframes-blocks <span class="string">'&#125;'</span>;</span><br><span class="line">keyframes-blocks: [ keyframe-selectors block ]* ;</span><br><span class="line">keyframe-selectors: [ <span class="string">'from'</span> | <span class="string">'to'</span> | <span class="symbol">PERCENTAGE</span> ] [ <span class="string">','</span> [ <span class="string">'from'</span> | <span class="string">'to'</span> | <span class="symbol">PERCENTAGE</span> ] ]*;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*具体写法*/</span></span><br><span class="line"><span class="comment">/* @keyframes IDENT &#123;*/</span></span><br><span class="line">@<span class="keyword">keyframes</span> diagonal-slide &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*或者全部写成百分比的形式：*/</span></span><br><span class="line">@<span class="keyword">keyframes</span> wobble &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    40% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">150px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    60% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">75px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Keyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。</p><p>这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体</p><h3 id="动画的持续时间"><a href="#动画的持续时间" class="headerlink" title="动画的持续时间"></a>动画的持续时间</h3><p>animation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation-duration</span>：&lt;<span class="selector-tag">time</span>&gt; <span class="selector-attr">[ , &lt;time&gt; ]</span>*</span><br></pre></td></tr></table></figure></p><p>这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。</p><h3 id="动画的变化速率"><a href="#动画的变化速率" class="headerlink" title="动画的变化速率"></a>动画的变化速率</h3><p>animation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-timing-<span class="function"><span class="keyword">function</span></span>：linear | ease | ease-<span class="keyword">in</span> | ease-<span class="keyword">out</span> | ease-<span class="keyword">in</span>-<span class="keyword">out</span> | cubic-bezier(&lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;) [ , linear | ease | ease-<span class="keyword">in</span> | ease-<span class="keyword">out</span> | ease-<span class="keyword">in</span>-<span class="keyword">out</span> | cubic-bezier(&lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;, &lt;<span class="keyword">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p><h3 id="动画的延迟执行时间"><a href="#动画的延迟执行时间" class="headerlink" title="动画的延迟执行时间"></a>动画的延迟执行时间</h3><p>animation-delay是用来指定一个动画的延迟执行的时间。语法如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">animation</span>-<span class="built_in">delay</span>：&lt;<span class="built_in">time</span>&gt; [ , &lt;<span class="built_in">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p><p>跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。</p><p>以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。</p><p>接下来介绍它们。</p><h3 id="动画的循环次数"><a href="#动画的循环次数" class="headerlink" title="动画的循环次数"></a>动画的循环次数</h3><p>animation-iteration-count是用来制定动画的循环次数，语法如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-<span class="built_in">count</span>：infinite | &lt;<span class="built_in">number</span>&gt; [ , infinite | &lt;<span class="built_in">number</span>&gt; ]*</span><br></pre></td></tr></table></figure></p><ul><li>：默认值，代表只循环一次</li><li><number>：自定义对象动画的具体循环次数</number></li><li>infinite：无限循环</li></ul><h3 id="动画的方向"><a href="#动画的方向" class="headerlink" title="动画的方向"></a>动画的方向</h3><p>animation-direction是用来指定元素动画播放的方向，语法如下：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-direction：<span class="built-in">normal</span> | alternate [ , <span class="built-in">normal</span> | alternate ]*</span><br></pre></td></tr></table></figure></p><ul><li>normal：动画的每次循环都是正常播放</li><li>alternate：动画的播放将是来回往返，一次是正常的与一次是反向的<br><strong>注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。</strong></li></ul><h3 id="动画结束的时的状态"><a href="#动画结束的时的状态" class="headerlink" title="动画结束的时的状态"></a>动画结束的时的状态</h3><p>animation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode：none |<span class="string"> forwards </span>|<span class="string"> backwards </span>|<span class="string"> both [ , none </span>|<span class="string"> forwards </span>|<span class="string"> backwards </span>|<span class="string"> both ]*</span></span><br></pre></td></tr></table></figure></p><ul><li>none：默认值。不设置对象动画之外的状态</li><li>forwards：设置对象状态为动画结束时的状态</li><li>backwards：设置对象状态为动画开始时的状态</li><li>both：设置对象状态为动画结束或开始的状态，为什么是或？往下看<br><strong>注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。</strong></li></ul><h3 id="动画的运动状态"><a href="#动画的运动状态" class="headerlink" title="动画的运动状态"></a>动画的运动状态</h3><p>animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-play-state：<span class="built_in">running</span> | paused [ , <span class="built_in">running</span> | paused ]*</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>结合以实例</p><ul><li>关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。</li><li>动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。</li><li>之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。</li><li>再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。</li><li>animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。</li><li>animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。</li></ul></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;W3C&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-animations/&quot;&gt;css3-animations&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css基础积累之 attr-content</title>
    <link href="http://blog.html5jscss.com/css-attr-content/"/>
    <id>http://blog.html5jscss.com/css-attr-content/</id>
    <published>2017-08-11T08:42:28.000Z</published>
    <updated>2019-08-11T12:43:12.945Z</updated>
    
    <content type="html"><![CDATA[<p>Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入<code>content</code>。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。</p><a id="more"></a><ol><li>为了优雅，我们再html中加入<code>data-tips</code>属性</li><li>使用<code>attr</code>获取<code>data-tips</code>内容，并放入<code>content</code>中</li><li>使用<code>white-space: pre</code>解决空格问题</li><li>使用<code>Unicode</code>码解决换行问题</li></ol><p><a href="../demo/css-attr-content.html">实例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入&lt;code&gt;content&lt;/code&gt;。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。&lt;/p&gt;
    
    </summary>
    
      <category term="Css" scheme="http://blog.html5jscss.com/categories/Css/"/>
    
    
      <category term="Css 积累" scheme="http://blog.html5jscss.com/tags/Css-%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>Eslint 小结</title>
    <link href="http://blog.html5jscss.com/eslint/"/>
    <id>http://blog.html5jscss.com/eslint/</id>
    <published>2017-08-04T07:28:56.000Z</published>
    <updated>2019-08-11T12:43:12.950Z</updated>
    
    <content type="html"><![CDATA[<p>一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。<br><a id="more"></a></p><h2 id="什么是Eslint"><a href="#什么是Eslint" class="headerlink" title="什么是Eslint"></a>什么是Eslint</h2><p>ESLint最初是由<a href="https://www.nczonline.net/" target="_blank" rel="external">Nicholas C. Zakas</a>于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p><h3 id="Eslint的优势"><a href="#Eslint的优势" class="headerlink" title="Eslint的优势"></a>Eslint的优势</h3><ul><li>可以自定义规则</li><li>规则可以配置成off、warn、error三种状态</li><li>支持插件扩展</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先得安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint file1.js file2.js</span><br></pre></td></tr></table></figure></p><p>有两种主要的方式来配置ESlint：</p><ul><li>在JavaScript中添加注释格式的配置信息</li><li>使用 <code>.eslintrc</code> 文件或者在 <code>package.json</code> 添加配置</li></ul><p>PS:  <code>.eslintrc</code> 放在根目录，则会应用到整个项目；如果子目录也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。</p><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><ul><li>env：定义JS的使用环境。譬如：<code>browser</code>表示在浏览器中使用；<code>node</code>表示在node中使用；<code>commonjs</code>表示使用了CommonJS模块规范;<code>es6</code>表示支持es6特性;<code>amd</code>表示使用<code>require()</code>以及<code>define()</code>;</li><li>globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 <code>WeixinJSBridge</code>,但是我们不可能在文件中定义 <code>WeixinJSBridge</code>，所以这种情况下只需要定义在globals里。</li><li>plugins： 使用第三方插件。</li><li>rules： 核心部分。具体哪些可以配置可查看<a href="http://eslint.org/docs/rules/" target="_blank" rel="external">官网说明</a>ESlint的规则定义<ul><li>“off” 或 0 - 关闭规则</li><li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li><li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li></ul></li></ul><p>市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 <code>eslint -f html --ext .js File -o ./test.html</code> 就导出html格式的File文件夹内所有.js结尾的文件的报告。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="JS工具" scheme="http://blog.html5jscss.com/tags/JS%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>验证身份证号是否正确</title>
    <link href="http://blog.html5jscss.com/identity-number/"/>
    <id>http://blog.html5jscss.com/identity-number/</id>
    <published>2017-07-31T06:22:34.000Z</published>
    <updated>2019-08-11T12:43:12.953Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="../javascript-reg-2#匹配身份证号码">正则基础深入应用</a>中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。<br><a id="more"></a><br>验证方法：</p><ol><li>将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。</li><li>将这18位数字和系数相乘的结果相加。</li><li>用加出来的和除以11，得出余数。</li><li>除以11，余数只能是0-10这11个数的一个。</li><li>以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。</li></ol><p>根据以上结论，使用JS写相应程序，得出如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * [checkID 验证身份证号码是否正确]</span><br><span class="line"> * @param  &#123;[String]&#125; strIDCardnumber [必须是字符串，不然会触发大整数精度问题]</span><br><span class="line"> * @return &#123;[Boolean]&#125;                [返回布尔值]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params">strIDCardnumber</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _isIDRule = <span class="literal">false</span>,</span><br><span class="line">        _sum = <span class="number">0</span>,</span><br><span class="line">        _strIDCardnumber = strIDCardnumber.toString(),</span><br><span class="line">        _coefficient = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">        _mantissa = [<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">        _sum += <span class="built_in">Number</span>(_strIDCardnumber.substring(i, i + <span class="number">1</span>)) * _coefficient[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_strIDCardnumber.substring(<span class="number">17</span>) == _mantissa[_sum % <span class="number">11</span>]) &#123;</span><br><span class="line">        _isIDRule = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _isIDRule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是验证身份证的程序代码，只要<code>checkID(&#39;430404196710021020&#39;)</code>调用就ok了。<br>调用时必须要注意传入的值必须是字符类型，不然大于<code>2^53</code>时，就会触发大数字的精度问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;../javascript-reg-2#匹配身份证号码&quot;&gt;正则基础深入应用&lt;/a&gt;中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="JS实际应用" scheme="http://blog.html5jscss.com/tags/JS%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>正则基础深入应用</title>
    <link href="http://blog.html5jscss.com/javascript-reg-2/"/>
    <id>http://blog.html5jscss.com/javascript-reg-2/</id>
    <published>2017-07-24T06:54:16.000Z</published>
    <updated>2019-08-11T12:43:12.958Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。</p><p>写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。</p><a id="more"></a><h2 id="密码强度"><a href="#密码强度" class="headerlink" title="密码强度"></a>密码强度</h2><h3 id="密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间"><a href="#密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间" class="headerlink" title="密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间"></a>密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间</h3><p>用到了前瞻，如果还不清楚可以移步 <a href="../javascript-reg-1">正则基础学习</a></p><p>正则一<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?!^[a-z]+$)(?!^[<span class="number">0</span><span class="number">-9</span>]+$)(?!^[A-Z]+$)^[a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$</span><br></pre></td></tr></table></figure></p><p>其中 <code>(?!)</code> 这种写法是对后面数据的一种限定，过滤匹配的数据。如 <code>(?!2)[0-9]</code> 就是匹配除了2之外的所有数字。</p><p>然后，上面那段正则就可以分以下四段分析，因为<code>(?!)</code>只是限定条件，不匹配结果，所以前面三个<code>(?!)</code>只是三个条件，后面的才是匹配结果：</p><ul><li><code>(?!^[a-z]+$)</code>: 排除纯小写</li><li><code>(?!^[A-Z]+$)</code>: 排除纯大写</li><li><code>(?!^[0-9]+$)</code>: 排除纯数字</li><li><code>^[a-zA-Z0-9]{6,16}$</code>: 匹配6到12个 [a-zA-Z0-9] 范围中字符</li></ul><p>正则二<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$</span><br></pre></td></tr></table></figure></p><p>这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以<code>^</code> 跟 <code>$</code> 位置不同。<br>这段正则分以下也三段分析：</p><ul><li><code>^(?=.*\d)[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有数字。</li><li><code>^(?=.*[a-z])[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。</li><li><code>^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$</code>:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。</li></ul><h2 id="整数部分千分位"><a href="#整数部分千分位" class="headerlink" title="整数部分千分位"></a>整数部分千分位</h2><p>现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，<br>互利网中也是如此。<br>我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。<br>因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。</p><p>方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99999999999</span><span class="string">'.replace(/\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+)/g, '</span>$&amp;,<span class="string">');</span></span><br></pre></td></tr></table></figure></p><ul><li><code>(\d{3})+</code>表示一组及以上3的倍数个数字加小数点</li><li>然后用正向肯定查找 <code>(?=)</code> 包起来，说明 <code>(\d{3})+</code> 只是一个条件</li><li><code>g</code> 表示匹配多次直到没匹配到结果</li><li><code>$&amp;</code> 表示 <code>\d{1,3}</code> 正向查找条件成立时匹配到的结果</li></ul><p>所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，<code>$&amp;</code>提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足<code>\d{1,3}</code> 后才停止匹配。</p><ul><li><a href="../javascript-reg-1#字符串替代：">怎么引用replace匹配到的结果</a> 知识点。</li></ul><h2 id="匹配身份证号码"><a href="#匹配身份证号码" class="headerlink" title="匹配身份证号码"></a>匹配身份证号码</h2><p>正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:<span class="number">1</span>[<span class="number">1</span><span class="number">-5</span>]|<span class="number">2</span>[<span class="number">1</span><span class="number">-3</span>]|<span class="number">3</span>[<span class="number">1</span><span class="number">-7</span>]|<span class="number">4</span>[<span class="number">1</span><span class="number">-6</span>]|<span class="number">5</span>[<span class="number">0</span><span class="number">-4</span>]|<span class="number">6</span>[<span class="number">1</span><span class="number">-5</span>]|<span class="number">71</span>|<span class="number">8</span>[<span class="number">12</span>])(?:(<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>])|[<span class="number">1</span><span class="number">-6</span>][<span class="number">1</span><span class="number">-9</span>]|<span class="number">70</span>)(?:(<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>])|<span class="number">1</span>[<span class="number">0</span><span class="number">-8</span>]|[<span class="number">2</span><span class="number">-9</span>][<span class="number">1</span><span class="number">-9</span>])(?:(?:(<span class="number">19</span>[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;|<span class="number">200</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">201</span>[<span class="number">0</span><span class="number">-7</span>])(?:(?:(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-8</span>]))|(?:(?:<span class="number">0</span>[<span class="number">13</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])(?:<span class="number">29</span>|<span class="number">30</span>))|(?:<span class="number">0</span>[<span class="number">13578</span>]|<span class="number">1</span>[<span class="number">02</span>])<span class="number">31</span>))|(?:(?:(<span class="number">19</span>|<span class="number">20</span>)(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>]))|<span class="number">2000</span>)<span class="number">0229</span>)(?:[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">3</span>&#125;[<span class="number">0</span><span class="number">-9</span>X]);</span><br></pre></td></tr></table></figure><h3 id="正则分析"><a href="#正则分析" class="headerlink" title="正则分析"></a>正则分析</h3><h4 id="前六位地址码"><a href="#前六位地址码" class="headerlink" title="前六位地址码"></a>前六位地址码</h4><p>百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：<br><blockquote><p>华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000，<br>华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，<br>西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，<br>特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p><p>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p></blockquote></p><p>根据以上规则得出以下地址码正则：</p><ul><li>第一二位省码：<code>(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])</code></li><li>第三四位市码：<code>(?:(0[1-9])|[1-6][1-9]|70)</code></li><li>第五六位县码：<code>(?:(0[1-9])|1[0-8]|[2-9][1-9])</code> </li></ul><h4 id="中间八位生日期码"><a href="#中间八位生日期码" class="headerlink" title="中间八位生日期码"></a>中间八位生日期码</h4><p>中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。<br>首先从每个月都有的1-28号开始<br><code>(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])</code></p><p>然后除2月之外都有29号跟30号<br><code>(?:0[13-9]|1[0-2])(?:29|30)</code></p><p>接着1、3、5、7、8、10、12月有31号<br><code>(?:0[13578]|1[02])31</code></p><p>以上日期码前面再加上年 <code>(19[0-9]{2}|200[0-9]|201[0-7])</code>，这样子除了闰年的所有日期就都ok了，最后再来写闰年。<br>闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位<br><code>(0[48]|[2468][048]|[13579][26])</code><br>能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。<br>最后我我们用<code>|</code>连接起来。</p><p> 1900到2017年<br><code>((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)</code></p><h4 id="最后四位验证码"><a href="#最后四位验证码" class="headerlink" title="最后四位验证码"></a>最后四位验证码</h4><p>有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">3</span>&#125;[<span class="number">0</span><span class="number">-9</span>X])</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。&lt;/p&gt;
&lt;p&gt;写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="正则" scheme="http://blog.html5jscss.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>正则基础学习</title>
    <link href="http://blog.html5jscss.com/javascript-reg-1/"/>
    <id>http://blog.html5jscss.com/javascript-reg-1/</id>
    <published>2017-07-20T06:38:42.000Z</published>
    <updated>2019-08-11T12:43:12.957Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。</p><p>虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。<br><a id="more"></a><br>正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：</p><p><strong>不使用正则：</strong><br>遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'12 javascript 34 html5 33 php 77 css'</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> figure = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            figure += str.charAt(i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(figure)&#123;</span><br><span class="line">            arr.push(tmp);</span><br><span class="line">            figure =<span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[ "12" , "34" , "5" , "33" , "77" ]</span></span><br></pre></td></tr></table></figure></p><p><strong>而使用正则只需要如下短短的一行代码</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = str.match(<span class="regexp">/\d+/g</span>);</span><br></pre></td></tr></table></figure></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><p>javascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。</p><ol><li>JS 风格： new RegExp(‘patten’,’ig’)</li><li>perl风格：/patten/ig</li></ol><p>JS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。</p><h3 id="什么是正则"><a href="#什么是正则" class="headerlink" title="什么是正则"></a>什么是正则</h3><p>正则表达式的结构与数学表达式很类似。</p><p>一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连</p><p>为了方便理解，让我们先来看看大家一个典型的的数学表达式 <code>(x+3)*2+y</code>：</p><p>这个数学表达式中<code>(x+3)*2</code>和<code>y</code>分别是两个项。每个项又由若干个<strong>因子</strong>组成，因子之间用乘号或除号相连。这里第一个项有两个因子<code>(x+3)</code>和<code>2</code>，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为<strong>子表达式</strong>。这里<code>x+3</code>就是一个子表达式。</p><p>与数学表达式的<strong>因子</strong>相对应，构成正则表达式的部件称为<strong>单位</strong>；<strong>项</strong>则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>为了更好的学习正则，我们再来学习下正则表达式的一些术语</p><ol><li><p>匹配（matching）<br>一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。</p></li><li><p>元字符（metacharacter）<br>只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。</p></li><li><p>子表达式（subexpression）<br> 子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。</p></li></ol><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>上例中斜杠后面的 <code>ig</code>是匹配模式，可选的值有3个：<code>i</code>,<code>g</code>,<code>m</code>。其含义如下：</p><ul><li><code>i</code>：为 ignore case，即 忽略大小写。</li><li><code>g</code>：为 global search，即全局搜索。</li><li><code>m</code>：为 moltiline search，即多行搜索。</li></ul><p>所以，一个完整正则表达式是由一个个<strong>子表达式</strong>组成的，而<strong>子表达式</strong>则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。</p><h2 id="元字符组成部分"><a href="#元字符组成部分" class="headerlink" title="元字符组成部分"></a>元字符组成部分</h2><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>什么是转义字符？在\后面加字符就可以转义为特殊字符。</p><p>例如： <code>\n</code>匹配一个换行符， <code>\\</code>匹配“\”。</p><h3 id="预定义特殊字符"><a href="#预定义特殊字符" class="headerlink" title="预定义特殊字符"></a>预定义特殊字符</h3><ol><li><code>\o</code>:Nol字符。</li><li><code>\t</code>:水平制表符。</li><li><code>\v</code>:垂直制表符。</li><li><code>\n</code>:换行符。</li><li><code>\r</code>:回车符。</li><li><code>\b</code>:退格符。 只有出现在字符中才有效，即[]（中括号）中。</li></ol><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ol><li><code>[ ]</code>:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 <code>[abc]</code>就可以匹配”css”中的c；<br>如果上例前面加 ^元字符，形如<code>[^asd]</code>，则表示匹配除了asd的其他字符；</li></ol><p>如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写<code>[a-c]</code>这么写，所以上例也可以这么写 <code>[^a-d]</code></p><ol><li><code>\w</code>和<code>\W</code>:<code>\w</code>表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；<code>\W</code>表示匹配不是ASCII字符组成的单词等价于<code>[^a-zA-Z0-9]</code>。</li><li><code>\s</code>和<code>\S</code>:<code>\s</code>匹配空白符，等价于<code>[\t\n\x0B\f\r]</code>；<code>\S</code>则匹配非空白字符，等价于<code>[^\t\n\x0B\f\r]</code>。</li><li><code>\d</code>和<code>\D</code>:<code>\d</code>匹配数字字符，等价于<code>[0-9]</code>；<code>\D</code>匹配数字字符，等价于<code>[^0-9]</code></li><li><p><code>.</code>:javascript有点特殊，由于浏览器的解析引擎不同，<code>.</code>的匹配范围也有所不同。</p><ol><li><p>IE8以下：<br>.匹配所有除了换行符<code>/n</code>换行符之外的任意字符。等同于<code>[^\n\r]</code></p></li><li><p>IE9以上以及其他浏览器<br>.匹配所有除了换行符<code>/n</code>换行符和回车符<code>\r</code>之外的任意字符。等同于<code>[^\n\r]</code></p></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="regexp">/./</span>.test(<span class="string">"\r"</span>) + <span class="string">""</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="regexp">/./</span>.test(<span class="string">"\n"</span>) + <span class="string">""</span>);</span><br><span class="line"><span class="comment">/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/</span></span><br></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。</p><p>而既然有贪婪模式，则一定也有非贪婪模式。</p><p>对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。</p><p>贪婪模式的量词，也叫简单量词，如下：</p><p><code>{n}</code>:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。<br><code>{n,}</code>:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。<br><code>{n,m}</code>:n、m都是正整数，表示至少匹配n次，至多m次。<br><code>?</code>:等价于{0,1}<br><code>+</code>:等价于{1,}<br><code>*</code>:等价于{0,}<br>而在贪婪模式后加上 ?就变成了非贪婪模式。</p><h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><p>在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="string">'aAaAaAb'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a+/i</span>.exec(pattern)); <span class="comment">//aAaAaA</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a+?/i</span>.exec(pattern)); <span class="comment">//a</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a+b/i</span>.exec(pattern)); <span class="comment">//aAaAaAb</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a+?b/i</span>.exec(pattern)); <span class="comment">//aAaAaAb</span></span><br></pre></td></tr></table></figure><p>全部是在忽略大小写的模式下：</p><ol><li>第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”</li><li>第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”</li><li>第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。</li><li>第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。</li><li>所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。</li></ol><h3 id="匹配位置"><a href="#匹配位置" class="headerlink" title="匹配位置"></a>匹配位置</h3><p>前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。</p><ol><li><code>^</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之后的位置。</li><li><code>$</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之前的位置。</li><li><code>/b</code>:匹配单词边界，不匹配任何字符。</li></ol><p>所谓的“单词”，就是位于\w（ASCII单词）和\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\/bjava/b\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。</p><p>而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\w是不包括中文已经其他Unicode码特殊符号的，如下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"html5_css3中文_h5$c3&amp;汉字%"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\w+/g</span>)); <span class="comment">//"html5_css3" , "_h5" , "c3"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/.\b./g</span>));<span class="comment">//"3中" , "文_" , "5$" , "3&amp;"</span></span><br></pre></td></tr></table></figure><p>第一个例子中\w+匹配了”html5_css3” , “<em>h5” , “c3”三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“</em>“以及”$“的字符就都成单词的边界；而当使用.\b.（除了换行符之外的任意字符，.匹配了那些\w无法识别的Unicode码字符）匹配时，我们又得到”3中” , “文<em>“ , “5&amp;” ,说明这个字符串中有4个分界点5个子字符串，分别在”3中” , “文</em>“ , “5&amp;”之间，而四个子字符串分别是”html5_css3”，”中文,”_h5”,”$c3”,”&amp;汉字%”。</p><p>所以，在处理一些字符串时，如果要使用\b得先确认是否还有ASCII码的字符。</p><p>注意：\b在[]中表示退格。</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \后加以为或者多位数字来实现，也就是“反向引用”。</p><p>看实际例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1分组+量词</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(js)&#123;2&#125;/</span>.test(<span class="string">"jsjs"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="comment">//2分组+范围</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[JL]script/</span>.test(<span class="string">"Lscript"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="comment">//3反向引用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/([jJ])s\1/</span>.test(<span class="string">"jsJs"</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/([jJ])s\1/</span>.test(<span class="string">"jsjs"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>例1和例2将括号内的若干字符组合为一个单位。而例3因为\1引用的是之前匹配成功的字符串，所以例三中\1就只能匹配”js“而不能匹配”Js“。</p><p>然后介绍第二个分组的符号|。</p><p>与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(html5|css3|js)!!/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"html5!!"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"css3!!"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"js!!"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="非捕获性分组"><a href="#非捕获性分组" class="headerlink" title="非捕获性分组"></a>非捕获性分组</h3><p>对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。</p><p>从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="string">"JS,HTML5,CSS"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern1.replace(<span class="regexp">/(\w+),(?:\w+)/</span>, <span class="string">"$2,$1"</span>));<span class="comment">//$2,JS,CSS</span></span><br></pre></td></tr></table></figure><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><p>前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：</p><ol><li><code>(?=p)</code>:要求之后的字符必须与p匹配</li><li><code>(?!p)</code>:要求之后的字符必须不与p匹配</li></ol><p>如下实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/java(?!Scrit)/</span>;</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/java(?=Scrit)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"javaScrit"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"javaB"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"javaScrit"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"javaB"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。</p><p>支持正则方法有支持正则的字符串方法和正则自身的方法</p><h2 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h2><h3 id="字符串搜索："><a href="#字符串搜索：" class="headerlink" title="字符串搜索："></a>字符串搜索：</h3><p><code>search()</code>方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。</p><p>如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="string">"hello html5 js css"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.search(<span class="regexp">/Html5/i</span>));<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="字符串匹配："><a href="#字符串匹配：" class="headerlink" title="字符串匹配："></a>字符串匹配：</h3><p><code>match()</code>方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。</p><p><code>match()</code>即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern=<span class="string">"2012 years 12 month 20 is the end of the world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.match(<span class="regexp">/\d+/g</span>));<span class="comment">//["2012","12","20"]</span></span><br></pre></td></tr></table></figure><h3 id="字符串替代："><a href="#字符串替代：" class="headerlink" title="字符串替代："></a>字符串替代：</h3><p><code>replace()</code>方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。</p><p><code>replace()</code>的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：</p><ol><li><code>$n</code>：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。</li><li><code>$&amp;</code>：全部匹配的子字符串</li><li>`$``：匹配子串左侧的文本</li><li><code>$&#39;</code>：匹配子串右侧的文本</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="string">"JS,HTML5,CSS"</span>;</span><br><span class="line"><span class="keyword">var</span> replace1 = pattern1.replace(<span class="regexp">/(\w&#123;1,&#125;),(\w+)/</span>, <span class="string">"$2,$1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(replace1);<span class="comment">//HTML5,JS,CSS</span></span><br><span class="line"><span class="keyword">var</span> replace2 = pattern1.replace(<span class="regexp">/(\w+),/g</span>,<span class="string">"$1-"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(replace2);<span class="comment">//JS-HTML5-CSS</span></span><br></pre></td></tr></table></figure><h3 id="字符串分割："><a href="#字符串分割：" class="headerlink" title="字符串分割："></a>字符串分割：</h3><p><code>split()</code>方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。</p><p>若使用 <code>split(&quot;&quot;)</code> 则会将单词分割成字母<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="string">"HTML5 JS CSS"</span>;</span><br><span class="line"><span class="keyword">var</span> sWord1 = pattern.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">var</span> sWord2 = pattern.split(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sWord1);<span class="comment">//[ "HTML5" , "JS" , "CSS" ]</span></span><br><span class="line"><span class="built_in">console</span>.log(sWord2);<span class="comment">//[ "H" , "T" , "M" , "L" , "5" , " " , "J" , "S" , " " , "C" , "S" , "S"]</span></span><br></pre></td></tr></table></figure></p><h2 id="RegExp-对象的方法"><a href="#RegExp-对象的方法" class="headerlink" title="RegExp 对象的方法"></a>RegExp 对象的方法</h2><h2 id="test："><a href="#test：" class="headerlink" title="test："></a>test：</h2><p>test()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false</p><h2 id="exec："><a href="#exec：" class="headerlink" title="exec："></a>exec：</h2><p>exec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。&lt;/p&gt;
&lt;p&gt;虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.html5jscss.com/tags/JavaScript/"/>
    
      <category term="正则" scheme="http://blog.html5jscss.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
</feed>
