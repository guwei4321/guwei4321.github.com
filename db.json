{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/TimingFunction.png","path":"images/TimingFunction.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"aae00029591415e9d39a52662f378ed30d9b8d93","modified":1556604269067},{"_id":"source/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1556604269108},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1556604269123},{"_id":"themes/landscape/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1556604269129},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1556604269121},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1556604269125},{"_id":"themes/landscape/_config.yml","hash":"3032b804b654923f7971195e4408b56de73ab756","modified":1556604269127},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1556604269193},{"_id":"source/_posts/cross-env.md","hash":"3cf97e98b7b46cbfd77ae3dea2463008f9565f68","modified":1556604269070},{"_id":"source/_posts/css-attr-content.md","hash":"678fd7e4886f72c65b62284ae30d702b56f0da4f","modified":1556604269073},{"_id":"source/_posts/css3-animation.md","hash":"b4aa8fd80ecaa73fb7dc14a3d720c006090448cc","modified":1556604269076},{"_id":"source/_posts/css3-transfrom.md","hash":"90d9d9aa81fa3a30da4c6dd033faecbce0441781","modified":1556604269078},{"_id":"source/_posts/eslint.md","hash":"9fbac7c863487fd651812237a5207f899cbf1529","modified":1556604269082},{"_id":"source/_posts/hello-world.md","hash":"d28d4cdf8ecabea3e419dc95dca7df98ac7b537c","modified":1556604269084},{"_id":"source/_posts/css3-transition.md","hash":"e762e4a8ea584c9c4d19ecfe3b2afe39a9360dff","modified":1556604269080},{"_id":"source/_posts/identity-number.md","hash":"bf32502ace298027e022c9dd64125c232ef07246","modified":1556604269086},{"_id":"source/_posts/javascript-number-range.md","hash":"a42caadc4aa4faa1740e46fdddc54f7633456b93","modified":1556604269088},{"_id":"source/_posts/javascript-reg-1.md","hash":"ca4c311b503383bf46dd1fadcb656273e26a6efe","modified":1556604269092},{"_id":"source/_posts/javascript-reg-2.md","hash":"990cee97337a867e773fc414f914bef863aea7e7","modified":1556604269094},{"_id":"source/_posts/send-beacon.md","hash":"ac5c8ab8c82741b2ee2306ca3504355dbee20021","modified":1556604269096},{"_id":"source/_posts/webpack-1-x.md","hash":"6512f6f0be8352f508359d86d0c134c88cb021ef","modified":1556605081013},{"_id":"source/_posts/what-forces-layout-reflow.md","hash":"1929e0a08aa172371c7ef53b7bcaea3f2b642255","modified":1556604269100},{"_id":"source/_posts/webpack-4-x.md","hash":"022453982068dcb53cf3fddbf589337325f0e43d","modified":1556605137554},{"_id":"source/demo/css-attr-content.html","hash":"94f06257243c87d631ffb77a731a6c7b17eb9cd8","modified":1556604269103},{"_id":"source/demo/demo.html","hash":"f5585c6a7a1032c6d064fbe34c419d99c22deab1","modified":1556604269106},{"_id":"source/images/TimingFunction.png","hash":"4ba50698c7aa2c5ce97773b5be975ec8c960ac80","modified":1556604269112},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1556604269181},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1556604269180},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1556604269183},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1556604269185},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1556604269186},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1556604269188},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1556604269190},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1556604269196},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"4d1deb0bbac9755ebe5d0c1f404ca1f27284b80e","modified":1556604269133},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1556604269136},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1556604269138},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"46e1ab7f03a7d5a8d15e61c5a8d04ca3d0265047","modified":1556604269140},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"74f5b0ee156149b9285444b26083d118079eb87c","modified":1556604269142},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1556604269144},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"bf6e8b7aca489bb8217293df882ceacfff585bed","modified":1556604269146},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1556604269148},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1556604269150},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1556604269165},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"4bf42d3f35f6bc1f988f575c620f8db07764379d","modified":1556604269169},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"7fbe5b237b3675b167f4f7d9638498eb44c6ce8f","modified":1556604269174},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"363730418be6b4e314001c94795b245adc880283","modified":1556604269172},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"8d1787a34db844d9587a5d910e1b890513cf8d67","modified":1556604269179},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"edb5b06273acf1753c9fe46ab2e52bebbb45c0c3","modified":1556604269177},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1556604269201},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1556604269232},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1556604269250},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556604269254},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556604269256},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556604269259},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556604269261},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556604269263},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1556604269282},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556604269265},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1556604269285},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1556604269287},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1556604269293},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"b5d4323373d10313fa20becbd3c658b1b710f8ed","modified":1556604269291},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1556604269153},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1556604269156},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1556604269158},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1556604269160},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1556604269162},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1556604269164},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1556604269204},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"00d494a657291784f35a0ec04e923b8ca11466c7","modified":1556604269206},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1556604269212},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1556604269209},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"300a8ca21ea973e18ce52f54d49ef03badbaffb3","modified":1556604269215},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"d53816333378835b9c57467addcfb1266119b623","modified":1556604269217},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1556604269219},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1556604269220},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1556604269223},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1556604269225},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1556604269228},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1556604269230},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1556604269237},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1556604269240},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1556604269248},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1556604269271},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556604269268},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1556604269275},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1556604269277},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1556604269273},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1556604269280},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1556604269246},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1556604269243},{"_id":"public/demo/css-attr-content.html","hash":"c7c620ea2bc30bdaf94a2764ed3dec678fc0d671","modified":1556605149170},{"_id":"public/demo/demo.html","hash":"f1bb9329ad2f3452b60442f54fb4c199ed227ae0","modified":1556605149175},{"_id":"public/sitemap.xml","hash":"5c6a4ab5672dd683c8f3789dc0e4c2c123595042","modified":1559652698937},{"_id":"public/atom.xml","hash":"4a0e21b9905de2aa47b0de628effed1fa977aab8","modified":1559652698932},{"_id":"public/send-beacon/index.html","hash":"d2a238676db2b6af35ce058f8b2f10f61952f810","modified":1558691791709},{"_id":"public/javascript-number-range/index.html","hash":"d1332a19d64aa2565effd708217053025add2804","modified":1558691791710},{"_id":"public/css-attr-content/index.html","hash":"52a63fc30be0b72ff9a102c539d84f55d42e985f","modified":1558691791711},{"_id":"public/eslint/index.html","hash":"5ce08d2c637a3fe3d3d39fd713b087bf8e44076f","modified":1558691791711},{"_id":"public/identity-number/index.html","hash":"e1af15e41744647a4d02849cdf8854c4cbe4ff1e","modified":1558691791715},{"_id":"public/cross-env/index.html","hash":"c8723418f39fdb0b99feddc4cdbb82ad8cf0109c","modified":1558691791711},{"_id":"public/hexo/index.html","hash":"8089a836f9632f06a4fca5f01ce9eac02407d7c3","modified":1558691791711},{"_id":"public/archives/index.html","hash":"d050d0220e7b526fb9ef2ba6f5d6852ca0597031","modified":1558691791712},{"_id":"public/archives/page/2/index.html","hash":"b1dcca833165996beb9bab91652f9c9e6ce30c87","modified":1558691791712},{"_id":"public/archives/2016/index.html","hash":"f6f5ab727364d3d2409da33cc27cd5f73de1246a","modified":1558691791712},{"_id":"public/archives/2016/02/index.html","hash":"bf2630aba1bc4843227d46db3f9cf47272f01d15","modified":1558691791712},{"_id":"public/archives/2017/index.html","hash":"957b242f15c4aff4e3104ef3d231a7ee5c2ecbfc","modified":1558691791712},{"_id":"public/archives/2017/06/index.html","hash":"adefc87e0513bb4829c357e664f601acbcbb087e","modified":1558691791712},{"_id":"public/archives/2017/07/index.html","hash":"a42d33f034d0db0d253437243f2b1664cf908ea7","modified":1558691791712},{"_id":"public/archives/2017/08/index.html","hash":"3ffc0b0d41d22c0d8b26edf5e3ef00f126d0a32c","modified":1558691791713},{"_id":"public/archives/2017/11/index.html","hash":"63b9592b1afea183d1e9e8185b7cfc274f8939e5","modified":1558691791713},{"_id":"public/archives/2018/index.html","hash":"b29dfd7b8df9c91acc1502b1250d551042cff116","modified":1558691791713},{"_id":"public/archives/2018/03/index.html","hash":"f31ffe6c801df79d1837dcfd9be0a3c5218e07d1","modified":1558691791713},{"_id":"public/archives/2018/05/index.html","hash":"36c05d2388be09743f0948d64e0c35fee3ff2a0d","modified":1558691791713},{"_id":"public/archives/2018/06/index.html","hash":"a923182b3fa465cfd9417ce6be6b5fea09300e4b","modified":1558691791713},{"_id":"public/categories/nodeJs/index.html","hash":"90e9af2d13dd6e38b0915f53a625be1710b9c66b","modified":1558691791711},{"_id":"public/categories/Css/index.html","hash":"eef421eecd74acea6c4ac48bc30216254728de16","modified":1558691791711},{"_id":"public/categories/hexo/index.html","hash":"2da45e25feeddcd1b5ca3dce11f0027196ee26d8","modified":1558691791712},{"_id":"public/categories/JavaScript/index.html","hash":"444c03c7ace27a34119afd3ac5128b3803dc865c","modified":1558691791711},{"_id":"public/categories/Js/index.html","hash":"27408ab2cf1a5a67d71f002ac9d368ae6706af10","modified":1558691791711},{"_id":"public/categories/前端构建工具/index.html","hash":"6bfdb4169c8d6e4285111c6eb16516b04a899b67","modified":1558691791712},{"_id":"public/tags/技术细节-cross-dev/index.html","hash":"a543ca2a61c46460675ed829d7338127d7bde52f","modified":1558691791713},{"_id":"public/tags/Css-积累/index.html","hash":"7710ec43b937cd42f7023189dd55e89d89132e9c","modified":1558691791713},{"_id":"public/tags/JavaScript/index.html","hash":"b82c371ee4c978e3005489451880c1a4a208f248","modified":1558691791714},{"_id":"public/tags/JS工具/index.html","hash":"e1003ebe4bd83d16a4a4c4ee419459da012ad2f2","modified":1558691791713},{"_id":"public/tags/hexo/index.html","hash":"932b2bbbc15b1dad2bb4b548338f173e244d2d54","modified":1558691791714},{"_id":"public/tags/JS实际应用/index.html","hash":"582c7dfc42e4d61a8fd847c036057cc80e279a53","modified":1558691791714},{"_id":"public/tags/正则/index.html","hash":"062a59badb0f213f684282488f28d18d37722fae","modified":1558691791714},{"_id":"public/tags/技术细节/index.html","hash":"328b453a5892d8b1b8a2ac9c1672504da1850c50","modified":1558691791715},{"_id":"public/tags/reflow/index.html","hash":"4215ee7aac05a6007f270d62b4d91fdf656f8d83","modified":1558691791714},{"_id":"public/tags/前端性能/index.html","hash":"150d5031dd0317022de438cb891abd74e015833f","modified":1558691791719},{"_id":"public/tags/webpack/index.html","hash":"500a73c3b55b30ca7f8b0d1a314e41c6a0eb87ce","modified":1558691791715},{"_id":"public/tags/webpack1-x/index.html","hash":"4b33299dfb4c43b5f008ca03ab8df6d9d2f70ea7","modified":1558691791715},{"_id":"public/what-forces-layout-reflow/index.html","hash":"c91af973ccf8f5568831e4ffe0767fea93022344","modified":1558691791715},{"_id":"public/css3-transfrom/index.html","hash":"f979283cf9c48c0ccffda4c8f53d9467487f4fe9","modified":1558691791715},{"_id":"public/css3-transition/index.html","hash":"a0a4ba354f5d7961a1bea44090ca7c796a5114ff","modified":1558691791715},{"_id":"public/css3-animation/index.html","hash":"d49f8416903c0078a23bc3444d93bb217b2282b7","modified":1558691791716},{"_id":"public/javascript-reg-2/index.html","hash":"3c9b5cae9cfdb37e4fb40c7465e74171f5c215ae","modified":1558691791715},{"_id":"public/javascript-reg-1/index.html","hash":"266e1f85dc9298b2b27e896a87d553836fa68371","modified":1558691791715},{"_id":"public/webpack-1-x/index.html","hash":"a466eea91ae2965551d7831ff3e62d12e1d51382","modified":1558691791716},{"_id":"public/index.html","hash":"4812bbac003680f8b3e0eb9b254871bcc52411c0","modified":1559652699152},{"_id":"public/page/2/index.html","hash":"6be23e859befc9367394546cb632c88bdc5e6a99","modified":1558691791716},{"_id":"public/webpack-4-x/index.html","hash":"a9471aeae0440d1367665b1a6c6b7c401a6176d5","modified":1558691791692},{"_id":"public/archives/2019/index.html","hash":"c0bab3e07e63ff32585246893a944d860fa66908","modified":1558691791713},{"_id":"public/archives/2019/04/index.html","hash":"dc69534013d6312aaa94f39012dea9272d9023d5","modified":1558691791713},{"_id":"public/tags/webpack4-x/index.html","hash":"774172b629b7d400099ecd3b4900965a96e4019c","modified":1558691791719},{"_id":"source/_posts/redux.md","hash":"55bc5ae5c63b7d1dc6f44fa40518757d32cc8141","modified":1559652620139},{"_id":"public/categories/JavaScript/React/index.html","hash":"f0430677ace4b1130e920b4dfb28f033bd537ef7","modified":1558691791719},{"_id":"public/redux/index.html","hash":"dbd3f76fdda4179e2d92da7aea156b353db11bbb","modified":1559652699151},{"_id":"public/tags/React/index.html","hash":"4e5b370361d8a425e70b8f58c4b34ce5ca75ded2","modified":1558691791727}],"Category":[{"name":"nodeJs","_id":"cjv3ehdrw00054whsjoctioh0"},{"name":"Css","_id":"cjv3ehds0000a4whsgvsb17hs"},{"name":"hexo","_id":"cjv3ehds5000g4whsuufl8rih"},{"name":"JavaScript","_id":"cjv3ehds9000m4whsjb8azu74"},{"name":"Js","_id":"cjv3ehdsh00124whsif0t7fhs"},{"name":"前端构建工具","_id":"cjv3ehdsv001m4whsdablq58f"},{"name":"React","parent":"cjv3ehds9000m4whsjb8azu74","_id":"cjw0kyafv0002ishs5fv15lgl"}],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","source":"demo/css-attr-content.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","date":"2019-04-30T06:04:29.103Z","updated":"2019-04-30T06:04:29.103Z","path":"demo/css-attr-content.html","title":"","comments":1,"_id":"cjv3ehdrs00014whsl2wmgxrk","content":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>"},{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","source":"demo/demo.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","date":"2019-04-30T06:04:29.106Z","updated":"2019-04-30T06:04:29.106Z","path":"demo/demo.html","title":"","comments":1,"_id":"cjv3ehdru00034whsn2acvmm6","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>"}],"Post":[{"title":"跨平台设置NODE_ENV","date":"2017-06-28T05:53:51.000Z","_content":"\n## 使用cross-env解决跨平台设置NODE_ENV\n今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 `npm start`，报如下错误：\n<!--more-->\n````bash\nNODE_ENV=development webpack  --progress\n'NODE_ENV' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n\npm-cli.js\" \"run\" \"dev\"\nnpm ERR! node v6.10.3\nnpm ERR! npm  v3.4.0\nnpm ERR! code ELIFECYCLE\nnpm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack@1.0.0 dev script 'NODE_ENV=development webpack  --progress'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the webpack package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     NODE_ENV=development webpack  --progress\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls webpack\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\learn\\webpack2\\npm-debug.log\n````\n意思是说，windows不支持通过 `NODE_ENV`的来设置环境变量（默认为`development`）。\nwebpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。\n\n### 解决方法\n后来网上查了查知道不同系统通过`NODE_ENV`设置环境变量命令是不同的。\n- linux && mac:\n````bash\nNODE_ENV=production\n````\n- windows:\n````bash\nset NODE_ENV=production\n````\n通过google找到了解决方案：{% link cross-env https://www.npmjs.com/package/cross-env  %}\n### 使用方法\n\n- 安装cross：`npm install cross-env --save-dev`\n- 在`NODE_ENV=xxx`前面加上`cross-env`\n\n这样就OK了。\n\n\n","source":"_posts/cross-env.md","raw":"title: 跨平台设置NODE_ENV\ndate: 2017-06-28 13:53:51\ntags:\n- 技术细节 cross-dev\ncategories:\n- nodeJs\n---\n\n## 使用cross-env解决跨平台设置NODE_ENV\n今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 `npm start`，报如下错误：\n<!--more-->\n````bash\nNODE_ENV=development webpack  --progress\n'NODE_ENV' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n\npm-cli.js\" \"run\" \"dev\"\nnpm ERR! node v6.10.3\nnpm ERR! npm  v3.4.0\nnpm ERR! code ELIFECYCLE\nnpm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack@1.0.0 dev script 'NODE_ENV=development webpack  --progress'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the webpack package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     NODE_ENV=development webpack  --progress\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls webpack\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\learn\\webpack2\\npm-debug.log\n````\n意思是说，windows不支持通过 `NODE_ENV`的来设置环境变量（默认为`development`）。\nwebpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。\n\n### 解决方法\n后来网上查了查知道不同系统通过`NODE_ENV`设置环境变量命令是不同的。\n- linux && mac:\n````bash\nNODE_ENV=production\n````\n- windows:\n````bash\nset NODE_ENV=production\n````\n通过google找到了解决方案：{% link cross-env https://www.npmjs.com/package/cross-env  %}\n### 使用方法\n\n- 安装cross：`npm install cross-env --save-dev`\n- 在`NODE_ENV=xxx`前面加上`cross-env`\n\n这样就OK了。\n\n\n","slug":"cross-env","published":1,"updated":"2019-04-30T06:04:29.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdro00004whshsw7zn0f","content":"<h2 id=\"使用cross-env解决跨平台设置NODE-ENV\"><a href=\"#使用cross-env解决跨平台设置NODE-ENV\" class=\"headerlink\" title=\"使用cross-env解决跨平台设置NODE_ENV\"></a>使用cross-env解决跨平台设置NODE_ENV</h2><p>今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 <code>npm start</code>，报如下错误：<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=development webpack  --progress</span><br><span class=\"line\"><span class=\"string\">'NODE_ENV'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class=\"line\">或批处理文件。</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv <span class=\"string\">\"C:\\\\Program Files\\\\nodejs\\\\node.exe\"</span> <span class=\"string\">\"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n</span><br><span class=\"line\">pm-cli.js\"</span> <span class=\"string\">\"run\"</span> <span class=\"string\">\"dev\"</span></span><br><span class=\"line\">npm ERR! node v6.10.3</span><br><span class=\"line\">npm ERR! npm  v3.4.0</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack@1.0.0 dev script <span class=\"string\">'NODE_ENV=development webpack  --progress'</span>.</span><br><span class=\"line\">npm ERR! Make sure you have the latest version of node.js and npm installed.</span><br><span class=\"line\">npm ERR! If you <span class=\"keyword\">do</span>, this is most likely a problem with the webpack package,</span><br><span class=\"line\">npm ERR! not with npm itself.</span><br><span class=\"line\">npm ERR! Tell the author that this fails on your system:</span><br><span class=\"line\">npm ERR!     NODE_ENV=development webpack  --progress</span><br><span class=\"line\">npm ERR! You can get their info via:</span><br><span class=\"line\">npm ERR!     npm owner ls webpack</span><br><span class=\"line\">npm ERR! There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     D:\\learn\\webpack2\\npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>意思是说，windows不支持通过 <code>NODE_ENV</code>的来设置环境变量（默认为<code>development</code>）。<br>webpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>后来网上查了查知道不同系统通过<code>NODE_ENV</code>设置环境变量命令是不同的。</p>\n<ul>\n<li><p>linux &amp;&amp; mac:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过google找到了解决方案：<a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"external\">cross-env</a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li>安装cross：<code>npm install cross-env --save-dev</code></li>\n<li>在<code>NODE_ENV=xxx</code>前面加上<code>cross-env</code></li>\n</ul>\n<p>这样就OK了。</p>\n","excerpt":"<h2 id=\"使用cross-env解决跨平台设置NODE-ENV\"><a href=\"#使用cross-env解决跨平台设置NODE-ENV\" class=\"headerlink\" title=\"使用cross-env解决跨平台设置NODE_ENV\"></a>使用cross-env解决跨平台设置NODE_ENV</h2><p>今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 <code>npm start</code>，报如下错误：<br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=development webpack  --progress</span><br><span class=\"line\"><span class=\"string\">'NODE_ENV'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class=\"line\">或批处理文件。</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv <span class=\"string\">\"C:\\\\Program Files\\\\nodejs\\\\node.exe\"</span> <span class=\"string\">\"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n</span><br><span class=\"line\">pm-cli.js\"</span> <span class=\"string\">\"run\"</span> <span class=\"string\">\"dev\"</span></span><br><span class=\"line\">npm ERR! node v6.10.3</span><br><span class=\"line\">npm ERR! npm  v3.4.0</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack@1.0.0 dev script <span class=\"string\">'NODE_ENV=development webpack  --progress'</span>.</span><br><span class=\"line\">npm ERR! Make sure you have the latest version of node.js and npm installed.</span><br><span class=\"line\">npm ERR! If you <span class=\"keyword\">do</span>, this is most likely a problem with the webpack package,</span><br><span class=\"line\">npm ERR! not with npm itself.</span><br><span class=\"line\">npm ERR! Tell the author that this fails on your system:</span><br><span class=\"line\">npm ERR!     NODE_ENV=development webpack  --progress</span><br><span class=\"line\">npm ERR! You can get their info via:</span><br><span class=\"line\">npm ERR!     npm owner ls webpack</span><br><span class=\"line\">npm ERR! There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     D:\\learn\\webpack2\\npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>意思是说，windows不支持通过 <code>NODE_ENV</code>的来设置环境变量（默认为<code>development</code>）。<br>webpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>后来网上查了查知道不同系统通过<code>NODE_ENV</code>设置环境变量命令是不同的。</p>\n<ul>\n<li><p>linux &amp;&amp; mac:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过google找到了解决方案：<a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li>安装cross：<code>npm install cross-env --save-dev</code></li>\n<li>在<code>NODE_ENV=xxx</code>前面加上<code>cross-env</code></li>\n</ul>\n<p>这样就OK了。</p>"},{"title":"css基础积累之 attr-content","date":"2017-08-11T08:42:28.000Z","_content":"\nCss越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入`content`。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。\n\n\n<!--more-->\n\n1. 为了优雅，我们再html中加入`data-tips`属性\n2. 使用`attr`获取`data-tips`内容，并放入`content`中\n3. 使用`white-space: pre`解决空格问题\n4. 使用`Unicode `码解决换行问题\n\n\n[实例](../demo/css-attr-content.html)\n","source":"_posts/css-attr-content.md","raw":"title: css基础积累之 attr-content\ndate: 2017-08-11 16:42:28\ntags:\n- Css 积累\ncategories:\n- Css\n---\n\nCss越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入`content`。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。\n\n\n<!--more-->\n\n1. 为了优雅，我们再html中加入`data-tips`属性\n2. 使用`attr`获取`data-tips`内容，并放入`content`中\n3. 使用`white-space: pre`解决空格问题\n4. 使用`Unicode `码解决换行问题\n\n\n[实例](../demo/css-attr-content.html)\n","slug":"css-attr-content","published":1,"updated":"2019-04-30T06:04:29.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdrt00024whsalhxtxci","content":"<p>Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入<code>content</code>。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。</p>\n<a id=\"more\"></a>\n<ol>\n<li>为了优雅，我们再html中加入<code>data-tips</code>属性</li>\n<li>使用<code>attr</code>获取<code>data-tips</code>内容，并放入<code>content</code>中</li>\n<li>使用<code>white-space: pre</code>解决空格问题</li>\n<li>使用<code>Unicode</code>码解决换行问题</li>\n</ol>\n<p><a href=\"../demo/css-attr-content.html\">实例</a></p>\n","excerpt":"<p>Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入<code>content</code>。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。</p>","more":"<ol>\n<li>为了优雅，我们再html中加入<code>data-tips</code>属性</li>\n<li>使用<code>attr</code>获取<code>data-tips</code>内容，并放入<code>content</code>中</li>\n<li>使用<code>white-space: pre</code>解决空格问题</li>\n<li>使用<code>Unicode</code>码解决换行问题</li>\n</ol>\n<p><a href=\"../demo/css-attr-content.html\">实例</a></p>"},{"title":"Eslint 小结","date":"2017-08-04T07:28:56.000Z","_content":"\n一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。\n<!-- more -->\n## 什么是Eslint\nESLint最初是由[Nicholas C. Zakas](https://www.nczonline.net/)于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。\n### Eslint的优势\n- 可以自定义规则\n- 规则可以配置成off、warn、error三种状态\n- 支持插件扩展\n\n\n## 如何使用\n首先得安装\n````bash\nnpm install -g eslint\n````\n\n使用：\n````bash\neslint file1.js file2.js\n````\n\n有两种主要的方式来配置ESlint：\n- 在JavaScript中添加注释格式的配置信息\n- 使用 `.eslintrc` 文件或者在 `package.json` 添加配置\n\nPS:  `.eslintrc` 放在根目录，则会应用到整个项目；如果子目录也包含 `.eslintrc` 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。\n\n## 配置规则\n\n- env：定义JS的使用环境。譬如：`browser `表示在浏览器中使用；`node `表示在node中使用；`commonjs `表示使用了CommonJS模块规范;`es6 `表示支持es6特性;`amd`表示使用`require()`以及`define()`;\n- globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 `WeixinJSBridge`,但是我们不可能在文件中定义 `WeixinJSBridge`，所以这种情况下只需要定义在globals里。\n- plugins： 使用第三方插件。\n- rules： 核心部分。具体哪些可以配置可查看[官网说明](http://eslint.org/docs/rules/)ESlint的规则定义\n    - \"off\" 或 0 - 关闭规则\n    - \"warn\" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n    - \"error\" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 `eslint -f html --ext .js File -o ./test.html` 就导出html格式的File文件夹内所有.js结尾的文件的报告。\n","source":"_posts/eslint.md","raw":"title: Eslint 小结\ndate: 2017-08-04 15:28:56\ntags:\n- JavaScript\n- JS工具\n---\n\n一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。\n<!-- more -->\n## 什么是Eslint\nESLint最初是由[Nicholas C. Zakas](https://www.nczonline.net/)于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。\n### Eslint的优势\n- 可以自定义规则\n- 规则可以配置成off、warn、error三种状态\n- 支持插件扩展\n\n\n## 如何使用\n首先得安装\n````bash\nnpm install -g eslint\n````\n\n使用：\n````bash\neslint file1.js file2.js\n````\n\n有两种主要的方式来配置ESlint：\n- 在JavaScript中添加注释格式的配置信息\n- 使用 `.eslintrc` 文件或者在 `package.json` 添加配置\n\nPS:  `.eslintrc` 放在根目录，则会应用到整个项目；如果子目录也包含 `.eslintrc` 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。\n\n## 配置规则\n\n- env：定义JS的使用环境。譬如：`browser `表示在浏览器中使用；`node `表示在node中使用；`commonjs `表示使用了CommonJS模块规范;`es6 `表示支持es6特性;`amd`表示使用`require()`以及`define()`;\n- globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 `WeixinJSBridge`,但是我们不可能在文件中定义 `WeixinJSBridge`，所以这种情况下只需要定义在globals里。\n- plugins： 使用第三方插件。\n- rules： 核心部分。具体哪些可以配置可查看[官网说明](http://eslint.org/docs/rules/)ESlint的规则定义\n    - \"off\" 或 0 - 关闭规则\n    - \"warn\" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n    - \"error\" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 `eslint -f html --ext .js File -o ./test.html` 就导出html格式的File文件夹内所有.js结尾的文件的报告。\n","slug":"eslint","published":1,"updated":"2019-04-30T06:04:29.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdrx00064whsdivwnls9","content":"<p>一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是Eslint\"><a href=\"#什么是Eslint\" class=\"headerlink\" title=\"什么是Eslint\"></a>什么是Eslint</h2><p>ESLint最初是由<a href=\"https://www.nczonline.net/\" target=\"_blank\" rel=\"external\">Nicholas C. Zakas</a>于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>\n<h3 id=\"Eslint的优势\"><a href=\"#Eslint的优势\" class=\"headerlink\" title=\"Eslint的优势\"></a>Eslint的优势</h3><ul>\n<li>可以自定义规则</li>\n<li>规则可以配置成off、warn、error三种状态</li>\n<li>支持插件扩展</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>首先得安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g eslint</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint file1.js file2.js</span><br></pre></td></tr></table></figure></p>\n<p>有两种主要的方式来配置ESlint：</p>\n<ul>\n<li>在JavaScript中添加注释格式的配置信息</li>\n<li>使用 <code>.eslintrc</code> 文件或者在 <code>package.json</code> 添加配置</li>\n</ul>\n<p>PS:  <code>.eslintrc</code> 放在根目录，则会应用到整个项目；如果子目录也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。</p>\n<h2 id=\"配置规则\"><a href=\"#配置规则\" class=\"headerlink\" title=\"配置规则\"></a>配置规则</h2><ul>\n<li>env：定义JS的使用环境。譬如：<code>browser</code>表示在浏览器中使用；<code>node</code>表示在node中使用；<code>commonjs</code>表示使用了CommonJS模块规范;<code>es6</code>表示支持es6特性;<code>amd</code>表示使用<code>require()</code>以及<code>define()</code>;</li>\n<li>globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 <code>WeixinJSBridge</code>,但是我们不可能在文件中定义 <code>WeixinJSBridge</code>，所以这种情况下只需要定义在globals里。</li>\n<li>plugins： 使用第三方插件。</li>\n<li>rules： 核心部分。具体哪些可以配置可查看<a href=\"http://eslint.org/docs/rules/\" target=\"_blank\" rel=\"external\">官网说明</a>ESlint的规则定义<ul>\n<li>“off” 或 0 - 关闭规则</li>\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\n</ul>\n</li>\n</ul>\n<p>市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 <code>eslint -f html --ext .js File -o ./test.html</code> 就导出html格式的File文件夹内所有.js结尾的文件的报告。</p>\n","excerpt":"<p>一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。<br>","more":"</p>\n<h2 id=\"什么是Eslint\"><a href=\"#什么是Eslint\" class=\"headerlink\" title=\"什么是Eslint\"></a>什么是Eslint</h2><p>ESLint最初是由<a href=\"https://www.nczonline.net/\">Nicholas C. Zakas</a>于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>\n<h3 id=\"Eslint的优势\"><a href=\"#Eslint的优势\" class=\"headerlink\" title=\"Eslint的优势\"></a>Eslint的优势</h3><ul>\n<li>可以自定义规则</li>\n<li>规则可以配置成off、warn、error三种状态</li>\n<li>支持插件扩展</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>首先得安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g eslint</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint file1.js file2.js</span><br></pre></td></tr></table></figure></p>\n<p>有两种主要的方式来配置ESlint：</p>\n<ul>\n<li>在JavaScript中添加注释格式的配置信息</li>\n<li>使用 <code>.eslintrc</code> 文件或者在 <code>package.json</code> 添加配置</li>\n</ul>\n<p>PS:  <code>.eslintrc</code> 放在根目录，则会应用到整个项目；如果子目录也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。</p>\n<h2 id=\"配置规则\"><a href=\"#配置规则\" class=\"headerlink\" title=\"配置规则\"></a>配置规则</h2><ul>\n<li>env：定义JS的使用环境。譬如：<code>browser</code>表示在浏览器中使用；<code>node</code>表示在node中使用；<code>commonjs</code>表示使用了CommonJS模块规范;<code>es6</code>表示支持es6特性;<code>amd</code>表示使用<code>require()</code>以及<code>define()</code>;</li>\n<li>globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 <code>WeixinJSBridge</code>,但是我们不可能在文件中定义 <code>WeixinJSBridge</code>，所以这种情况下只需要定义在globals里。</li>\n<li>plugins： 使用第三方插件。</li>\n<li>rules： 核心部分。具体哪些可以配置可查看<a href=\"http://eslint.org/docs/rules/\">官网说明</a>ESlint的规则定义<ul>\n<li>“off” 或 0 - 关闭规则</li>\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\n</ul>\n</li>\n</ul>\n<p>市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 <code>eslint -f html --ext .js File -o ./test.html</code> 就导出html格式的File文件夹内所有.js结尾的文件的报告。</p>"},{"title":"hexo博客相关命令","date":"2016-02-07T14:44:12.000Z","_content":"\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","source":"_posts/hello-world.md","raw":"title: hexo博客相关命令\ndate: 2016-02-07 22:44:12\npermalink: hexo\ntags:\n- hexo\ncategories:\n- hexo\n---\n\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","slug":"hexo","published":1,"updated":"2019-04-30T06:04:29.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdry00074whs698ucbu3","content":"<p>hexo相关笔记<br><a id=\"more\"></a></p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\" target=\"_blank\" rel=\"external\">http://sfau.lt/b5lc0k</a></p>\n","excerpt":"<p>hexo相关笔记<br>","more":"</p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\">http://sfau.lt/b5lc0k</a></p>"},{"title":"css3-transition","date":"2017-11-06T09:29:25.000Z","_content":"{% blockquote W3C https://www.w3.org/TR/css3-transitions/ css3-transitions %}\nCSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。\n<!--more-->\n## Transition\n````\n    transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n    /* 实际用法*/\n    /*缩写方式：*/\n    -webkit-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*chrome2.0x+ safari3.1+*/\n    -moz-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*Firefox 4 */\n    -o-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*opera 10.5+ */\n    /*IE9不支持，所以-ms-就没了 */\n    transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*W3C */\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    transition-property:border-color, background-color, color;\n    transition-duration:.5s, .5s, .5s;\n    transition-timing-function:ease-in, ease-in, ease-in;\n    transition-delay:.1s, .1s, .1s;\n````\n\nTransitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transitions取值\n- [ transition-property ]：设置对象中的参与过渡的属性\n- [ transition-duration ]：设置对象过渡的持续时间\n- [ transition-timing-function ]：设置对象中过渡的动画类型\n- [ transition-delay ]：设置对象延迟过渡的时间\n\n### 参与过渡的属性\n\ntransition-property是用来指定元素需要过渡的css属性。语法如下：\n````\n    transition-property：all | none | <property>[ ,<property> ]*\n````\n#### transition-property取值\n- all：所有可以进行过渡的css属性\n- none：不指定过渡的css属性\n- <property>：指定要进行过渡的css属性\n\n当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性{% link 点击查看 https://www.w3.org/TR/css3-animations/  %} \n\n### 过渡持续时间\ntransition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：\n````\n    transition-duration：<time>[ ,<time> ]*\n````\n\n### 过渡的变化速率\ntransition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：\n````\n    transition-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)[ ,linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n所有过渡效果都涉及到一个：贝塞尔曲线 的东西{% link 点击 https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A  %}了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：\n1. ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).\n2. linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). \n3. ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).\n4. ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).\n5. ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).\n6. cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.\n\n 贝塞尔曲线，如下图\n\n {% img [贝塞尔曲线（cubic-bezier曲线）] http://om64pi295.bkt.clouddn.com/TimingFunction.png %}\n\n 图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。\n\n 所以所有值需在[0, 1]区域内，否则无效。`cubic-bezier(x1, y1, x2, y2)` 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。\n\n ### 过渡的延迟执行时间\ntransition-delay是用来指定一个过渡延迟执行的时间。语法如下：\n````\n    transition-delay：<time>[ ,<time> ]*\n````\n## Transitions实现的简单hover按钮\nasda\n<style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;\n}</style>\n<figure>\n<div id=\"demo\">\n    <a class=\"button\" href=\"\">Transitions按钮</a>\n</div>\n</figure>","source":"_posts/css3-transition.md","raw":"title: css3-transition\ndate: 2017-11-06 17:29:25\ntags:\n---\n{% blockquote W3C https://www.w3.org/TR/css3-transitions/ css3-transitions %}\nCSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。\n<!--more-->\n## Transition\n````\n    transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n    /* 实际用法*/\n    /*缩写方式：*/\n    -webkit-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*chrome2.0x+ safari3.1+*/\n    -moz-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*Firefox 4 */\n    -o-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*opera 10.5+ */\n    /*IE9不支持，所以-ms-就没了 */\n    transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*W3C */\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    transition-property:border-color, background-color, color;\n    transition-duration:.5s, .5s, .5s;\n    transition-timing-function:ease-in, ease-in, ease-in;\n    transition-delay:.1s, .1s, .1s;\n````\n\nTransitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transitions取值\n- [ transition-property ]：设置对象中的参与过渡的属性\n- [ transition-duration ]：设置对象过渡的持续时间\n- [ transition-timing-function ]：设置对象中过渡的动画类型\n- [ transition-delay ]：设置对象延迟过渡的时间\n\n### 参与过渡的属性\n\ntransition-property是用来指定元素需要过渡的css属性。语法如下：\n````\n    transition-property：all | none | <property>[ ,<property> ]*\n````\n#### transition-property取值\n- all：所有可以进行过渡的css属性\n- none：不指定过渡的css属性\n- <property>：指定要进行过渡的css属性\n\n当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性{% link 点击查看 https://www.w3.org/TR/css3-animations/  %} \n\n### 过渡持续时间\ntransition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：\n````\n    transition-duration：<time>[ ,<time> ]*\n````\n\n### 过渡的变化速率\ntransition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：\n````\n    transition-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)[ ,linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n所有过渡效果都涉及到一个：贝塞尔曲线 的东西{% link 点击 https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A  %}了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：\n1. ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).\n2. linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). \n3. ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).\n4. ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).\n5. ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).\n6. cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.\n\n 贝塞尔曲线，如下图\n\n {% img [贝塞尔曲线（cubic-bezier曲线）] http://om64pi295.bkt.clouddn.com/TimingFunction.png %}\n\n 图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。\n\n 所以所有值需在[0, 1]区域内，否则无效。`cubic-bezier(x1, y1, x2, y2)` 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。\n\n ### 过渡的延迟执行时间\ntransition-delay是用来指定一个过渡延迟执行的时间。语法如下：\n````\n    transition-delay：<time>[ ,<time> ]*\n````\n## Transitions实现的简单hover按钮\nasda\n<style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;\n}</style>\n<figure>\n<div id=\"demo\">\n    <a class=\"button\" href=\"\">Transitions按钮</a>\n</div>\n</figure>","slug":"css3-transition","published":1,"updated":"2019-04-30T06:04:29.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds000094whsnntv9y4x","content":"<blockquote><p>CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-transitions/\" target=\"_blank\" rel=\"external\">css3-transitions</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。<br><a id=\"more\"></a></p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-<span class=\"built_in\">delay</span> ]</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\">-webkit-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*chrome2.0x+ safari3.1+*/</span></span><br><span class=\"line\">-moz-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*Firefox 4 */</span></span><br><span class=\"line\">-o-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*opera 10.5+ */</span></span><br><span class=\"line\"><span class=\"comment\">/*IE9不支持，所以-ms-就没了 */</span></span><br><span class=\"line\">transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*W3C */</span></span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\">transition-property:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">color</span>;</span><br><span class=\"line\">transition-duration:.5s, .5s, .5s;</span><br><span class=\"line\">transition-timing-function:ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>;</span><br><span class=\"line\">transition-<span class=\"built_in\">delay</span>:.1s, .1s, .1s;</span><br></pre></td></tr></table></figure>\n<p>Transitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transitions取值\"><a href=\"#Transitions取值\" class=\"headerlink\" title=\"Transitions取值\"></a>Transitions取值</h3><ul>\n<li>[ transition-property ]：设置对象中的参与过渡的属性</li>\n<li>[ transition-duration ]：设置对象过渡的持续时间</li>\n<li>[ transition-timing-function ]：设置对象中过渡的动画类型</li>\n<li>[ transition-delay ]：设置对象延迟过渡的时间</li>\n</ul>\n<h3 id=\"参与过渡的属性\"><a href=\"#参与过渡的属性\" class=\"headerlink\" title=\"参与过渡的属性\"></a>参与过渡的属性</h3><p>transition-property是用来指定元素需要过渡的css属性。语法如下：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-property：<span class=\"literal\">all</span> | <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;property&gt;</span>[ ,<span class=\"variable\">&lt;property&gt;</span> ]*</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"transition-property取值\"><a href=\"#transition-property取值\" class=\"headerlink\" title=\"transition-property取值\"></a>transition-property取值</h4><ul>\n<li>all：所有可以进行过渡的css属性</li>\n<li>none：不指定过渡的css属性</li>\n<li><property>：指定要进行过渡的css属性</property></li>\n</ul>\n<p>当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性<a href=\"https://www.w3.org/TR/css3-animations/\" target=\"_blank\" rel=\"external\">点击查看</a> </p>\n<h3 id=\"过渡持续时间\"><a href=\"#过渡持续时间\" class=\"headerlink\" title=\"过渡持续时间\"></a>过渡持续时间</h3><p>transition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-duration：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"过渡的变化速率\"><a href=\"#过渡的变化速率\" class=\"headerlink\" title=\"过渡的变化速率\"></a>过渡的变化速率</h3><p>transition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;)[ ,linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<p>所有过渡效果都涉及到一个：贝塞尔曲线 的东西<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"external\">点击</a>了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：</p>\n<ol>\n<li>ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).</li>\n<li>linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). </li>\n<li>ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).</li>\n<li>ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).</li>\n<li>ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).</li>\n<li><p>cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.</p>\n<p>贝塞尔曲线，如下图</p>\n<img src=\"http://om64pi295.bkt.clouddn.com/TimingFunction.png\" class=\"[贝塞尔曲线（cubic-bezier曲线）]\">\n<p>图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。</p>\n<p>所以所有值需在[0, 1]区域内，否则无效。<code>cubic-bezier(x1, y1, x2, y2)</code> 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。</p>\n<h3 id=\"过渡的延迟执行时间\"><a href=\"#过渡的延迟执行时间\" class=\"headerlink\" title=\"过渡的延迟执行时间\"></a>过渡的延迟执行时间</h3><p>transition-delay是用来指定一个过渡延迟执行的时间。语法如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Transitions实现的简单hover按钮\"><a href=\"#Transitions实现的简单hover按钮\" class=\"headerlink\" title=\"Transitions实现的简单hover按钮\"></a>Transitions实现的简单hover按钮</h2><p>asda</p>\n<p><style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;<br>}</style></p>\n<figure><br><div id=\"demo\"><br>    <a class=\"button\" href=\"\">Transitions按钮</a><br></div><br></figure>","excerpt":"<blockquote><p>CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-transitions/\">css3-transitions</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。<br>","more":"</p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-<span class=\"built_in\">delay</span> ]</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\">-webkit-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*chrome2.0x+ safari3.1+*/</span></span><br><span class=\"line\">-moz-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*Firefox 4 */</span></span><br><span class=\"line\">-o-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*opera 10.5+ */</span></span><br><span class=\"line\"><span class=\"comment\">/*IE9不支持，所以-ms-就没了 */</span></span><br><span class=\"line\">transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*W3C */</span></span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\">transition-property:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">color</span>;</span><br><span class=\"line\">transition-duration:.5s, .5s, .5s;</span><br><span class=\"line\">transition-timing-function:ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>;</span><br><span class=\"line\">transition-<span class=\"built_in\">delay</span>:.1s, .1s, .1s;</span><br></pre></td></tr></table></figure>\n<p>Transitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transitions取值\"><a href=\"#Transitions取值\" class=\"headerlink\" title=\"Transitions取值\"></a>Transitions取值</h3><ul>\n<li>[ transition-property ]：设置对象中的参与过渡的属性</li>\n<li>[ transition-duration ]：设置对象过渡的持续时间</li>\n<li>[ transition-timing-function ]：设置对象中过渡的动画类型</li>\n<li>[ transition-delay ]：设置对象延迟过渡的时间</li>\n</ul>\n<h3 id=\"参与过渡的属性\"><a href=\"#参与过渡的属性\" class=\"headerlink\" title=\"参与过渡的属性\"></a>参与过渡的属性</h3><p>transition-property是用来指定元素需要过渡的css属性。语法如下：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-property：<span class=\"literal\">all</span> | <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;property&gt;</span>[ ,<span class=\"variable\">&lt;property&gt;</span> ]*</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"transition-property取值\"><a href=\"#transition-property取值\" class=\"headerlink\" title=\"transition-property取值\"></a>transition-property取值</h4><ul>\n<li>all：所有可以进行过渡的css属性</li>\n<li>none：不指定过渡的css属性</li>\n<li><property>：指定要进行过渡的css属性</li>\n</ul>\n<p>当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性<a href=\"https://www.w3.org/TR/css3-animations/\">点击查看</a> </p>\n<h3 id=\"过渡持续时间\"><a href=\"#过渡持续时间\" class=\"headerlink\" title=\"过渡持续时间\"></a>过渡持续时间</h3><p>transition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-duration：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"过渡的变化速率\"><a href=\"#过渡的变化速率\" class=\"headerlink\" title=\"过渡的变化速率\"></a>过渡的变化速率</h3><p>transition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;)[ ,linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<p>所有过渡效果都涉及到一个：贝塞尔曲线 的东西<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\">点击</a>了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：</p>\n<ol>\n<li>ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).</li>\n<li>linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). </li>\n<li>ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).</li>\n<li>ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).</li>\n<li>ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).</li>\n<li><p>cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.</p>\n<p>贝塞尔曲线，如下图</p>\n<img src=\"http://om64pi295.bkt.clouddn.com/TimingFunction.png\" class=\"[贝塞尔曲线（cubic-bezier曲线）]\">\n<p>图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。</p>\n<p>所以所有值需在[0, 1]区域内，否则无效。<code>cubic-bezier(x1, y1, x2, y2)</code> 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。</p>\n<h3 id=\"过渡的延迟执行时间\"><a href=\"#过渡的延迟执行时间\" class=\"headerlink\" title=\"过渡的延迟执行时间\"></a>过渡的延迟执行时间</h3><p>transition-delay是用来指定一个过渡延迟执行的时间。语法如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Transitions实现的简单hover按钮\"><a href=\"#Transitions实现的简单hover按钮\" class=\"headerlink\" title=\"Transitions实现的简单hover按钮\"></a>Transitions实现的简单hover按钮</h2><p>asda</p>\n<p><style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;<br>}</style></p>\n<figure><br><div id=\"demo\"><br>    <a class=\"button\" href=\"\">Transitions按钮</a><br></div><br></figure>"},{"title":"css3-transfrom","date":"2017-11-07T02:42:59.000Z","_content":"\n\n{% blockquote W3C https://www.w3.org/TR/css-transforms-1/ css-transforms %}\nCSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. \n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。\n<!--more-->\n## Transition\n````\ntransform：none | matrix(<number>,<number>,<number>,<number>,<number>,<number>)? translate(<length>[,<length>])? translateX(<length>)? translateY(<length>)? rotate(<angle>)? scale(<number>[,<number>])? scaleX(<number>)? scaleY(<number>)? skew(<angle>[,<angle>])? skewX(<<angle>) || skewY(<angle>)?\n````\n````css\n    /* 实际用法*/\n    -webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+\n    -moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+\n    -o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+\n    -ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+\n    transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准\n````\n\nTransform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transfrom（变形）取值\n\n- translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- translateX(<length>)：指定对象X轴（水平方向）的平移 \n- translateY(<length>)：指定对象Y轴（垂直方向）的平移\n- rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center\n- scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n- scaleX(<number>)：指定对象X轴的（水平方向）缩放\n- scaleY(<number>)：指定对象Y轴的（垂直方向）缩放\n- skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- skewX(<angle>)：指定对象X轴的（水平方向）扭曲\n- skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 \n- matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\n\n直接看DEMO，加深印象\n\n\n<div class=\"transfrom\">\n<ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n### transform-origin（改变元素基点）\n\n````\ntransform-origin：[ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ]?\n/* 实际用法*/\n-webkit-transform-origin:top left;//chrome1.0x+ safari3.1+\n-moz-transform-origin:top left;//firefox3.5+\n-o-transform-origin:top left;//opera 10.5+\n-ms-transform-origin:top left;//IE9+\n-transform-origin:top left;//W3C标准\n````\n\n- <percentage>：用百分比指定坐标值。可以为负值。\n- <length>：用长度值指定坐标值。可以为负值。\n- left：指定原点的横坐标为left\n- center：指定原点的横坐标为center\n- right：指定原点的横坐标为right\n- top：指定原点的纵坐标为top\n- center：指定原点的纵坐标为center \n- bottom：指定原点的纵坐标为bottom \n\nleft,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/css3-transfrom.md","raw":"title: css3-transfrom\ndate: 2017-11-07 10:42:59\ntags:\n---\n\n\n{% blockquote W3C https://www.w3.org/TR/css-transforms-1/ css-transforms %}\nCSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. \n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。\n<!--more-->\n## Transition\n````\ntransform：none | matrix(<number>,<number>,<number>,<number>,<number>,<number>)? translate(<length>[,<length>])? translateX(<length>)? translateY(<length>)? rotate(<angle>)? scale(<number>[,<number>])? scaleX(<number>)? scaleY(<number>)? skew(<angle>[,<angle>])? skewX(<<angle>) || skewY(<angle>)?\n````\n````css\n    /* 实际用法*/\n    -webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+\n    -moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+\n    -o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+\n    -ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+\n    transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准\n````\n\nTransform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transfrom（变形）取值\n\n- translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- translateX(<length>)：指定对象X轴（水平方向）的平移 \n- translateY(<length>)：指定对象Y轴（垂直方向）的平移\n- rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center\n- scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n- scaleX(<number>)：指定对象X轴的（水平方向）缩放\n- scaleY(<number>)：指定对象Y轴的（垂直方向）缩放\n- skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- skewX(<angle>)：指定对象X轴的（水平方向）扭曲\n- skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 \n- matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\n\n直接看DEMO，加深印象\n\n\n<div class=\"transfrom\">\n<ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n### transform-origin（改变元素基点）\n\n````\ntransform-origin：[ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ]?\n/* 实际用法*/\n-webkit-transform-origin:top left;//chrome1.0x+ safari3.1+\n-moz-transform-origin:top left;//firefox3.5+\n-o-transform-origin:top left;//opera 10.5+\n-ms-transform-origin:top left;//IE9+\n-transform-origin:top left;//W3C标准\n````\n\n- <percentage>：用百分比指定坐标值。可以为负值。\n- <length>：用长度值指定坐标值。可以为负值。\n- left：指定原点的横坐标为left\n- center：指定原点的横坐标为center\n- right：指定原点的横坐标为right\n- top：指定原点的纵坐标为top\n- center：指定原点的纵坐标为center \n- bottom：指定原点的纵坐标为bottom \n\nleft,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"css3-transfrom","published":1,"updated":"2019-04-30T06:04:29.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds2000c4whszii0ja2j","content":"<blockquote><p>CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. </p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css-transforms-1/\" target=\"_blank\" rel=\"external\">css-transforms</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。<br><a id=\"more\"></a></p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform：<span class=\"keyword\">none</span> | matrix(<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>)? translate(<span class=\"variable\">&lt;length&gt;</span>[,<span class=\"variable\">&lt;length&gt;</span>])? translateX(<span class=\"variable\">&lt;length&gt;</span>)? translateY(<span class=\"variable\">&lt;length&gt;</span>)? rotate(<span class=\"variable\">&lt;angle&gt;</span>)? scale(<span class=\"variable\">&lt;number&gt;</span>[,<span class=\"variable\">&lt;number&gt;</span>])? scaleX(<span class=\"variable\">&lt;number&gt;</span>)? scaleY(<span class=\"variable\">&lt;number&gt;</span>)? skew(<span class=\"variable\">&lt;angle&gt;</span>[,<span class=\"variable\">&lt;angle&gt;</span>])? skewX(<span class=\"variable\">&lt;&lt;angle&gt;</span>) || skewY(<span class=\"variable\">&lt;angle&gt;</span>)?</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 实际用法*/</span><br><span class=\"line\">-webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+</span><br><span class=\"line\">-moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+</span><br><span class=\"line\">-o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+</span><br><span class=\"line\">-ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+</span><br><span class=\"line\">transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准</span><br></pre></td></tr></table></figure>\n<p>Transform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transfrom（变形）取值\"><a href=\"#Transfrom（变形）取值\" class=\"headerlink\" title=\"Transfrom（变形）取值\"></a>Transfrom（变形）取值</h3><ul>\n<li>translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</length></length></li>\n<li>translateX(<length>)：指定对象X轴（水平方向）的平移 </length></li>\n<li>translateY(<length>)：指定对象Y轴（垂直方向）的平移</length></li>\n<li>rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center</angle></li>\n<li>scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值</number></number></li>\n<li>scaleX(<number>)：指定对象X轴的（水平方向）缩放</number></li>\n<li>scaleY(<number>)：指定对象Y轴的（垂直方向）缩放</number></li>\n<li>skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</angle></angle></li>\n<li>skewX(<angle>)：指定对象X轴的（水平方向）扭曲</angle></li>\n<li>skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 </angle></li>\n<li>matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵</number></number></number></number></number></number></li>\n</ul>\n<p>直接看DEMO，加深印象</p>\n<div class=\"transfrom\"><br><ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n<h3 id=\"transform-origin（改变元素基点）\"><a href=\"#transform-origin（改变元素基点）\" class=\"headerlink\" title=\"transform-origin（改变元素基点）\"></a>transform-origin（改变元素基点）</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-origin</span>：<span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | left | center | right ]</span> <span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | top | center | bottom ]</span>?</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\">-webkit-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//chrome1.0x+ safari3.1+</span></span><br><span class=\"line\">-moz-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//firefox3.5+</span></span><br><span class=\"line\">-o-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//opera 10.5+</span></span><br><span class=\"line\">-ms-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//IE9+</span></span><br><span class=\"line\">-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//W3C标准</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><percentage>：用百分比指定坐标值。可以为负值。</percentage></li>\n<li><length>：用长度值指定坐标值。可以为负值。</length></li>\n<li>left：指定原点的横坐标为left</li>\n<li>center：指定原点的横坐标为center</li>\n<li>right：指定原点的横坐标为right</li>\n<li>top：指定原点的纵坐标为top</li>\n<li>center：指定原点的纵坐标为center </li>\n<li>bottom：指定原点的纵坐标为bottom </li>\n</ul>\n<p>left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变</p>\n","excerpt":"<blockquote><p>CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. </p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css-transforms-1/\">css-transforms</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。<br>","more":"</p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform：<span class=\"keyword\">none</span> | matrix(<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>)? translate(<span class=\"variable\">&lt;length&gt;</span>[,<span class=\"variable\">&lt;length&gt;</span>])? translateX(<span class=\"variable\">&lt;length&gt;</span>)? translateY(<span class=\"variable\">&lt;length&gt;</span>)? rotate(<span class=\"variable\">&lt;angle&gt;</span>)? scale(<span class=\"variable\">&lt;number&gt;</span>[,<span class=\"variable\">&lt;number&gt;</span>])? scaleX(<span class=\"variable\">&lt;number&gt;</span>)? scaleY(<span class=\"variable\">&lt;number&gt;</span>)? skew(<span class=\"variable\">&lt;angle&gt;</span>[,<span class=\"variable\">&lt;angle&gt;</span>])? skewX(<span class=\"variable\">&lt;&lt;angle&gt;</span>) || skewY(<span class=\"variable\">&lt;angle&gt;</span>)?</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 实际用法*/</span><br><span class=\"line\">-webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+</span><br><span class=\"line\">-moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+</span><br><span class=\"line\">-o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+</span><br><span class=\"line\">-ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+</span><br><span class=\"line\">transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准</span><br></pre></td></tr></table></figure>\n<p>Transform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transfrom（变形）取值\"><a href=\"#Transfrom（变形）取值\" class=\"headerlink\" title=\"Transfrom（变形）取值\"></a>Transfrom（变形）取值</h3><ul>\n<li>translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</li>\n<li>translateX(<length>)：指定对象X轴（水平方向）的平移 </li>\n<li>translateY(<length>)：指定对象Y轴（垂直方向）的平移</li>\n<li>rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center</li>\n<li>scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值</li>\n<li>scaleX(<number>)：指定对象X轴的（水平方向）缩放</li>\n<li>scaleY(<number>)：指定对象Y轴的（垂直方向）缩放</li>\n<li>skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</li>\n<li>skewX(<angle>)：指定对象X轴的（水平方向）扭曲</li>\n<li>skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 </li>\n<li>matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵</li>\n</ul>\n<p>直接看DEMO，加深印象</p>\n<div class=\"transfrom\"><br><ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n<h3 id=\"transform-origin（改变元素基点）\"><a href=\"#transform-origin（改变元素基点）\" class=\"headerlink\" title=\"transform-origin（改变元素基点）\"></a>transform-origin（改变元素基点）</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-origin</span>：<span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | left | center | right ]</span> <span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | top | center | bottom ]</span>?</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\">-webkit-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//chrome1.0x+ safari3.1+</span></span><br><span class=\"line\">-moz-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//firefox3.5+</span></span><br><span class=\"line\">-o-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//opera 10.5+</span></span><br><span class=\"line\">-ms-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//IE9+</span></span><br><span class=\"line\">-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//W3C标准</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><percentage>：用百分比指定坐标值。可以为负值。</li>\n<li><length>：用长度值指定坐标值。可以为负值。</li>\n<li>left：指定原点的横坐标为left</li>\n<li>center：指定原点的横坐标为center</li>\n<li>right：指定原点的横坐标为right</li>\n<li>top：指定原点的纵坐标为top</li>\n<li>center：指定原点的纵坐标为center </li>\n<li>bottom：指定原点的纵坐标为bottom </li>\n</ul>\n<p>left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变</p>"},{"title":"验证身份证号是否正确","date":"2017-07-31T06:22:34.000Z","_content":"\n\n\n在[正则基础深入应用](../javascript-reg-2#匹配身份证号码)中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。\n<!--more-->\n验证方法：\n1. 将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这18位数字和系数相乘的结果相加。\n3. 用加出来的和除以11，得出余数。\n4. 除以11，余数只能是0-10这11个数的一个。\n5. 以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。\n\n根据以上结论，使用JS写相应程序，得出如下代码：\n````js\n/**\n * [checkID 验证身份证号码是否正确]\n * @param  {[String]} strIDCardnumber [必须是字符串，不然会触发大整数精度问题]\n * @return {[Boolean]}                [返回布尔值]\n */\nfunction checkID(strIDCardnumber){\n    var _isIDRule = false,\n        _sum = 0,\n        _strIDCardnumber = strIDCardnumber.toString(),\n        _coefficient = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],\n        _mantissa = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n\n    for (var i = 0; i < 17; i++) {\n        _sum += Number(_strIDCardnumber.substring(i, i + 1)) * _coefficient[i];\n    }\n\n    if (_strIDCardnumber.substring(17) == _mantissa[_sum % 11]) {\n        _isIDRule = true;\n    }\n\n    return _isIDRule;\n}\n````\n\n以上就是验证身份证的程序代码，只要`checkID('430404196710021020')`调用就ok了。\n调用时必须要注意传入的值必须是字符类型，不然大于`2^53`时，就会触发大数字的精度问题。\n","source":"_posts/identity-number.md","raw":"title: 验证身份证号是否正确\ndate: 2017-07-31 14:22:34\ntags: \n- JavaScript\n- JS实际应用\ncategories:\n- JavaScript\n---\n\n\n\n在[正则基础深入应用](../javascript-reg-2#匹配身份证号码)中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。\n<!--more-->\n验证方法：\n1. 将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这18位数字和系数相乘的结果相加。\n3. 用加出来的和除以11，得出余数。\n4. 除以11，余数只能是0-10这11个数的一个。\n5. 以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。\n\n根据以上结论，使用JS写相应程序，得出如下代码：\n````js\n/**\n * [checkID 验证身份证号码是否正确]\n * @param  {[String]} strIDCardnumber [必须是字符串，不然会触发大整数精度问题]\n * @return {[Boolean]}                [返回布尔值]\n */\nfunction checkID(strIDCardnumber){\n    var _isIDRule = false,\n        _sum = 0,\n        _strIDCardnumber = strIDCardnumber.toString(),\n        _coefficient = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],\n        _mantissa = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n\n    for (var i = 0; i < 17; i++) {\n        _sum += Number(_strIDCardnumber.substring(i, i + 1)) * _coefficient[i];\n    }\n\n    if (_strIDCardnumber.substring(17) == _mantissa[_sum % 11]) {\n        _isIDRule = true;\n    }\n\n    return _isIDRule;\n}\n````\n\n以上就是验证身份证的程序代码，只要`checkID('430404196710021020')`调用就ok了。\n调用时必须要注意传入的值必须是字符类型，不然大于`2^53`时，就会触发大数字的精度问题。\n","slug":"identity-number","published":1,"updated":"2019-04-30T06:04:29.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds4000e4whs9f5mfppb","content":"<p>在<a href=\"../javascript-reg-2#匹配身份证号码\">正则基础深入应用</a>中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。<br><a id=\"more\"></a><br>验证方法：</p>\n<ol>\n<li>将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。</li>\n<li>将这18位数字和系数相乘的结果相加。</li>\n<li>用加出来的和除以11，得出余数。</li>\n<li>除以11，余数只能是0-10这11个数的一个。</li>\n<li>以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。</li>\n</ol>\n<p>根据以上结论，使用JS写相应程序，得出如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * [checkID 验证身份证号码是否正确]</span><br><span class=\"line\"> * @param  &#123;[String]&#125; strIDCardnumber [必须是字符串，不然会触发大整数精度问题]</span><br><span class=\"line\"> * @return &#123;[Boolean]&#125;                [返回布尔值]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\">strIDCardnumber</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _isIDRule = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        _sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">        _strIDCardnumber = strIDCardnumber.toString(),</span><br><span class=\"line\">        _coefficient = [<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        _mantissa = [<span class=\"string\">'1'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        _sum += <span class=\"built_in\">Number</span>(_strIDCardnumber.substring(i, i + <span class=\"number\">1</span>)) * _coefficient[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_strIDCardnumber.substring(<span class=\"number\">17</span>) == _mantissa[_sum % <span class=\"number\">11</span>]) &#123;</span><br><span class=\"line\">        _isIDRule = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isIDRule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是验证身份证的程序代码，只要<code>checkID(&#39;430404196710021020&#39;)</code>调用就ok了。<br>调用时必须要注意传入的值必须是字符类型，不然大于<code>2^53</code>时，就会触发大数字的精度问题。</p>\n","excerpt":"<p>在<a href=\"../javascript-reg-2#匹配身份证号码\">正则基础深入应用</a>中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。<br>","more":"<br>验证方法：</p>\n<ol>\n<li>将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。</li>\n<li>将这18位数字和系数相乘的结果相加。</li>\n<li>用加出来的和除以11，得出余数。</li>\n<li>除以11，余数只能是0-10这11个数的一个。</li>\n<li>以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。</li>\n</ol>\n<p>根据以上结论，使用JS写相应程序，得出如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * [checkID 验证身份证号码是否正确]</span><br><span class=\"line\"> * @param  &#123;[String]&#125; strIDCardnumber [必须是字符串，不然会触发大整数精度问题]</span><br><span class=\"line\"> * @return &#123;[Boolean]&#125;                [返回布尔值]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\">strIDCardnumber</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _isIDRule = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        _sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">        _strIDCardnumber = strIDCardnumber.toString(),</span><br><span class=\"line\">        _coefficient = [<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        _mantissa = [<span class=\"string\">'1'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        _sum += <span class=\"built_in\">Number</span>(_strIDCardnumber.substring(i, i + <span class=\"number\">1</span>)) * _coefficient[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_strIDCardnumber.substring(<span class=\"number\">17</span>) == _mantissa[_sum % <span class=\"number\">11</span>]) &#123;</span><br><span class=\"line\">        _isIDRule = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isIDRule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是验证身份证的程序代码，只要<code>checkID(&#39;430404196710021020&#39;)</code>调用就ok了。<br>调用时必须要注意传入的值必须是字符类型，不然大于<code>2^53</code>时，就会触发大数字的精度问题。</p>"},{"title":"javascript-number-range","date":"2018-03-09T03:11:52.000Z","_content":"\nJavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用`Number.MAX_VALUE`和`Number.MIN_VALUE` 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。\n<!--more-->\n\n## JavaScript运算\n在JavaScript里面，数字使用[IEEE 754](https://zh.wikipedia.org/wiki/IEEE_754)中规定的[双精度浮点类型](https://zh.wikipedia.org/wiki/雙精度浮點數)。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用`Number.MIN_SAFE_INTEGER`,`Number.MAX_SAFE_INTEGER`来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码\n````js\n    var num = 9007199254740992;\n    console.log(num + 5); // 9007199254740996\n````\n正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。\n\n\n## JavaScript位运算\nJavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。\n````js\n    var maxSum = Math.pow(2,31);\n    console.log(pow&pow) // -2147483648\n    console.log(pow>>1) // -1073741824\n````\n自己与自己正确应该是还是自己，但是他显示`-2147483648`, `pow>>1` 正确结果应该是跟`pow/2`的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。","source":"_posts/javascript-number-range.md","raw":"title: javascript-number-range\ndate: 2018-03-09 11:11:52\ntags: \n- JavaScript\n- JS实际应用\ncategories:\n- JavaScript\n---\n\nJavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用`Number.MAX_VALUE`和`Number.MIN_VALUE` 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。\n<!--more-->\n\n## JavaScript运算\n在JavaScript里面，数字使用[IEEE 754](https://zh.wikipedia.org/wiki/IEEE_754)中规定的[双精度浮点类型](https://zh.wikipedia.org/wiki/雙精度浮點數)。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用`Number.MIN_SAFE_INTEGER`,`Number.MAX_SAFE_INTEGER`来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码\n````js\n    var num = 9007199254740992;\n    console.log(num + 5); // 9007199254740996\n````\n正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。\n\n\n## JavaScript位运算\nJavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。\n````js\n    var maxSum = Math.pow(2,31);\n    console.log(pow&pow) // -2147483648\n    console.log(pow>>1) // -1073741824\n````\n自己与自己正确应该是还是自己，但是他显示`-2147483648`, `pow>>1` 正确结果应该是跟`pow/2`的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。","slug":"javascript-number-range","published":1,"updated":"2019-04-30T06:04:29.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds6000i4whslrrylvvr","content":"<p>JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code> 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。<br><a id=\"more\"></a></p>\n<h2 id=\"JavaScript运算\"><a href=\"#JavaScript运算\" class=\"headerlink\" title=\"JavaScript运算\"></a>JavaScript运算</h2><p>在JavaScript里面，数字使用<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"external\">IEEE 754</a>中规定的<a href=\"https://zh.wikipedia.org/wiki/雙精度浮點數\" target=\"_blank\" rel=\"external\">双精度浮点类型</a>。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用<code>Number.MIN_SAFE_INTEGER</code>,<code>Number.MAX_SAFE_INTEGER</code>来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9007199254740992</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"number\">5</span>); <span class=\"comment\">// 9007199254740996</span></span><br></pre></td></tr></table></figure></p>\n<p>正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。</p>\n<h2 id=\"JavaScript位运算\"><a href=\"#JavaScript位运算\" class=\"headerlink\" title=\"JavaScript位运算\"></a>JavaScript位运算</h2><p>JavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxSum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&amp;pow) <span class=\"comment\">// -2147483648</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&gt;&gt;<span class=\"number\">1</span>) <span class=\"comment\">// -1073741824</span></span><br></pre></td></tr></table></figure></p>\n<p>自己与自己正确应该是还是自己，但是他显示<code>-2147483648</code>, <code>pow&gt;&gt;1</code> 正确结果应该是跟<code>pow/2</code>的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。</p>\n","excerpt":"<p>JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code> 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。<br>","more":"</p>\n<h2 id=\"JavaScript运算\"><a href=\"#JavaScript运算\" class=\"headerlink\" title=\"JavaScript运算\"></a>JavaScript运算</h2><p>在JavaScript里面，数字使用<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\">IEEE 754</a>中规定的<a href=\"https://zh.wikipedia.org/wiki/雙精度浮點數\">双精度浮点类型</a>。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用<code>Number.MIN_SAFE_INTEGER</code>,<code>Number.MAX_SAFE_INTEGER</code>来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9007199254740992</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"number\">5</span>); <span class=\"comment\">// 9007199254740996</span></span><br></pre></td></tr></table></figure></p>\n<p>正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。</p>\n<h2 id=\"JavaScript位运算\"><a href=\"#JavaScript位运算\" class=\"headerlink\" title=\"JavaScript位运算\"></a>JavaScript位运算</h2><p>JavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxSum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&amp;pow) <span class=\"comment\">// -2147483648</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&gt;&gt;<span class=\"number\">1</span>) <span class=\"comment\">// -1073741824</span></span><br></pre></td></tr></table></figure></p>\n<p>自己与自己正确应该是还是自己，但是他显示<code>-2147483648</code>, <code>pow&gt;&gt;1</code> 正确结果应该是跟<code>pow/2</code>的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。</p>"},{"title":"正则基础深入应用","date":"2017-07-24T06:54:16.000Z","_content":"\n\n本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。\n\n写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。\n\n<!--more-->\n## 密码强度\n\n### 密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\n\n用到了前瞻，如果还不清楚可以移步 [正则基础学习](../javascript-reg-1)\n\n正则一\n````javascript\n(?!^[a-z]+$)(?!^[0-9]+$)(?!^[A-Z]+$)^[a-zA-Z0-9]{6,12}$\n\n````\n\n其中 `(?!)` 这种写法是对后面数据的一种限定，过滤匹配的数据。如 `(?!2)[0-9]` 就是匹配除了2之外的所有数字。\n\n然后，上面那段正则就可以分以下四段分析，因为`(?!)`只是限定条件，不匹配结果，所以前面三个`(?!)`只是三个条件，后面的才是匹配结果：\n* `(?!^[a-z]+$)`: 排除纯小写\n* `(?!^[A-Z]+$)`: 排除纯大写\n* `(?!^[0-9]+$)`: 排除纯数字\n* `^[a-zA-Z0-9]{6,16}$`: 匹配6到12个 [a-zA-Z0-9] 范围中字符\n\n正则二\n````javascript\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{6,12}$\n````\n\n这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以`^` 跟 `$` 位置不同。\n这段正则分以下也三段分析：\n\n* `^(?=.*\\d)[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有数字。\n* `^(?=.*[a-z])[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。\n* `^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$`:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。\n\n\n## 整数部分千分位\n现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，\n互利网中也是如此。\n我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。\n因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。\n\n方法如下：\n````javascript\n99999999999'.replace(/\\d{1,3}(?=(\\d{3})+)/g, '$&,');\n````\n\n* `(\\d{3})+`表示一组及以上3的倍数个数字加小数点\n* 然后用正向肯定查找 `(?=)` 包起来，说明 `(\\d{3})+` 只是一个条件\n* `g` 表示匹配多次直到没匹配到结果\n* `$&` 表示 `\\d{1,3}` 正向查找条件成立时匹配到的结果\n\n所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，`$&`提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足`\\d{1,3}` 后才停止匹配。\n\n* [怎么引用replace匹配到的结果](../javascript-reg-1#字符串替代：) 知识点。\n\n## 匹配身份证号码\n\n正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：\n\n````javascript\n(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])(?:(0[1-9])|[1-6][1-9]|70)(?:(0[1-9])|1[0-8]|[2-9][1-9])(?:(?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)(?:[0-9]{3}[0-9X]);\n````\n\n\n### 正则分析\n#### 前六位地址码\n\n百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：\n{% blockquote %}\n华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，\n东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，\n华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，\n华中地区： 河南省|410000，湖北省|420000，湖南省|430000，\n华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，\n西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，\n西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，\n特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000\n\n第一、二位表示省（自治区、直辖市、特别行政区）。\n第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。\n第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。\n{% endblockquote %}\n\n根据以上规则得出以下地址码正则：\n* 第一二位省码：`(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])`\n* 第三四位市码：`(?:(0[1-9])|[1-6][1-9]|70)`\n* 第五六位县码：`(?:(0[1-9])|1[0-8]|[2-9][1-9])` \n\n#### 中间八位生日期码\n\n中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。\n首先从每个月都有的1-28号开始\n`(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])`\n\n然后除2月之外都有29号跟30号\n`(?:0[13-9]|1[0-2])(?:29|30)`\n\n接着1、3、5、7、8、10、12月有31号\n`(?:0[13578]|1[02])31`\n\n以上日期码前面再加上年 `(19[0-9]{2}|200[0-9]|201[0-7])`，这样子除了闰年的所有日期就都ok了，最后再来写闰年。\n闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位\n`(0[48]|[2468][048]|[13579][26])`\n能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。\n最后我我们用`|`连接起来。\n\n 1900到2017年\n`((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)`\n\n\n#### 最后四位验证码\n有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：\n````javascript\n([0-9]{3}[0-9X])\n````\n\n","source":"_posts/javascript-reg-2.md","raw":"title: 正则基础深入应用\ndate: 2017-07-24 14:54:16\ntags:\n- JavaScript\n- 正则\ncategories:\n- JavaScript\n---\n\n\n本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。\n\n写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。\n\n<!--more-->\n## 密码强度\n\n### 密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\n\n用到了前瞻，如果还不清楚可以移步 [正则基础学习](../javascript-reg-1)\n\n正则一\n````javascript\n(?!^[a-z]+$)(?!^[0-9]+$)(?!^[A-Z]+$)^[a-zA-Z0-9]{6,12}$\n\n````\n\n其中 `(?!)` 这种写法是对后面数据的一种限定，过滤匹配的数据。如 `(?!2)[0-9]` 就是匹配除了2之外的所有数字。\n\n然后，上面那段正则就可以分以下四段分析，因为`(?!)`只是限定条件，不匹配结果，所以前面三个`(?!)`只是三个条件，后面的才是匹配结果：\n* `(?!^[a-z]+$)`: 排除纯小写\n* `(?!^[A-Z]+$)`: 排除纯大写\n* `(?!^[0-9]+$)`: 排除纯数字\n* `^[a-zA-Z0-9]{6,16}$`: 匹配6到12个 [a-zA-Z0-9] 范围中字符\n\n正则二\n````javascript\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{6,12}$\n````\n\n这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以`^` 跟 `$` 位置不同。\n这段正则分以下也三段分析：\n\n* `^(?=.*\\d)[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有数字。\n* `^(?=.*[a-z])[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。\n* `^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$`:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。\n\n\n## 整数部分千分位\n现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，\n互利网中也是如此。\n我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。\n因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。\n\n方法如下：\n````javascript\n99999999999'.replace(/\\d{1,3}(?=(\\d{3})+)/g, '$&,');\n````\n\n* `(\\d{3})+`表示一组及以上3的倍数个数字加小数点\n* 然后用正向肯定查找 `(?=)` 包起来，说明 `(\\d{3})+` 只是一个条件\n* `g` 表示匹配多次直到没匹配到结果\n* `$&` 表示 `\\d{1,3}` 正向查找条件成立时匹配到的结果\n\n所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，`$&`提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足`\\d{1,3}` 后才停止匹配。\n\n* [怎么引用replace匹配到的结果](../javascript-reg-1#字符串替代：) 知识点。\n\n## 匹配身份证号码\n\n正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：\n\n````javascript\n(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])(?:(0[1-9])|[1-6][1-9]|70)(?:(0[1-9])|1[0-8]|[2-9][1-9])(?:(?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)(?:[0-9]{3}[0-9X]);\n````\n\n\n### 正则分析\n#### 前六位地址码\n\n百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：\n{% blockquote %}\n华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，\n东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，\n华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，\n华中地区： 河南省|410000，湖北省|420000，湖南省|430000，\n华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，\n西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，\n西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，\n特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000\n\n第一、二位表示省（自治区、直辖市、特别行政区）。\n第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。\n第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。\n{% endblockquote %}\n\n根据以上规则得出以下地址码正则：\n* 第一二位省码：`(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])`\n* 第三四位市码：`(?:(0[1-9])|[1-6][1-9]|70)`\n* 第五六位县码：`(?:(0[1-9])|1[0-8]|[2-9][1-9])` \n\n#### 中间八位生日期码\n\n中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。\n首先从每个月都有的1-28号开始\n`(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])`\n\n然后除2月之外都有29号跟30号\n`(?:0[13-9]|1[0-2])(?:29|30)`\n\n接着1、3、5、7、8、10、12月有31号\n`(?:0[13578]|1[02])31`\n\n以上日期码前面再加上年 `(19[0-9]{2}|200[0-9]|201[0-7])`，这样子除了闰年的所有日期就都ok了，最后再来写闰年。\n闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位\n`(0[48]|[2468][048]|[13579][26])`\n能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。\n最后我我们用`|`连接起来。\n\n 1900到2017年\n`((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)`\n\n\n#### 最后四位验证码\n有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：\n````javascript\n([0-9]{3}[0-9X])\n````\n\n","slug":"javascript-reg-2","published":1,"updated":"2019-04-30T06:04:29.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds8000j4whsqt5tq46f","content":"<p>本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。</p>\n<p>写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。</p>\n<a id=\"more\"></a>\n<h2 id=\"密码强度\"><a href=\"#密码强度\" class=\"headerlink\" title=\"密码强度\"></a>密码强度</h2><h3 id=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"><a href=\"#密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\" class=\"headerlink\" title=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"></a>密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间</h3><p>用到了前瞻，如果还不清楚可以移步 <a href=\"../javascript-reg-1\">正则基础学习</a></p>\n<p>正则一<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^[a-z]+$)(?!^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$)(?!^[A-Z]+$)^[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>(?!)</code> 这种写法是对后面数据的一种限定，过滤匹配的数据。如 <code>(?!2)[0-9]</code> 就是匹配除了2之外的所有数字。</p>\n<p>然后，上面那段正则就可以分以下四段分析，因为<code>(?!)</code>只是限定条件，不匹配结果，所以前面三个<code>(?!)</code>只是三个条件，后面的才是匹配结果：</p>\n<ul>\n<li><code>(?!^[a-z]+$)</code>: 排除纯小写</li>\n<li><code>(?!^[A-Z]+$)</code>: 排除纯大写</li>\n<li><code>(?!^[0-9]+$)</code>: 排除纯数字</li>\n<li><code>^[a-zA-Z0-9]{6,16}$</code>: 匹配6到12个 [a-zA-Z0-9] 范围中字符</li>\n</ul>\n<p>正则二<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以<code>^</code> 跟 <code>$</code> 位置不同。<br>这段正则分以下也三段分析：</p>\n<ul>\n<li><code>^(?=.*\\d)[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有数字。</li>\n<li><code>^(?=.*[a-z])[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。</li>\n<li><code>^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$</code>:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。</li>\n</ul>\n<h2 id=\"整数部分千分位\"><a href=\"#整数部分千分位\" class=\"headerlink\" title=\"整数部分千分位\"></a>整数部分千分位</h2><p>现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，<br>互利网中也是如此。<br>我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。<br>因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。</p>\n<p>方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">99999999999</span><span class=\"string\">'.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+)/g, '</span>$&amp;,<span class=\"string\">');</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>(\\d{3})+</code>表示一组及以上3的倍数个数字加小数点</li>\n<li>然后用正向肯定查找 <code>(?=)</code> 包起来，说明 <code>(\\d{3})+</code> 只是一个条件</li>\n<li><code>g</code> 表示匹配多次直到没匹配到结果</li>\n<li><code>$&amp;</code> 表示 <code>\\d{1,3}</code> 正向查找条件成立时匹配到的结果</li>\n</ul>\n<p>所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，<code>$&amp;</code>提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足<code>\\d{1,3}</code> 后才停止匹配。</p>\n<ul>\n<li><a href=\"../javascript-reg-1#字符串替代：\">怎么引用replace匹配到的结果</a> 知识点。</li>\n</ul>\n<h2 id=\"匹配身份证号码\"><a href=\"#匹配身份证号码\" class=\"headerlink\" title=\"匹配身份证号码\"></a>匹配身份证号码</h2><p>正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?:<span class=\"number\">1</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">2</span>[<span class=\"number\">1</span><span class=\"number\">-3</span>]|<span class=\"number\">3</span>[<span class=\"number\">1</span><span class=\"number\">-7</span>]|<span class=\"number\">4</span>[<span class=\"number\">1</span><span class=\"number\">-6</span>]|<span class=\"number\">5</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]|<span class=\"number\">6</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">71</span>|<span class=\"number\">8</span>[<span class=\"number\">12</span>])(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|[<span class=\"number\">1</span><span class=\"number\">-6</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">70</span>)(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]|[<span class=\"number\">2</span><span class=\"number\">-9</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>])(?:(?:(<span class=\"number\">19</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">200</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">201</span>[<span class=\"number\">0</span><span class=\"number\">-7</span>])(?:(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]))|(?:(?:<span class=\"number\">0</span>[<span class=\"number\">13</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>))|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])<span class=\"number\">31</span>))|(?:(?:(<span class=\"number\">19</span>|<span class=\"number\">20</span>)(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>]))|<span class=\"number\">2000</span>)<span class=\"number\">0229</span>)(?:[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则分析\"><a href=\"#正则分析\" class=\"headerlink\" title=\"正则分析\"></a>正则分析</h3><h4 id=\"前六位地址码\"><a href=\"#前六位地址码\" class=\"headerlink\" title=\"前六位地址码\"></a>前六位地址码</h4><p>百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：<br><blockquote><p>华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000，<br>华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，<br>西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，<br>特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p>\n<p>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p>\n</blockquote></p>\n<p>根据以上规则得出以下地址码正则：</p>\n<ul>\n<li>第一二位省码：<code>(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])</code></li>\n<li>第三四位市码：<code>(?:(0[1-9])|[1-6][1-9]|70)</code></li>\n<li>第五六位县码：<code>(?:(0[1-9])|1[0-8]|[2-9][1-9])</code> </li>\n</ul>\n<h4 id=\"中间八位生日期码\"><a href=\"#中间八位生日期码\" class=\"headerlink\" title=\"中间八位生日期码\"></a>中间八位生日期码</h4><p>中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。<br>首先从每个月都有的1-28号开始<br><code>(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])</code></p>\n<p>然后除2月之外都有29号跟30号<br><code>(?:0[13-9]|1[0-2])(?:29|30)</code></p>\n<p>接着1、3、5、7、8、10、12月有31号<br><code>(?:0[13578]|1[02])31</code></p>\n<p>以上日期码前面再加上年 <code>(19[0-9]{2}|200[0-9]|201[0-7])</code>，这样子除了闰年的所有日期就都ok了，最后再来写闰年。<br>闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位<br><code>(0[48]|[2468][048]|[13579][26])</code><br>能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。<br>最后我我们用<code>|</code>连接起来。</p>\n<p> 1900到2017年<br><code>((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)</code></p>\n<h4 id=\"最后四位验证码\"><a href=\"#最后四位验证码\" class=\"headerlink\" title=\"最后四位验证码\"></a>最后四位验证码</h4><p>有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X])</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。</p>\n<p>写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。</p>","more":"<h2 id=\"密码强度\"><a href=\"#密码强度\" class=\"headerlink\" title=\"密码强度\"></a>密码强度</h2><h3 id=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"><a href=\"#密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\" class=\"headerlink\" title=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"></a>密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间</h3><p>用到了前瞻，如果还不清楚可以移步 <a href=\"../javascript-reg-1\">正则基础学习</a></p>\n<p>正则一<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^[a-z]+$)(?!^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$)(?!^[A-Z]+$)^[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>(?!)</code> 这种写法是对后面数据的一种限定，过滤匹配的数据。如 <code>(?!2)[0-9]</code> 就是匹配除了2之外的所有数字。</p>\n<p>然后，上面那段正则就可以分以下四段分析，因为<code>(?!)</code>只是限定条件，不匹配结果，所以前面三个<code>(?!)</code>只是三个条件，后面的才是匹配结果：</p>\n<ul>\n<li><code>(?!^[a-z]+$)</code>: 排除纯小写</li>\n<li><code>(?!^[A-Z]+$)</code>: 排除纯大写</li>\n<li><code>(?!^[0-9]+$)</code>: 排除纯数字</li>\n<li><code>^[a-zA-Z0-9]{6,16}$</code>: 匹配6到12个 [a-zA-Z0-9] 范围中字符</li>\n</ul>\n<p>正则二<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以<code>^</code> 跟 <code>$</code> 位置不同。<br>这段正则分以下也三段分析：</p>\n<ul>\n<li><code>^(?=.*\\d)[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有数字。</li>\n<li><code>^(?=.*[a-z])[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。</li>\n<li><code>^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$</code>:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。</li>\n</ul>\n<h2 id=\"整数部分千分位\"><a href=\"#整数部分千分位\" class=\"headerlink\" title=\"整数部分千分位\"></a>整数部分千分位</h2><p>现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，<br>互利网中也是如此。<br>我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。<br>因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。</p>\n<p>方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">99999999999</span><span class=\"string\">'.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+)/g, '</span>$&amp;,<span class=\"string\">');</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>(\\d{3})+</code>表示一组及以上3的倍数个数字加小数点</li>\n<li>然后用正向肯定查找 <code>(?=)</code> 包起来，说明 <code>(\\d{3})+</code> 只是一个条件</li>\n<li><code>g</code> 表示匹配多次直到没匹配到结果</li>\n<li><code>$&amp;</code> 表示 <code>\\d{1,3}</code> 正向查找条件成立时匹配到的结果</li>\n</ul>\n<p>所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，<code>$&amp;</code>提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足<code>\\d{1,3}</code> 后才停止匹配。</p>\n<ul>\n<li><a href=\"../javascript-reg-1#字符串替代：\">怎么引用replace匹配到的结果</a> 知识点。</li>\n</ul>\n<h2 id=\"匹配身份证号码\"><a href=\"#匹配身份证号码\" class=\"headerlink\" title=\"匹配身份证号码\"></a>匹配身份证号码</h2><p>正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?:<span class=\"number\">1</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">2</span>[<span class=\"number\">1</span><span class=\"number\">-3</span>]|<span class=\"number\">3</span>[<span class=\"number\">1</span><span class=\"number\">-7</span>]|<span class=\"number\">4</span>[<span class=\"number\">1</span><span class=\"number\">-6</span>]|<span class=\"number\">5</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]|<span class=\"number\">6</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">71</span>|<span class=\"number\">8</span>[<span class=\"number\">12</span>])(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|[<span class=\"number\">1</span><span class=\"number\">-6</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">70</span>)(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]|[<span class=\"number\">2</span><span class=\"number\">-9</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>])(?:(?:(<span class=\"number\">19</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">200</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">201</span>[<span class=\"number\">0</span><span class=\"number\">-7</span>])(?:(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]))|(?:(?:<span class=\"number\">0</span>[<span class=\"number\">13</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>))|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])<span class=\"number\">31</span>))|(?:(?:(<span class=\"number\">19</span>|<span class=\"number\">20</span>)(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>]))|<span class=\"number\">2000</span>)<span class=\"number\">0229</span>)(?:[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则分析\"><a href=\"#正则分析\" class=\"headerlink\" title=\"正则分析\"></a>正则分析</h3><h4 id=\"前六位地址码\"><a href=\"#前六位地址码\" class=\"headerlink\" title=\"前六位地址码\"></a>前六位地址码</h4><p>百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：<br><blockquote><p>华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000，<br>华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，<br>西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，<br>特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p>\n<p>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p>\n</blockquote></p>\n<p>根据以上规则得出以下地址码正则：</p>\n<ul>\n<li>第一二位省码：<code>(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])</code></li>\n<li>第三四位市码：<code>(?:(0[1-9])|[1-6][1-9]|70)</code></li>\n<li>第五六位县码：<code>(?:(0[1-9])|1[0-8]|[2-9][1-9])</code> </li>\n</ul>\n<h4 id=\"中间八位生日期码\"><a href=\"#中间八位生日期码\" class=\"headerlink\" title=\"中间八位生日期码\"></a>中间八位生日期码</h4><p>中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。<br>首先从每个月都有的1-28号开始<br><code>(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])</code></p>\n<p>然后除2月之外都有29号跟30号<br><code>(?:0[13-9]|1[0-2])(?:29|30)</code></p>\n<p>接着1、3、5、7、8、10、12月有31号<br><code>(?:0[13578]|1[02])31</code></p>\n<p>以上日期码前面再加上年 <code>(19[0-9]{2}|200[0-9]|201[0-7])</code>，这样子除了闰年的所有日期就都ok了，最后再来写闰年。<br>闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位<br><code>(0[48]|[2468][048]|[13579][26])</code><br>能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。<br>最后我我们用<code>|</code>连接起来。</p>\n<p> 1900到2017年<br><code>((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)</code></p>\n<h4 id=\"最后四位验证码\"><a href=\"#最后四位验证码\" class=\"headerlink\" title=\"最后四位验证码\"></a>最后四位验证码</h4><p>有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X])</span><br></pre></td></tr></table></figure></p>"},{"title":"send-beacon","date":"2018-06-14T08:06:45.000Z","_content":"\n\n````javascript\nfunction imgPing(url, callback) {\n    var key = '__SOME_RANDOM_KEY__' + (+new Date());\n    var img = new Image();\n    window[key] = img;\n    img.onload = img.onerror = img.onabort = function () {\n        img.onload = img.onerror = img.onabort = null;\n        window[key] = null;\n        img = null;\n        if (callback) {\n            callback();\n        }\n    };\n    img.src = concatUrl;\n    return true;\n}\n\n````","source":"_posts/send-beacon.md","raw":"title: send-beacon\ndate: 2018-06-14 16:06:45\ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n\n````javascript\nfunction imgPing(url, callback) {\n    var key = '__SOME_RANDOM_KEY__' + (+new Date());\n    var img = new Image();\n    window[key] = img;\n    img.onload = img.onerror = img.onabort = function () {\n        img.onload = img.onerror = img.onabort = null;\n        window[key] = null;\n        img = null;\n        if (callback) {\n            callback();\n        }\n    };\n    img.src = concatUrl;\n    return true;\n}\n\n````","slug":"send-beacon","published":1,"updated":"2019-04-30T06:04:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehds9000n4whstz959kv8","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgPing</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'__SOME_RANDOM_KEY__'</span> + (+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[key] = img;</span><br><span class=\"line\">    img.onload = img.onerror = img.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        img.onload = img.onerror = img.onabort = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>[key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        img = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = concatUrl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgPing</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'__SOME_RANDOM_KEY__'</span> + (+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[key] = img;</span><br><span class=\"line\">    img.onload = img.onerror = img.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        img.onload = img.onerror = img.onabort = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>[key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        img = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = concatUrl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"哪些会导致重绘和回流","date":"2018-05-15T05:53:51.000Z","_content":"\n\n{% blockquote paulirish/what-forces-layout, https://gist.github.com/paulirish/5d52fb081b3570c81e3a %}\n翻译自 《What forces layout / reflow》\n{% endblockquote %}\n\n当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。\n<!--more-->\n## Element\n\n### 盒子度量\n* `elem.offsetLeft`, `elem.offsetTop`, `elem.offsetWidth`, `elem.offsetHeight`, `elem.offsetParent`\n* `elem.clientLeft`, `elem.clientTop`, `elem.clientWidth`, `elem.clientHeight`\n* `elem.getClientRects()`, `elem.getBoundingClientRect()`\n\n### Scroll之类的\n* `elem.scrollBy()`, `elem.scrollTo()`\n* `elem.scrollIntoView()`, `elem.scrollIntoViewIfNeeded()`\n* `elem.scrollWidth`, `elem.scrollHeight`\n* `elem.scrollLeft`, `elem.scrollTop` 设置也会影响他们\n\n### Focus\n* `elem.focus()` 会触发两次重绘 [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=2923\n\n### 还有...\n* `elem.computedRole`, `elem.computedName`\n* `elem.innerText` [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=3440\n\n### getComputedStyle\n\n`window.getComputedStyle()` 会触发典型的样式重新计算\n`window.getComputedStyle()` 会触发重绘:\n\n1. 任何`Shadow DOM`\n2. 使用了 media queries （viewport-related中的其中一些）,以下属性\n    * `min-width`, `min-height`, `max-width`, `max-height`, `width`, `height`\n    * `aspect-ratio`, `min-aspect-ratio`, `max-aspect-ratio`\n    * `device-pixel-ratio`, `resolution`, `orientation` , `min-device-pixel-ratio`, `max-device-pixel-ratio`\n2. 获取以下任一属性\n    * `height`, `width`\n    * `top`, `right`, `bottom`, `left`\n    * `margin` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`margin`是固定的.\n    * `padding` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`padding`是固定的.\n    * `transform`, `transform-origin`, `perspective-origin`\n    * `translate`, `rotate`, `scale`\n    * `grid`, `grid-template`, `grid-template-columns`, `grid-template-rows`\n    * `perspective-origin`\n    * 以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): `motion-path`, `motion-offset`, `motion-rotation`, `x`, `y`, `rx`, `ry`\n\n### window\n1. `window.scrollX`, `window.scrollY`\n2. `window.innerHeight`, `window.innerWidth`\n3. `window.getMatchedCSSRules()` 仅重新计算样式\n\n### Forms\n1. `inputElem.focus()`\n2. `inputElem.select()`, `textareaElem.select()`\n\n### 鼠标事件\n1. `mouseEvt.layerX`, `mouseEvt.layerY`, `mouseEvt.offsetX`, `mouseEvt.offsetY`\n\n### document\n1. `doc.scrollingElement` 仅重新计算样式\n\n### Range\n1. `range.getClientRects()`, `range.getBoundingClientRect()`\n\n### SVG\n1. 很多，没有详尽的列表，但是(Tony Gentilcore's 2011 Layout Triggering List )[http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\n\n### contenteditable\n1. 很多很多。\n\n## 附录\n* 回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）\n* 如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。\n* 改怎么避免回流跟重绘呢？\n    1. 尽量避免在 for 循环中重绘和改变DOM\n    2. 使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。\n    3. 批处理读/写DOM，可以使用(FastDom)[https://github.com/wilsonpage/fastdom]或者虚拟DOM\n\n### 浏览器兼容性\n    因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n\n## CSS Triggers\n(CSS Triggers)[https://csstriggers.com/] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。\n\n## 更多参考资料\n* [Avoiding layout thrashing — Web Fundamentals](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en)\n* [Fixing Layout thrashing in the real world | Matt Andrews](https://mattandre.ws/2014/05/really-fixing-layout-thrashing/)\n* [Timeline demo: Diagnosing forced synchronous layouts - Google Chrome](https://developer.chrome.com/devtools/docs/demos/too-much-layout)\n* [Preventing &apos;layout thrashing&apos; | Wilson Page](http://wilsonpage.co.uk/preventing-layout-thrashing/)\n* [wilsonpage/fastdom](https://github.com/wilsonpage/fastdom)\n* [Rendering: repaint, reflow/relayout, restyle / Stoyan](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n* [We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog](http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/)\n* [Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers](https://developers.google.com/speed/articles/reflow?hl=en)\n* [Optimizing Web Content in UIWebViews and Websites on iOS](https://developer.apple.com/videos/wwdc/2012/?id=601)\n* [Accelerated Rendering in Chrome](http://www.html5rocks.com/en/tutorials/speed/layers/)\n* [web performance for the curious](https://www.igvita.com/slides/2012/web-performance-for-the-curious/)\n* [Jank Free](http://jankfree.org/)\n\n\n","source":"_posts/what-forces-layout-reflow.md","raw":"title: 哪些会导致重绘和回流\ndate: 2018-05-15 13:53:51\ntags:\n- 技术细节\n- reflow\n- 前端性能\ncategories:\n- Js\n---\n\n\n{% blockquote paulirish/what-forces-layout, https://gist.github.com/paulirish/5d52fb081b3570c81e3a %}\n翻译自 《What forces layout / reflow》\n{% endblockquote %}\n\n当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。\n<!--more-->\n## Element\n\n### 盒子度量\n* `elem.offsetLeft`, `elem.offsetTop`, `elem.offsetWidth`, `elem.offsetHeight`, `elem.offsetParent`\n* `elem.clientLeft`, `elem.clientTop`, `elem.clientWidth`, `elem.clientHeight`\n* `elem.getClientRects()`, `elem.getBoundingClientRect()`\n\n### Scroll之类的\n* `elem.scrollBy()`, `elem.scrollTo()`\n* `elem.scrollIntoView()`, `elem.scrollIntoViewIfNeeded()`\n* `elem.scrollWidth`, `elem.scrollHeight`\n* `elem.scrollLeft`, `elem.scrollTop` 设置也会影响他们\n\n### Focus\n* `elem.focus()` 会触发两次重绘 [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=2923\n\n### 还有...\n* `elem.computedRole`, `elem.computedName`\n* `elem.innerText` [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=3440\n\n### getComputedStyle\n\n`window.getComputedStyle()` 会触发典型的样式重新计算\n`window.getComputedStyle()` 会触发重绘:\n\n1. 任何`Shadow DOM`\n2. 使用了 media queries （viewport-related中的其中一些）,以下属性\n    * `min-width`, `min-height`, `max-width`, `max-height`, `width`, `height`\n    * `aspect-ratio`, `min-aspect-ratio`, `max-aspect-ratio`\n    * `device-pixel-ratio`, `resolution`, `orientation` , `min-device-pixel-ratio`, `max-device-pixel-ratio`\n2. 获取以下任一属性\n    * `height`, `width`\n    * `top`, `right`, `bottom`, `left`\n    * `margin` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`margin`是固定的.\n    * `padding` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`padding`是固定的.\n    * `transform`, `transform-origin`, `perspective-origin`\n    * `translate`, `rotate`, `scale`\n    * `grid`, `grid-template`, `grid-template-columns`, `grid-template-rows`\n    * `perspective-origin`\n    * 以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): `motion-path`, `motion-offset`, `motion-rotation`, `x`, `y`, `rx`, `ry`\n\n### window\n1. `window.scrollX`, `window.scrollY`\n2. `window.innerHeight`, `window.innerWidth`\n3. `window.getMatchedCSSRules()` 仅重新计算样式\n\n### Forms\n1. `inputElem.focus()`\n2. `inputElem.select()`, `textareaElem.select()`\n\n### 鼠标事件\n1. `mouseEvt.layerX`, `mouseEvt.layerY`, `mouseEvt.offsetX`, `mouseEvt.offsetY`\n\n### document\n1. `doc.scrollingElement` 仅重新计算样式\n\n### Range\n1. `range.getClientRects()`, `range.getBoundingClientRect()`\n\n### SVG\n1. 很多，没有详尽的列表，但是(Tony Gentilcore's 2011 Layout Triggering List )[http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\n\n### contenteditable\n1. 很多很多。\n\n## 附录\n* 回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）\n* 如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。\n* 改怎么避免回流跟重绘呢？\n    1. 尽量避免在 for 循环中重绘和改变DOM\n    2. 使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。\n    3. 批处理读/写DOM，可以使用(FastDom)[https://github.com/wilsonpage/fastdom]或者虚拟DOM\n\n### 浏览器兼容性\n    因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n\n## CSS Triggers\n(CSS Triggers)[https://csstriggers.com/] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。\n\n## 更多参考资料\n* [Avoiding layout thrashing — Web Fundamentals](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en)\n* [Fixing Layout thrashing in the real world | Matt Andrews](https://mattandre.ws/2014/05/really-fixing-layout-thrashing/)\n* [Timeline demo: Diagnosing forced synchronous layouts - Google Chrome](https://developer.chrome.com/devtools/docs/demos/too-much-layout)\n* [Preventing &apos;layout thrashing&apos; | Wilson Page](http://wilsonpage.co.uk/preventing-layout-thrashing/)\n* [wilsonpage/fastdom](https://github.com/wilsonpage/fastdom)\n* [Rendering: repaint, reflow/relayout, restyle / Stoyan](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n* [We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog](http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/)\n* [Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers](https://developers.google.com/speed/articles/reflow?hl=en)\n* [Optimizing Web Content in UIWebViews and Websites on iOS](https://developer.apple.com/videos/wwdc/2012/?id=601)\n* [Accelerated Rendering in Chrome](http://www.html5rocks.com/en/tutorials/speed/layers/)\n* [web performance for the curious](https://www.igvita.com/slides/2012/web-performance-for-the-curious/)\n* [Jank Free](http://jankfree.org/)\n\n\n","slug":"what-forces-layout-reflow","published":1,"updated":"2019-04-30T06:04:29.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdsa000o4whs0hk8afhy","content":"<blockquote><p>翻译自 《What forces layout / reflow》</p>\n<footer><strong>paulirish/what-forces-layout,</strong><cite><a href=\"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\" target=\"_blank\" rel=\"external\">gist.github.com/paulirish/5d52fb081b3570c81e3a</a></cite></footer></blockquote>\n<p>当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。<br><a id=\"more\"></a></p>\n<h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><h3 id=\"盒子度量\"><a href=\"#盒子度量\" class=\"headerlink\" title=\"盒子度量\"></a>盒子度量</h3><ul>\n<li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>, <code>elem.offsetParent</code></li>\n<li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>, <code>elem.clientHeight</code></li>\n<li><code>elem.getClientRects()</code>, <code>elem.getBoundingClientRect()</code></li>\n</ul>\n<h3 id=\"Scroll之类的\"><a href=\"#Scroll之类的\" class=\"headerlink\" title=\"Scroll之类的\"></a>Scroll之类的</h3><ul>\n<li><code>elem.scrollBy()</code>, <code>elem.scrollTo()</code></li>\n<li><code>elem.scrollIntoView()</code>, <code>elem.scrollIntoViewIfNeeded()</code></li>\n<li><code>elem.scrollWidth</code>, <code>elem.scrollHeight</code></li>\n<li><code>elem.scrollLeft</code>, <code>elem.scrollTop</code> 设置也会影响他们</li>\n</ul>\n<h3 id=\"Focus\"><a href=\"#Focus\" class=\"headerlink\" title=\"Focus\"></a>Focus</h3><ul>\n<li><code>elem.focus()</code> 会触发两次重绘 <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\" target=\"_blank\" rel=\"external\">source</a>&amp;l=2923</li>\n</ul>\n<h3 id=\"还有…\"><a href=\"#还有…\" class=\"headerlink\" title=\"还有…\"></a>还有…</h3><ul>\n<li><code>elem.computedRole</code>, <code>elem.computedName</code></li>\n<li><code>elem.innerText</code> <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\" target=\"_blank\" rel=\"external\">source</a>&amp;l=3440</li>\n</ul>\n<h3 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle\"></a>getComputedStyle</h3><p><code>window.getComputedStyle()</code> 会触发典型的样式重新计算<br><code>window.getComputedStyle()</code> 会触发重绘:</p>\n<ol>\n<li>任何<code>Shadow DOM</code></li>\n<li>使用了 media queries （viewport-related中的其中一些）,以下属性<ul>\n<li><code>min-width</code>, <code>min-height</code>, <code>max-width</code>, <code>max-height</code>, <code>width</code>, <code>height</code></li>\n<li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code></li>\n<li><code>device-pixel-ratio</code>, <code>resolution</code>, <code>orientation</code> , <code>min-device-pixel-ratio</code>, <code>max-device-pixel-ratio</code></li>\n</ul>\n</li>\n<li>获取以下任一属性<ul>\n<li><code>height</code>, <code>width</code></li>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></li>\n<li><code>margin</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>margin</code>是固定的.</li>\n<li><code>padding</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>padding</code>是固定的.</li>\n<li><code>transform</code>, <code>transform-origin</code>, <code>perspective-origin</code></li>\n<li><code>translate</code>, <code>rotate</code>, <code>scale</code></li>\n<li><code>grid</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code></li>\n<li><code>perspective-origin</code></li>\n<li>以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): <code>motion-path</code>, <code>motion-offset</code>, <code>motion-rotation</code>, <code>x</code>, <code>y</code>, <code>rx</code>, <code>ry</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><code>window.scrollX</code>, <code>window.scrollY</code></li>\n<li><code>window.innerHeight</code>, <code>window.innerWidth</code></li>\n<li><code>window.getMatchedCSSRules()</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><ol>\n<li><code>inputElem.focus()</code></li>\n<li><code>inputElem.select()</code>, <code>textareaElem.select()</code></li>\n</ol>\n<h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><ol>\n<li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code></li>\n</ol>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><ol>\n<li><code>doc.scrollingElement</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><ol>\n<li><code>range.getClientRects()</code>, <code>range.getBoundingClientRect()</code></li>\n</ol>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><ol>\n<li>很多，没有详尽的列表，但是(Tony Gentilcore’s 2011 Layout Triggering List )[<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\" target=\"_blank\" rel=\"external\">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。</a></li>\n</ol>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><ol>\n<li>很多很多。</li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）</li>\n<li>如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。</li>\n<li>改怎么避免回流跟重绘呢？<ol>\n<li>尽量避免在 for 循环中重绘和改变DOM</li>\n<li>使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。</li>\n<li>批处理读/写DOM，可以使用(FastDom)[<a href=\"https://github.com/wilsonpage/fastdom]或者虚拟DOM\" target=\"_blank\" rel=\"external\">https://github.com/wilsonpage/fastdom]或者虚拟DOM</a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><pre><code>因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n</code></pre><h2 id=\"CSS-Triggers\"><a href=\"#CSS-Triggers\" class=\"headerlink\" title=\"CSS Triggers\"></a>CSS Triggers</h2><p>(CSS Triggers)[<a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"external\">https://csstriggers.com/</a>] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。</p>\n<h2 id=\"更多参考资料\"><a href=\"#更多参考资料\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en\" target=\"_blank\" rel=\"external\">Avoiding layout thrashing — Web Fundamentals</a></li>\n<li><a href=\"https://mattandre.ws/2014/05/really-fixing-layout-thrashing/\" target=\"_blank\" rel=\"external\">Fixing Layout thrashing in the real world | Matt Andrews</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/too-much-layout\" target=\"_blank\" rel=\"external\">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a></li>\n<li><a href=\"http://wilsonpage.co.uk/preventing-layout-thrashing/\" target=\"_blank\" rel=\"external\">Preventing &apos;layout thrashing&apos; | Wilson Page</a></li>\n<li><a href=\"https://github.com/wilsonpage/fastdom\" target=\"_blank\" rel=\"external\">wilsonpage/fastdom</a></li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\" target=\"_blank\" rel=\"external\">Rendering: repaint, reflow/relayout, restyle / Stoyan</a></li>\n<li><a href=\"http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/\" target=\"_blank\" rel=\"external\">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a></li>\n<li><a href=\"https://developers.google.com/speed/articles/reflow?hl=en\" target=\"_blank\" rel=\"external\">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=601\" target=\"_blank\" rel=\"external\">Optimizing Web Content in UIWebViews and Websites on iOS</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/speed/layers/\" target=\"_blank\" rel=\"external\">Accelerated Rendering in Chrome</a></li>\n<li><a href=\"https://www.igvita.com/slides/2012/web-performance-for-the-curious/\" target=\"_blank\" rel=\"external\">web performance for the curious</a></li>\n<li><a href=\"http://jankfree.org/\" target=\"_blank\" rel=\"external\">Jank Free</a></li>\n</ul>\n","excerpt":"<blockquote><p>翻译自 《What forces layout / reflow》</p>\n<footer><strong>paulirish/what-forces-layout,</strong><cite><a href=\"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\">gist.github.com/paulirish/5d52fb081b3570c81e3a</a></cite></footer></blockquote>\n<p>当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。<br>","more":"</p>\n<h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><h3 id=\"盒子度量\"><a href=\"#盒子度量\" class=\"headerlink\" title=\"盒子度量\"></a>盒子度量</h3><ul>\n<li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>, <code>elem.offsetParent</code></li>\n<li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>, <code>elem.clientHeight</code></li>\n<li><code>elem.getClientRects()</code>, <code>elem.getBoundingClientRect()</code></li>\n</ul>\n<h3 id=\"Scroll之类的\"><a href=\"#Scroll之类的\" class=\"headerlink\" title=\"Scroll之类的\"></a>Scroll之类的</h3><ul>\n<li><code>elem.scrollBy()</code>, <code>elem.scrollTo()</code></li>\n<li><code>elem.scrollIntoView()</code>, <code>elem.scrollIntoViewIfNeeded()</code></li>\n<li><code>elem.scrollWidth</code>, <code>elem.scrollHeight</code></li>\n<li><code>elem.scrollLeft</code>, <code>elem.scrollTop</code> 设置也会影响他们</li>\n</ul>\n<h3 id=\"Focus\"><a href=\"#Focus\" class=\"headerlink\" title=\"Focus\"></a>Focus</h3><ul>\n<li><code>elem.focus()</code> 会触发两次重绘 <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\">source</a>&amp;l=2923</li>\n</ul>\n<h3 id=\"还有…\"><a href=\"#还有…\" class=\"headerlink\" title=\"还有…\"></a>还有…</h3><ul>\n<li><code>elem.computedRole</code>, <code>elem.computedName</code></li>\n<li><code>elem.innerText</code> <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\">source</a>&amp;l=3440</li>\n</ul>\n<h3 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle\"></a>getComputedStyle</h3><p><code>window.getComputedStyle()</code> 会触发典型的样式重新计算<br><code>window.getComputedStyle()</code> 会触发重绘:</p>\n<ol>\n<li>任何<code>Shadow DOM</code></li>\n<li>使用了 media queries （viewport-related中的其中一些）,以下属性<ul>\n<li><code>min-width</code>, <code>min-height</code>, <code>max-width</code>, <code>max-height</code>, <code>width</code>, <code>height</code></li>\n<li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code></li>\n<li><code>device-pixel-ratio</code>, <code>resolution</code>, <code>orientation</code> , <code>min-device-pixel-ratio</code>, <code>max-device-pixel-ratio</code></li>\n</ul>\n</li>\n<li>获取以下任一属性<ul>\n<li><code>height</code>, <code>width</code></li>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></li>\n<li><code>margin</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>margin</code>是固定的.</li>\n<li><code>padding</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>padding</code>是固定的.</li>\n<li><code>transform</code>, <code>transform-origin</code>, <code>perspective-origin</code></li>\n<li><code>translate</code>, <code>rotate</code>, <code>scale</code></li>\n<li><code>grid</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code></li>\n<li><code>perspective-origin</code></li>\n<li>以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): <code>motion-path</code>, <code>motion-offset</code>, <code>motion-rotation</code>, <code>x</code>, <code>y</code>, <code>rx</code>, <code>ry</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><code>window.scrollX</code>, <code>window.scrollY</code></li>\n<li><code>window.innerHeight</code>, <code>window.innerWidth</code></li>\n<li><code>window.getMatchedCSSRules()</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><ol>\n<li><code>inputElem.focus()</code></li>\n<li><code>inputElem.select()</code>, <code>textareaElem.select()</code></li>\n</ol>\n<h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><ol>\n<li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code></li>\n</ol>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><ol>\n<li><code>doc.scrollingElement</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><ol>\n<li><code>range.getClientRects()</code>, <code>range.getBoundingClientRect()</code></li>\n</ol>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><ol>\n<li>很多，没有详尽的列表，但是(Tony Gentilcore’s 2011 Layout Triggering List )[<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。</a></li>\n</ol>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><ol>\n<li>很多很多。</li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）</li>\n<li>如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。</li>\n<li>改怎么避免回流跟重绘呢？<ol>\n<li>尽量避免在 for 循环中重绘和改变DOM</li>\n<li>使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。</li>\n<li>批处理读/写DOM，可以使用(FastDom)[<a href=\"https://github.com/wilsonpage/fastdom]或者虚拟DOM\">https://github.com/wilsonpage/fastdom]或者虚拟DOM</a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><pre><code>因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n</code></pre><h2 id=\"CSS-Triggers\"><a href=\"#CSS-Triggers\" class=\"headerlink\" title=\"CSS Triggers\"></a>CSS Triggers</h2><p>(CSS Triggers)[<a href=\"https://csstriggers.com/\">https://csstriggers.com/</a>] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。</p>\n<h2 id=\"更多参考资料\"><a href=\"#更多参考资料\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en\">Avoiding layout thrashing — Web Fundamentals</a></li>\n<li><a href=\"https://mattandre.ws/2014/05/really-fixing-layout-thrashing/\">Fixing Layout thrashing in the real world | Matt Andrews</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/too-much-layout\">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a></li>\n<li><a href=\"http://wilsonpage.co.uk/preventing-layout-thrashing/\">Preventing &apos;layout thrashing&apos; | Wilson Page</a></li>\n<li><a href=\"https://github.com/wilsonpage/fastdom\">wilsonpage/fastdom</a></li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\">Rendering: repaint, reflow/relayout, restyle / Stoyan</a></li>\n<li><a href=\"http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/\">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a></li>\n<li><a href=\"https://developers.google.com/speed/articles/reflow?hl=en\">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=601\">Optimizing Web Content in UIWebViews and Websites on iOS</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/speed/layers/\">Accelerated Rendering in Chrome</a></li>\n<li><a href=\"https://www.igvita.com/slides/2012/web-performance-for-the-curious/\">web performance for the curious</a></li>\n<li><a href=\"http://jankfree.org/\">Jank Free</a></li>\n</ul>"},{"title":"webpack-4-x","date":"2019-04-30T06:17:27.000Z","_content":"\n占坑","source":"_posts/webpack-4-x.md","raw":"title: webpack-4-x\ndate: 2019-04-30 14:17:27\ntags:\n- webpack\n- webpack4.x\ncategories:\n- 前端构建工具\n---\n\n占坑","slug":"webpack-4-x","published":1,"updated":"2019-04-30T06:18:57.554Z","_id":"cjv3ehdsc000t4whs5almcpxy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>占坑</p>\n","excerpt":"","more":"<p>占坑</p>\n"},{"title":"webpack-1.x 总结","date":"2016-02-15T09:25:04.000Z","_content":"\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n<!--more-->\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n```\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n```\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\nwebpack 可以将代码切割成不同的 chunk，实现按需加载。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，通过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array,\n    query: String | Object\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## 常用Loaders\n### 加载 CSS\n加载css需要 `css-loader`和`style-loader`，分别做以下两件事：\n1. css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们\n2. style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中\n````js\n{\n  // loader配置\n    test: /\\.css$/,\n    loader: 'style!css' // 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左\n  }\n````\n### 图片处理\n图片处理需要 `url-loader` 和 `file-loader`\n````js\n{\n  // loader配置\n  test: /\\.(png|jpg|gif|jpeg)$/,\n  loader: 'url?limit=25000'\n}\n````\n传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n\n#### eslint\n````js\n  module : {\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ],\n  }\n````\n\n## 常用Plugin\n###UglifyJsPlugin webpack自带的插件\n一般配置如下：\n````js\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n          compress: {\n              warnings: false\n          }\n      })\n  ]\n````\n\n### extractTextWebpackPlugin\n在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。\n````js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nplugins: [\n  new ExtractTextPlugin(\"app.css\")\n]\n````\n\n### htmlWebpackPlugin\n生成HTML\n\n````js\nconst path = require('path');\n\nconst HTMLWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    index: './pages/index.js',\n    page1: './pages/page1.js',\n    page2: './pages/page2.js'\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      filename: 'index.html',\n      template: 'templates/index.html',\n      inject: true,\n      chunks: ['index']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page1.html',\n      template: 'templates/page1.html',\n      inject: true,\n      chunks: ['page1']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page2.html',\n      template: 'templates/page2.html',\n      inject: true,\n      chunks: ['page2']\n    })\n  ]\n};\n````\n\n\n#### 提取公共Js插件\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n#### ProvidePlugin插件\n将模块暴露到全局\n\n````js\nnew webpack.ProvidePlugin({\n    \"R\": \"report\",\n}),\n````\n\n#### 删除目录插件\nclean-webpack-plugin\n````js\n\n  var CleanPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    new CleanPlugin(['dist']),\n  ]\n````\n#### 拷贝文件插件\n\ncopy-webpack-plugin\n````js\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nplugins: [\n  new CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n  }])\n]\n````\n\n\n#### 优化第三方包插件\n````js\nplugins: [\n  new webpack.DefinePlugin({\n      //去掉react中的警告，react会自己判断\n      'process.env': {\n          NODE_ENV: '\"production\"'\n      }\n  })\n]\n````\n\n#### 自动打开浏览器插件\nopen-browser-webpack-plugin\n````js\n  // 自动打开浏览器插件\n  var OpenBrowserPlugin = require('open-browser-webpack-plugin');\n  plugins: [\n      new OpenBrowserPlugin({url: 'http://localhost:8080/', browser: 'chrome'})\n  ]\n````\n\nplugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，点击\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins %}\n\n\n### Resolve属性\nwebpack 在构建包的时候会按配置进行模块的查找\n````js\n resolve: {\n      //查找module的话从这里开始查找\n      root: '/pomy/github/flux-example/src', //绝对路径\n      //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n      //注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.\n      extensions: ['', '.js', '.json', '.scss',’jsx’],\n\n      //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n      alias: {\n          AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n          ActionType : 'js/actions/ActionType.js',\n          AppAction : 'js/actions/AppAction.js'\n      }\n  }\n````\n\n\n\n### Externals属性\n外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：`<script src=\"//code.jquery.com/jquery-1.12.0.min.js\"></script>`，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：\n\n其实就是不是通过require或者import引入的，而是直接写在html中的js地址。\n\n````js\n    // 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了\n    // 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react\n    externals: {\n        'react1': 'react',\n        'react-dom1': 'react-dom',\n        '$1': 'jQuery'\n    }\n````\n\n这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。\n\n### noParse属性\nmodule.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。\n````js\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n````","source":"_posts/webpack-1-x.md","raw":"title: webpack-1.x 总结\ndate: 2016-02-15 17:25:04\ntags:\n- webpack\n- webpack1.x\ncategories:\n- 前端构建工具\n---\n\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n<!--more-->\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n```\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n```\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\nwebpack 可以将代码切割成不同的 chunk，实现按需加载。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，通过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array,\n    query: String | Object\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## 常用Loaders\n### 加载 CSS\n加载css需要 `css-loader`和`style-loader`，分别做以下两件事：\n1. css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们\n2. style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中\n````js\n{\n  // loader配置\n    test: /\\.css$/,\n    loader: 'style!css' // 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左\n  }\n````\n### 图片处理\n图片处理需要 `url-loader` 和 `file-loader`\n````js\n{\n  // loader配置\n  test: /\\.(png|jpg|gif|jpeg)$/,\n  loader: 'url?limit=25000'\n}\n````\n传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n\n#### eslint\n````js\n  module : {\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ],\n  }\n````\n\n## 常用Plugin\n###UglifyJsPlugin webpack自带的插件\n一般配置如下：\n````js\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n          compress: {\n              warnings: false\n          }\n      })\n  ]\n````\n\n### extractTextWebpackPlugin\n在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。\n````js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nplugins: [\n  new ExtractTextPlugin(\"app.css\")\n]\n````\n\n### htmlWebpackPlugin\n生成HTML\n\n````js\nconst path = require('path');\n\nconst HTMLWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    index: './pages/index.js',\n    page1: './pages/page1.js',\n    page2: './pages/page2.js'\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      filename: 'index.html',\n      template: 'templates/index.html',\n      inject: true,\n      chunks: ['index']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page1.html',\n      template: 'templates/page1.html',\n      inject: true,\n      chunks: ['page1']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page2.html',\n      template: 'templates/page2.html',\n      inject: true,\n      chunks: ['page2']\n    })\n  ]\n};\n````\n\n\n#### 提取公共Js插件\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n#### ProvidePlugin插件\n将模块暴露到全局\n\n````js\nnew webpack.ProvidePlugin({\n    \"R\": \"report\",\n}),\n````\n\n#### 删除目录插件\nclean-webpack-plugin\n````js\n\n  var CleanPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    new CleanPlugin(['dist']),\n  ]\n````\n#### 拷贝文件插件\n\ncopy-webpack-plugin\n````js\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nplugins: [\n  new CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n  }])\n]\n````\n\n\n#### 优化第三方包插件\n````js\nplugins: [\n  new webpack.DefinePlugin({\n      //去掉react中的警告，react会自己判断\n      'process.env': {\n          NODE_ENV: '\"production\"'\n      }\n  })\n]\n````\n\n#### 自动打开浏览器插件\nopen-browser-webpack-plugin\n````js\n  // 自动打开浏览器插件\n  var OpenBrowserPlugin = require('open-browser-webpack-plugin');\n  plugins: [\n      new OpenBrowserPlugin({url: 'http://localhost:8080/', browser: 'chrome'})\n  ]\n````\n\nplugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，点击\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins %}\n\n\n### Resolve属性\nwebpack 在构建包的时候会按配置进行模块的查找\n````js\n resolve: {\n      //查找module的话从这里开始查找\n      root: '/pomy/github/flux-example/src', //绝对路径\n      //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n      //注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.\n      extensions: ['', '.js', '.json', '.scss',’jsx’],\n\n      //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n      alias: {\n          AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n          ActionType : 'js/actions/ActionType.js',\n          AppAction : 'js/actions/AppAction.js'\n      }\n  }\n````\n\n\n\n### Externals属性\n外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：`<script src=\"//code.jquery.com/jquery-1.12.0.min.js\"></script>`，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：\n\n其实就是不是通过require或者import引入的，而是直接写在html中的js地址。\n\n````js\n    // 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了\n    // 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react\n    externals: {\n        'react1': 'react',\n        'react-dom1': 'react-dom',\n        '$1': 'jQuery'\n    }\n````\n\n这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。\n\n### noParse属性\nmodule.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。\n````js\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n````","slug":"webpack-1-x","published":1,"updated":"2019-04-30T06:18:01.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdst001k4whses5xxwna","content":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。<br><a id=\"more\"></a></p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\" target=\"_blank\" rel=\"external\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\" target=\"_blank\" rel=\"external\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<p>webpack 可以将代码切割成不同的 chunk，实现按需加载。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，通过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    query: <span class=\"built_in\">String</span> | <span class=\"built_in\">Object</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"常用Loaders\"><a href=\"#常用Loaders\" class=\"headerlink\" title=\"常用Loaders\"></a>常用Loaders</h2><h3 id=\"加载-CSS\"><a href=\"#加载-CSS\" class=\"headerlink\" title=\"加载 CSS\"></a>加载 CSS</h3><p>加载css需要 <code>css-loader</code>和<code>style-loader</code>，分别做以下两件事：</p>\n<ol>\n<li>css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们</li>\n<li>style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h3><p>图片处理需要 <code>url-loader</code> 和 <code>file-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'url?limit=25000'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。</p>\n<h4 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span> : &#123;</span><br><span class=\"line\">  preLoaders: [</span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"eslint-loader\"</span>, exclude: <span class=\"regexp\">/node_modules/</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Plugin\"><a href=\"#常用Plugin\" class=\"headerlink\" title=\"常用Plugin\"></a>常用Plugin</h2><p>###UglifyJsPlugin webpack自带的插件<br>一般配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">            warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"extractTextWebpackPlugin\"><a href=\"#extractTextWebpackPlugin\" class=\"headerlink\" title=\"extractTextWebpackPlugin\"></a>extractTextWebpackPlugin</h3><p>在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"app.css\"</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"htmlWebpackPlugin\"><a href=\"#htmlWebpackPlugin\" class=\"headerlink\" title=\"htmlWebpackPlugin\"></a>htmlWebpackPlugin</h3><p>生成HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./pages/index.js'</span>,</span><br><span class=\"line\">    page1: <span class=\"string\">'./pages/page1.js'</span>,</span><br><span class=\"line\">    page2: <span class=\"string\">'./pages/page2.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'index'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page1.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page1.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page1'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page2.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page2.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page2'</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提取公共Js插件\"><a href=\"#提取公共Js插件\" class=\"headerlink\" title=\"提取公共Js插件\"></a>提取公共Js插件</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h4 id=\"ProvidePlugin插件\"><a href=\"#ProvidePlugin插件\" class=\"headerlink\" title=\"ProvidePlugin插件\"></a>ProvidePlugin插件</h4><p>将模块暴露到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"R\"</span>: <span class=\"string\">\"report\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除目录插件\"><a href=\"#删除目录插件\" class=\"headerlink\" title=\"删除目录插件\"></a>删除目录插件</h4><p>clean-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> CleanPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"拷贝文件插件\"><a href=\"#拷贝文件插件\" class=\"headerlink\" title=\"拷贝文件插件\"></a>拷贝文件插件</h4><p>copy-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"优化第三方包插件\"><a href=\"#优化第三方包插件\" class=\"headerlink\" title=\"优化第三方包插件\"></a>优化第三方包插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//去掉react中的警告，react会自己判断</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">          NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动打开浏览器插件\"><a href=\"#自动打开浏览器插件\" class=\"headerlink\" title=\"自动打开浏览器插件\"></a>自动打开浏览器插件</h4><p>open-browser-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动打开浏览器插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OpenBrowserPlugin(&#123;url: <span class=\"string\">'http://localhost:8080/'</span>, browser: <span class=\"string\">'chrome'</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，点击<br> <a href=\"https://github.com/webpack-contrib/awesome-webpack#webpack-plugins\" target=\"_blank\" rel=\"external\">webpack-plugins</a></p>\n<h3 id=\"Resolve属性\"><a href=\"#Resolve属性\" class=\"headerlink\" title=\"Resolve属性\"></a>Resolve属性</h3><p>webpack 在构建包的时候会按配置进行模块的查找<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">     <span class=\"comment\">//查找module的话从这里开始查找</span></span><br><span class=\"line\">     root: <span class=\"string\">'/pomy/github/flux-example/src'</span>, <span class=\"comment\">//绝对路径</span></span><br><span class=\"line\">     <span class=\"comment\">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class=\"line\">     <span class=\"comment\">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class=\"line\">     extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>,’jsx’],</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class=\"line\">     alias: &#123;</span><br><span class=\"line\">         AppStore : <span class=\"string\">'js/stores/AppStores.js'</span>,<span class=\"comment\">//后续直接 require('AppStore') 即可</span></span><br><span class=\"line\">         ActionType : <span class=\"string\">'js/actions/ActionType.js'</span>,</span><br><span class=\"line\">         AppAction : <span class=\"string\">'js/actions/AppAction.js'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Externals属性\"><a href=\"#Externals属性\" class=\"headerlink\" title=\"Externals属性\"></a>Externals属性</h3><p>外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：<code>&lt;script src=&quot;//code.jquery.com/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;</code>，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：</p>\n<p>其实就是不是通过require或者import引入的，而是直接写在html中的js地址。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span></span><br><span class=\"line\"><span class=\"comment\">// 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react</span></span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    <span class=\"string\">'react1'</span>: <span class=\"string\">'react'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom1'</span>: <span class=\"string\">'react-dom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'$1'</span>: <span class=\"string\">'jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。</p>\n<h3 id=\"noParse属性\"><a href=\"#noParse属性\" class=\"headerlink\" title=\"noParse属性\"></a>noParse属性</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  noParse: [<span class=\"regexp\">/moment-with-locales/</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。<br>","more":"</p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<p>webpack 可以将代码切割成不同的 chunk，实现按需加载。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，通过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    query: <span class=\"built_in\">String</span> | <span class=\"built_in\">Object</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"常用Loaders\"><a href=\"#常用Loaders\" class=\"headerlink\" title=\"常用Loaders\"></a>常用Loaders</h2><h3 id=\"加载-CSS\"><a href=\"#加载-CSS\" class=\"headerlink\" title=\"加载 CSS\"></a>加载 CSS</h3><p>加载css需要 <code>css-loader</code>和<code>style-loader</code>，分别做以下两件事：</p>\n<ol>\n<li>css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们</li>\n<li>style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h3><p>图片处理需要 <code>url-loader</code> 和 <code>file-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'url?limit=25000'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。</p>\n<h4 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span> : &#123;</span><br><span class=\"line\">  preLoaders: [</span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"eslint-loader\"</span>, exclude: <span class=\"regexp\">/node_modules/</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Plugin\"><a href=\"#常用Plugin\" class=\"headerlink\" title=\"常用Plugin\"></a>常用Plugin</h2><p>###UglifyJsPlugin webpack自带的插件<br>一般配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">            warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"extractTextWebpackPlugin\"><a href=\"#extractTextWebpackPlugin\" class=\"headerlink\" title=\"extractTextWebpackPlugin\"></a>extractTextWebpackPlugin</h3><p>在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"app.css\"</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"htmlWebpackPlugin\"><a href=\"#htmlWebpackPlugin\" class=\"headerlink\" title=\"htmlWebpackPlugin\"></a>htmlWebpackPlugin</h3><p>生成HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./pages/index.js'</span>,</span><br><span class=\"line\">    page1: <span class=\"string\">'./pages/page1.js'</span>,</span><br><span class=\"line\">    page2: <span class=\"string\">'./pages/page2.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'index'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page1.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page1.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page1'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page2.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page2.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page2'</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提取公共Js插件\"><a href=\"#提取公共Js插件\" class=\"headerlink\" title=\"提取公共Js插件\"></a>提取公共Js插件</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h4 id=\"ProvidePlugin插件\"><a href=\"#ProvidePlugin插件\" class=\"headerlink\" title=\"ProvidePlugin插件\"></a>ProvidePlugin插件</h4><p>将模块暴露到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"R\"</span>: <span class=\"string\">\"report\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除目录插件\"><a href=\"#删除目录插件\" class=\"headerlink\" title=\"删除目录插件\"></a>删除目录插件</h4><p>clean-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> CleanPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"拷贝文件插件\"><a href=\"#拷贝文件插件\" class=\"headerlink\" title=\"拷贝文件插件\"></a>拷贝文件插件</h4><p>copy-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"优化第三方包插件\"><a href=\"#优化第三方包插件\" class=\"headerlink\" title=\"优化第三方包插件\"></a>优化第三方包插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//去掉react中的警告，react会自己判断</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">          NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动打开浏览器插件\"><a href=\"#自动打开浏览器插件\" class=\"headerlink\" title=\"自动打开浏览器插件\"></a>自动打开浏览器插件</h4><p>open-browser-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动打开浏览器插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OpenBrowserPlugin(&#123;url: <span class=\"string\">'http://localhost:8080/'</span>, browser: <span class=\"string\">'chrome'</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，点击<br> <a href=\"https://github.com/webpack-contrib/awesome-webpack#webpack-plugins\">webpack-plugins</a></p>\n<h3 id=\"Resolve属性\"><a href=\"#Resolve属性\" class=\"headerlink\" title=\"Resolve属性\"></a>Resolve属性</h3><p>webpack 在构建包的时候会按配置进行模块的查找<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">     <span class=\"comment\">//查找module的话从这里开始查找</span></span><br><span class=\"line\">     root: <span class=\"string\">'/pomy/github/flux-example/src'</span>, <span class=\"comment\">//绝对路径</span></span><br><span class=\"line\">     <span class=\"comment\">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class=\"line\">     <span class=\"comment\">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class=\"line\">     extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>,’jsx’],</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class=\"line\">     alias: &#123;</span><br><span class=\"line\">         AppStore : <span class=\"string\">'js/stores/AppStores.js'</span>,<span class=\"comment\">//后续直接 require('AppStore') 即可</span></span><br><span class=\"line\">         ActionType : <span class=\"string\">'js/actions/ActionType.js'</span>,</span><br><span class=\"line\">         AppAction : <span class=\"string\">'js/actions/AppAction.js'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Externals属性\"><a href=\"#Externals属性\" class=\"headerlink\" title=\"Externals属性\"></a>Externals属性</h3><p>外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：<code>&lt;script src=&quot;//code.jquery.com/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;</code>，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：</p>\n<p>其实就是不是通过require或者import引入的，而是直接写在html中的js地址。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span></span><br><span class=\"line\"><span class=\"comment\">// 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react</span></span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    <span class=\"string\">'react1'</span>: <span class=\"string\">'react'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom1'</span>: <span class=\"string\">'react-dom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'$1'</span>: <span class=\"string\">'jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。</p>\n<h3 id=\"noParse属性\"><a href=\"#noParse属性\" class=\"headerlink\" title=\"noParse属性\"></a>noParse属性</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  noParse: [<span class=\"regexp\">/moment-with-locales/</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"css3-animation","date":"2017-11-03T02:16:57.000Z","_content":"\n\n{% blockquote W3C https://www.w3.org/TR/css3-animations/ css3-animations %}\nThis CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。\n<!--more-->\n看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n点击下面DEMO观看动画：\n<figure>\n<div id=\"sky\" class=\"target\">\n    <div id=\"cloud\" class=\"target\">\n    <div class=\"cloud cloud-1\"></div>\n    <div class=\"cloud cloud-2\"></div>\n    <div class=\"cloud cloud-3\"></div>\n    </div>\n    <div id=\"sun\" class=\"target\"></div>\n    <div id=\"moon\" class=\"target\">\n    <div class=\"moon\">\n    </div>\n    <div class=\"moon moon-2\">\n    </div>\n    </div>\n    <div id=\"ground\" class=\"target\"></div>\n</div>\n<p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p>\n<figcaption>animation动画 ”一天日月轮回 “</figcaption>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n                    \n</script>\n\n以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o\n\nAnimation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。\n\n\n## Animation动画\n````\n    animation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]|| [animation-fill-mode]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ] || [animation-fill-mode]]*\n    相关属性：[ animation-play-state ]\n    /* 实际用法*/\n    /*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/\n    @keyframes sky {\n        0% { background-color: #525252; }\n        33% { background-color: #6293e5; }\n        66% { background-color:#6293e5; }\n        100% { background-color: #525252; }\n    }\n    /*缩写方式：*/\n    .classname {\n        -webkit-animation:sky 10s ease 1s 1 normal forwards;\n        -webkit-animation-play-state: running;/*animation附加属性*/\n        -moz-animation:sky  10s ease 1s 1 normal forwards;\n        -moz-animation-play-state: running;/*animation附加属性*/\n        animation:sky  10s ease 1s 1 normal forwards;\n        animation-play-state: running;/*animation附加属性*/\n    }\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    animation-name: sky;\n    animation-duration: 10s;\n    animation-timing-function: ease;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n    animation-delay: 0;\n    animation-fill-mode: forwards;\n    animation-play-state: running;\n````\n\n## animation取值\n1. animation-name：设置对象所应用的动画名称\n2. animation-duration：设置对象动画的持续时间\n3. animation-timing-function：设置对象动画的过渡类型\n4. animation-delay：设置对象动画延迟的时间\n5. animation-iteration-count：设置对象动画的循环次数\n6. animation-direction：设置对象动画在循环中是否反向运动\n7. animation-fill-mode：设置对象动画结束时的状态\n8. animation-play-state：animation的相关属性，设置对象动画的状态\n\n### 动画名称以及keyframes\n#### 动画名称\nanimation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：\n\n````\n    animation-name：none | <identifier> [ , none | <identifier> ]*\n````\n动画具体名字得设置成 Keyframes 一样的名字。\n#### Keyframes\nkeyframes 语法\n````\n    keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}';\n    keyframes-blocks: [ keyframe-selectors block ]* ;\n    keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*;\n````\n````css\n    /*具体写法*/\n    /* @keyframes IDENT {*/\n    @keyframes diagonal-slide {\n        from {\n            left: 0;\n            top: 0;\n        }\n        to {\n            left: 100px;\n            top: 100px;\n        }\n    }\n    /*或者全部写成百分比的形式：*/\n    @keyframes wobble {\n        0% {\n        left: 100px;\n        }\n        40% {\n        left: 150px;\n        }\n        60% {\n        left: 75px;\n        }\n        100% {\n        left: 100px;\n        }\n    }\n````\nKeyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。\n\n这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体\n\n### 动画的持续时间\n\nanimation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下\n````css\nanimation-duration：<time> [ , <time> ]*\n````\n这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。\n\n### 动画的变化速率\n\nanimation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：\n````\nanimation-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [ , linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n\n### 动画的延迟执行时间\n\nanimation-delay是用来指定一个动画的延迟执行的时间。语法如下：\n````\nanimation-delay：<time> [ , <time> ]*\n````\n\n跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。\n\n以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。\n\n接下来介绍它们。\n\n### 动画的循环次数\nanimation-iteration-count是用来制定动画的循环次数，语法如下：\n````\nanimation-iteration-count：infinite | <number> [ , infinite | <number> ]*\n````\n- ：默认值，代表只循环一次\n- <number>：自定义对象动画的具体循环次数\n- infinite：无限循环\n\n### 动画的方向\nanimation-direction是用来指定元素动画播放的方向，语法如下：\n````\nanimation-direction：normal | alternate [ , normal | alternate ]*\n````\n- normal：动画的每次循环都是正常播放\n- alternate：动画的播放将是来回往返，一次是正常的与一次是反向的\n**注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。**\n\n### 动画结束的时的状态\nanimation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：\n````\nanimation-fill-mode：none | forwards | backwards | both [ , none | forwards | backwards | both ]*\n````\n- none：默认值。不设置对象动画之外的状态\n- forwards：设置对象状态为动画结束时的状态\n- backwards：设置对象状态为动画开始时的状态\n- both：设置对象状态为动画结束或开始的状态，为什么是或？往下看\n**注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。**\n\n### 动画的运动状态\nanimation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：\n````\nanimation-play-state：running | paused [ , running | paused ]*\n````\n### 总结\n结合以实例\n\n- 关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。\n- 动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。\n- 之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。\n- 再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。\n- animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。\n- animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。","source":"_posts/css3-animation.md","raw":"title: css3-animation\ndate: 2017-11-03 10:16:57\ntags:\n---\n\n\n{% blockquote W3C https://www.w3.org/TR/css3-animations/ css3-animations %}\nThis CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。\n<!--more-->\n看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n点击下面DEMO观看动画：\n<figure>\n<div id=\"sky\" class=\"target\">\n    <div id=\"cloud\" class=\"target\">\n    <div class=\"cloud cloud-1\"></div>\n    <div class=\"cloud cloud-2\"></div>\n    <div class=\"cloud cloud-3\"></div>\n    </div>\n    <div id=\"sun\" class=\"target\"></div>\n    <div id=\"moon\" class=\"target\">\n    <div class=\"moon\">\n    </div>\n    <div class=\"moon moon-2\">\n    </div>\n    </div>\n    <div id=\"ground\" class=\"target\"></div>\n</div>\n<p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p>\n<figcaption>animation动画 ”一天日月轮回 “</figcaption>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n                    \n</script>\n\n以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o\n\nAnimation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。\n\n\n## Animation动画\n````\n    animation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]|| [animation-fill-mode]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ] || [animation-fill-mode]]*\n    相关属性：[ animation-play-state ]\n    /* 实际用法*/\n    /*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/\n    @keyframes sky {\n        0% { background-color: #525252; }\n        33% { background-color: #6293e5; }\n        66% { background-color:#6293e5; }\n        100% { background-color: #525252; }\n    }\n    /*缩写方式：*/\n    .classname {\n        -webkit-animation:sky 10s ease 1s 1 normal forwards;\n        -webkit-animation-play-state: running;/*animation附加属性*/\n        -moz-animation:sky  10s ease 1s 1 normal forwards;\n        -moz-animation-play-state: running;/*animation附加属性*/\n        animation:sky  10s ease 1s 1 normal forwards;\n        animation-play-state: running;/*animation附加属性*/\n    }\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    animation-name: sky;\n    animation-duration: 10s;\n    animation-timing-function: ease;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n    animation-delay: 0;\n    animation-fill-mode: forwards;\n    animation-play-state: running;\n````\n\n## animation取值\n1. animation-name：设置对象所应用的动画名称\n2. animation-duration：设置对象动画的持续时间\n3. animation-timing-function：设置对象动画的过渡类型\n4. animation-delay：设置对象动画延迟的时间\n5. animation-iteration-count：设置对象动画的循环次数\n6. animation-direction：设置对象动画在循环中是否反向运动\n7. animation-fill-mode：设置对象动画结束时的状态\n8. animation-play-state：animation的相关属性，设置对象动画的状态\n\n### 动画名称以及keyframes\n#### 动画名称\nanimation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：\n\n````\n    animation-name：none | <identifier> [ , none | <identifier> ]*\n````\n动画具体名字得设置成 Keyframes 一样的名字。\n#### Keyframes\nkeyframes 语法\n````\n    keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}';\n    keyframes-blocks: [ keyframe-selectors block ]* ;\n    keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*;\n````\n````css\n    /*具体写法*/\n    /* @keyframes IDENT {*/\n    @keyframes diagonal-slide {\n        from {\n            left: 0;\n            top: 0;\n        }\n        to {\n            left: 100px;\n            top: 100px;\n        }\n    }\n    /*或者全部写成百分比的形式：*/\n    @keyframes wobble {\n        0% {\n        left: 100px;\n        }\n        40% {\n        left: 150px;\n        }\n        60% {\n        left: 75px;\n        }\n        100% {\n        left: 100px;\n        }\n    }\n````\nKeyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。\n\n这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体\n\n### 动画的持续时间\n\nanimation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下\n````css\nanimation-duration：<time> [ , <time> ]*\n````\n这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。\n\n### 动画的变化速率\n\nanimation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：\n````\nanimation-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [ , linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n\n### 动画的延迟执行时间\n\nanimation-delay是用来指定一个动画的延迟执行的时间。语法如下：\n````\nanimation-delay：<time> [ , <time> ]*\n````\n\n跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。\n\n以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。\n\n接下来介绍它们。\n\n### 动画的循环次数\nanimation-iteration-count是用来制定动画的循环次数，语法如下：\n````\nanimation-iteration-count：infinite | <number> [ , infinite | <number> ]*\n````\n- ：默认值，代表只循环一次\n- <number>：自定义对象动画的具体循环次数\n- infinite：无限循环\n\n### 动画的方向\nanimation-direction是用来指定元素动画播放的方向，语法如下：\n````\nanimation-direction：normal | alternate [ , normal | alternate ]*\n````\n- normal：动画的每次循环都是正常播放\n- alternate：动画的播放将是来回往返，一次是正常的与一次是反向的\n**注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。**\n\n### 动画结束的时的状态\nanimation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：\n````\nanimation-fill-mode：none | forwards | backwards | both [ , none | forwards | backwards | both ]*\n````\n- none：默认值。不设置对象动画之外的状态\n- forwards：设置对象状态为动画结束时的状态\n- backwards：设置对象状态为动画开始时的状态\n- both：设置对象状态为动画结束或开始的状态，为什么是或？往下看\n**注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。**\n\n### 动画的运动状态\nanimation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：\n````\nanimation-play-state：running | paused [ , running | paused ]*\n````\n### 总结\n结合以实例\n\n- 关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。\n- 动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。\n- 之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。\n- 再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。\n- animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。\n- animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。","slug":"css3-animation","published":1,"updated":"2019-04-30T06:04:29.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdt5001r4whsa03mt9qc","content":"<blockquote><p>This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-animations/\" target=\"_blank\" rel=\"external\">css3-animations</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。<br><a id=\"more\"></a><br>看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。</p>\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n<p>点击下面DEMO观看动画：</p>\n<p><figure></figure></p>\n<p><div id=\"sky\" class=\"target\"><br>    <div id=\"cloud\" class=\"target\"><br>    <div class=\"cloud cloud-1\"></div><br>    <div class=\"cloud cloud-2\"></div><br>    <div class=\"cloud cloud-3\"></div><br>    </div><br>    <div id=\"sun\" class=\"target\"></div><br>    <div id=\"moon\" class=\"target\"><br>    <div class=\"moon\"><br>    </div><br>    <div class=\"moon moon-2\"><br>    </div><br>    </div><br>    <div id=\"ground\" class=\"target\"></div><br></div></p>\n<p></p><p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p><p></p>\n<p><figcaption>animation动画 ”一天日月轮回 “</figcaption></p>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n\n</script>\n\n<p>以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o</p>\n<p>Animation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。</p>\n<h2 id=\"Animation动画\"><a href=\"#Animation动画\" class=\"headerlink\" title=\"Animation动画\"></a>Animation动画</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>：<span class=\"selector-attr\">[[ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span>|| <span class=\"selector-attr\">[animation-fill-mode]</span>] <span class=\"selector-attr\">[ , [ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span> || <span class=\"selector-attr\">[animation-fill-mode]</span>]*</span><br><span class=\"line\">相关属性：<span class=\"selector-attr\">[ animation-play-state ]</span></span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/</span></span><br><span class=\"line\">@<span class=\"selector-tag\">keyframes</span> <span class=\"selector-tag\">sky</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">0%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">33%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">66%</span> &#123; <span class=\"attribute\">background-color</span>:<span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">100%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.classname</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>:sky <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\"><span class=\"attribute\">animation-name</span>: sky;</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>: <span class=\"number\">10s</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: ease;</span><br><span class=\"line\"><span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-direction</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">animation-delay</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-fill-mode</span>: forwards;</span><br><span class=\"line\"><span class=\"attribute\">animation-play-state</span>: running;</span><br></pre></td></tr></table></figure>\n<h2 id=\"animation取值\"><a href=\"#animation取值\" class=\"headerlink\" title=\"animation取值\"></a>animation取值</h2><ol>\n<li>animation-name：设置对象所应用的动画名称</li>\n<li>animation-duration：设置对象动画的持续时间</li>\n<li>animation-timing-function：设置对象动画的过渡类型</li>\n<li>animation-delay：设置对象动画延迟的时间</li>\n<li>animation-iteration-count：设置对象动画的循环次数</li>\n<li>animation-direction：设置对象动画在循环中是否反向运动</li>\n<li>animation-fill-mode：设置对象动画结束时的状态</li>\n<li>animation-play-state：animation的相关属性，设置对象动画的状态</li>\n</ol>\n<h3 id=\"动画名称以及keyframes\"><a href=\"#动画名称以及keyframes\" class=\"headerlink\" title=\"动画名称以及keyframes\"></a>动画名称以及keyframes</h3><h4 id=\"动画名称\"><a href=\"#动画名称\" class=\"headerlink\" title=\"动画名称\"></a>动画名称</h4><p>animation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-name：<span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> [ , <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> ]*</span><br></pre></td></tr></table></figure>\n<p>动画具体名字得设置成 Keyframes 一样的名字。</p>\n<h4 id=\"Keyframes\"><a href=\"#Keyframes\" class=\"headerlink\" title=\"Keyframes\"></a>Keyframes</h4><p>keyframes 语法<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyframes-rule: <span class=\"string\">'@keyframes'</span> <span class=\"symbol\">IDENT</span> <span class=\"string\">'&#123;'</span> keyframes-blocks <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">keyframes-blocks: [ keyframe-selectors block ]* ;</span><br><span class=\"line\">keyframe-selectors: [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] [ <span class=\"string\">','</span> [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] ]*;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*具体写法*/</span></span><br><span class=\"line\"><span class=\"comment\">/* @keyframes IDENT &#123;*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> diagonal-slide &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者全部写成百分比的形式：*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> wobble &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    40% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    60% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。</p>\n<p>这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体</p>\n<h3 id=\"动画的持续时间\"><a href=\"#动画的持续时间\" class=\"headerlink\" title=\"动画的持续时间\"></a>动画的持续时间</h3><p>animation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation-duration</span>：&lt;<span class=\"selector-tag\">time</span>&gt; <span class=\"selector-attr\">[ , &lt;time&gt; ]</span>*</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。</p>\n<h3 id=\"动画的变化速率\"><a href=\"#动画的变化速率\" class=\"headerlink\" title=\"动画的变化速率\"></a>动画的变化速率</h3><p>animation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) [ , linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动画的延迟执行时间\"><a href=\"#动画的延迟执行时间\" class=\"headerlink\" title=\"动画的延迟执行时间\"></a>动画的延迟执行时间</h3><p>animation-delay是用来指定一个动画的延迟执行的时间。语法如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">animation</span>-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt; [ , &lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<p>跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。</p>\n<p>以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。</p>\n<p>接下来介绍它们。</p>\n<h3 id=\"动画的循环次数\"><a href=\"#动画的循环次数\" class=\"headerlink\" title=\"动画的循环次数\"></a>动画的循环次数</h3><p>animation-iteration-count是用来制定动画的循环次数，语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-iteration-<span class=\"built_in\">count</span>：infinite | &lt;<span class=\"built_in\">number</span>&gt; [ , infinite | &lt;<span class=\"built_in\">number</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>：默认值，代表只循环一次</li>\n<li><number>：自定义对象动画的具体循环次数</number></li>\n<li>infinite：无限循环</li>\n</ul>\n<h3 id=\"动画的方向\"><a href=\"#动画的方向\" class=\"headerlink\" title=\"动画的方向\"></a>动画的方向</h3><p>animation-direction是用来指定元素动画播放的方向，语法如下：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-direction：<span class=\"built-in\">normal</span> | alternate [ , <span class=\"built-in\">normal</span> | alternate ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>normal：动画的每次循环都是正常播放</li>\n<li>alternate：动画的播放将是来回往返，一次是正常的与一次是反向的<br><strong>注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。</strong></li>\n</ul>\n<h3 id=\"动画结束的时的状态\"><a href=\"#动画结束的时的状态\" class=\"headerlink\" title=\"动画结束的时的状态\"></a>动画结束的时的状态</h3><p>animation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-fill-mode：none |<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both [ , none </span>|<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both ]*</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>none：默认值。不设置对象动画之外的状态</li>\n<li>forwards：设置对象状态为动画结束时的状态</li>\n<li>backwards：设置对象状态为动画开始时的状态</li>\n<li>both：设置对象状态为动画结束或开始的状态，为什么是或？往下看<br><strong>注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。</strong></li>\n</ul>\n<h3 id=\"动画的运动状态\"><a href=\"#动画的运动状态\" class=\"headerlink\" title=\"动画的运动状态\"></a>动画的运动状态</h3><p>animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state：<span class=\"built_in\">running</span> | paused [ , <span class=\"built_in\">running</span> | paused ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>结合以实例</p>\n<ul>\n<li>关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。</li>\n<li>动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。</li>\n<li>之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。</li>\n<li>再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。</li>\n<li>animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。</li>\n<li>animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。</li>\n</ul>\n</figure>","excerpt":"<blockquote><p>This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-animations/\">css3-animations</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。<br>","more":"<br>看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。</p>\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n<p>点击下面DEMO观看动画：</p>\n<p><figure></p>\n<p><div id=\"sky\" class=\"target\"><br>    <div id=\"cloud\" class=\"target\"><br>    <div class=\"cloud cloud-1\"></div><br>    <div class=\"cloud cloud-2\"></div><br>    <div class=\"cloud cloud-3\"></div><br>    </div><br>    <div id=\"sun\" class=\"target\"></div><br>    <div id=\"moon\" class=\"target\"><br>    <div class=\"moon\"><br>    </div><br>    <div class=\"moon moon-2\"><br>    </div><br>    </div><br>    <div id=\"ground\" class=\"target\"></div><br></div></p>\n<p><p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p></p>\n<p><figcaption>animation动画 ”一天日月轮回 “</figcaption></p>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n\n</script>\n\n<p>以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o</p>\n<p>Animation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。</p>\n<h2 id=\"Animation动画\"><a href=\"#Animation动画\" class=\"headerlink\" title=\"Animation动画\"></a>Animation动画</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>：<span class=\"selector-attr\">[[ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span>|| <span class=\"selector-attr\">[animation-fill-mode]</span>] <span class=\"selector-attr\">[ , [ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span> || <span class=\"selector-attr\">[animation-fill-mode]</span>]*</span><br><span class=\"line\">相关属性：<span class=\"selector-attr\">[ animation-play-state ]</span></span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/</span></span><br><span class=\"line\">@<span class=\"selector-tag\">keyframes</span> <span class=\"selector-tag\">sky</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">0%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">33%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">66%</span> &#123; <span class=\"attribute\">background-color</span>:<span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">100%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.classname</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>:sky <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\"><span class=\"attribute\">animation-name</span>: sky;</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>: <span class=\"number\">10s</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: ease;</span><br><span class=\"line\"><span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-direction</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">animation-delay</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-fill-mode</span>: forwards;</span><br><span class=\"line\"><span class=\"attribute\">animation-play-state</span>: running;</span><br></pre></td></tr></table></figure>\n<h2 id=\"animation取值\"><a href=\"#animation取值\" class=\"headerlink\" title=\"animation取值\"></a>animation取值</h2><ol>\n<li>animation-name：设置对象所应用的动画名称</li>\n<li>animation-duration：设置对象动画的持续时间</li>\n<li>animation-timing-function：设置对象动画的过渡类型</li>\n<li>animation-delay：设置对象动画延迟的时间</li>\n<li>animation-iteration-count：设置对象动画的循环次数</li>\n<li>animation-direction：设置对象动画在循环中是否反向运动</li>\n<li>animation-fill-mode：设置对象动画结束时的状态</li>\n<li>animation-play-state：animation的相关属性，设置对象动画的状态</li>\n</ol>\n<h3 id=\"动画名称以及keyframes\"><a href=\"#动画名称以及keyframes\" class=\"headerlink\" title=\"动画名称以及keyframes\"></a>动画名称以及keyframes</h3><h4 id=\"动画名称\"><a href=\"#动画名称\" class=\"headerlink\" title=\"动画名称\"></a>动画名称</h4><p>animation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-name：<span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> [ , <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> ]*</span><br></pre></td></tr></table></figure>\n<p>动画具体名字得设置成 Keyframes 一样的名字。</p>\n<h4 id=\"Keyframes\"><a href=\"#Keyframes\" class=\"headerlink\" title=\"Keyframes\"></a>Keyframes</h4><p>keyframes 语法<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyframes-rule: <span class=\"string\">'@keyframes'</span> <span class=\"symbol\">IDENT</span> <span class=\"string\">'&#123;'</span> keyframes-blocks <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">keyframes-blocks: [ keyframe-selectors block ]* ;</span><br><span class=\"line\">keyframe-selectors: [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] [ <span class=\"string\">','</span> [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] ]*;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*具体写法*/</span></span><br><span class=\"line\"><span class=\"comment\">/* @keyframes IDENT &#123;*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> diagonal-slide &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者全部写成百分比的形式：*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> wobble &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    40% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    60% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。</p>\n<p>这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体</p>\n<h3 id=\"动画的持续时间\"><a href=\"#动画的持续时间\" class=\"headerlink\" title=\"动画的持续时间\"></a>动画的持续时间</h3><p>animation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation-duration</span>：&lt;<span class=\"selector-tag\">time</span>&gt; <span class=\"selector-attr\">[ , &lt;time&gt; ]</span>*</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。</p>\n<h3 id=\"动画的变化速率\"><a href=\"#动画的变化速率\" class=\"headerlink\" title=\"动画的变化速率\"></a>动画的变化速率</h3><p>animation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) [ , linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动画的延迟执行时间\"><a href=\"#动画的延迟执行时间\" class=\"headerlink\" title=\"动画的延迟执行时间\"></a>动画的延迟执行时间</h3><p>animation-delay是用来指定一个动画的延迟执行的时间。语法如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">animation</span>-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt; [ , &lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<p>跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。</p>\n<p>以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。</p>\n<p>接下来介绍它们。</p>\n<h3 id=\"动画的循环次数\"><a href=\"#动画的循环次数\" class=\"headerlink\" title=\"动画的循环次数\"></a>动画的循环次数</h3><p>animation-iteration-count是用来制定动画的循环次数，语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-iteration-<span class=\"built_in\">count</span>：infinite | &lt;<span class=\"built_in\">number</span>&gt; [ , infinite | &lt;<span class=\"built_in\">number</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>：默认值，代表只循环一次</li>\n<li><number>：自定义对象动画的具体循环次数</li>\n<li>infinite：无限循环</li>\n</ul>\n<h3 id=\"动画的方向\"><a href=\"#动画的方向\" class=\"headerlink\" title=\"动画的方向\"></a>动画的方向</h3><p>animation-direction是用来指定元素动画播放的方向，语法如下：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-direction：<span class=\"built-in\">normal</span> | alternate [ , <span class=\"built-in\">normal</span> | alternate ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>normal：动画的每次循环都是正常播放</li>\n<li>alternate：动画的播放将是来回往返，一次是正常的与一次是反向的<br><strong>注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。</strong></li>\n</ul>\n<h3 id=\"动画结束的时的状态\"><a href=\"#动画结束的时的状态\" class=\"headerlink\" title=\"动画结束的时的状态\"></a>动画结束的时的状态</h3><p>animation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-fill-mode：none |<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both [ , none </span>|<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both ]*</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>none：默认值。不设置对象动画之外的状态</li>\n<li>forwards：设置对象状态为动画结束时的状态</li>\n<li>backwards：设置对象状态为动画开始时的状态</li>\n<li>both：设置对象状态为动画结束或开始的状态，为什么是或？往下看<br><strong>注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。</strong></li>\n</ul>\n<h3 id=\"动画的运动状态\"><a href=\"#动画的运动状态\" class=\"headerlink\" title=\"动画的运动状态\"></a>动画的运动状态</h3><p>animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state：<span class=\"built_in\">running</span> | paused [ , <span class=\"built_in\">running</span> | paused ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>结合以实例</p>\n<ul>\n<li>关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。</li>\n<li>动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。</li>\n<li>之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。</li>\n<li>再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。</li>\n<li>animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。</li>\n<li>animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。</li>\n</ul>"},{"title":"正则基础学习","date":"2017-07-20T06:38:42.000Z","_content":"\n\n正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。\n\n虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。\n<!--more-->\n正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：\n\n**不使用正则：**\n遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。\n````javascript\n    var str = '12 javascript 34 html5 33 php 77 css';\n    var arr = [];\n    var figure = '';\n    for(var i=0;i='0' && str.charAt(i)<='9'){\n            figure += str.charAt(i);\n        }else{\n            if(figure){\n            arr.push(tmp);\n            figure ='';\n        }\n    }\n}\nconsole.log(arr)//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]\n````\n**而使用正则只需要如下短短的一行代码**：\n````javascript\nvar arr = str.match(/\\d+/g);\n````\n\n## 基础知识\n### 书写风格\n\njavascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。\n\n1. JS 风格： new RegExp('patten','ig')\n2. perl风格：/patten/ig\n\nJS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。\n\n### 什么是正则\n正则表达式的结构与数学表达式很类似。\n\n一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连\n\n为了方便理解，让我们先来看看大家一个典型的的数学表达式 `(x+3)*2+y`：\n\n这个数学表达式中`(x+3)*2`和`y`分别是两个项。每个项又由若干个__因子__组成，因子之间用乘号或除号相连。这里第一个项有两个因子`(x+3)`和`2`，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为__子表达式__。这里`x+3`就是一个子表达式。\n\n与数学表达式的__因子__相对应，构成正则表达式的部件称为__单位__；__项__则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。\n\n### 术语\n为了更好的学习正则，我们再来学习下正则表达式的一些术语\n\n1.  匹配（matching）\n    一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。\n\n2.  元字符（metacharacter）\n    只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。\n\n3. 子表达式（subexpression）\n    子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。\n\n### 匹配模式\n上例中斜杠后面的 `ig`是匹配模式，可选的值有3个：`i`,`g`,`m`。其含义如下：\n\n- `i`：为 ignore case，即 忽略大小写。\n- `g`：为 global search，即全局搜索。\n- `m`：为 moltiline search，即多行搜索。\n\n所以，一个完整正则表达式是由一个个__子表达式__组成的，而__子表达式__则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。\n\n## 元字符组成部分\n### 转义字符\n什么是转义字符？在\\后面加字符就可以转义为特殊字符。\n\n例如： `\\n`匹配一个换行符， `\\\\`匹配“\\”。\n\n### 预定义特殊字符\n\n1. `\\o`:Nol字符。\n2. `\\t`:水平制表符。\n3. `\\v`:垂直制表符。\n4. `\\n`:换行符。\n5. `\\r`:回车符。\n6. `\\b`:退格符。 只有出现在字符中才有效，即[]（中括号）中。\n\n### 字符类\n1. `[ ]`:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 `[abc]`就可以匹配\"css\"中的c；\n如果上例前面加 ^元字符，形如`[^asd]`，则表示匹配除了asd的其他字符；\n\n如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写`[a-c]`这么写，所以上例也可以这么写 `[^a-d]`\n\n2. `\\w`和`\\W`:`\\w`表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；`\\W`表示匹配不是ASCII字符组成的单词等价于`[^a-zA-Z0-9]`。\n3. `\\s`和`\\S`:`\\s`匹配空白符，等价于`[\\t\\n\\x0B\\f\\r]`；`\\S`则匹配非空白字符，等价于`[^\\t\\n\\x0B\\f\\r]`。\n4. `\\d`和`\\D`:`\\d`匹配数字字符，等价于`[0-9]`；`\\D`匹配数字字符，等价于`[^0-9]`\n5. `.`:javascript有点特殊，由于浏览器的解析引擎不同，`.`的匹配范围也有所不同。\n    1. IE8以下：\n    .匹配所有除了换行符`/n`换行符之外的任意字符。等同于`[^\\n\\r]`\n\n    2. IE9以上以及其他浏览器\n    .匹配所有除了换行符`/n`换行符和回车符`\\r`之外的任意字符。等同于`[^\\n\\r]`\n\n````javascript\ndocument.write(/./.test(\"\\r\") + \"\");\ndocument.write(/./.test(\"\\n\") + \"\");\n/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/\n````\n\n### 量词\n\n首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。\n\n而既然有贪婪模式，则一定也有非贪婪模式。\n\n对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。\n\n贪婪模式的量词，也叫简单量词，如下：\n\n`{n}`:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。\n`{n,}`:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。\n`{n,m}`:n、m都是正整数，表示至少匹配n次，至多m次。\n`?`:等价于{0,1}\n`+`:等价于{1,}\n`*`:等价于{0,}\n而在贪婪模式后加上 ?就变成了非贪婪模式。\n\n### 贪婪模式和非贪婪模式\n\n在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：\n\n````javascript\nvar pattern = 'aAaAaAb';\nconsole.log(/a+/i.exec(pattern)); //aAaAaA\nconsole.log(/a+?/i.exec(pattern)); //a\nconsole.log(/a+b/i.exec(pattern)); //aAaAaAb\nconsole.log(/a+?b/i.exec(pattern)); //aAaAaAb\n````\n\n全部是在忽略大小写的模式下：\n\n1. 第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”\n2. 第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”\n3. 第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。\n4. 第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。\n5. \n所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。\n\n\n### 匹配位置\n\n前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。\n\n1. `^`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之后的位置。\n2. `$`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之前的位置。\n3. `/b`:匹配单词边界，不匹配任何字符。\n\n所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。\n\n而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：\n\n````javascript\nvar str = \"html5_css3中文_h5$c3&汉字%\";\nconsole.log(str.match(/\\w+/g)); //\"html5_css3\" , \"_h5\" , \"c3\"\nconsole.log(str.match(/.\\b./g));//\"3中\" , \"文_\" , \"5$\" , \"3&\"\n````\n\n第一个例子中\\w+匹配了\"html5_css3\" , \"_h5\" , \"c3\"三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“_“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到\"3中\" , \"文_\" , \"5&\" ,说明这个字符串中有4个分界点5个子字符串，分别在\"3中\" , \"文_\" , \"5&\"之间，而四个子字符串分别是\"html5_css3\"，\"中文,\"_h5\",\"$c3\",\"&汉字%\"。\n\n所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。\n\n注意：\\b在[]中表示退格。\n\n\n### 分组\n学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。\n\n看实际例子吧：\n\n````javascript\n//1分组+量词\nconsole.log(/(js){2}/.test(\"jsjs\"));//true\n//2分组+范围\nconsole.log(/[JL]script/.test(\"Lscript\"));//true\n//3反向引用\nconsole.log(/([jJ])s\\1/.test(\"jsJs\"));//false\nconsole.log(/([jJ])s\\1/.test(\"jsjs\"));//true\n````\n\n例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。\n\n然后介绍第二个分组的符号|。\n\n与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：\n\n````javascript\nvar reg = /(html5|css3|js)!!/;\nconsole.log(reg.test(\"html5!!\"));//true\nconsole.log(reg.test(\"css3!!\"));//true\nconsole.log(reg.test(\"js!!\"));//true\n````\n\n### 非捕获性分组\n\n对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。\n\n从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nconsole.log(pattern1.replace(/(\\w+),(?:\\w+)/, \"$2,$1\"));//$2,JS,CSS\n````\n\n### 前瞻\n\n前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：\n\n1. `(?=p)`:要求之后的字符必须与p匹配\n2. `(?!p)`:要求之后的字符必须不与p匹配\n\n如下实例：\n````javascript\nvar reg1 = /java(?!Scrit)/;\nvar reg2 = /java(?=Scrit)/;\nconsole.log(reg1.test(\"javaScrit\")); //false\nconsole.log(reg1.test(\"javaB\"));//true\nconsole.log(reg2.test(\"javaScrit\")); //true\nconsole.log(reg2.test(\"javaB\"));//false\n````\n\n前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。\n\n\n支持正则方法有支持正则的字符串方法和正则自身的方法\n\n## 支持正则表达式的 String 对象的方法\n### 字符串搜索：\n`search()`方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。\n\n如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。\n\n````javascript\nvar pattern = \"hello html5 js css\";\nconsole.log(pattern.search(/Html5/i));//6\n````\n\n### 字符串匹配：\n\n`match()`方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。\n\n`match()`即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。\n\n````javascript\nvar pattern=\"2012 years 12 month 20 is the end of the world\";\nconsole.log(pattern.match(/\\d+/g));//[\"2012\",\"12\",\"20\"]\n````\n\n### 字符串替代：\n\n`replace()`方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。\n\n`replace()`的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：\n\n1. `$n`：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。\n2. `$&`：全部匹配的子字符串\n3. `$``：匹配子串左侧的文本\n4. `$'`：匹配子串右侧的文本\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nvar replace1 = pattern1.replace(/(\\w{1,}),(\\w+)/, \"$2,$1\");\nconsole.log(replace1);//HTML5,JS,CSS\nvar replace2 = pattern1.replace(/(\\w+),/g,\"$1-\");\nconsole.log(replace2);//JS-HTML5-CSS\n````\n\n### 字符串分割：\n\n`split()`方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。\n\n若使用 `split(\"\")` 则会将单词分割成字母\n````javascript\nvar pattern = \"HTML5 JS CSS\";\nvar sWord1 = pattern.split(\" \");\nvar sWord2 = pattern.split(\"\");\nconsole.log(sWord1);//[ \"HTML5\" , \"JS\" , \"CSS\" ]\nconsole.log(sWord2);//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]\n````\n\n## RegExp 对象的方法\n## test：\n\ntest()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false\n\n## exec：\nexec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。","source":"_posts/javascript-reg-1.md","raw":"title: 正则基础学习\ndate: 2017-07-20 14:38:42\ntags: \n- JavaScript\n- 正则\ncategories:\n- JavaScript\n---\n\n\n正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。\n\n虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。\n<!--more-->\n正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：\n\n**不使用正则：**\n遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。\n````javascript\n    var str = '12 javascript 34 html5 33 php 77 css';\n    var arr = [];\n    var figure = '';\n    for(var i=0;i='0' && str.charAt(i)<='9'){\n            figure += str.charAt(i);\n        }else{\n            if(figure){\n            arr.push(tmp);\n            figure ='';\n        }\n    }\n}\nconsole.log(arr)//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]\n````\n**而使用正则只需要如下短短的一行代码**：\n````javascript\nvar arr = str.match(/\\d+/g);\n````\n\n## 基础知识\n### 书写风格\n\njavascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。\n\n1. JS 风格： new RegExp('patten','ig')\n2. perl风格：/patten/ig\n\nJS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。\n\n### 什么是正则\n正则表达式的结构与数学表达式很类似。\n\n一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连\n\n为了方便理解，让我们先来看看大家一个典型的的数学表达式 `(x+3)*2+y`：\n\n这个数学表达式中`(x+3)*2`和`y`分别是两个项。每个项又由若干个__因子__组成，因子之间用乘号或除号相连。这里第一个项有两个因子`(x+3)`和`2`，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为__子表达式__。这里`x+3`就是一个子表达式。\n\n与数学表达式的__因子__相对应，构成正则表达式的部件称为__单位__；__项__则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。\n\n### 术语\n为了更好的学习正则，我们再来学习下正则表达式的一些术语\n\n1.  匹配（matching）\n    一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。\n\n2.  元字符（metacharacter）\n    只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。\n\n3. 子表达式（subexpression）\n    子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。\n\n### 匹配模式\n上例中斜杠后面的 `ig`是匹配模式，可选的值有3个：`i`,`g`,`m`。其含义如下：\n\n- `i`：为 ignore case，即 忽略大小写。\n- `g`：为 global search，即全局搜索。\n- `m`：为 moltiline search，即多行搜索。\n\n所以，一个完整正则表达式是由一个个__子表达式__组成的，而__子表达式__则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。\n\n## 元字符组成部分\n### 转义字符\n什么是转义字符？在\\后面加字符就可以转义为特殊字符。\n\n例如： `\\n`匹配一个换行符， `\\\\`匹配“\\”。\n\n### 预定义特殊字符\n\n1. `\\o`:Nol字符。\n2. `\\t`:水平制表符。\n3. `\\v`:垂直制表符。\n4. `\\n`:换行符。\n5. `\\r`:回车符。\n6. `\\b`:退格符。 只有出现在字符中才有效，即[]（中括号）中。\n\n### 字符类\n1. `[ ]`:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 `[abc]`就可以匹配\"css\"中的c；\n如果上例前面加 ^元字符，形如`[^asd]`，则表示匹配除了asd的其他字符；\n\n如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写`[a-c]`这么写，所以上例也可以这么写 `[^a-d]`\n\n2. `\\w`和`\\W`:`\\w`表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；`\\W`表示匹配不是ASCII字符组成的单词等价于`[^a-zA-Z0-9]`。\n3. `\\s`和`\\S`:`\\s`匹配空白符，等价于`[\\t\\n\\x0B\\f\\r]`；`\\S`则匹配非空白字符，等价于`[^\\t\\n\\x0B\\f\\r]`。\n4. `\\d`和`\\D`:`\\d`匹配数字字符，等价于`[0-9]`；`\\D`匹配数字字符，等价于`[^0-9]`\n5. `.`:javascript有点特殊，由于浏览器的解析引擎不同，`.`的匹配范围也有所不同。\n    1. IE8以下：\n    .匹配所有除了换行符`/n`换行符之外的任意字符。等同于`[^\\n\\r]`\n\n    2. IE9以上以及其他浏览器\n    .匹配所有除了换行符`/n`换行符和回车符`\\r`之外的任意字符。等同于`[^\\n\\r]`\n\n````javascript\ndocument.write(/./.test(\"\\r\") + \"\");\ndocument.write(/./.test(\"\\n\") + \"\");\n/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/\n````\n\n### 量词\n\n首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。\n\n而既然有贪婪模式，则一定也有非贪婪模式。\n\n对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。\n\n贪婪模式的量词，也叫简单量词，如下：\n\n`{n}`:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。\n`{n,}`:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。\n`{n,m}`:n、m都是正整数，表示至少匹配n次，至多m次。\n`?`:等价于{0,1}\n`+`:等价于{1,}\n`*`:等价于{0,}\n而在贪婪模式后加上 ?就变成了非贪婪模式。\n\n### 贪婪模式和非贪婪模式\n\n在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：\n\n````javascript\nvar pattern = 'aAaAaAb';\nconsole.log(/a+/i.exec(pattern)); //aAaAaA\nconsole.log(/a+?/i.exec(pattern)); //a\nconsole.log(/a+b/i.exec(pattern)); //aAaAaAb\nconsole.log(/a+?b/i.exec(pattern)); //aAaAaAb\n````\n\n全部是在忽略大小写的模式下：\n\n1. 第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”\n2. 第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”\n3. 第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。\n4. 第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。\n5. \n所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。\n\n\n### 匹配位置\n\n前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。\n\n1. `^`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之后的位置。\n2. `$`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之前的位置。\n3. `/b`:匹配单词边界，不匹配任何字符。\n\n所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。\n\n而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：\n\n````javascript\nvar str = \"html5_css3中文_h5$c3&汉字%\";\nconsole.log(str.match(/\\w+/g)); //\"html5_css3\" , \"_h5\" , \"c3\"\nconsole.log(str.match(/.\\b./g));//\"3中\" , \"文_\" , \"5$\" , \"3&\"\n````\n\n第一个例子中\\w+匹配了\"html5_css3\" , \"_h5\" , \"c3\"三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“_“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到\"3中\" , \"文_\" , \"5&\" ,说明这个字符串中有4个分界点5个子字符串，分别在\"3中\" , \"文_\" , \"5&\"之间，而四个子字符串分别是\"html5_css3\"，\"中文,\"_h5\",\"$c3\",\"&汉字%\"。\n\n所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。\n\n注意：\\b在[]中表示退格。\n\n\n### 分组\n学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。\n\n看实际例子吧：\n\n````javascript\n//1分组+量词\nconsole.log(/(js){2}/.test(\"jsjs\"));//true\n//2分组+范围\nconsole.log(/[JL]script/.test(\"Lscript\"));//true\n//3反向引用\nconsole.log(/([jJ])s\\1/.test(\"jsJs\"));//false\nconsole.log(/([jJ])s\\1/.test(\"jsjs\"));//true\n````\n\n例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。\n\n然后介绍第二个分组的符号|。\n\n与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：\n\n````javascript\nvar reg = /(html5|css3|js)!!/;\nconsole.log(reg.test(\"html5!!\"));//true\nconsole.log(reg.test(\"css3!!\"));//true\nconsole.log(reg.test(\"js!!\"));//true\n````\n\n### 非捕获性分组\n\n对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。\n\n从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nconsole.log(pattern1.replace(/(\\w+),(?:\\w+)/, \"$2,$1\"));//$2,JS,CSS\n````\n\n### 前瞻\n\n前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：\n\n1. `(?=p)`:要求之后的字符必须与p匹配\n2. `(?!p)`:要求之后的字符必须不与p匹配\n\n如下实例：\n````javascript\nvar reg1 = /java(?!Scrit)/;\nvar reg2 = /java(?=Scrit)/;\nconsole.log(reg1.test(\"javaScrit\")); //false\nconsole.log(reg1.test(\"javaB\"));//true\nconsole.log(reg2.test(\"javaScrit\")); //true\nconsole.log(reg2.test(\"javaB\"));//false\n````\n\n前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。\n\n\n支持正则方法有支持正则的字符串方法和正则自身的方法\n\n## 支持正则表达式的 String 对象的方法\n### 字符串搜索：\n`search()`方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。\n\n如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。\n\n````javascript\nvar pattern = \"hello html5 js css\";\nconsole.log(pattern.search(/Html5/i));//6\n````\n\n### 字符串匹配：\n\n`match()`方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。\n\n`match()`即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。\n\n````javascript\nvar pattern=\"2012 years 12 month 20 is the end of the world\";\nconsole.log(pattern.match(/\\d+/g));//[\"2012\",\"12\",\"20\"]\n````\n\n### 字符串替代：\n\n`replace()`方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。\n\n`replace()`的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：\n\n1. `$n`：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。\n2. `$&`：全部匹配的子字符串\n3. `$``：匹配子串左侧的文本\n4. `$'`：匹配子串右侧的文本\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nvar replace1 = pattern1.replace(/(\\w{1,}),(\\w+)/, \"$2,$1\");\nconsole.log(replace1);//HTML5,JS,CSS\nvar replace2 = pattern1.replace(/(\\w+),/g,\"$1-\");\nconsole.log(replace2);//JS-HTML5-CSS\n````\n\n### 字符串分割：\n\n`split()`方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。\n\n若使用 `split(\"\")` 则会将单词分割成字母\n````javascript\nvar pattern = \"HTML5 JS CSS\";\nvar sWord1 = pattern.split(\" \");\nvar sWord2 = pattern.split(\"\");\nconsole.log(sWord1);//[ \"HTML5\" , \"JS\" , \"CSS\" ]\nconsole.log(sWord2);//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]\n````\n\n## RegExp 对象的方法\n## test：\n\ntest()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false\n\n## exec：\nexec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。","slug":"javascript-reg-1","published":1,"updated":"2019-04-30T06:04:29.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv3ehdt6001s4whsed540kqv","content":"<p>正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。</p>\n<p>虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。<br><a id=\"more\"></a><br>正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：</p>\n<p><strong>不使用正则：</strong><br>遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'12 javascript 34 html5 33 php 77 css'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> figure = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i=<span class=\"string\">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">            figure += str.charAt(i);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(figure)&#123;</span><br><span class=\"line\">            arr.push(tmp);</span><br><span class=\"line\">            figure =<span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>而使用正则只需要如下短短的一行代码</strong>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"书写风格\"><a href=\"#书写风格\" class=\"headerlink\" title=\"书写风格\"></a>书写风格</h3><p>javascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。</p>\n<ol>\n<li>JS 风格： new RegExp(‘patten’,’ig’)</li>\n<li>perl风格：/patten/ig</li>\n</ol>\n<p>JS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。</p>\n<h3 id=\"什么是正则\"><a href=\"#什么是正则\" class=\"headerlink\" title=\"什么是正则\"></a>什么是正则</h3><p>正则表达式的结构与数学表达式很类似。</p>\n<p>一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连</p>\n<p>为了方便理解，让我们先来看看大家一个典型的的数学表达式 <code>(x+3)*2+y</code>：</p>\n<p>这个数学表达式中<code>(x+3)*2</code>和<code>y</code>分别是两个项。每个项又由若干个<strong>因子</strong>组成，因子之间用乘号或除号相连。这里第一个项有两个因子<code>(x+3)</code>和<code>2</code>，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为<strong>子表达式</strong>。这里<code>x+3</code>就是一个子表达式。</p>\n<p>与数学表达式的<strong>因子</strong>相对应，构成正则表达式的部件称为<strong>单位</strong>；<strong>项</strong>则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。</p>\n<h3 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h3><p>为了更好的学习正则，我们再来学习下正则表达式的一些术语</p>\n<ol>\n<li><p>匹配（matching）<br>一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。</p>\n</li>\n<li><p>元字符（metacharacter）<br>只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。</p>\n</li>\n<li><p>子表达式（subexpression）<br> 子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。</p>\n</li>\n</ol>\n<h3 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h3><p>上例中斜杠后面的 <code>ig</code>是匹配模式，可选的值有3个：<code>i</code>,<code>g</code>,<code>m</code>。其含义如下：</p>\n<ul>\n<li><code>i</code>：为 ignore case，即 忽略大小写。</li>\n<li><code>g</code>：为 global search，即全局搜索。</li>\n<li><code>m</code>：为 moltiline search，即多行搜索。</li>\n</ul>\n<p>所以，一个完整正则表达式是由一个个<strong>子表达式</strong>组成的，而<strong>子表达式</strong>则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。</p>\n<h2 id=\"元字符组成部分\"><a href=\"#元字符组成部分\" class=\"headerlink\" title=\"元字符组成部分\"></a>元字符组成部分</h2><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>什么是转义字符？在\\后面加字符就可以转义为特殊字符。</p>\n<p>例如： <code>\\n</code>匹配一个换行符， <code>\\\\</code>匹配“\\”。</p>\n<h3 id=\"预定义特殊字符\"><a href=\"#预定义特殊字符\" class=\"headerlink\" title=\"预定义特殊字符\"></a>预定义特殊字符</h3><ol>\n<li><code>\\o</code>:Nol字符。</li>\n<li><code>\\t</code>:水平制表符。</li>\n<li><code>\\v</code>:垂直制表符。</li>\n<li><code>\\n</code>:换行符。</li>\n<li><code>\\r</code>:回车符。</li>\n<li><code>\\b</code>:退格符。 只有出现在字符中才有效，即[]（中括号）中。</li>\n</ol>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><ol>\n<li><code>[ ]</code>:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 <code>[abc]</code>就可以匹配”css”中的c；<br>如果上例前面加 ^元字符，形如<code>[^asd]</code>，则表示匹配除了asd的其他字符；</li>\n</ol>\n<p>如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写<code>[a-c]</code>这么写，所以上例也可以这么写 <code>[^a-d]</code></p>\n<ol>\n<li><code>\\w</code>和<code>\\W</code>:<code>\\w</code>表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；<code>\\W</code>表示匹配不是ASCII字符组成的单词等价于<code>[^a-zA-Z0-9]</code>。</li>\n<li><code>\\s</code>和<code>\\S</code>:<code>\\s</code>匹配空白符，等价于<code>[\\t\\n\\x0B\\f\\r]</code>；<code>\\S</code>则匹配非空白字符，等价于<code>[^\\t\\n\\x0B\\f\\r]</code>。</li>\n<li><code>\\d</code>和<code>\\D</code>:<code>\\d</code>匹配数字字符，等价于<code>[0-9]</code>；<code>\\D</code>匹配数字字符，等价于<code>[^0-9]</code></li>\n<li><p><code>.</code>:javascript有点特殊，由于浏览器的解析引擎不同，<code>.</code>的匹配范围也有所不同。</p>\n<ol>\n<li><p>IE8以下：<br>.匹配所有除了换行符<code>/n</code>换行符之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n<li><p>IE9以上以及其他浏览器<br>.匹配所有除了换行符<code>/n</code>换行符和回车符<code>\\r</code>之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\r\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。</p>\n<p>而既然有贪婪模式，则一定也有非贪婪模式。</p>\n<p>对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。</p>\n<p>贪婪模式的量词，也叫简单量词，如下：</p>\n<p><code>{n}</code>:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。<br><code>{n,}</code>:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。<br><code>{n,m}</code>:n、m都是正整数，表示至少匹配n次，至多m次。<br><code>?</code>:等价于{0,1}<br><code>+</code>:等价于{1,}<br><code>*</code>:等价于{0,}<br>而在贪婪模式后加上 ?就变成了非贪婪模式。</p>\n<h3 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h3><p>在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">'aAaAaAb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?/i</span>.exec(pattern)); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br></pre></td></tr></table></figure>\n<p>全部是在忽略大小写的模式下：</p>\n<ol>\n<li>第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”</li>\n<li>第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”</li>\n<li>第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。</li>\n<li>第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。</li>\n<li>所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。</li>\n</ol>\n<h3 id=\"匹配位置\"><a href=\"#匹配位置\" class=\"headerlink\" title=\"匹配位置\"></a>匹配位置</h3><p>前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。</p>\n<ol>\n<li><code>^</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之后的位置。</li>\n<li><code>$</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之前的位置。</li>\n<li><code>/b</code>:匹配单词边界，不匹配任何字符。</li>\n</ol>\n<p>所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。</p>\n<p>而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"html5_css3中文_h5$c3&amp;汉字%\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/\\w+/g</span>)); <span class=\"comment\">//\"html5_css3\" , \"_h5\" , \"c3\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/.\\b./g</span>));<span class=\"comment\">//\"3中\" , \"文_\" , \"5$\" , \"3&amp;\"</span></span><br></pre></td></tr></table></figure>\n<p>第一个例子中\\w+匹配了”html5_css3” , “<em>h5” , “c3”三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“</em>“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到”3中” , “文<em>“ , “5&amp;” ,说明这个字符串中有4个分界点5个子字符串，分别在”3中” , “文</em>“ , “5&amp;”之间，而四个子字符串分别是”html5_css3”，”中文,”_h5”,”$c3”,”&amp;汉字%”。</p>\n<p>所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。</p>\n<p>注意：\\b在[]中表示退格。</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。</p>\n<p>看实际例子吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1分组+量词</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/(js)&#123;2&#125;/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2分组+范围</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/[JL]script/</span>.test(<span class=\"string\">\"Lscript\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3反向引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsJs\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。</p>\n<p>然后介绍第二个分组的符号|。</p>\n<p>与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(html5|css3|js)!!/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"html5!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"css3!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"js!!\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非捕获性分组\"><a href=\"#非捕获性分组\" class=\"headerlink\" title=\"非捕获性分组\"></a>非捕获性分组</h3><p>对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。</p>\n<p>从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern1.replace(<span class=\"regexp\">/(\\w+),(?:\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>));<span class=\"comment\">//$2,JS,CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><p>前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：</p>\n<ol>\n<li><code>(?=p)</code>:要求之后的字符必须与p匹配</li>\n<li><code>(?!p)</code>:要求之后的字符必须不与p匹配</li>\n</ol>\n<p>如下实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/java(?!Scrit)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/java(?=Scrit)/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。</p>\n<p>支持正则方法有支持正则的字符串方法和正则自身的方法</p>\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><h3 id=\"字符串搜索：\"><a href=\"#字符串搜索：\" class=\"headerlink\" title=\"字符串搜索：\"></a>字符串搜索：</h3><p><code>search()</code>方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。</p>\n<p>如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"hello html5 js css\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.search(<span class=\"regexp\">/Html5/i</span>));<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串匹配：\"><a href=\"#字符串匹配：\" class=\"headerlink\" title=\"字符串匹配：\"></a>字符串匹配：</h3><p><code>match()</code>方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。</p>\n<p><code>match()</code>即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"string\">\"2012 years 12 month 20 is the end of the world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.match(<span class=\"regexp\">/\\d+/g</span>));<span class=\"comment\">//[\"2012\",\"12\",\"20\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串替代：\"><a href=\"#字符串替代：\" class=\"headerlink\" title=\"字符串替代：\"></a>字符串替代：</h3><p><code>replace()</code>方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。</p>\n<p><code>replace()</code>的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：</p>\n<ol>\n<li><code>$n</code>：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。</li>\n<li><code>$&amp;</code>：全部匹配的子字符串</li>\n<li>`$``：匹配子串左侧的文本</li>\n<li><code>$&#39;</code>：匹配子串右侧的文本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replace1 = pattern1.replace(<span class=\"regexp\">/(\\w&#123;1,&#125;),(\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace1);<span class=\"comment\">//HTML5,JS,CSS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> replace2 = pattern1.replace(<span class=\"regexp\">/(\\w+),/g</span>,<span class=\"string\">\"$1-\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace2);<span class=\"comment\">//JS-HTML5-CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串分割：\"><a href=\"#字符串分割：\" class=\"headerlink\" title=\"字符串分割：\"></a>字符串分割：</h3><p><code>split()</code>方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。</p>\n<p>若使用 <code>split(&quot;&quot;)</code> 则会将单词分割成字母<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"HTML5 JS CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord1 = pattern.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord2 = pattern.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord1);<span class=\"comment\">//[ \"HTML5\" , \"JS\" , \"CSS\" ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord2);<span class=\"comment\">//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RegExp-对象的方法\"><a href=\"#RegExp-对象的方法\" class=\"headerlink\" title=\"RegExp 对象的方法\"></a>RegExp 对象的方法</h2><h2 id=\"test：\"><a href=\"#test：\" class=\"headerlink\" title=\"test：\"></a>test：</h2><p>test()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false</p>\n<h2 id=\"exec：\"><a href=\"#exec：\" class=\"headerlink\" title=\"exec：\"></a>exec：</h2><p>exec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。</p>\n","excerpt":"<p>正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。</p>\n<p>虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。<br>","more":"<br>正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：</p>\n<p><strong>不使用正则：</strong><br>遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'12 javascript 34 html5 33 php 77 css'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> figure = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i=<span class=\"string\">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">            figure += str.charAt(i);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(figure)&#123;</span><br><span class=\"line\">            arr.push(tmp);</span><br><span class=\"line\">            figure =<span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>而使用正则只需要如下短短的一行代码</strong>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"书写风格\"><a href=\"#书写风格\" class=\"headerlink\" title=\"书写风格\"></a>书写风格</h3><p>javascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。</p>\n<ol>\n<li>JS 风格： new RegExp(‘patten’,’ig’)</li>\n<li>perl风格：/patten/ig</li>\n</ol>\n<p>JS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。</p>\n<h3 id=\"什么是正则\"><a href=\"#什么是正则\" class=\"headerlink\" title=\"什么是正则\"></a>什么是正则</h3><p>正则表达式的结构与数学表达式很类似。</p>\n<p>一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连</p>\n<p>为了方便理解，让我们先来看看大家一个典型的的数学表达式 <code>(x+3)*2+y</code>：</p>\n<p>这个数学表达式中<code>(x+3)*2</code>和<code>y</code>分别是两个项。每个项又由若干个<strong>因子</strong>组成，因子之间用乘号或除号相连。这里第一个项有两个因子<code>(x+3)</code>和<code>2</code>，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为<strong>子表达式</strong>。这里<code>x+3</code>就是一个子表达式。</p>\n<p>与数学表达式的<strong>因子</strong>相对应，构成正则表达式的部件称为<strong>单位</strong>；<strong>项</strong>则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。</p>\n<h3 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h3><p>为了更好的学习正则，我们再来学习下正则表达式的一些术语</p>\n<ol>\n<li><p>匹配（matching）<br>一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。</p>\n</li>\n<li><p>元字符（metacharacter）<br>只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。</p>\n</li>\n<li><p>子表达式（subexpression）<br> 子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。</p>\n</li>\n</ol>\n<h3 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h3><p>上例中斜杠后面的 <code>ig</code>是匹配模式，可选的值有3个：<code>i</code>,<code>g</code>,<code>m</code>。其含义如下：</p>\n<ul>\n<li><code>i</code>：为 ignore case，即 忽略大小写。</li>\n<li><code>g</code>：为 global search，即全局搜索。</li>\n<li><code>m</code>：为 moltiline search，即多行搜索。</li>\n</ul>\n<p>所以，一个完整正则表达式是由一个个<strong>子表达式</strong>组成的，而<strong>子表达式</strong>则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。</p>\n<h2 id=\"元字符组成部分\"><a href=\"#元字符组成部分\" class=\"headerlink\" title=\"元字符组成部分\"></a>元字符组成部分</h2><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>什么是转义字符？在\\后面加字符就可以转义为特殊字符。</p>\n<p>例如： <code>\\n</code>匹配一个换行符， <code>\\\\</code>匹配“\\”。</p>\n<h3 id=\"预定义特殊字符\"><a href=\"#预定义特殊字符\" class=\"headerlink\" title=\"预定义特殊字符\"></a>预定义特殊字符</h3><ol>\n<li><code>\\o</code>:Nol字符。</li>\n<li><code>\\t</code>:水平制表符。</li>\n<li><code>\\v</code>:垂直制表符。</li>\n<li><code>\\n</code>:换行符。</li>\n<li><code>\\r</code>:回车符。</li>\n<li><code>\\b</code>:退格符。 只有出现在字符中才有效，即[]（中括号）中。</li>\n</ol>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><ol>\n<li><code>[ ]</code>:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 <code>[abc]</code>就可以匹配”css”中的c；<br>如果上例前面加 ^元字符，形如<code>[^asd]</code>，则表示匹配除了asd的其他字符；</li>\n</ol>\n<p>如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写<code>[a-c]</code>这么写，所以上例也可以这么写 <code>[^a-d]</code></p>\n<ol>\n<li><code>\\w</code>和<code>\\W</code>:<code>\\w</code>表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；<code>\\W</code>表示匹配不是ASCII字符组成的单词等价于<code>[^a-zA-Z0-9]</code>。</li>\n<li><code>\\s</code>和<code>\\S</code>:<code>\\s</code>匹配空白符，等价于<code>[\\t\\n\\x0B\\f\\r]</code>；<code>\\S</code>则匹配非空白字符，等价于<code>[^\\t\\n\\x0B\\f\\r]</code>。</li>\n<li><code>\\d</code>和<code>\\D</code>:<code>\\d</code>匹配数字字符，等价于<code>[0-9]</code>；<code>\\D</code>匹配数字字符，等价于<code>[^0-9]</code></li>\n<li><p><code>.</code>:javascript有点特殊，由于浏览器的解析引擎不同，<code>.</code>的匹配范围也有所不同。</p>\n<ol>\n<li><p>IE8以下：<br>.匹配所有除了换行符<code>/n</code>换行符之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n<li><p>IE9以上以及其他浏览器<br>.匹配所有除了换行符<code>/n</code>换行符和回车符<code>\\r</code>之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\r\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。</p>\n<p>而既然有贪婪模式，则一定也有非贪婪模式。</p>\n<p>对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。</p>\n<p>贪婪模式的量词，也叫简单量词，如下：</p>\n<p><code>{n}</code>:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。<br><code>{n,}</code>:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。<br><code>{n,m}</code>:n、m都是正整数，表示至少匹配n次，至多m次。<br><code>?</code>:等价于{0,1}<br><code>+</code>:等价于{1,}<br><code>*</code>:等价于{0,}<br>而在贪婪模式后加上 ?就变成了非贪婪模式。</p>\n<h3 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h3><p>在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">'aAaAaAb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?/i</span>.exec(pattern)); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br></pre></td></tr></table></figure>\n<p>全部是在忽略大小写的模式下：</p>\n<ol>\n<li>第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”</li>\n<li>第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”</li>\n<li>第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。</li>\n<li>第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。</li>\n<li>所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。</li>\n</ol>\n<h3 id=\"匹配位置\"><a href=\"#匹配位置\" class=\"headerlink\" title=\"匹配位置\"></a>匹配位置</h3><p>前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。</p>\n<ol>\n<li><code>^</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之后的位置。</li>\n<li><code>$</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之前的位置。</li>\n<li><code>/b</code>:匹配单词边界，不匹配任何字符。</li>\n</ol>\n<p>所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。</p>\n<p>而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"html5_css3中文_h5$c3&amp;汉字%\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/\\w+/g</span>)); <span class=\"comment\">//\"html5_css3\" , \"_h5\" , \"c3\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/.\\b./g</span>));<span class=\"comment\">//\"3中\" , \"文_\" , \"5$\" , \"3&amp;\"</span></span><br></pre></td></tr></table></figure>\n<p>第一个例子中\\w+匹配了”html5_css3” , “<em>h5” , “c3”三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“</em>“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到”3中” , “文<em>“ , “5&amp;” ,说明这个字符串中有4个分界点5个子字符串，分别在”3中” , “文</em>“ , “5&amp;”之间，而四个子字符串分别是”html5_css3”，”中文,”_h5”,”$c3”,”&amp;汉字%”。</p>\n<p>所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。</p>\n<p>注意：\\b在[]中表示退格。</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。</p>\n<p>看实际例子吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1分组+量词</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/(js)&#123;2&#125;/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2分组+范围</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/[JL]script/</span>.test(<span class=\"string\">\"Lscript\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3反向引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsJs\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。</p>\n<p>然后介绍第二个分组的符号|。</p>\n<p>与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(html5|css3|js)!!/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"html5!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"css3!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"js!!\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非捕获性分组\"><a href=\"#非捕获性分组\" class=\"headerlink\" title=\"非捕获性分组\"></a>非捕获性分组</h3><p>对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。</p>\n<p>从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern1.replace(<span class=\"regexp\">/(\\w+),(?:\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>));<span class=\"comment\">//$2,JS,CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><p>前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：</p>\n<ol>\n<li><code>(?=p)</code>:要求之后的字符必须与p匹配</li>\n<li><code>(?!p)</code>:要求之后的字符必须不与p匹配</li>\n</ol>\n<p>如下实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/java(?!Scrit)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/java(?=Scrit)/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。</p>\n<p>支持正则方法有支持正则的字符串方法和正则自身的方法</p>\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><h3 id=\"字符串搜索：\"><a href=\"#字符串搜索：\" class=\"headerlink\" title=\"字符串搜索：\"></a>字符串搜索：</h3><p><code>search()</code>方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。</p>\n<p>如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"hello html5 js css\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.search(<span class=\"regexp\">/Html5/i</span>));<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串匹配：\"><a href=\"#字符串匹配：\" class=\"headerlink\" title=\"字符串匹配：\"></a>字符串匹配：</h3><p><code>match()</code>方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。</p>\n<p><code>match()</code>即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"string\">\"2012 years 12 month 20 is the end of the world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.match(<span class=\"regexp\">/\\d+/g</span>));<span class=\"comment\">//[\"2012\",\"12\",\"20\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串替代：\"><a href=\"#字符串替代：\" class=\"headerlink\" title=\"字符串替代：\"></a>字符串替代：</h3><p><code>replace()</code>方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。</p>\n<p><code>replace()</code>的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：</p>\n<ol>\n<li><code>$n</code>：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。</li>\n<li><code>$&amp;</code>：全部匹配的子字符串</li>\n<li>`$``：匹配子串左侧的文本</li>\n<li><code>$&#39;</code>：匹配子串右侧的文本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replace1 = pattern1.replace(<span class=\"regexp\">/(\\w&#123;1,&#125;),(\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace1);<span class=\"comment\">//HTML5,JS,CSS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> replace2 = pattern1.replace(<span class=\"regexp\">/(\\w+),/g</span>,<span class=\"string\">\"$1-\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace2);<span class=\"comment\">//JS-HTML5-CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串分割：\"><a href=\"#字符串分割：\" class=\"headerlink\" title=\"字符串分割：\"></a>字符串分割：</h3><p><code>split()</code>方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。</p>\n<p>若使用 <code>split(&quot;&quot;)</code> 则会将单词分割成字母<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"HTML5 JS CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord1 = pattern.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord2 = pattern.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord1);<span class=\"comment\">//[ \"HTML5\" , \"JS\" , \"CSS\" ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord2);<span class=\"comment\">//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RegExp-对象的方法\"><a href=\"#RegExp-对象的方法\" class=\"headerlink\" title=\"RegExp 对象的方法\"></a>RegExp 对象的方法</h2><h2 id=\"test：\"><a href=\"#test：\" class=\"headerlink\" title=\"test：\"></a>test：</h2><p>test()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false</p>\n<h2 id=\"exec：\"><a href=\"#exec：\" class=\"headerlink\" title=\"exec：\"></a>exec：</h2><p>exec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。</p>"},{"title":"Redux源码解析","date":"2018-05-24T05:53:51.000Z","_content":"\n版本号 redux@4.0.1\n\n## createStore\n\n`createStore.js` 源码分析如下：\n````javascript\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\n/**\n * 创建一个Redux store 来存储所有state\n * 调用 dispatch 是唯一改变store的方法\n *\n * 应用只有一个单独的store. 通过action指定state tree做出不同的操作，\n * 通过combineReducers方法将将多个reducer合成一个reducer.\n *\n * @param {Function}  reducer 接受当前state和要处理的action，返回新的statetree\nreducer 是一个函数,接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树\n\n  [preloadedState]  初始化的state，可以设置store中的默认值 , 可以将服务端传来经过处理后的 state 传给它。\n * 如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象\n \n * @param {Function} [enhancer] 高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。 \n *\n * @returns {Store} 返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方法,   \n */\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 保证 传入的 preloadedState, enhancer 是非函数 \n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function'\n    )\n  }\n  // 如果第二个参数是函数，则将 preloadedState 赋给 enhancer \n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n  // enhancer必须是函数\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  // reducer必须是函数\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer // 当前的reducer\n  let currentState = preloadedState // 当前的 state\n  let currentListeners = [] // 当前dispatch将会触发的更新函数数组\n  let nextListeners = currentListeners // 下个dispatch将会触发的函数数组 \n  let isDispatching = false // 变量开关，是否正在执行dispatch\n  \n  // 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n    // 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变\n    // 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    // 将listener推入到nextListeners数组\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n    // 将listener从nextListeners数组中删除      \n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n    /**\n   * action 是对象，改变 state 的唯一方式\n   * 返回值：要分发的action\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 不能同时dispatch 多个 action 函数\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      // 通过reducer函数，获取当前的 state \n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 遍历调用\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  // 替换计算 state的 reducer。\n  function replaceReducer(nextReducer) {\n    // 必须是个函数\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n    // 将传入的 currentReducer 赋值给 currentReducer\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n \n  // 改变 state最小的 observabl\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n        // 订阅state的更新函数\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n        // 取消订阅state的更新函数\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n  // 初始化 默认的 store 里的 statetree\n  dispatch({ type: ActionTypes.INIT })\n\n  // 暴露出去的方法\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n````\n将多个reducer合并为一个reducer\n`combineReducers.js` 源码分析如下：\n````javascript\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 检查reducers的state是否有默认返回值\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 以默认值来执行reducer \n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n /**\n 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如\n {\n   reducerA: funA\n   reducerB: funB\n }\n 并且生成新的state tree，形如：\n {\n   reducerA: {\n     key: 'value'\n   },\n   reducerB: {\n     key: 'value'\n   }\n }\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  // 过滤掉reducers中不是function的键值对\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    // 存放最终的 state 树\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      // 获取每个reducer的key名\n      const key = finalReducerKeys[i]\n      // 获取 reducer\n      const reducer = finalReducers[key]\n      // 获取传入的state树\n      const previousStateForKey = state[key]\n      // 执行该key的reducer函数，生成新state tree\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      // 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree\n      nextState[key] = nextStateForKey\n      // 判断所有的state有没有变化\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 如果state tree 变化了，就返回新的；否则，返回旧的\n    return hasChanged ? nextState : state\n  }\n}\n````\n\n`applyMiddleware.js` 源码分析如下：\n````javascript\nimport compose from './compose'\n\n /**\n applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store\n */\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 将 middlewares 作为参数注入，函数科里化后返回新的函数链。\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 以 store.dispatch 来注入 \n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n\n````\n\n`bindActionCreators.js` 源码分析如下：\n````javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\n/**\n 将dispatch包装好来直接使用\n */\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n  // 遍历 actionCreators 分别来执行 dispatch\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n````\n\n`compose.js` 源码分析如下：\n````javascript\n/**\n 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) => f(g(h(...args)))\n*/\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n\n````","source":"_posts/redux.md","raw":"title: Redux源码解析\ndate: 2018-05-24 13:53:51\ntags:\n- JavaScript\n- React\ncategories:\n- JavaScript\n- React\n---\n\n版本号 redux@4.0.1\n\n## createStore\n\n`createStore.js` 源码分析如下：\n````javascript\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\n/**\n * 创建一个Redux store 来存储所有state\n * 调用 dispatch 是唯一改变store的方法\n *\n * 应用只有一个单独的store. 通过action指定state tree做出不同的操作，\n * 通过combineReducers方法将将多个reducer合成一个reducer.\n *\n * @param {Function}  reducer 接受当前state和要处理的action，返回新的statetree\nreducer 是一个函数,接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树\n\n  [preloadedState]  初始化的state，可以设置store中的默认值 , 可以将服务端传来经过处理后的 state 传给它。\n * 如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象\n \n * @param {Function} [enhancer] 高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。 \n *\n * @returns {Store} 返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方法,   \n */\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 保证 传入的 preloadedState, enhancer 是非函数 \n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function'\n    )\n  }\n  // 如果第二个参数是函数，则将 preloadedState 赋给 enhancer \n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n  // enhancer必须是函数\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  // reducer必须是函数\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer // 当前的reducer\n  let currentState = preloadedState // 当前的 state\n  let currentListeners = [] // 当前dispatch将会触发的更新函数数组\n  let nextListeners = currentListeners // 下个dispatch将会触发的函数数组 \n  let isDispatching = false // 变量开关，是否正在执行dispatch\n  \n  // 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n    // 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变\n    // 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    // 将listener推入到nextListeners数组\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n    // 将listener从nextListeners数组中删除      \n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n    /**\n   * action 是对象，改变 state 的唯一方式\n   * 返回值：要分发的action\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 不能同时dispatch 多个 action 函数\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      // 通过reducer函数，获取当前的 state \n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 遍历调用\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  // 替换计算 state的 reducer。\n  function replaceReducer(nextReducer) {\n    // 必须是个函数\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n    // 将传入的 currentReducer 赋值给 currentReducer\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n \n  // 改变 state最小的 observabl\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n        // 订阅state的更新函数\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n        // 取消订阅state的更新函数\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n  // 初始化 默认的 store 里的 statetree\n  dispatch({ type: ActionTypes.INIT })\n\n  // 暴露出去的方法\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n````\n将多个reducer合并为一个reducer\n`combineReducers.js` 源码分析如下：\n````javascript\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 检查reducers的state是否有默认返回值\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 以默认值来执行reducer \n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n /**\n 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如\n {\n   reducerA: funA\n   reducerB: funB\n }\n 并且生成新的state tree，形如：\n {\n   reducerA: {\n     key: 'value'\n   },\n   reducerB: {\n     key: 'value'\n   }\n }\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  // 过滤掉reducers中不是function的键值对\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    // 存放最终的 state 树\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      // 获取每个reducer的key名\n      const key = finalReducerKeys[i]\n      // 获取 reducer\n      const reducer = finalReducers[key]\n      // 获取传入的state树\n      const previousStateForKey = state[key]\n      // 执行该key的reducer函数，生成新state tree\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      // 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree\n      nextState[key] = nextStateForKey\n      // 判断所有的state有没有变化\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 如果state tree 变化了，就返回新的；否则，返回旧的\n    return hasChanged ? nextState : state\n  }\n}\n````\n\n`applyMiddleware.js` 源码分析如下：\n````javascript\nimport compose from './compose'\n\n /**\n applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store\n */\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 将 middlewares 作为参数注入，函数科里化后返回新的函数链。\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 以 store.dispatch 来注入 \n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n\n````\n\n`bindActionCreators.js` 源码分析如下：\n````javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\n/**\n 将dispatch包装好来直接使用\n */\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n  // 遍历 actionCreators 分别来执行 dispatch\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n````\n\n`compose.js` 源码分析如下：\n````javascript\n/**\n 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) => f(g(h(...args)))\n*/\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n\n````","slug":"redux","published":1,"updated":"2019-06-04T12:50:20.139Z","_id":"cjw0kyafj0000ishspa0uc6lu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>版本号 redux@4.0.1</p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p><code>createStore.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 创建一个Redux store 来存储所有state</span><br><span class=\"line\"> * 调用 dispatch 是唯一改变store的方法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 应用只有一个单独的store. 通过action指定state tree做出不同的操作，</span><br><span class=\"line\"> * 通过combineReducers方法将将多个reducer合成一个reducer.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &#123;Function&#125;  reducer 接受当前state和要处理的action，返回新的statetree</span><br><span class=\"line\">reducer 是一个函数,接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树</span><br><span class=\"line\"></span><br><span class=\"line\">  [preloadedState]  初始化的state，可以设置store中的默认值 , 可以将服务端传来经过处理后的 state 传给它。</span><br><span class=\"line\"> * 如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象</span><br><span class=\"line\"> </span><br><span class=\"line\"> * @param &#123;Function&#125; [enhancer] 高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。 </span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @returns &#123;Store&#125; 返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方法,   </span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保证 传入的 preloadedState, enhancer 是非函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span>) ||</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'It looks like you are passing several store enhancers to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class=\"line\">        <span class=\"string\">'together to a single function'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果第二个参数是函数，则将 preloadedState 赋给 enhancer </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// enhancer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// reducer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer <span class=\"comment\">// 当前的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState <span class=\"comment\">// 当前的 state</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = [] <span class=\"comment\">// 当前dispatch将会触发的更新函数数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners <span class=\"comment\">// 下个dispatch将会触发的函数数组 </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span> <span class=\"comment\">// 变量开关，是否正在执行dispatch</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 将listener推入到nextListeners数组</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 将listener从nextListeners数组中删除      </span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">   * action 是对象，改变 state 的唯一方式</span><br><span class=\"line\">   * 返回值：要分发的action</span><br><span class=\"line\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不能同时dispatch 多个 action 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过reducer函数，获取当前的 state </span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换计算 state的 reducer。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 必须是个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将传入的 currentReducer 赋值给 currentReducer</span></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 改变 state最小的 observabl</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅state的更新函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取消订阅state的更新函数</span></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 默认的 store 里的 statetree</span></span><br><span class=\"line\">  dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露出去的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将多个reducer合并为一个reducer<br><code>combineReducers.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;String(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span><br><span class=\"line\">  inputState,</span><br><span class=\"line\">  reducers,</span><br><span class=\"line\">  action,</span><br><span class=\"line\">  unexpectedKeyCache</span><br><span class=\"line\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(key =&gt; &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; 1 ? 'keys' : 'key'&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join('\", \"')&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查reducers的state是否有默认返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 以默认值来执行reducer </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123;</span><br><span class=\"line\">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class=\"line\">      &#125;) === <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span><br><span class=\"line\">            ActionTypes.INIT</span><br><span class=\"line\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: funA</span><br><span class=\"line\">   reducerB: funB</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> 并且生成新的state tree，形如：</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   reducerB: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 过滤掉reducers中不是function的键值对</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放最终的 state 树</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取每个reducer的key名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"comment\">// 获取 reducer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"comment\">// 获取传入的state树</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"comment\">// 执行该key的reducer函数，生成新state tree</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree</span></span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      <span class=\"comment\">// 判断所有的state有没有变化</span></span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果state tree 变化了，就返回新的；否则，返回旧的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>applyMiddleware.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createStore =&gt; (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将 middlewares 作为参数注入，函数科里化后返回新的函数链。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 以 store.dispatch 来注入 </span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>bindActionCreators.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 将dispatch包装好来直接使用</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span><br><span class=\"line\">        actionCreators === null ? 'null' : typeof actionCreators</span><br><span class=\"line\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 actionCreators 分别来执行 dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>compose.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) =&gt; f(g(h(...args)))</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg =&gt; arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>版本号 redux@4.0.1</p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p><code>createStore.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 创建一个Redux store 来存储所有state</span><br><span class=\"line\"> * 调用 dispatch 是唯一改变store的方法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 应用只有一个单独的store. 通过action指定state tree做出不同的操作，</span><br><span class=\"line\"> * 通过combineReducers方法将将多个reducer合成一个reducer.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &#123;Function&#125;  reducer 接受当前state和要处理的action，返回新的statetree</span><br><span class=\"line\">reducer 是一个函数,接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树</span><br><span class=\"line\"></span><br><span class=\"line\">  [preloadedState]  初始化的state，可以设置store中的默认值 , 可以将服务端传来经过处理后的 state 传给它。</span><br><span class=\"line\"> * 如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象</span><br><span class=\"line\"> </span><br><span class=\"line\"> * @param &#123;Function&#125; [enhancer] 高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。 </span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @returns &#123;Store&#125; 返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方法,   </span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保证 传入的 preloadedState, enhancer 是非函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span>) ||</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'It looks like you are passing several store enhancers to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class=\"line\">        <span class=\"string\">'together to a single function'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果第二个参数是函数，则将 preloadedState 赋给 enhancer </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// enhancer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// reducer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer <span class=\"comment\">// 当前的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState <span class=\"comment\">// 当前的 state</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = [] <span class=\"comment\">// 当前dispatch将会触发的更新函数数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners <span class=\"comment\">// 下个dispatch将会触发的函数数组 </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span> <span class=\"comment\">// 变量开关，是否正在执行dispatch</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 将listener推入到nextListeners数组</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 将listener从nextListeners数组中删除      </span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">   * action 是对象，改变 state 的唯一方式</span><br><span class=\"line\">   * 返回值：要分发的action</span><br><span class=\"line\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不能同时dispatch 多个 action 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过reducer函数，获取当前的 state </span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换计算 state的 reducer。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 必须是个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将传入的 currentReducer 赋值给 currentReducer</span></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 改变 state最小的 observabl</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅state的更新函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取消订阅state的更新函数</span></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 默认的 store 里的 statetree</span></span><br><span class=\"line\">  dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露出去的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将多个reducer合并为一个reducer<br><code>combineReducers.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;String(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span><br><span class=\"line\">  inputState,</span><br><span class=\"line\">  reducers,</span><br><span class=\"line\">  action,</span><br><span class=\"line\">  unexpectedKeyCache</span><br><span class=\"line\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(key =&gt; &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; 1 ? 'keys' : 'key'&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join('\", \"')&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查reducers的state是否有默认返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 以默认值来执行reducer </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123;</span><br><span class=\"line\">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class=\"line\">      &#125;) === <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span><br><span class=\"line\">            ActionTypes.INIT</span><br><span class=\"line\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: funA</span><br><span class=\"line\">   reducerB: funB</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> 并且生成新的state tree，形如：</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   reducerB: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 过滤掉reducers中不是function的键值对</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放最终的 state 树</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取每个reducer的key名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"comment\">// 获取 reducer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"comment\">// 获取传入的state树</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"comment\">// 执行该key的reducer函数，生成新state tree</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree</span></span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      <span class=\"comment\">// 判断所有的state有没有变化</span></span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果state tree 变化了，就返回新的；否则，返回旧的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>applyMiddleware.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createStore =&gt; (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将 middlewares 作为参数注入，函数科里化后返回新的函数链。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 以 store.dispatch 来注入 </span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>bindActionCreators.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 将dispatch包装好来直接使用</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span><br><span class=\"line\">        actionCreators === null ? 'null' : typeof actionCreators</span><br><span class=\"line\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 actionCreators 分别来执行 dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>compose.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) =&gt; f(g(h(...args)))</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg =&gt; arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjv3ehdro00004whshsw7zn0f","category_id":"cjv3ehdrw00054whsjoctioh0","_id":"cjv3ehds4000d4whsoyoqck3p"},{"post_id":"cjv3ehdrt00024whsalhxtxci","category_id":"cjv3ehds0000a4whsgvsb17hs","_id":"cjv3ehds8000k4whsxyu60j5r"},{"post_id":"cjv3ehdry00074whs698ucbu3","category_id":"cjv3ehds5000g4whsuufl8rih","_id":"cjv3ehdsb000p4whsnjai0h0d"},{"post_id":"cjv3ehds9000n4whstz959kv8","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjv3ehdse000v4whsz26epvd7"},{"post_id":"cjv3ehds4000e4whs9f5mfppb","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjv3ehdsf000x4whs6ki10sbn"},{"post_id":"cjv3ehds6000i4whslrrylvvr","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjv3ehdsh00114whs837eryv3"},{"post_id":"cjv3ehds8000j4whsqt5tq46f","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjv3ehdsi00144whs8d7ej09f"},{"post_id":"cjv3ehdsa000o4whs0hk8afhy","category_id":"cjv3ehdsh00124whsif0t7fhs","_id":"cjv3ehdsj00174whsqlxlc9g8"},{"post_id":"cjv3ehdst001k4whses5xxwna","category_id":"cjv3ehdsv001m4whsdablq58f","_id":"cjv3ehdsx001o4whslgu7frze"},{"post_id":"cjv3ehdt6001s4whsed540kqv","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjv3ehdt8001v4whs5k8716xv"},{"post_id":"cjv3ehdsc000t4whs5almcpxy","category_id":"cjv3ehdsv001m4whsdablq58f","_id":"cjv3eiaox001x4whsrttpfuwc"},{"post_id":"cjw0kyafj0000ishspa0uc6lu","category_id":"cjv3ehds9000m4whsjb8azu74","_id":"cjw0kyafy0005ishsjbcshr86"},{"post_id":"cjw0kyafj0000ishspa0uc6lu","category_id":"cjw0kyafv0002ishs5fv15lgl","_id":"cjw0kyafz0006ishsxopynfe1"}],"PostTag":[{"post_id":"cjv3ehdro00004whshsw7zn0f","tag_id":"cjv3ehdrv00044whsr33nhku4","_id":"cjv3ehds1000b4whsqcpaggt6"},{"post_id":"cjv3ehdrt00024whsalhxtxci","tag_id":"cjv3ehdrz00084whs5y3s6ev8","_id":"cjv3ehds6000h4whsspv8zh5k"},{"post_id":"cjv3ehds9000n4whstz959kv8","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdsb000q4whs2v4cipq3"},{"post_id":"cjv3ehdrx00064whsdivwnls9","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdse000u4whsogt56zc3"},{"post_id":"cjv3ehdrx00064whsdivwnls9","tag_id":"cjv3ehds9000l4whsuvnmlle0","_id":"cjv3ehdsf000w4whs8b8bqe6l"},{"post_id":"cjv3ehdry00074whs698ucbu3","tag_id":"cjv3ehdsc000r4whsny1g92zo","_id":"cjv3ehdsg00104whsgwxz13lv"},{"post_id":"cjv3ehds4000e4whs9f5mfppb","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdsj00164whs1obqqdnh"},{"post_id":"cjv3ehds4000e4whs9f5mfppb","tag_id":"cjv3ehdsh00134whs26l9txme","_id":"cjv3ehdsj00184whsmms8de2v"},{"post_id":"cjv3ehds6000i4whslrrylvvr","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdsl001a4whsod3xljk2"},{"post_id":"cjv3ehds6000i4whslrrylvvr","tag_id":"cjv3ehdsh00134whs26l9txme","_id":"cjv3ehdsm001b4whs6vog2nb1"},{"post_id":"cjv3ehds8000j4whsqt5tq46f","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdsn001d4whsbaw272bp"},{"post_id":"cjv3ehds8000j4whsqt5tq46f","tag_id":"cjv3ehdsk00194whshd6wxu2y","_id":"cjv3ehdsn001e4whskp960he7"},{"post_id":"cjv3ehdsa000o4whs0hk8afhy","tag_id":"cjv3ehdsm001c4whspecace3y","_id":"cjv3ehdsp001h4whs0u4gxqa0"},{"post_id":"cjv3ehdsa000o4whs0hk8afhy","tag_id":"cjv3ehdsn001f4whsarr5glwu","_id":"cjv3ehdsp001i4whsxc7mj1s1"},{"post_id":"cjv3ehdsa000o4whs0hk8afhy","tag_id":"cjv3ehdso001g4whs6a8f36je","_id":"cjv3ehdsp001j4whse530842z"},{"post_id":"cjv3ehdst001k4whses5xxwna","tag_id":"cjv3ehdsu001l4whstnvqovvo","_id":"cjv3ehdsy001p4whsrmjh7yay"},{"post_id":"cjv3ehdst001k4whses5xxwna","tag_id":"cjv3ehdsv001n4whsca9lcz6z","_id":"cjv3ehdsy001q4whsbwz4xa91"},{"post_id":"cjv3ehdt6001s4whsed540kqv","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjv3ehdt7001t4whs28ft9icw"},{"post_id":"cjv3ehdt6001s4whsed540kqv","tag_id":"cjv3ehdsk00194whshd6wxu2y","_id":"cjv3ehdt8001u4whsnrea0s25"},{"post_id":"cjv3ehdsc000t4whs5almcpxy","tag_id":"cjv3ehdsu001l4whstnvqovvo","_id":"cjv3eiaoz001y4whszclkg8at"},{"post_id":"cjv3ehdsc000t4whs5almcpxy","tag_id":"cjv3eiaow001w4whs522k3r58","_id":"cjv3eiap0001z4whs4pvy5ntf"},{"post_id":"cjw0kyafj0000ishspa0uc6lu","tag_id":"cjv3ehds5000f4whs172kf04l","_id":"cjw0kyafx0003ishs0x61ftax"},{"post_id":"cjw0kyafj0000ishspa0uc6lu","tag_id":"cjw0kyafp0001ishsqs658077","_id":"cjw0kyafx0004ishsefgek2ge"}],"Tag":[{"name":"技术细节 cross-dev","_id":"cjv3ehdrv00044whsr33nhku4"},{"name":"Css 积累","_id":"cjv3ehdrz00084whs5y3s6ev8"},{"name":"JavaScript","_id":"cjv3ehds5000f4whs172kf04l"},{"name":"JS工具","_id":"cjv3ehds9000l4whsuvnmlle0"},{"name":"hexo","_id":"cjv3ehdsc000r4whsny1g92zo"},{"name":"JS实际应用","_id":"cjv3ehdsh00134whs26l9txme"},{"name":"正则","_id":"cjv3ehdsk00194whshd6wxu2y"},{"name":"技术细节","_id":"cjv3ehdsm001c4whspecace3y"},{"name":"reflow","_id":"cjv3ehdsn001f4whsarr5glwu"},{"name":"前端性能","_id":"cjv3ehdso001g4whs6a8f36je"},{"name":"webpack","_id":"cjv3ehdsu001l4whstnvqovvo"},{"name":"webpack1.x","_id":"cjv3ehdsv001n4whsca9lcz6z"},{"name":"webpack4.x","_id":"cjv3eiaow001w4whs522k3r58"},{"name":"React","_id":"cjw0kyafp0001ishsqs658077"}]}}