{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"aae00029591415e9d39a52662f378ed30d9b8d93","modified":1489399398812},{"_id":"source/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1489399398838},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1489399398846},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1489399398850},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1489399398854},{"_id":"themes/landscape/_config.yml","hash":"3032b804b654923f7971195e4408b56de73ab756","modified":1489399398858},{"_id":"themes/landscape/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1489399398862},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1489399398990},{"_id":"source/_posts/hello-world.md","hash":"1f1311240bbcb5f9371f5f653f857b6071a3b0aa","modified":1489399398824},{"_id":"source/_posts/webpack-1-x.md","hash":"3aeb6d255acad41bb885387081cb39f9ff784482","modified":1489399398828},{"_id":"source/demo/demo.html","hash":"f5585c6a7a1032c6d064fbe34c419d99c22deab1","modified":1489399398835},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1489399398964},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1489399398967},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1489399398971},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1489399398974},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489399398979},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489399398983},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1489399398986},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1489399398995},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"7fbe5b237b3675b167f4f7d9638498eb44c6ce8f","modified":1489399398951},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"4bf42d3f35f6bc1f988f575c620f8db07764379d","modified":1489399398943},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"edb5b06273acf1753c9fe46ab2e52bebbb45c0c3","modified":1489399398956},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"8d1787a34db844d9587a5d910e1b890513cf8d67","modified":1489399398960},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"4d1deb0bbac9755ebe5d0c1f404ca1f27284b80e","modified":1489399398866},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1489399398873},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1489399398877},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"46e1ab7f03a7d5a8d15e61c5a8d04ca3d0265047","modified":1489399398881},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"29849f7d8f34acf80fc1a2bfd11a935581c32e3d","modified":1489399398885},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1489399398890},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4feadef0e53408f029a6f9a6b46c58104f7a7a39","modified":1489399398899},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1489399398904},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1489399398909},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1489399398939},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"363730418be6b4e314001c94795b245adc880283","modified":1489399398947},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1489399399005},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1489399399063},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1489399399090},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489399399095},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489399399096},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489399399097},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489399399098},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489399399099},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489399399100},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1489399399127},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1489399399133},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1489399399139},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1489399399153},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"b5d4323373d10313fa20becbd3c658b1b710f8ed","modified":1489399399146},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1489399398913},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1489399398916},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1489399398921},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1489399398926},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1489399398930},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1489399398934},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"9da7cb46779349be96311e00c6bb8ca8f8f9a3e5","modified":1489399399016},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1489399399022},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1489399399026},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"300a8ca21ea973e18ce52f54d49ef03badbaffb3","modified":1489399399030},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"05da1b8f4859761dc60bca40b8682f167e350742","modified":1489399399035},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1489399399039},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1489399399043},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1489399399047},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1489399399051},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1489399399055},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1489399399059},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1489399399009},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489399399101},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1489399399103},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1489399399117},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1489399399108},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1489399399112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1489399399123},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1489399399072},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1489399399069},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1489399399087},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1489399399083},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1489399399076},{"_id":"public/demo/demo.html","hash":"f1bb9329ad2f3452b60442f54fb4c199ed227ae0","modified":1489545315806},{"_id":"public/sitemap.xml","hash":"b6a8518d02fb6a48f2475e4c53527d1e382d26c1","modified":1489545315885},{"_id":"public/atom.xml","hash":"0ce5e3ccb8003291f872c41d770ef25293a8861f","modified":1489545315886},{"_id":"public/2014/02/07/hexo/index.html","hash":"e65f01e78e8184af8d2b235cc4a72b3640f9a05f","modified":1489545315891},{"_id":"public/archives/index.html","hash":"00f99e30a199677e7ce11aafc267aac82084394a","modified":1489545315891},{"_id":"public/archives/2014/index.html","hash":"f4759e2376412d256b5050eb7062e7df953a919d","modified":1489545315891},{"_id":"public/archives/2014/02/index.html","hash":"7d991aac890274387d452fec86534aecb6ab04a3","modified":1489545315892},{"_id":"public/archives/2017/index.html","hash":"794194ee0c291f1851389be040aee8ef96e2e486","modified":1489545315892},{"_id":"public/archives/2017/02/index.html","hash":"e84b887bbefcb85c20c986b8740b5b26b5243b89","modified":1489545315892},{"_id":"public/categories/hexo/index.html","hash":"53376ee4a56b941b421ab41c3140a1527230c2ce","modified":1489545315892},{"_id":"public/tags/hexo/index.html","hash":"2ca9aa8832ea927a3152d23f260423802548ae41","modified":1489545315892},{"_id":"public/2017/02/15/webpack-1-x/index.html","hash":"da78db6780e600692bb8971c4344af417416b4ca","modified":1489545315892},{"_id":"public/index.html","hash":"3ece83ade5ffa9957ded00f1997e936646a4b3d4","modified":1489545315892},{"_id":"public/CNAME","hash":"aae00029591415e9d39a52662f378ed30d9b8d93","modified":1489545315904},{"_id":"public/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1489545315905},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489545315905},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489545315905},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489545315905},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489545315905},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489545315905},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489545315907},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489545315907},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1489545315907},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1489545315907},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1489545315907},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1489545316684},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1489545316691},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1489545316691},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489545316691},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489545316691},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1489545316691},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1489545316691},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1489545316691},{"_id":"public/css/style.css","hash":"e43d364c221b4810b028a76aeb8ffae61a036b35","modified":1489545316691},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1489545316691},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1489545316691},{"_id":"public/js/jquery.min.js","hash":"88158909c0c6075034f4fa7a0e1af68f2bddb2d1","modified":1489545316691},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1489545316694}],"Category":[{"name":"hexo","_id":"cj0actkvf0004psf1n95b8ud9"}],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","source":"demo/demo.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","date":"2017-03-13T10:03:18.835Z","updated":"2017-03-13T10:03:18.835Z","path":"demo/demo.html","title":"","comments":1,"_id":"cj0actkv70001psf1u2b945f3","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>"}],"Post":[{"title":"webpack-1.x","date":"2017-02-15T09:25:04.000Z","_content":"\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n````\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n````\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，用过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\n#### CommonsChunkPlugin\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n## Plugin\n\nplugin 的跟loader差不多，只是插件是以对象的形式引入的，plugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，请查看\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins ","source":"_posts/webpack-1-x.md","raw":"title: webpack-1.x\ndate: 2017-02-15 17:25:04\ntags:\n---\n\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n````\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n````\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，用过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\n#### CommonsChunkPlugin\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n## Plugin\n\nplugin 的跟loader差不多，只是插件是以对象的形式引入的，plugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，请查看\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins ","slug":"webpack-1-x","published":1,"updated":"2017-03-13T10:03:18.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0actkv20000psf19y3v2etl","content":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。</p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\" target=\"_blank\" rel=\"external\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\" target=\"_blank\" rel=\"external\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，用过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<h4 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p>plugin 的跟loader差不多，只是插件是以对象的形式引入的，plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，请查看<br> <a href=\"href=https://github.com/webpack-contrib/awesome-webpack#webpack-plugins>https://github.com/webpack-contrib/awesome-webpack#webpack-plugins</a>\" title=\"</p>\">webpack-plugins <a< a=\"\"></a<></a></p>","excerpt":"","more":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。</p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，用过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<h4 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p>plugin 的跟loader差不多，只是插件是以对象的形式引入的，plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，请查看<br> <a href=\"href=https://github.com/webpack-contrib/awesome-webpack#webpack-plugins>https://github.com/webpack-contrib/awesome-webpack#webpack-plugins</a>\" title=\"</p>\">webpack-plugins <a</a>"},{"title":"hexo博客相关","date":"2014-02-07T14:44:12.000Z","updated":"2016-05-20T06:44:12.000Z","_content":"\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","source":"_posts/hello-world.md","raw":"title: hexo博客相关\ndate: 2014-02-07 22:44:12\nupdated : 2016-05-20 14:44:12\npermalink: hexo\ntags:\n- hexo\ncategories:\n- hexo\n---\n\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","slug":"hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj0actkv90002psf1qb85t7l1","content":"<p>hexo相关笔记<br><a id=\"more\"></a></p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\" target=\"_blank\" rel=\"external\">http://sfau.lt/b5lc0k</a></p>\n","excerpt":"<p>hexo相关笔记<br>","more":"</p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\">http://sfau.lt/b5lc0k</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0actkv90002psf1qb85t7l1","category_id":"cj0actkvf0004psf1n95b8ud9","_id":"cj0actkvh0006psf1m8w0698w"}],"PostTag":[{"post_id":"cj0actkv90002psf1qb85t7l1","tag_id":"cj0actkvc0003psf1rmyu4s79","_id":"cj0actkvg0005psf19ph5x0di"}],"Tag":[{"name":"hexo","_id":"cj0actkvc0003psf1rmyu4s79"}]}}