{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/TimingFunction.png","path":"images/TimingFunction.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"aae00029591415e9d39a52662f378ed30d9b8d93","modified":1556604269067},{"_id":"source/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1556604269108},{"_id":"themes/landscape/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1556604269129},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1556604269123},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1556604269121},{"_id":"themes/landscape/_config.yml","hash":"3032b804b654923f7971195e4408b56de73ab756","modified":1556604269127},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1556604269125},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1556604269193},{"_id":"source/_posts/css3-animation.md","hash":"b4aa8fd80ecaa73fb7dc14a3d720c006090448cc","modified":1556604269076},{"_id":"source/_posts/css-attr-content.md","hash":"678fd7e4886f72c65b62284ae30d702b56f0da4f","modified":1556604269073},{"_id":"source/_posts/css3-transfrom.md","hash":"90d9d9aa81fa3a30da4c6dd033faecbce0441781","modified":1556604269078},{"_id":"source/_posts/cross-env.md","hash":"3cf97e98b7b46cbfd77ae3dea2463008f9565f68","modified":1556604269070},{"_id":"source/_posts/eslint.md","hash":"9fbac7c863487fd651812237a5207f899cbf1529","modified":1556604269082},{"_id":"source/_posts/graphql-introduction.md","hash":"6a8d66b96485d8e75c5c4c0ba6b48b02c7a3b402","modified":1563157704868},{"_id":"source/_posts/css3-transition.md","hash":"e762e4a8ea584c9c4d19ecfe3b2afe39a9360dff","modified":1556604269080},{"_id":"source/_posts/functional-programming.md","hash":"ce129d62634c96759c0410bf4991465c0dd78bfa","modified":1563240625834},{"_id":"source/_posts/identity-number.md","hash":"bf32502ace298027e022c9dd64125c232ef07246","modified":1556604269086},{"_id":"source/_posts/hello-world.md","hash":"d28d4cdf8ecabea3e419dc95dca7df98ac7b537c","modified":1556604269084},{"_id":"source/_posts/javascript-number-range.md","hash":"a42caadc4aa4faa1740e46fdddc54f7633456b93","modified":1556604269088},{"_id":"source/_posts/mongoose-populate.md","hash":"7985b5e715fc12e88b5476e01180949a67afd442","modified":1565176439710},{"_id":"source/_posts/javascript-reg-2.md","hash":"990cee97337a867e773fc414f914bef863aea7e7","modified":1556604269094},{"_id":"source/_posts/javascript-reg-1.md","hash":"ca4c311b503383bf46dd1fadcb656273e26a6efe","modified":1556604269092},{"_id":"source/_posts/react-communication.md","hash":"f8e5664d3e5131c4736e1be8bce0023c316c7f03","modified":1565834804575},{"_id":"source/_posts/mongoose-api.md","hash":"399153d3a7ffd79405f63b2e049a41d5357295ee","modified":1565172242923},{"_id":"source/_posts/send-beacon.md","hash":"ac5c8ab8c82741b2ee2306ca3504355dbee20021","modified":1556604269096},{"_id":"source/_posts/webpack-4-x.md","hash":"022453982068dcb53cf3fddbf589337325f0e43d","modified":1556605137554},{"_id":"source/_posts/redux.md","hash":"924feb2861dd590c2e7dbebe2eed09ecd926dd51","modified":1561601578183},{"_id":"source/_posts/webpack-1-x.md","hash":"6512f6f0be8352f508359d86d0c134c88cb021ef","modified":1556605081013},{"_id":"source/_posts/what-forces-layout-reflow.md","hash":"1929e0a08aa172371c7ef53b7bcaea3f2b642255","modified":1556604269100},{"_id":"source/demo/demo.html","hash":"f5585c6a7a1032c6d064fbe34c419d99c22deab1","modified":1556604269106},{"_id":"source/demo/css-attr-content.html","hash":"94f06257243c87d631ffb77a731a6c7b17eb9cd8","modified":1556604269103},{"_id":"source/images/TimingFunction.png","hash":"4ba50698c7aa2c5ce97773b5be975ec8c960ac80","modified":1556604269112},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1556604269180},{"_id":"source/_posts/you-dont-not-need-lodash-underscore.md","hash":"1ecb690e3c015e547cfd56fb0eb1825323a3b0f5","modified":1564036794183},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1556604269181},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1556604269185},{"_id":"source/demo/you-dont-not-need-lodash-underscore.html","hash":"23f6871de46f36e3b940f6f8edf127d7f25db9ca","modified":1564033294456},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1556604269196},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1556604269186},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1556604269183},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1556604269188},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1556604269190},{"_id":"source/demo/js/underscore.js","hash":"93df570874e746ffc3ed87522ab88345aab2a428","modified":1563350513592},{"_id":"source/_posts/vue-communication.md","hash":"14fbcfe369f39fc8d779efb14616eda0fb681eed","modified":1565663595744},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1556604269136},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"4d1deb0bbac9755ebe5d0c1f404ca1f27284b80e","modified":1556604269133},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1556604269138},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"74f5b0ee156149b9285444b26083d118079eb87c","modified":1556604269142},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"46e1ab7f03a7d5a8d15e61c5a8d04ca3d0265047","modified":1556604269140},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"bf6e8b7aca489bb8217293df882ceacfff585bed","modified":1556604269146},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1556604269150},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1556604269148},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1556604269165},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1556604269144},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"363730418be6b4e314001c94795b245adc880283","modified":1556604269172},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"7fbe5b237b3675b167f4f7d9638498eb44c6ce8f","modified":1556604269174},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"4bf42d3f35f6bc1f988f575c620f8db07764379d","modified":1556604269169},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556604269254},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556604269256},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556604269261},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556604269259},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"edb5b06273acf1753c9fe46ab2e52bebbb45c0c3","modified":1556604269177},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556604269265},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556604269263},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"8d1787a34db844d9587a5d910e1b890513cf8d67","modified":1556604269179},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1556604269201},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1556604269282},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1556604269285},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1556604269287},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1556604269232},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1556604269250},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1556604269293},{"_id":"source/demo/js/require.js","hash":"264cbcd3129e94bd521167ed555fef908a50363b","modified":1563244401123},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1556604269153},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1556604269158},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1556604269156},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1556604269160},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556604269268},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1556604269164},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1556604269162},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1556604269271},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1556604269273},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1556604269275},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1556604269277},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1556604269280},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1556604269212},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1556604269204},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1556604269209},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"00d494a657291784f35a0ec04e923b8ca11466c7","modified":1556604269206},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"300a8ca21ea973e18ce52f54d49ef03badbaffb3","modified":1556604269215},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"d53816333378835b9c57467addcfb1266119b623","modified":1556604269217},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1556604269219},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1556604269223},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1556604269220},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1556604269225},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1556604269230},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1556604269237},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1556604269240},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"b5d4323373d10313fa20becbd3c658b1b710f8ed","modified":1556604269291},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1556604269228},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1556604269248},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1556604269246},{"_id":"source/demo/js/lodash.js","hash":"8c8d71dde4fde5aeb4ab2cbf5b2007112f4bcd54","modified":1563244285431},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1556604269243},{"_id":"public/demo/demo.html","hash":"f1bb9329ad2f3452b60442f54fb4c199ed227ae0","modified":1565867703311},{"_id":"public/demo/css-attr-content.html","hash":"c7c620ea2bc30bdaf94a2764ed3dec678fc0d671","modified":1565867703315},{"_id":"public/atom.xml","hash":"8b48949ede56c560b8050cd4d83dd4eabf95d2bc","modified":1565867703489},{"_id":"public/demo/js/underscore.js","hash":"46940f09054c1ad37fb788578051aba8f7b172ce","modified":1565867703496},{"_id":"public/sitemap.xml","hash":"ef0811fb2d1c8941098239df6e580ada898e3199","modified":1565867703496},{"_id":"public/demo/js/require.js","hash":"e52bcc7620089a91c9c7eff220aa4f54e64df7cf","modified":1565867703496},{"_id":"public/demo/js/lodash.js","hash":"ae33e79385490d06655eb5d411a0ddb4d273e279","modified":1565867703496},{"_id":"public/demo/you-dont-not-need-lodash-underscore.html","hash":"85515fc5637999d4b7c391edba1b2d1241a3dd99","modified":1565867703601},{"_id":"public/functional-programming/index.html","hash":"d5a4e3c4d805a6e32af7db91e58ff361e8fb5b47","modified":1565867703605},{"_id":"public/graphql-introduction/index.html","hash":"9b78fc786a6c0f907281983ee1c3072909a5e0c3","modified":1565867703625},{"_id":"public/send-beacon/index.html","hash":"665028d78fa716a8e0f96134a320d3b772d519a1","modified":1565867703629},{"_id":"public/webpack-4-x/index.html","hash":"cd33a7c95e6e7fba26b8d5abbe035d81ed9c6a35","modified":1565867703629},{"_id":"public/css-attr-content/index.html","hash":"d51cac43b1f5aa5c5a06c887280bd9f4ef1aa77c","modified":1565867703629},{"_id":"public/archives/2016/index.html","hash":"e03c3bdc0eb6b2a2001a2e52280272d78fd5c938","modified":1565867703630},{"_id":"public/archives/page/3/index.html","hash":"a4fbed630f9e456be4eeff8a62255fbf0ad3bc4b","modified":1565867703630},{"_id":"public/archives/2016/02/index.html","hash":"ac4b55abd31c0cee4a9cad6da79648ea56df977d","modified":1565867703630},{"_id":"public/archives/2017/07/index.html","hash":"efdd2ef88f1289021266ea305420fc87a35015e0","modified":1565867703630},{"_id":"public/archives/2017/06/index.html","hash":"dd0b90812770302ec1f3f69f71957c47214df314","modified":1565867703630},{"_id":"public/archives/2017/08/index.html","hash":"0cf5a3d708eeee5f3ab3e0bcca766b4df0ad2d60","modified":1565867703630},{"_id":"public/archives/2017/11/index.html","hash":"f59dcb9096a87bd74d2552b8605de944a0a61f5d","modified":1565867703630},{"_id":"public/archives/2018/index.html","hash":"eadaec5decf75f3523127511057cb37bd95fbde7","modified":1565867703630},{"_id":"public/archives/2018/03/index.html","hash":"37e358b86c5d822fde933296e06bb6480a53d8b9","modified":1565867703630},{"_id":"public/archives/2018/06/index.html","hash":"6249d8cb7afe8ba1724624913b007a5b602421ec","modified":1565867703630},{"_id":"public/archives/2019/04/index.html","hash":"169730a1bd0604c103482bcb4b2a026a16798454","modified":1565867703630},{"_id":"public/archives/2018/05/index.html","hash":"d2a39089f828cc1d35d5d9274dede3840318b911","modified":1565867703630},{"_id":"public/archives/2019/07/index.html","hash":"0d06036b636c520e363b16d405fe780f9ad7e58e","modified":1565867703631},{"_id":"public/archives/2019/05/index.html","hash":"2715a8e1d183b7078a608d466e638ad33de27693","modified":1565867703631},{"_id":"public/categories/Css/index.html","hash":"5e8ec4d2319ac484e98e84b23c30238d9e3dc9e5","modified":1565867703631},{"_id":"public/archives/2019/08/index.html","hash":"9f067a4a72402895e7ff6a76cbaa4ade44e063aa","modified":1565867703631},{"_id":"public/vue-communication/index.html","hash":"3cefcf5295cb2cfbf4022ef8884fc5cb0fdcc9e8","modified":1565867703631},{"_id":"public/mongoose-api/index.html","hash":"f53848311735a559ba7678130a415a2b68eabf59","modified":1565867703631},{"_id":"public/you-dont-not-need-lodash-underscore/index.html","hash":"f5d3d0d476edb2dcb07c4e8f081f045c697e78f8","modified":1565867703631},{"_id":"public/mongoose-populate/index.html","hash":"c33469c598aecb02f426e3eaf6308d3b10d321b2","modified":1565867703631},{"_id":"public/redux/index.html","hash":"519050abbf63c3567dec76235c8c420261ce150c","modified":1565867703631},{"_id":"public/css3-transfrom/index.html","hash":"3eee21d971860c0276494e8315b673e4c08260c0","modified":1565867703631},{"_id":"public/what-forces-layout-reflow/index.html","hash":"1de27d09eef15e6b4ade915765e47b4ced043d99","modified":1565867703632},{"_id":"public/javascript-number-range/index.html","hash":"108658edb165e46cae16df31b7021c48cd73a45b","modified":1565867703632},{"_id":"public/eslint/index.html","hash":"ae73ba69c5dc3621e32aa47d332835be4634485b","modified":1565867703632},{"_id":"public/identity-number/index.html","hash":"723b0b794397234ac3f1bf0ca5d347de288321bc","modified":1565867703632},{"_id":"public/javascript-reg-2/index.html","hash":"e97dc1fa386c699b50d740545d53b3e96cbdb077","modified":1565867703632},{"_id":"public/css3-transition/index.html","hash":"fd5132a61f039024195c6798eb90a38019822716","modified":1565867703632},{"_id":"public/javascript-reg-1/index.html","hash":"4753e75dffba7b44e00176e984ad006fb2b19840","modified":1565867703632},{"_id":"public/css3-animation/index.html","hash":"09a5fb418098ef8f55c83295dfb3a8bc11f8b331","modified":1565867703632},{"_id":"public/cross-env/index.html","hash":"a4b7fb22563ae852022d95f6d91ed7f448ec3959","modified":1565867703632},{"_id":"public/hexo/index.html","hash":"baaa56341d575277349de6b869c849421d54afb2","modified":1565867703632},{"_id":"public/webpack-1-x/index.html","hash":"900f43df1137ee9017f05dd4f7bc37ba143d8e52","modified":1565867703632},{"_id":"public/archives/index.html","hash":"5e20b5e36bc34f047311adb7550c159c9fcf2095","modified":1565867703632},{"_id":"public/archives/page/2/index.html","hash":"aa4aa36e50c347983025477a54f12cb6b07e7930","modified":1565867703632},{"_id":"public/archives/2017/index.html","hash":"1e153344e9cc60a2ae126c5a786852ba2f2e41d7","modified":1565867703632},{"_id":"public/archives/2019/index.html","hash":"9d9af68d5355ae5ac636ed0f52e0e2e6235d18d9","modified":1565867703632},{"_id":"public/react-communication/index.html","hash":"0e58f95597cd32bad7e09aa0bc9d8a0e1ec3c853","modified":1565867703639},{"_id":"public/categories/nodeJs/index.html","hash":"3a974d05ed9fecaf041490c1052800622f4b5ad6","modified":1565867703639},{"_id":"public/categories/hexo/index.html","hash":"a8e4653a757ef8eae3dd3a6eda5eda43f25f0de1","modified":1565867703640},{"_id":"public/categories/Node-js/index.html","hash":"c51302cff6c8cdcfcae6c53f4bfd3227e77fabf3","modified":1565867703640},{"_id":"public/categories/mongoDB/index.html","hash":"9f80c72277314924997063ee49e411b158966487","modified":1565867703640},{"_id":"public/categories/前端构建工具/index.html","hash":"535dd09e66066740a099ccab338f17df74d31e9e","modified":1565867703640},{"_id":"public/categories/Js/index.html","hash":"1cae5a814f1199921aa39cb28a83b2ee58dcdc12","modified":1565867703640},{"_id":"public/categories/JavaScript/React/index.html","hash":"fbb44451aa60c14beee41945e9fc0b4275582003","modified":1565867703641},{"_id":"public/categories/Node-js/MongoDB/index.html","hash":"0d5059ee88b0a47ff82b1424f15cc710ca78fdca","modified":1565867703641},{"_id":"public/categories/Node-js/MongoDB/React/index.html","hash":"226a99141de154b3a0d12c3f6bdbb9aaed6c4df8","modified":1565867703641},{"_id":"public/categories/Vue/index.html","hash":"b2f80047bd50809c692e2d7c1626a8f4b88b9b4e","modified":1565867703641},{"_id":"public/tags/Css-积累/index.html","hash":"f8ff77e05e9c9b61f4329d780c8ef4ce1f3a073b","modified":1565867703641},{"_id":"public/tags/GraphQL/index.html","hash":"e3237fadba67e54950f346c907ee8d79c88c0ff7","modified":1565867703641},{"_id":"public/tags/Koa/index.html","hash":"b00dee4630472965b5df33ec3fc0b9a90fb10cda","modified":1565867703641},{"_id":"public/tags/Mongoose/index.html","hash":"8d5526c572bbf76bf63d47a6841f8fe926579326","modified":1565867703641},{"_id":"public/tags/技术细节-cross-dev/index.html","hash":"e6e9e96abecb07240c2e9c0a4188133db4456073","modified":1565867703641},{"_id":"public/tags/mongoose/index.html","hash":"9ec5c37e5e9a12bd385a1042a34735f49292360c","modified":1565867703641},{"_id":"public/tags/JS工具/index.html","hash":"3db78c114393c14ff06cb194030a7ce65b6c4cae","modified":1565867703641},{"_id":"public/tags/JS实际应用/index.html","hash":"0960cf85ab14614829ede5bdf090c560c8c688eb","modified":1565867703642},{"_id":"public/tags/hexo/index.html","hash":"9ab669920bee65899cba6fd13b64cdefce350da0","modified":1565867703642},{"_id":"public/tags/nodeJs/index.html","hash":"0f7dd4fd0457a6f34fa0acc901fcc0db3f8704b7","modified":1565867703642},{"_id":"public/tags/mongoDB/index.html","hash":"79a70e447cb4a42c88b0401259acd1495c345620","modified":1565867703642},{"_id":"public/tags/webpack4-x/index.html","hash":"12e03658b098fbf7dd3d10c16132ac9b640bdec5","modified":1565867703643},{"_id":"public/tags/webpack/index.html","hash":"e7455f6ac86a88ecba2f23117cbb5705e8382403","modified":1565867703643},{"_id":"public/tags/正则/index.html","hash":"4a39e4227a77713bccd75f768df9b3b874d0daaa","modified":1565867703643},{"_id":"public/tags/技术细节/index.html","hash":"b4b0abdb0dc8c66c87fb39f51e69970f5d4fd76f","modified":1565867703643},{"_id":"public/tags/reflow/index.html","hash":"5f979f8ef34341140283d854863d9ccb32b7cb86","modified":1565867703643},{"_id":"public/tags/webpack1-x/index.html","hash":"bbc4b1f915e59754b5f2181ba9533c77bf045d7b","modified":1565867703643},{"_id":"public/tags/React/index.html","hash":"32d7bd6d2ac4b793e97353985afe5fbeac1c3886","modified":1565867703643},{"_id":"public/tags/Vue/index.html","hash":"4edc3ed59948740959f9a80393a93c58806b524c","modified":1565867703643},{"_id":"public/tags/前端性能/index.html","hash":"284635c9db3c520d228c24987693f38b42412ca9","modified":1565867703643},{"_id":"public/tags/Vue实操/index.html","hash":"fe8497dcbc7fa9cebcccd73176737bdd8827da5a","modified":1565867703643},{"_id":"public/categories/JavaScript/index.html","hash":"bd0b613a48a0f3fb64bfb6a3f1239459242bc49b","modified":1565867703643},{"_id":"public/index.html","hash":"4bd13c325f879eedafddbff25a84353225a2d501","modified":1565867703643},{"_id":"public/page/2/index.html","hash":"d8d855b13209e1601a06988f39dff6390ef264e7","modified":1565867703643},{"_id":"public/page/3/index.html","hash":"fcd690a8d0e6869f5d9d8ab2aa653a0a1e1b437f","modified":1565867703644},{"_id":"public/tags/JavaScript/index.html","hash":"a2e2af8c78667a5d139755ad2df9d9df59f7b236","modified":1565867703644},{"_id":"public/favicon.ico","hash":"89969bc95c332e14d8a81b65582b00e388e884af","modified":1565867703647},{"_id":"public/CNAME","hash":"aae00029591415e9d39a52662f378ed30d9b8d93","modified":1565867703647},{"_id":"public/images/TimingFunction.png","hash":"4ba50698c7aa2c5ce97773b5be975ec8c960ac80","modified":1565867703647},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565867703648},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565867703648},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565867703648},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565867703648},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565867703648},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565867703649},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565867703649},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1565867703649},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1565867705580},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1565867705581},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1565867705581},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1565867705588},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1565867705588},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1565867705588},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565867705589},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1565867705589},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1565867705589},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565867705589},{"_id":"public/css/style.css","hash":"9c46385c39e59718c62f67408f9a6897324e2e92","modified":1565867705589},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1565867705641},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1565867705665},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1565867705696},{"_id":"public/js/jquery.min.js","hash":"88158909c0c6075034f4fa7a0e1af68f2bddb2d1","modified":1565867705700}],"Category":[{"name":"Css","_id":"cjzcl768p0005dkhsqcsw1lm5"},{"name":"nodeJs","_id":"cjzcl768t000adkhsdbungasz"},{"name":"Node.js","_id":"cjzcl768x000gdkhsokcnk0hx"},{"name":"JavaScript","_id":"cjzcl768z000mdkhscuey7pb0"},{"name":"MongoDB","parent":"cjzcl768x000gdkhsokcnk0hx","_id":"cjzcl7696000udkhsuufovbhv"},{"name":"hexo","_id":"cjzcl769a0013dkhs78va7acj"},{"name":"mongoDB","_id":"cjzcl769d001adkhsnmfa12wy"},{"name":"前端构建工具","_id":"cjzcl769e001ddkhsnkocfdj2"},{"name":"React","parent":"cjzcl7696000udkhsuufovbhv","_id":"cjzcl769g001idkhs2490rvu7"},{"name":"Js","_id":"cjzcl769h001ldkhsf6qan8oo"},{"name":"React","parent":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl76ae002zdkhsmj44eaip"},{"name":"Vue","_id":"cjzcl76ak003adkhsbiwr5d7e"}],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","source":"demo/demo.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","date":"2019-04-30T06:04:29.106Z","updated":"2019-04-30T06:04:29.106Z","path":"demo/demo.html","title":"","comments":1,"_id":"cjzcl768l0001dkhszrllx3fv","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>xxx</title>\n</head>\n<body>\n\n</body>\n</html>"},{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","source":"demo/css-attr-content.html","raw":"layout: false\n--------\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","date":"2019-04-30T06:04:29.103Z","updated":"2019-04-30T06:04:29.103Z","path":"demo/css-attr-content.html","title":"","comments":1,"_id":"cjzcl768n0003dkhsi27y9gih","content":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>attr</title>\n    <style>\n        .tip span {\n          position: relative;\n          display: inline-block;\n        }\n        .tip span:hover {\n          cursor: pointer;\n        }\n        .tip span:hover:before, .tip span:hover:after {\n          display: block;\n        }\n        .tip span:before {\n          content: attr(data-tooltip);\n          background: #d9444a;\n          color: #fff;\n          padding: 4px;\n          position: absolute;\n          left: 100%;\n          top: 0;\n          white-space: pre;\n        }\n        .tip span:before {\n          display: none;\n        }\n    </style>\n</head>\n<body>\n<section>\n  <h2>单行</h2>\n    <div class=\"tip\"><span data-tooltip=\"hello world\">鼠标放上来</span></div>\n\n  <h2>多行</h2>\n    <div class=\"tip\"><span data-tooltip=\"this is line 1 &#xa; this is line 2\">鼠标放上来</span></div>\n</section>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>you-dont-not-need-lodash-underscore</title>\n</head>\n<body>\n    <script src=\"./js/require.js\"></script>\n    <script>\n        　　require.config({\n\n        　　　　paths: {\n        　　　　　　\"lodash\": \"./js/lodash\",\n        　　　　　　\"underscore\": \"./js/underscore\",\n        　　　　}\n\n        　　});\n    </script>\n    <!-- <script src=\"./js/lodash.js\"></script> -->\n    <script>\n        var users = [\n            { 'user': 'xiaoming',  'age': 36, 'active': true },\n            { 'user': 'xiaohong',    'age': 40, 'active': false },\n            { 'user': 'xiaogang', 'age': 1,  'active': true }\n        ]\n        function Stooge(name) {\n            this.name = name;\n        }\n        Stooge.prototype.silly = true;\n        var objA = {\n            x: 66,\n            offsetX: function(offset) {\n                return this.x + offset;\n            }\n        }\n\n        var objB = {\n            x: 67\n        };\n        require(['lodash', 'underscore'], function(_, __) {\n            // Underscore/Lodash\n            console.log(_.flatten([1, [2, [3, [4]], 5]]));\n            // => [1, 2, [3, [4]], 5]\n        });\n        // Native\n        const flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), [])\n        console.log(flatten)\n        // => [1, 2, [3, [4]], 5]\n        // output false\n        // var users = [\n        //     { 'user': 'xiaoming',  'age': 36, 'active': true },\n        //     { 'user': 'xiaohong',    'age': 40, 'active': false },\n        //     { 'user': 'xiaogang', 'age': 1,  'active': true }\n        // ]\n        // var result = [2, 9, 9].indexOf(2)\n    // console.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n    // console.log( Object.keys(new Stooge(\"Hi\")) )\n        // console.log(boundOffsetX())\n        // Object.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n        // output one1 two2 three3\n    </script>\n</body>\n</html>","source":"demo/you-dont-not-need-lodash-underscore.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>you-dont-not-need-lodash-underscore</title>\n</head>\n<body>\n    <script src=\"./js/require.js\"></script>\n    <script>\n        　　require.config({\n\n        　　　　paths: {\n        　　　　　　\"lodash\": \"./js/lodash\",\n        　　　　　　\"underscore\": \"./js/underscore\",\n        　　　　}\n\n        　　});\n    </script>\n    <!-- <script src=\"./js/lodash.js\"></script> -->\n    <script>\n        var users = [\n            { 'user': 'xiaoming',  'age': 36, 'active': true },\n            { 'user': 'xiaohong',    'age': 40, 'active': false },\n            { 'user': 'xiaogang', 'age': 1,  'active': true }\n        ]\n        function Stooge(name) {\n            this.name = name;\n        }\n        Stooge.prototype.silly = true;\n        var objA = {\n            x: 66,\n            offsetX: function(offset) {\n                return this.x + offset;\n            }\n        }\n\n        var objB = {\n            x: 67\n        };\n        require(['lodash', 'underscore'], function(_, __) {\n            // Underscore/Lodash\n            console.log(_.flatten([1, [2, [3, [4]], 5]]));\n            // => [1, 2, [3, [4]], 5]\n        });\n        // Native\n        const flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), [])\n        console.log(flatten)\n        // => [1, 2, [3, [4]], 5]\n        // output false\n        // var users = [\n        //     { 'user': 'xiaoming',  'age': 36, 'active': true },\n        //     { 'user': 'xiaohong',    'age': 40, 'active': false },\n        //     { 'user': 'xiaogang', 'age': 1,  'active': true }\n        // ]\n        // var result = [2, 9, 9].indexOf(2)\n    // console.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n    // console.log( Object.keys(new Stooge(\"Hi\")) )\n        // console.log(boundOffsetX())\n        // Object.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n        // output one1 two2 three3\n    </script>\n</body>\n</html>","date":"2019-07-25T05:41:34.456Z","updated":"2019-07-25T05:41:34.456Z","path":"demo/you-dont-not-need-lodash-underscore.html","title":"","comments":1,"layout":"page","_id":"cjzcl769x002jdkhssqdg1wzx","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>you-dont-not-need-lodash-underscore</title>\n</head>\n<body>\n    <script src=\"./js/require.js\"></script>\n    <script>\n        　　require.config({\n\n        　　　　paths: {\n        　　　　　　\"lodash\": \"./js/lodash\",\n        　　　　　　\"underscore\": \"./js/underscore\",\n        　　　　}\n\n        　　});\n    </script>\n    <!-- <script src=\"./js/lodash.js\"></script> -->\n    <script>\n        var users = [\n            { 'user': 'xiaoming',  'age': 36, 'active': true },\n            { 'user': 'xiaohong',    'age': 40, 'active': false },\n            { 'user': 'xiaogang', 'age': 1,  'active': true }\n        ]\n        function Stooge(name) {\n            this.name = name;\n        }\n        Stooge.prototype.silly = true;\n        var objA = {\n            x: 66,\n            offsetX: function(offset) {\n                return this.x + offset;\n            }\n        }\n\n        var objB = {\n            x: 67\n        };\n        require(['lodash', 'underscore'], function(_, __) {\n            // Underscore/Lodash\n            console.log(_.flatten([1, [2, [3, [4]], 5]]));\n            // => [1, 2, [3, [4]], 5]\n        });\n        // Native\n        const flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), [])\n        console.log(flatten)\n        // => [1, 2, [3, [4]], 5]\n        // output false\n        // var users = [\n        //     { 'user': 'xiaoming',  'age': 36, 'active': true },\n        //     { 'user': 'xiaohong',    'age': 40, 'active': false },\n        //     { 'user': 'xiaogang', 'age': 1,  'active': true }\n        // ]\n        // var result = [2, 9, 9].indexOf(2)\n    // console.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n    // console.log( Object.keys(new Stooge(\"Hi\")) )\n        // console.log(boundOffsetX())\n        // Object.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n        // output one1 two2 three3\n    </script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>you-dont-not-need-lodash-underscore</title>\n</head>\n<body>\n    <script src=\"./js/require.js\"></script>\n    <script>\n        　　require.config({\n\n        　　　　paths: {\n        　　　　　　\"lodash\": \"./js/lodash\",\n        　　　　　　\"underscore\": \"./js/underscore\",\n        　　　　}\n\n        　　});\n    </script>\n    <!-- <script src=\"./js/lodash.js\"></script> -->\n    <script>\n        var users = [\n            { 'user': 'xiaoming',  'age': 36, 'active': true },\n            { 'user': 'xiaohong',    'age': 40, 'active': false },\n            { 'user': 'xiaogang', 'age': 1,  'active': true }\n        ]\n        function Stooge(name) {\n            this.name = name;\n        }\n        Stooge.prototype.silly = true;\n        var objA = {\n            x: 66,\n            offsetX: function(offset) {\n                return this.x + offset;\n            }\n        }\n\n        var objB = {\n            x: 67\n        };\n        require(['lodash', 'underscore'], function(_, __) {\n            // Underscore/Lodash\n            console.log(_.flatten([1, [2, [3, [4]], 5]]));\n            // => [1, 2, [3, [4]], 5]\n        });\n        // Native\n        const flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), [])\n        console.log(flatten)\n        // => [1, 2, [3, [4]], 5]\n        // output false\n        // var users = [\n        //     { 'user': 'xiaoming',  'age': 36, 'active': true },\n        //     { 'user': 'xiaohong',    'age': 40, 'active': false },\n        //     { 'user': 'xiaogang', 'age': 1,  'active': true }\n        // ]\n        // var result = [2, 9, 9].indexOf(2)\n    // console.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n    // console.log( Object.keys(new Stooge(\"Hi\")) )\n        // console.log(boundOffsetX())\n        // Object.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n        // output one1 two2 three3\n    </script>\n</body>\n</html>"},{"_content":"//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n    // Baseline setup\n    // --------------\n  \n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self == 'object' && self.self === self && self ||\n              typeof global == 'object' && global.global === global && global ||\n              this ||\n              {};\n  \n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n  \n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n  \n    // Create quick reference variables for speed access to core prototypes.\n    var push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n  \n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeCreate = Object.create;\n  \n    // Naked function reference for surrogate-prototype-swapping.\n    var Ctor = function(){};\n  \n    // Create a safe reference to the Underscore object for use below.\n    var _ = function(obj) {\n      if (obj instanceof _) return obj;\n      if (!(this instanceof _)) return new _(obj);\n      this._wrapped = obj;\n    };\n  \n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for their old module API. If we're in\n    // the browser, add `_` as a global object.\n    // (`nodeType` is checked to ensure that `module`\n    // and `exports` are not HTML elements.)\n    if (typeof exports != 'undefined' && !exports.nodeType) {\n      if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n        exports = module.exports = _;\n      }\n      exports._ = _;\n    } else {\n      root._ = _;\n    }\n  \n    // Current version.\n    _.VERSION = '1.9.1';\n  \n    // Internal function that returns an efficient (for current engines) version\n    // of the passed-in callback, to be repeatedly applied in other Underscore\n    // functions.\n    var optimizeCb = function(func, context, argCount) {\n      if (context === void 0) return func;\n      switch (argCount == null ? 3 : argCount) {\n        case 1: return function(value) {\n          return func.call(context, value);\n        };\n        // The 2-argument case is omitted because we鈥檙e not using it.\n        case 3: return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n      }\n      return function() {\n        return func.apply(context, arguments);\n      };\n    };\n  \n    var builtinIteratee;\n  \n    // An internal function to generate callbacks that can be applied to each\n    // element in a collection, returning the desired result 鈥� either `identity`,\n    // an arbitrary callback, a property matcher, or a property accessor.\n    var cb = function(value, context, argCount) {\n      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n      if (value == null) return _.identity;\n      if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n      return _.property(value);\n    };\n  \n    // External wrapper for our callback generator. Users may customize\n    // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n    // This abstraction hides the internal-only argCount argument.\n    _.iteratee = builtinIteratee = function(value, context) {\n      return cb(value, context, Infinity);\n    };\n  \n    // Some functions take a variable number of arguments, or a few expected\n    // arguments at the beginning and then a variable number of values to operate\n    // on. This helper accumulates all remaining arguments past the function鈥檚\n    // argument length (or an explicit `startIndex`), into an array that becomes\n    // the last argument. Similar to ES6鈥檚 \"rest parameter\".\n    var restArguments = function(func, startIndex) {\n      startIndex = startIndex == null ? func.length - 1 : +startIndex;\n      return function() {\n        var length = Math.max(arguments.length - startIndex, 0),\n            rest = Array(length),\n            index = 0;\n        for (; index < length; index++) {\n          rest[index] = arguments[index + startIndex];\n        }\n        switch (startIndex) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, arguments[0], rest);\n          case 2: return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for (index = 0; index < startIndex; index++) {\n          args[index] = arguments[index];\n        }\n        args[startIndex] = rest;\n        return func.apply(this, args);\n      };\n    };\n  \n    // An internal function for creating a new object that inherits from another.\n    var baseCreate = function(prototype) {\n      if (!_.isObject(prototype)) return {};\n      if (nativeCreate) return nativeCreate(prototype);\n      Ctor.prototype = prototype;\n      var result = new Ctor;\n      Ctor.prototype = null;\n      return result;\n    };\n  \n    var shallowProperty = function(key) {\n      return function(obj) {\n        return obj == null ? void 0 : obj[key];\n      };\n    };\n  \n    var has = function(obj, path) {\n      return obj != null && hasOwnProperty.call(obj, path);\n    }\n  \n    var deepGet = function(obj, path) {\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        if (obj == null) return void 0;\n        obj = obj[path[i]];\n      }\n      return length ? obj : void 0;\n    };\n  \n    // Helper for collection methods to determine whether a collection\n    // should be iterated as an array or as an object.\n    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n    var getLength = shallowProperty('length');\n    var isArrayLike = function(collection) {\n      var length = getLength(collection);\n      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n    };\n  \n    // Collection Functions\n    // --------------------\n  \n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles raw objects in addition to array-likes. Treats all\n    // sparse array-likes as if they were dense.\n    _.each = _.forEach = function(obj, iteratee, context) {\n      iteratee = optimizeCb(iteratee, context);\n      var i, length;\n      if (isArrayLike(obj)) {\n        for (i = 0, length = obj.length; i < length; i++) {\n          iteratee(obj[i], i, obj);\n        }\n      } else {\n        var keys = _.keys(obj);\n        for (i = 0, length = keys.length; i < length; i++) {\n          iteratee(obj[keys[i]], keys[i], obj);\n        }\n      }\n      return obj;\n    };\n  \n    // Return the results of applying the iteratee to each element.\n    _.map = _.collect = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          results = Array(length);\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Create a reducing function iterating left or right.\n    var createReduce = function(dir) {\n      // Wrap code that reassigns argument variables in a separate function than\n      // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n      var reducer = function(obj, iteratee, memo, initial) {\n        var keys = !isArrayLike(obj) && _.keys(obj),\n            length = (keys || obj).length,\n            index = dir > 0 ? 0 : length - 1;\n        if (!initial) {\n          memo = obj[keys ? keys[index] : index];\n          index += dir;\n        }\n        for (; index >= 0 && index < length; index += dir) {\n          var currentKey = keys ? keys[index] : index;\n          memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        }\n        return memo;\n      };\n  \n      return function(obj, iteratee, memo, context) {\n        var initial = arguments.length >= 3;\n        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n      };\n    };\n  \n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`.\n    _.reduce = _.foldl = _.inject = createReduce(1);\n  \n    // The right-associative version of reduce, also known as `foldr`.\n    _.reduceRight = _.foldr = createReduce(-1);\n  \n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function(obj, predicate, context) {\n      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n      var key = keyFinder(obj, predicate, context);\n      if (key !== void 0 && key !== -1) return obj[key];\n    };\n  \n    // Return all the elements that pass a truth test.\n    // Aliased as `select`.\n    _.filter = _.select = function(obj, predicate, context) {\n      var results = [];\n      predicate = cb(predicate, context);\n      _.each(obj, function(value, index, list) {\n        if (predicate(value, index, list)) results.push(value);\n      });\n      return results;\n    };\n  \n    // Return all the elements for which a truth test fails.\n    _.reject = function(obj, predicate, context) {\n      return _.filter(obj, _.negate(cb(predicate)), context);\n    };\n  \n    // Determine whether all of the elements match a truth test.\n    // Aliased as `all`.\n    _.every = _.all = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (!predicate(obj[currentKey], currentKey, obj)) return false;\n      }\n      return true;\n    };\n  \n    // Determine if at least one element in the object matches a truth test.\n    // Aliased as `any`.\n    _.some = _.any = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (predicate(obj[currentKey], currentKey, obj)) return true;\n      }\n      return false;\n    };\n  \n    // Determine if the array or object contains a given item (using `===`).\n    // Aliased as `includes` and `include`.\n    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n      return _.indexOf(obj, item, fromIndex) >= 0;\n    };\n  \n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = restArguments(function(obj, path, args) {\n      var contextPath, func;\n      if (_.isFunction(path)) {\n        func = path;\n      } else if (_.isArray(path)) {\n        contextPath = path.slice(0, -1);\n        path = path[path.length - 1];\n      }\n      return _.map(obj, function(context) {\n        var method = func;\n        if (!method) {\n          if (contextPath && contextPath.length) {\n            context = deepGet(context, contextPath);\n          }\n          if (context == null) return void 0;\n          method = context[path];\n        }\n        return method == null ? method : method.apply(context, args);\n      });\n    });\n  \n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function(obj, key) {\n      return _.map(obj, _.property(key));\n    };\n  \n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function(obj, attrs) {\n      return _.filter(obj, _.matcher(attrs));\n    };\n  \n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function(obj, attrs) {\n      return _.find(obj, _.matcher(attrs));\n    };\n  \n    // Return the maximum element (or element-based computation).\n    _.max = function(obj, iteratee, context) {\n      var result = -Infinity, lastComputed = -Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value > result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Return the minimum element (or element-based computation).\n    _.min = function(obj, iteratee, context) {\n      var result = Infinity, lastComputed = Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value < result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed < lastComputed || computed === Infinity && result === Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Shuffle a collection.\n    _.shuffle = function(obj) {\n      return _.sample(obj, Infinity);\n    };\n  \n    // Sample **n** random values from a collection using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher鈥揧ates_shuffle).\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function(obj, n, guard) {\n      if (n == null || guard) {\n        if (!isArrayLike(obj)) obj = _.values(obj);\n        return obj[_.random(obj.length - 1)];\n      }\n      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n      var length = getLength(sample);\n      n = Math.max(Math.min(n, length), 0);\n      var last = length - 1;\n      for (var index = 0; index < n; index++) {\n        var rand = _.random(index, last);\n        var temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n      }\n      return sample.slice(0, n);\n    };\n  \n    // Sort the object's values by a criterion produced by an iteratee.\n    _.sortBy = function(obj, iteratee, context) {\n      var index = 0;\n      iteratee = cb(iteratee, context);\n      return _.pluck(_.map(obj, function(value, key, list) {\n        return {\n          value: value,\n          index: index++,\n          criteria: iteratee(value, key, list)\n        };\n      }).sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n          if (a > b || a === void 0) return 1;\n          if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n      }), 'value');\n    };\n  \n    // An internal function used for aggregate \"group by\" operations.\n    var group = function(behavior, partition) {\n      return function(obj, iteratee, context) {\n        var result = partition ? [[], []] : {};\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(value, index) {\n          var key = iteratee(value, index, obj);\n          behavior(result, value, key);\n        });\n        return result;\n      };\n    };\n  \n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function(result, value, key) {\n      if (has(result, key)) result[key].push(value); else result[key] = [value];\n    });\n  \n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function(result, value, key) {\n      result[key] = value;\n    });\n  \n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function(result, value, key) {\n      if (has(result, key)) result[key]++; else result[key] = 1;\n    });\n  \n    var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function(obj) {\n      if (!obj) return [];\n      if (_.isArray(obj)) return slice.call(obj);\n      if (_.isString(obj)) {\n        // Keep surrogate pair characters together\n        return obj.match(reStrSymbol);\n      }\n      if (isArrayLike(obj)) return _.map(obj, _.identity);\n      return _.values(obj);\n    };\n  \n    // Return the number of elements in an object.\n    _.size = function(obj) {\n      if (obj == null) return 0;\n      return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n    };\n  \n    // Split a collection into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = group(function(result, value, pass) {\n      result[pass ? 0 : 1].push(value);\n    }, true);\n  \n    // Array Functions\n    // ---------------\n  \n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[0];\n      return _.initial(array, array.length - n);\n    };\n  \n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N.\n    _.initial = function(array, n, guard) {\n      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n    };\n  \n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array.\n    _.last = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[array.length - 1];\n      return _.rest(array, Math.max(0, array.length - n));\n    };\n  \n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array.\n    _.rest = _.tail = _.drop = function(array, n, guard) {\n      return slice.call(array, n == null || guard ? 1 : n);\n    };\n  \n    // Trim out all falsy values from an array.\n    _.compact = function(array) {\n      return _.filter(array, Boolean);\n    };\n  \n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function(input, shallow, strict, output) {\n      output = output || [];\n      var idx = output.length;\n      for (var i = 0, length = getLength(input); i < length; i++) {\n        var value = input[i];\n        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n          // Flatten current level of array or arguments object.\n          if (shallow) {\n            var j = 0, len = value.length;\n            while (j < len) output[idx++] = value[j++];\n          } else {\n            flatten(value, shallow, strict, output);\n            idx = output.length;\n          }\n        } else if (!strict) {\n          output[idx++] = value;\n        }\n      }\n      return output;\n    };\n  \n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function(array, shallow) {\n      return flatten(array, shallow, false);\n    };\n  \n    // Return a version of the array that does not contain the specified value(s).\n    _.without = restArguments(function(array, otherArrays) {\n      return _.difference(array, otherArrays);\n    });\n  \n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // The faster algorithm will not work with an iteratee if the iteratee\n    // is not a one-to-one function, so providing an iteratee will disable\n    // the faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n      if (!_.isBoolean(isSorted)) {\n        context = iteratee;\n        iteratee = isSorted;\n        isSorted = false;\n      }\n      if (iteratee != null) iteratee = cb(iteratee, context);\n      var result = [];\n      var seen = [];\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var value = array[i],\n            computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted && !iteratee) {\n          if (!i || seen !== computed) result.push(value);\n          seen = computed;\n        } else if (iteratee) {\n          if (!_.contains(seen, computed)) {\n            seen.push(computed);\n            result.push(value);\n          }\n        } else if (!_.contains(result, value)) {\n          result.push(value);\n        }\n      }\n      return result;\n    };\n  \n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = restArguments(function(arrays) {\n      return _.uniq(flatten(arrays, true, true));\n    });\n  \n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function(array) {\n      var result = [];\n      var argsLength = arguments.length;\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var item = array[i];\n        if (_.contains(result, item)) continue;\n        var j;\n        for (j = 1; j < argsLength; j++) {\n          if (!_.contains(arguments[j], item)) break;\n        }\n        if (j === argsLength) result.push(item);\n      }\n      return result;\n    };\n  \n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = restArguments(function(array, rest) {\n      rest = flatten(rest, true, true);\n      return _.filter(array, function(value){\n        return !_.contains(rest, value);\n      });\n    });\n  \n    // Complement of _.zip. Unzip accepts an array of arrays and groups\n    // each array's elements on shared indices.\n    _.unzip = function(array) {\n      var length = array && _.max(array, getLength).length || 0;\n      var result = Array(length);\n  \n      for (var index = 0; index < length; index++) {\n        result[index] = _.pluck(array, index);\n      }\n      return result;\n    };\n  \n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = restArguments(_.unzip);\n  \n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values. Passing by pairs is the reverse of _.pairs.\n    _.object = function(list, values) {\n      var result = {};\n      for (var i = 0, length = getLength(list); i < length; i++) {\n        if (values) {\n          result[list[i]] = values[i];\n        } else {\n          result[list[i][0]] = list[i][1];\n        }\n      }\n      return result;\n    };\n  \n    // Generator function to create the findIndex and findLastIndex functions.\n    var createPredicateIndexFinder = function(dir) {\n      return function(array, predicate, context) {\n        predicate = cb(predicate, context);\n        var length = getLength(array);\n        var index = dir > 0 ? 0 : length - 1;\n        for (; index >= 0 && index < length; index += dir) {\n          if (predicate(array[index], index, array)) return index;\n        }\n        return -1;\n      };\n    };\n  \n    // Returns the first index on an array-like that passes a predicate test.\n    _.findIndex = createPredicateIndexFinder(1);\n    _.findLastIndex = createPredicateIndexFinder(-1);\n  \n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function(array, obj, iteratee, context) {\n      iteratee = cb(iteratee, context, 1);\n      var value = iteratee(obj);\n      var low = 0, high = getLength(array);\n      while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n      }\n      return low;\n    };\n  \n    // Generator function to create the indexOf and lastIndexOf functions.\n    var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n      return function(array, item, idx) {\n        var i = 0, length = getLength(array);\n        if (typeof idx == 'number') {\n          if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n          } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n          }\n        } else if (sortedIndex && idx && length) {\n          idx = sortedIndex(array, item);\n          return array[idx] === item ? idx : -1;\n        }\n        if (item !== item) {\n          idx = predicateFind(slice.call(array, i, length), _.isNaN);\n          return idx >= 0 ? idx + i : -1;\n        }\n        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n          if (array[idx] === item) return idx;\n        }\n        return -1;\n      };\n    };\n  \n    // Return the position of the first occurrence of an item in an array,\n    // or -1 if the item is not included in the array.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n  \n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function(start, stop, step) {\n      if (stop == null) {\n        stop = start || 0;\n        start = 0;\n      }\n      if (!step) {\n        step = stop < start ? -1 : 1;\n      }\n  \n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var range = Array(length);\n  \n      for (var idx = 0; idx < length; idx++, start += step) {\n        range[idx] = start;\n      }\n  \n      return range;\n    };\n  \n    // Chunk a single array into multiple arrays, each containing `count` or fewer\n    // items.\n    _.chunk = function(array, count) {\n      if (count == null || count < 1) return [];\n      var result = [];\n      var i = 0, length = array.length;\n      while (i < length) {\n        result.push(slice.call(array, i, i += count));\n      }\n      return result;\n    };\n  \n    // Function (ahem) Functions\n    // ------------------\n  \n    // Determines whether to execute a function as a constructor\n    // or a normal function with the provided arguments.\n    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n      var self = baseCreate(sourceFunc.prototype);\n      var result = sourceFunc.apply(self, args);\n      if (_.isObject(result)) return result;\n      return self;\n    };\n  \n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = restArguments(function(func, context, args) {\n      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n      var bound = restArguments(function(callArgs) {\n        return executeBound(func, bound, context, this, args.concat(callArgs));\n      });\n      return bound;\n    });\n  \n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder by default, allowing any combination of arguments to be\n    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n    _.partial = restArguments(function(func, boundArgs) {\n      var placeholder = _.partial.placeholder;\n      var bound = function() {\n        var position = 0, length = boundArgs.length;\n        var args = Array(length);\n        for (var i = 0; i < length; i++) {\n          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n        }\n        while (position < arguments.length) args.push(arguments[position++]);\n        return executeBound(func, bound, this, this, args);\n      };\n      return bound;\n    });\n  \n    _.partial.placeholder = _;\n  \n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = restArguments(function(obj, keys) {\n      keys = flatten(keys, false, false);\n      var index = keys.length;\n      if (index < 1) throw new Error('bindAll must be passed function names');\n      while (index--) {\n        var key = keys[index];\n        obj[key] = _.bind(obj[key], obj);\n      }\n    });\n  \n    // Memoize an expensive function by storing its results.\n    _.memoize = function(func, hasher) {\n      var memoize = function(key) {\n        var cache = memoize.cache;\n        var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n        if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n        return cache[address];\n      };\n      memoize.cache = {};\n      return memoize;\n    };\n  \n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = restArguments(function(func, wait, args) {\n      return setTimeout(function() {\n        return func.apply(null, args);\n      }, wait);\n    });\n  \n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = _.partial(_.delay, _, 1);\n  \n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function(func, wait, options) {\n      var timeout, context, args, result;\n      var previous = 0;\n      if (!options) options = {};\n  \n      var later = function() {\n        previous = options.leading === false ? 0 : _.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      };\n  \n      var throttled = function() {\n        var now = _.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n          }\n          previous = now;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining);\n        }\n        return result;\n      };\n  \n      throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n      };\n  \n      return throttled;\n    };\n  \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function(func, wait, immediate) {\n      var timeout, result;\n  \n      var later = function(context, args) {\n        timeout = null;\n        if (args) result = func.apply(context, args);\n      };\n  \n      var debounced = restArguments(function(args) {\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n          var callNow = !timeout;\n          timeout = setTimeout(later, wait);\n          if (callNow) result = func.apply(this, args);\n        } else {\n          timeout = _.delay(later, wait, this, args);\n        }\n  \n        return result;\n      });\n  \n      debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n      };\n  \n      return debounced;\n    };\n  \n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function(func, wrapper) {\n      return _.partial(wrapper, func);\n    };\n  \n    // Returns a negated version of the passed-in predicate.\n    _.negate = function(predicate) {\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    };\n  \n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function() {\n      var args = arguments;\n      var start = args.length - 1;\n      return function() {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) result = args[i].call(this, result);\n        return result;\n      };\n    };\n  \n    // Returns a function that will only be executed on and after the Nth call.\n    _.after = function(times, func) {\n      return function() {\n        if (--times < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    };\n  \n    // Returns a function that will only be executed up to (but not including) the Nth call.\n    _.before = function(times, func) {\n      var memo;\n      return function() {\n        if (--times > 0) {\n          memo = func.apply(this, arguments);\n        }\n        if (times <= 1) func = null;\n        return memo;\n      };\n    };\n  \n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = _.partial(_.before, 2);\n  \n    _.restArguments = restArguments;\n  \n    // Object Functions\n    // ----------------\n  \n    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  \n    var collectNonEnumProps = function(obj, keys) {\n      var nonEnumIdx = nonEnumerableProps.length;\n      var constructor = obj.constructor;\n      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n  \n      // Constructor is a special case.\n      var prop = 'constructor';\n      if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n  \n      while (nonEnumIdx--) {\n        prop = nonEnumerableProps[nonEnumIdx];\n        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n          keys.push(prop);\n        }\n      }\n    };\n  \n    // Retrieve the names of an object's own properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\n    _.keys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      if (nativeKeys) return nativeKeys(obj);\n      var keys = [];\n      for (var key in obj) if (has(obj, key)) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve all the property names of an object.\n    _.allKeys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      var keys = [];\n      for (var key in obj) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve the values of an object's properties.\n    _.values = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var values = Array(length);\n      for (var i = 0; i < length; i++) {\n        values[i] = obj[keys[i]];\n      }\n      return values;\n    };\n  \n    // Returns the results of applying the iteratee to each element of the object.\n    // In contrast to _.map it returns an object.\n    _.mapObject = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = _.keys(obj),\n          length = keys.length,\n          results = {};\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Convert an object into a list of `[key, value]` pairs.\n    // The opposite of _.object.\n    _.pairs = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var pairs = Array(length);\n      for (var i = 0; i < length; i++) {\n        pairs[i] = [keys[i], obj[keys[i]]];\n      }\n      return pairs;\n    };\n  \n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function(obj) {\n      var result = {};\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        result[obj[keys[i]]] = keys[i];\n      }\n      return result;\n    };\n  \n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`.\n    _.functions = _.methods = function(obj) {\n      var names = [];\n      for (var key in obj) {\n        if (_.isFunction(obj[key])) names.push(key);\n      }\n      return names.sort();\n    };\n  \n    // An internal function for creating assigner functions.\n    var createAssigner = function(keysFunc, defaults) {\n      return function(obj) {\n        var length = arguments.length;\n        if (defaults) obj = Object(obj);\n        if (length < 2 || obj == null) return obj;\n        for (var index = 1; index < length; index++) {\n          var source = arguments[index],\n              keys = keysFunc(source),\n              l = keys.length;\n          for (var i = 0; i < l; i++) {\n            var key = keys[i];\n            if (!defaults || obj[key] === void 0) obj[key] = source[key];\n          }\n        }\n        return obj;\n      };\n    };\n  \n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = createAssigner(_.allKeys);\n  \n    // Assigns a given object with all the own properties in the passed-in object(s).\n    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    _.extendOwn = _.assign = createAssigner(_.keys);\n  \n    // Returns the first key on an object that passes a predicate test.\n    _.findKey = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = _.keys(obj), key;\n      for (var i = 0, length = keys.length; i < length; i++) {\n        key = keys[i];\n        if (predicate(obj[key], key, obj)) return key;\n      }\n    };\n  \n    // Internal pick helper function to determine if `obj` has key `key`.\n    var keyInObj = function(value, key, obj) {\n      return key in obj;\n    };\n  \n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = restArguments(function(obj, keys) {\n      var result = {}, iteratee = keys[0];\n      if (obj == null) return result;\n      if (_.isFunction(iteratee)) {\n        if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n        keys = _.allKeys(obj);\n      } else {\n        iteratee = keyInObj;\n        keys = flatten(keys, false, false);\n        obj = Object(obj);\n      }\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n      return result;\n    });\n  \n    // Return a copy of the object without the blacklisted properties.\n    _.omit = restArguments(function(obj, keys) {\n      var iteratee = keys[0], context;\n      if (_.isFunction(iteratee)) {\n        iteratee = _.negate(iteratee);\n        if (keys.length > 1) context = keys[1];\n      } else {\n        keys = _.map(flatten(keys, false, false), String);\n        iteratee = function(value, key) {\n          return !_.contains(keys, key);\n        };\n      }\n      return _.pick(obj, iteratee, context);\n    });\n  \n    // Fill in a given object with default properties.\n    _.defaults = createAssigner(_.allKeys, true);\n  \n    // Creates an object that inherits from the given prototype object.\n    // If additional properties are provided then they will be added to the\n    // created object.\n    _.create = function(prototype, props) {\n      var result = baseCreate(prototype);\n      if (props) _.extendOwn(result, props);\n      return result;\n    };\n  \n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function(obj) {\n      if (!_.isObject(obj)) return obj;\n      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n  \n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function(obj, interceptor) {\n      interceptor(obj);\n      return obj;\n    };\n  \n    // Returns whether an object has a given set of `key:value` pairs.\n    _.isMatch = function(object, attrs) {\n      var keys = _.keys(attrs), length = keys.length;\n      if (object == null) return !length;\n      var obj = Object(object);\n      for (var i = 0; i < length; i++) {\n        var key = keys[i];\n        if (attrs[key] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  \n  \n    // Internal recursive comparison function for `isEqual`.\n    var eq, deepEq;\n    eq = function(a, b, aStack, bStack) {\n      // Identical objects are equal. `0 === -0`, but they aren't identical.\n      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n      if (a === b) return a !== 0 || 1 / a === 1 / b;\n      // `null` or `undefined` only equal to itself (strict comparison).\n      if (a == null || b == null) return false;\n      // `NaN`s are equivalent, but non-reflexive.\n      if (a !== a) return b !== b;\n      // Exhaust primitive checks\n      var type = typeof a;\n      if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n      return deepEq(a, b, aStack, bStack);\n    };\n  \n    // Internal recursive comparison function for `isEqual`.\n    deepEq = function(a, b, aStack, bStack) {\n      // Unwrap any wrapped objects.\n      if (a instanceof _) a = a._wrapped;\n      if (b instanceof _) b = b._wrapped;\n      // Compare `[[Class]]` names.\n      var className = toString.call(a);\n      if (className !== toString.call(b)) return false;\n      switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case '[object String]':\n          // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n          // equivalent to `new String(\"5\")`.\n          return '' + a === '' + b;\n        case '[object Number]':\n          // `NaN`s are equivalent, but non-reflexive.\n          // Object(NaN) is equivalent to NaN.\n          if (+a !== +a) return +b !== +b;\n          // An `egal` comparison is performed for other numeric values.\n          return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n          // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n          // millisecond representations. Note that invalid dates with millisecond representations\n          // of `NaN` are not equivalent.\n          return +a === +b;\n        case '[object Symbol]':\n          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      }\n  \n      var areArrays = className === '[object Array]';\n      if (!areArrays) {\n        if (typeof a != 'object' || typeof b != 'object') return false;\n  \n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                                 _.isFunction(bCtor) && bCtor instanceof bCtor)\n                            && ('constructor' in a && 'constructor' in b)) {\n          return false;\n        }\n      }\n      // Assume equality for cyclic structures. The algorithm for detecting cyclic\n      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  \n      // Initializing stack of traversed objects.\n      // It's done here since we only need them for objects and arrays comparison.\n      aStack = aStack || [];\n      bStack = bStack || [];\n      var length = aStack.length;\n      while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b;\n      }\n  \n      // Add the first object to the stack of traversed objects.\n      aStack.push(a);\n      bStack.push(b);\n  \n      // Recursively compare objects and arrays.\n      if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length) return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n          if (!eq(a[length], b[length], aStack, bStack)) return false;\n        }\n      } else {\n        // Deep compare objects.\n        var keys = _.keys(a), key;\n        length = keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (_.keys(b).length !== length) return false;\n        while (length--) {\n          // Deep compare each member\n          key = keys[length];\n          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n        }\n      }\n      // Remove the first object from the stack of traversed objects.\n      aStack.pop();\n      bStack.pop();\n      return true;\n    };\n  \n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function(a, b) {\n      return eq(a, b);\n    };\n  \n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function(obj) {\n      if (obj == null) return true;\n      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n      return _.keys(obj).length === 0;\n    };\n  \n    // Is a given value a DOM element?\n    _.isElement = function(obj) {\n      return !!(obj && obj.nodeType === 1);\n    };\n  \n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function(obj) {\n      return toString.call(obj) === '[object Array]';\n    };\n  \n    // Is a given variable an object?\n    _.isObject = function(obj) {\n      var type = typeof obj;\n      return type === 'function' || type === 'object' && !!obj;\n    };\n  \n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n      _['is' + name] = function(obj) {\n        return toString.call(obj) === '[object ' + name + ']';\n      };\n    });\n  \n    // Define a fallback version of the method in browsers (ahem, IE < 9), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n      _.isArguments = function(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  \n    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n    var nodelist = root.document && root.document.childNodes;\n    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n      _.isFunction = function(obj) {\n        return typeof obj == 'function' || false;\n      };\n    }\n  \n    // Is a given object a finite number?\n    _.isFinite = function(obj) {\n      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n  \n    // Is the given value `NaN`?\n    _.isNaN = function(obj) {\n      return _.isNumber(obj) && isNaN(obj);\n    };\n  \n    // Is a given value a boolean?\n    _.isBoolean = function(obj) {\n      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n    };\n  \n    // Is a given value equal to null?\n    _.isNull = function(obj) {\n      return obj === null;\n    };\n  \n    // Is a given variable undefined?\n    _.isUndefined = function(obj) {\n      return obj === void 0;\n    };\n  \n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function(obj, path) {\n      if (!_.isArray(path)) {\n        return has(obj, path);\n      }\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        var key = path[i];\n        if (obj == null || !hasOwnProperty.call(obj, key)) {\n          return false;\n        }\n        obj = obj[key];\n      }\n      return !!length;\n    };\n  \n    // Utility Functions\n    // -----------------\n  \n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function() {\n      root._ = previousUnderscore;\n      return this;\n    };\n  \n    // Keep the identity function around for default iteratees.\n    _.identity = function(value) {\n      return value;\n    };\n  \n    // Predicate-generating functions. Often useful outside of Underscore.\n    _.constant = function(value) {\n      return function() {\n        return value;\n      };\n    };\n  \n    _.noop = function(){};\n  \n    // Creates a function that, when passed an object, will traverse that object鈥檚\n    // properties down the given `path`, specified as an array of keys or indexes.\n    _.property = function(path) {\n      if (!_.isArray(path)) {\n        return shallowProperty(path);\n      }\n      return function(obj) {\n        return deepGet(obj, path);\n      };\n    };\n  \n    // Generates a function for a given object that returns a given property.\n    _.propertyOf = function(obj) {\n      if (obj == null) {\n        return function(){};\n      }\n      return function(path) {\n        return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n      };\n    };\n  \n    // Returns a predicate for checking whether an object has a given set of\n    // `key:value` pairs.\n    _.matcher = _.matches = function(attrs) {\n      attrs = _.extendOwn({}, attrs);\n      return function(obj) {\n        return _.isMatch(obj, attrs);\n      };\n    };\n  \n    // Run a function **n** times.\n    _.times = function(n, iteratee, context) {\n      var accum = Array(Math.max(0, n));\n      iteratee = optimizeCb(iteratee, context, 1);\n      for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n      return accum;\n    };\n  \n    // Return a random integer between min and max (inclusive).\n    _.random = function(min, max) {\n      if (max == null) {\n        max = min;\n        min = 0;\n      }\n      return min + Math.floor(Math.random() * (max - min + 1));\n    };\n  \n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function() {\n      return new Date().getTime();\n    };\n  \n    // List of HTML entities for escaping.\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var unescapeMap = _.invert(escapeMap);\n  \n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    var createEscaper = function(map) {\n      var escaper = function(match) {\n        return map[match];\n      };\n      // Regexes for identifying a key that needs to be escaped.\n      var source = '(?:' + _.keys(map).join('|') + ')';\n      var testRegexp = RegExp(source);\n      var replaceRegexp = RegExp(source, 'g');\n      return function(string) {\n        string = string == null ? '' : '' + string;\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n      };\n    };\n    _.escape = createEscaper(escapeMap);\n    _.unescape = createEscaper(unescapeMap);\n  \n    // Traverses the children of `obj` along `path`. If a child is a function, it\n    // is invoked with its parent as context. Returns the value of the final\n    // child, or `fallback` if any child is undefined.\n    _.result = function(obj, path, fallback) {\n      if (!_.isArray(path)) path = [path];\n      var length = path.length;\n      if (!length) {\n        return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n      }\n      for (var i = 0; i < length; i++) {\n        var prop = obj == null ? void 0 : obj[path[i]];\n        if (prop === void 0) {\n          prop = fallback;\n          i = length; // Ensure we don't continue iterating.\n        }\n        obj = _.isFunction(prop) ? prop.call(obj) : prop;\n      }\n      return obj;\n    };\n  \n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function(prefix) {\n      var id = ++idCounter + '';\n      return prefix ? prefix + id : id;\n    };\n  \n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n      evaluate: /<%([\\s\\S]+?)%>/g,\n      interpolate: /<%=([\\s\\S]+?)%>/g,\n      escape: /<%-([\\s\\S]+?)%>/g\n    };\n  \n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n  \n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n      \"'\": \"'\",\n      '\\\\': '\\\\',\n      '\\r': 'r',\n      '\\n': 'n',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n  \n    var escapeChar = function(match) {\n      return '\\\\' + escapes[match];\n    };\n  \n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    // NB: `oldSettings` only exists for backwards compatibility.\n    _.template = function(text, settings, oldSettings) {\n      if (!settings && oldSettings) settings = oldSettings;\n      settings = _.defaults({}, settings, _.templateSettings);\n  \n      // Combine delimiters into one regular expression via alternation.\n      var matcher = RegExp([\n        (settings.escape || noMatch).source,\n        (settings.interpolate || noMatch).source,\n        (settings.evaluate || noMatch).source\n      ].join('|') + '|$', 'g');\n  \n      // Compile the template source, escaping string literals appropriately.\n      var index = 0;\n      var source = \"__p+='\";\n      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n        index = offset + match.length;\n  \n        if (escape) {\n          source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n        } else if (interpolate) {\n          source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n        } else if (evaluate) {\n          source += \"';\\n\" + evaluate + \"\\n__p+='\";\n        }\n  \n        // Adobe VMs need the match returned to produce the correct offset.\n        return match;\n      });\n      source += \"';\\n\";\n  \n      // If a variable is not specified, place data values in local scope.\n      if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n  \n      source = \"var __t,__p='',__j=Array.prototype.join,\" +\n        \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n        source + 'return __p;\\n';\n  \n      var render;\n      try {\n        render = new Function(settings.variable || 'obj', '_', source);\n      } catch (e) {\n        e.source = source;\n        throw e;\n      }\n  \n      var template = function(data) {\n        return render.call(this, data, _);\n      };\n  \n      // Provide the compiled source as a convenience for precompilation.\n      var argument = settings.variable || 'obj';\n      template.source = 'function(' + argument + '){\\n' + source + '}';\n  \n      return template;\n    };\n  \n    // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n    _.chain = function(obj) {\n      var instance = _(obj);\n      instance._chain = true;\n      return instance;\n    };\n  \n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n  \n    // Helper function to continue chaining intermediate results.\n    var chainResult = function(instance, obj) {\n      return instance._chain ? _(obj).chain() : obj;\n    };\n  \n    // Add your own custom functions to the Underscore object.\n    _.mixin = function(obj) {\n      _.each(_.functions(obj), function(name) {\n        var func = _[name] = obj[name];\n        _.prototype[name] = function() {\n          var args = [this._wrapped];\n          push.apply(args, arguments);\n          return chainResult(this, func.apply(_, args));\n        };\n      });\n      return _;\n    };\n  \n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n  \n    // Add all mutator Array functions to the wrapper.\n    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        var obj = this._wrapped;\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n        return chainResult(this, obj);\n      };\n    });\n  \n    // Add all accessor Array functions to the wrapper.\n    _.each(['concat', 'join', 'slice'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        return chainResult(this, method.apply(this._wrapped, arguments));\n      };\n    });\n  \n    // Extracts the result from a wrapped and chained object.\n    _.prototype.value = function() {\n      return this._wrapped;\n    };\n  \n    // Provide unwrapping proxy for some methods used in engine operations\n    // such as arithmetic and JSON stringification.\n    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n    _.prototype.toString = function() {\n      return String(this._wrapped);\n    };\n  \n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (typeof define == 'function' && define.amd) {\n      define('underscore', [], function() {\n        return _;\n      });\n    }\n  }());","source":"demo/js/underscore.js","raw":"//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n    // Baseline setup\n    // --------------\n  \n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self == 'object' && self.self === self && self ||\n              typeof global == 'object' && global.global === global && global ||\n              this ||\n              {};\n  \n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n  \n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n  \n    // Create quick reference variables for speed access to core prototypes.\n    var push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n  \n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeCreate = Object.create;\n  \n    // Naked function reference for surrogate-prototype-swapping.\n    var Ctor = function(){};\n  \n    // Create a safe reference to the Underscore object for use below.\n    var _ = function(obj) {\n      if (obj instanceof _) return obj;\n      if (!(this instanceof _)) return new _(obj);\n      this._wrapped = obj;\n    };\n  \n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for their old module API. If we're in\n    // the browser, add `_` as a global object.\n    // (`nodeType` is checked to ensure that `module`\n    // and `exports` are not HTML elements.)\n    if (typeof exports != 'undefined' && !exports.nodeType) {\n      if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n        exports = module.exports = _;\n      }\n      exports._ = _;\n    } else {\n      root._ = _;\n    }\n  \n    // Current version.\n    _.VERSION = '1.9.1';\n  \n    // Internal function that returns an efficient (for current engines) version\n    // of the passed-in callback, to be repeatedly applied in other Underscore\n    // functions.\n    var optimizeCb = function(func, context, argCount) {\n      if (context === void 0) return func;\n      switch (argCount == null ? 3 : argCount) {\n        case 1: return function(value) {\n          return func.call(context, value);\n        };\n        // The 2-argument case is omitted because we鈥檙e not using it.\n        case 3: return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n      }\n      return function() {\n        return func.apply(context, arguments);\n      };\n    };\n  \n    var builtinIteratee;\n  \n    // An internal function to generate callbacks that can be applied to each\n    // element in a collection, returning the desired result 鈥� either `identity`,\n    // an arbitrary callback, a property matcher, or a property accessor.\n    var cb = function(value, context, argCount) {\n      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n      if (value == null) return _.identity;\n      if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n      return _.property(value);\n    };\n  \n    // External wrapper for our callback generator. Users may customize\n    // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n    // This abstraction hides the internal-only argCount argument.\n    _.iteratee = builtinIteratee = function(value, context) {\n      return cb(value, context, Infinity);\n    };\n  \n    // Some functions take a variable number of arguments, or a few expected\n    // arguments at the beginning and then a variable number of values to operate\n    // on. This helper accumulates all remaining arguments past the function鈥檚\n    // argument length (or an explicit `startIndex`), into an array that becomes\n    // the last argument. Similar to ES6鈥檚 \"rest parameter\".\n    var restArguments = function(func, startIndex) {\n      startIndex = startIndex == null ? func.length - 1 : +startIndex;\n      return function() {\n        var length = Math.max(arguments.length - startIndex, 0),\n            rest = Array(length),\n            index = 0;\n        for (; index < length; index++) {\n          rest[index] = arguments[index + startIndex];\n        }\n        switch (startIndex) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, arguments[0], rest);\n          case 2: return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for (index = 0; index < startIndex; index++) {\n          args[index] = arguments[index];\n        }\n        args[startIndex] = rest;\n        return func.apply(this, args);\n      };\n    };\n  \n    // An internal function for creating a new object that inherits from another.\n    var baseCreate = function(prototype) {\n      if (!_.isObject(prototype)) return {};\n      if (nativeCreate) return nativeCreate(prototype);\n      Ctor.prototype = prototype;\n      var result = new Ctor;\n      Ctor.prototype = null;\n      return result;\n    };\n  \n    var shallowProperty = function(key) {\n      return function(obj) {\n        return obj == null ? void 0 : obj[key];\n      };\n    };\n  \n    var has = function(obj, path) {\n      return obj != null && hasOwnProperty.call(obj, path);\n    }\n  \n    var deepGet = function(obj, path) {\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        if (obj == null) return void 0;\n        obj = obj[path[i]];\n      }\n      return length ? obj : void 0;\n    };\n  \n    // Helper for collection methods to determine whether a collection\n    // should be iterated as an array or as an object.\n    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n    var getLength = shallowProperty('length');\n    var isArrayLike = function(collection) {\n      var length = getLength(collection);\n      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n    };\n  \n    // Collection Functions\n    // --------------------\n  \n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles raw objects in addition to array-likes. Treats all\n    // sparse array-likes as if they were dense.\n    _.each = _.forEach = function(obj, iteratee, context) {\n      iteratee = optimizeCb(iteratee, context);\n      var i, length;\n      if (isArrayLike(obj)) {\n        for (i = 0, length = obj.length; i < length; i++) {\n          iteratee(obj[i], i, obj);\n        }\n      } else {\n        var keys = _.keys(obj);\n        for (i = 0, length = keys.length; i < length; i++) {\n          iteratee(obj[keys[i]], keys[i], obj);\n        }\n      }\n      return obj;\n    };\n  \n    // Return the results of applying the iteratee to each element.\n    _.map = _.collect = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          results = Array(length);\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Create a reducing function iterating left or right.\n    var createReduce = function(dir) {\n      // Wrap code that reassigns argument variables in a separate function than\n      // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n      var reducer = function(obj, iteratee, memo, initial) {\n        var keys = !isArrayLike(obj) && _.keys(obj),\n            length = (keys || obj).length,\n            index = dir > 0 ? 0 : length - 1;\n        if (!initial) {\n          memo = obj[keys ? keys[index] : index];\n          index += dir;\n        }\n        for (; index >= 0 && index < length; index += dir) {\n          var currentKey = keys ? keys[index] : index;\n          memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        }\n        return memo;\n      };\n  \n      return function(obj, iteratee, memo, context) {\n        var initial = arguments.length >= 3;\n        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n      };\n    };\n  \n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`.\n    _.reduce = _.foldl = _.inject = createReduce(1);\n  \n    // The right-associative version of reduce, also known as `foldr`.\n    _.reduceRight = _.foldr = createReduce(-1);\n  \n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function(obj, predicate, context) {\n      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n      var key = keyFinder(obj, predicate, context);\n      if (key !== void 0 && key !== -1) return obj[key];\n    };\n  \n    // Return all the elements that pass a truth test.\n    // Aliased as `select`.\n    _.filter = _.select = function(obj, predicate, context) {\n      var results = [];\n      predicate = cb(predicate, context);\n      _.each(obj, function(value, index, list) {\n        if (predicate(value, index, list)) results.push(value);\n      });\n      return results;\n    };\n  \n    // Return all the elements for which a truth test fails.\n    _.reject = function(obj, predicate, context) {\n      return _.filter(obj, _.negate(cb(predicate)), context);\n    };\n  \n    // Determine whether all of the elements match a truth test.\n    // Aliased as `all`.\n    _.every = _.all = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (!predicate(obj[currentKey], currentKey, obj)) return false;\n      }\n      return true;\n    };\n  \n    // Determine if at least one element in the object matches a truth test.\n    // Aliased as `any`.\n    _.some = _.any = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (predicate(obj[currentKey], currentKey, obj)) return true;\n      }\n      return false;\n    };\n  \n    // Determine if the array or object contains a given item (using `===`).\n    // Aliased as `includes` and `include`.\n    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n      return _.indexOf(obj, item, fromIndex) >= 0;\n    };\n  \n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = restArguments(function(obj, path, args) {\n      var contextPath, func;\n      if (_.isFunction(path)) {\n        func = path;\n      } else if (_.isArray(path)) {\n        contextPath = path.slice(0, -1);\n        path = path[path.length - 1];\n      }\n      return _.map(obj, function(context) {\n        var method = func;\n        if (!method) {\n          if (contextPath && contextPath.length) {\n            context = deepGet(context, contextPath);\n          }\n          if (context == null) return void 0;\n          method = context[path];\n        }\n        return method == null ? method : method.apply(context, args);\n      });\n    });\n  \n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function(obj, key) {\n      return _.map(obj, _.property(key));\n    };\n  \n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function(obj, attrs) {\n      return _.filter(obj, _.matcher(attrs));\n    };\n  \n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function(obj, attrs) {\n      return _.find(obj, _.matcher(attrs));\n    };\n  \n    // Return the maximum element (or element-based computation).\n    _.max = function(obj, iteratee, context) {\n      var result = -Infinity, lastComputed = -Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value > result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Return the minimum element (or element-based computation).\n    _.min = function(obj, iteratee, context) {\n      var result = Infinity, lastComputed = Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value < result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed < lastComputed || computed === Infinity && result === Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Shuffle a collection.\n    _.shuffle = function(obj) {\n      return _.sample(obj, Infinity);\n    };\n  \n    // Sample **n** random values from a collection using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher鈥揧ates_shuffle).\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function(obj, n, guard) {\n      if (n == null || guard) {\n        if (!isArrayLike(obj)) obj = _.values(obj);\n        return obj[_.random(obj.length - 1)];\n      }\n      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n      var length = getLength(sample);\n      n = Math.max(Math.min(n, length), 0);\n      var last = length - 1;\n      for (var index = 0; index < n; index++) {\n        var rand = _.random(index, last);\n        var temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n      }\n      return sample.slice(0, n);\n    };\n  \n    // Sort the object's values by a criterion produced by an iteratee.\n    _.sortBy = function(obj, iteratee, context) {\n      var index = 0;\n      iteratee = cb(iteratee, context);\n      return _.pluck(_.map(obj, function(value, key, list) {\n        return {\n          value: value,\n          index: index++,\n          criteria: iteratee(value, key, list)\n        };\n      }).sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n          if (a > b || a === void 0) return 1;\n          if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n      }), 'value');\n    };\n  \n    // An internal function used for aggregate \"group by\" operations.\n    var group = function(behavior, partition) {\n      return function(obj, iteratee, context) {\n        var result = partition ? [[], []] : {};\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(value, index) {\n          var key = iteratee(value, index, obj);\n          behavior(result, value, key);\n        });\n        return result;\n      };\n    };\n  \n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function(result, value, key) {\n      if (has(result, key)) result[key].push(value); else result[key] = [value];\n    });\n  \n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function(result, value, key) {\n      result[key] = value;\n    });\n  \n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function(result, value, key) {\n      if (has(result, key)) result[key]++; else result[key] = 1;\n    });\n  \n    var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function(obj) {\n      if (!obj) return [];\n      if (_.isArray(obj)) return slice.call(obj);\n      if (_.isString(obj)) {\n        // Keep surrogate pair characters together\n        return obj.match(reStrSymbol);\n      }\n      if (isArrayLike(obj)) return _.map(obj, _.identity);\n      return _.values(obj);\n    };\n  \n    // Return the number of elements in an object.\n    _.size = function(obj) {\n      if (obj == null) return 0;\n      return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n    };\n  \n    // Split a collection into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = group(function(result, value, pass) {\n      result[pass ? 0 : 1].push(value);\n    }, true);\n  \n    // Array Functions\n    // ---------------\n  \n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[0];\n      return _.initial(array, array.length - n);\n    };\n  \n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N.\n    _.initial = function(array, n, guard) {\n      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n    };\n  \n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array.\n    _.last = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[array.length - 1];\n      return _.rest(array, Math.max(0, array.length - n));\n    };\n  \n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array.\n    _.rest = _.tail = _.drop = function(array, n, guard) {\n      return slice.call(array, n == null || guard ? 1 : n);\n    };\n  \n    // Trim out all falsy values from an array.\n    _.compact = function(array) {\n      return _.filter(array, Boolean);\n    };\n  \n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function(input, shallow, strict, output) {\n      output = output || [];\n      var idx = output.length;\n      for (var i = 0, length = getLength(input); i < length; i++) {\n        var value = input[i];\n        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n          // Flatten current level of array or arguments object.\n          if (shallow) {\n            var j = 0, len = value.length;\n            while (j < len) output[idx++] = value[j++];\n          } else {\n            flatten(value, shallow, strict, output);\n            idx = output.length;\n          }\n        } else if (!strict) {\n          output[idx++] = value;\n        }\n      }\n      return output;\n    };\n  \n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function(array, shallow) {\n      return flatten(array, shallow, false);\n    };\n  \n    // Return a version of the array that does not contain the specified value(s).\n    _.without = restArguments(function(array, otherArrays) {\n      return _.difference(array, otherArrays);\n    });\n  \n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // The faster algorithm will not work with an iteratee if the iteratee\n    // is not a one-to-one function, so providing an iteratee will disable\n    // the faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n      if (!_.isBoolean(isSorted)) {\n        context = iteratee;\n        iteratee = isSorted;\n        isSorted = false;\n      }\n      if (iteratee != null) iteratee = cb(iteratee, context);\n      var result = [];\n      var seen = [];\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var value = array[i],\n            computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted && !iteratee) {\n          if (!i || seen !== computed) result.push(value);\n          seen = computed;\n        } else if (iteratee) {\n          if (!_.contains(seen, computed)) {\n            seen.push(computed);\n            result.push(value);\n          }\n        } else if (!_.contains(result, value)) {\n          result.push(value);\n        }\n      }\n      return result;\n    };\n  \n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = restArguments(function(arrays) {\n      return _.uniq(flatten(arrays, true, true));\n    });\n  \n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function(array) {\n      var result = [];\n      var argsLength = arguments.length;\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var item = array[i];\n        if (_.contains(result, item)) continue;\n        var j;\n        for (j = 1; j < argsLength; j++) {\n          if (!_.contains(arguments[j], item)) break;\n        }\n        if (j === argsLength) result.push(item);\n      }\n      return result;\n    };\n  \n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = restArguments(function(array, rest) {\n      rest = flatten(rest, true, true);\n      return _.filter(array, function(value){\n        return !_.contains(rest, value);\n      });\n    });\n  \n    // Complement of _.zip. Unzip accepts an array of arrays and groups\n    // each array's elements on shared indices.\n    _.unzip = function(array) {\n      var length = array && _.max(array, getLength).length || 0;\n      var result = Array(length);\n  \n      for (var index = 0; index < length; index++) {\n        result[index] = _.pluck(array, index);\n      }\n      return result;\n    };\n  \n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = restArguments(_.unzip);\n  \n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values. Passing by pairs is the reverse of _.pairs.\n    _.object = function(list, values) {\n      var result = {};\n      for (var i = 0, length = getLength(list); i < length; i++) {\n        if (values) {\n          result[list[i]] = values[i];\n        } else {\n          result[list[i][0]] = list[i][1];\n        }\n      }\n      return result;\n    };\n  \n    // Generator function to create the findIndex and findLastIndex functions.\n    var createPredicateIndexFinder = function(dir) {\n      return function(array, predicate, context) {\n        predicate = cb(predicate, context);\n        var length = getLength(array);\n        var index = dir > 0 ? 0 : length - 1;\n        for (; index >= 0 && index < length; index += dir) {\n          if (predicate(array[index], index, array)) return index;\n        }\n        return -1;\n      };\n    };\n  \n    // Returns the first index on an array-like that passes a predicate test.\n    _.findIndex = createPredicateIndexFinder(1);\n    _.findLastIndex = createPredicateIndexFinder(-1);\n  \n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function(array, obj, iteratee, context) {\n      iteratee = cb(iteratee, context, 1);\n      var value = iteratee(obj);\n      var low = 0, high = getLength(array);\n      while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n      }\n      return low;\n    };\n  \n    // Generator function to create the indexOf and lastIndexOf functions.\n    var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n      return function(array, item, idx) {\n        var i = 0, length = getLength(array);\n        if (typeof idx == 'number') {\n          if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n          } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n          }\n        } else if (sortedIndex && idx && length) {\n          idx = sortedIndex(array, item);\n          return array[idx] === item ? idx : -1;\n        }\n        if (item !== item) {\n          idx = predicateFind(slice.call(array, i, length), _.isNaN);\n          return idx >= 0 ? idx + i : -1;\n        }\n        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n          if (array[idx] === item) return idx;\n        }\n        return -1;\n      };\n    };\n  \n    // Return the position of the first occurrence of an item in an array,\n    // or -1 if the item is not included in the array.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n  \n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function(start, stop, step) {\n      if (stop == null) {\n        stop = start || 0;\n        start = 0;\n      }\n      if (!step) {\n        step = stop < start ? -1 : 1;\n      }\n  \n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var range = Array(length);\n  \n      for (var idx = 0; idx < length; idx++, start += step) {\n        range[idx] = start;\n      }\n  \n      return range;\n    };\n  \n    // Chunk a single array into multiple arrays, each containing `count` or fewer\n    // items.\n    _.chunk = function(array, count) {\n      if (count == null || count < 1) return [];\n      var result = [];\n      var i = 0, length = array.length;\n      while (i < length) {\n        result.push(slice.call(array, i, i += count));\n      }\n      return result;\n    };\n  \n    // Function (ahem) Functions\n    // ------------------\n  \n    // Determines whether to execute a function as a constructor\n    // or a normal function with the provided arguments.\n    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n      var self = baseCreate(sourceFunc.prototype);\n      var result = sourceFunc.apply(self, args);\n      if (_.isObject(result)) return result;\n      return self;\n    };\n  \n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = restArguments(function(func, context, args) {\n      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n      var bound = restArguments(function(callArgs) {\n        return executeBound(func, bound, context, this, args.concat(callArgs));\n      });\n      return bound;\n    });\n  \n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder by default, allowing any combination of arguments to be\n    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n    _.partial = restArguments(function(func, boundArgs) {\n      var placeholder = _.partial.placeholder;\n      var bound = function() {\n        var position = 0, length = boundArgs.length;\n        var args = Array(length);\n        for (var i = 0; i < length; i++) {\n          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n        }\n        while (position < arguments.length) args.push(arguments[position++]);\n        return executeBound(func, bound, this, this, args);\n      };\n      return bound;\n    });\n  \n    _.partial.placeholder = _;\n  \n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = restArguments(function(obj, keys) {\n      keys = flatten(keys, false, false);\n      var index = keys.length;\n      if (index < 1) throw new Error('bindAll must be passed function names');\n      while (index--) {\n        var key = keys[index];\n        obj[key] = _.bind(obj[key], obj);\n      }\n    });\n  \n    // Memoize an expensive function by storing its results.\n    _.memoize = function(func, hasher) {\n      var memoize = function(key) {\n        var cache = memoize.cache;\n        var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n        if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n        return cache[address];\n      };\n      memoize.cache = {};\n      return memoize;\n    };\n  \n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = restArguments(function(func, wait, args) {\n      return setTimeout(function() {\n        return func.apply(null, args);\n      }, wait);\n    });\n  \n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = _.partial(_.delay, _, 1);\n  \n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function(func, wait, options) {\n      var timeout, context, args, result;\n      var previous = 0;\n      if (!options) options = {};\n  \n      var later = function() {\n        previous = options.leading === false ? 0 : _.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      };\n  \n      var throttled = function() {\n        var now = _.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n          }\n          previous = now;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining);\n        }\n        return result;\n      };\n  \n      throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n      };\n  \n      return throttled;\n    };\n  \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function(func, wait, immediate) {\n      var timeout, result;\n  \n      var later = function(context, args) {\n        timeout = null;\n        if (args) result = func.apply(context, args);\n      };\n  \n      var debounced = restArguments(function(args) {\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n          var callNow = !timeout;\n          timeout = setTimeout(later, wait);\n          if (callNow) result = func.apply(this, args);\n        } else {\n          timeout = _.delay(later, wait, this, args);\n        }\n  \n        return result;\n      });\n  \n      debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n      };\n  \n      return debounced;\n    };\n  \n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function(func, wrapper) {\n      return _.partial(wrapper, func);\n    };\n  \n    // Returns a negated version of the passed-in predicate.\n    _.negate = function(predicate) {\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    };\n  \n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function() {\n      var args = arguments;\n      var start = args.length - 1;\n      return function() {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) result = args[i].call(this, result);\n        return result;\n      };\n    };\n  \n    // Returns a function that will only be executed on and after the Nth call.\n    _.after = function(times, func) {\n      return function() {\n        if (--times < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    };\n  \n    // Returns a function that will only be executed up to (but not including) the Nth call.\n    _.before = function(times, func) {\n      var memo;\n      return function() {\n        if (--times > 0) {\n          memo = func.apply(this, arguments);\n        }\n        if (times <= 1) func = null;\n        return memo;\n      };\n    };\n  \n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = _.partial(_.before, 2);\n  \n    _.restArguments = restArguments;\n  \n    // Object Functions\n    // ----------------\n  \n    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  \n    var collectNonEnumProps = function(obj, keys) {\n      var nonEnumIdx = nonEnumerableProps.length;\n      var constructor = obj.constructor;\n      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n  \n      // Constructor is a special case.\n      var prop = 'constructor';\n      if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n  \n      while (nonEnumIdx--) {\n        prop = nonEnumerableProps[nonEnumIdx];\n        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n          keys.push(prop);\n        }\n      }\n    };\n  \n    // Retrieve the names of an object's own properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\n    _.keys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      if (nativeKeys) return nativeKeys(obj);\n      var keys = [];\n      for (var key in obj) if (has(obj, key)) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve all the property names of an object.\n    _.allKeys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      var keys = [];\n      for (var key in obj) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve the values of an object's properties.\n    _.values = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var values = Array(length);\n      for (var i = 0; i < length; i++) {\n        values[i] = obj[keys[i]];\n      }\n      return values;\n    };\n  \n    // Returns the results of applying the iteratee to each element of the object.\n    // In contrast to _.map it returns an object.\n    _.mapObject = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = _.keys(obj),\n          length = keys.length,\n          results = {};\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Convert an object into a list of `[key, value]` pairs.\n    // The opposite of _.object.\n    _.pairs = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var pairs = Array(length);\n      for (var i = 0; i < length; i++) {\n        pairs[i] = [keys[i], obj[keys[i]]];\n      }\n      return pairs;\n    };\n  \n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function(obj) {\n      var result = {};\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        result[obj[keys[i]]] = keys[i];\n      }\n      return result;\n    };\n  \n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`.\n    _.functions = _.methods = function(obj) {\n      var names = [];\n      for (var key in obj) {\n        if (_.isFunction(obj[key])) names.push(key);\n      }\n      return names.sort();\n    };\n  \n    // An internal function for creating assigner functions.\n    var createAssigner = function(keysFunc, defaults) {\n      return function(obj) {\n        var length = arguments.length;\n        if (defaults) obj = Object(obj);\n        if (length < 2 || obj == null) return obj;\n        for (var index = 1; index < length; index++) {\n          var source = arguments[index],\n              keys = keysFunc(source),\n              l = keys.length;\n          for (var i = 0; i < l; i++) {\n            var key = keys[i];\n            if (!defaults || obj[key] === void 0) obj[key] = source[key];\n          }\n        }\n        return obj;\n      };\n    };\n  \n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = createAssigner(_.allKeys);\n  \n    // Assigns a given object with all the own properties in the passed-in object(s).\n    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    _.extendOwn = _.assign = createAssigner(_.keys);\n  \n    // Returns the first key on an object that passes a predicate test.\n    _.findKey = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = _.keys(obj), key;\n      for (var i = 0, length = keys.length; i < length; i++) {\n        key = keys[i];\n        if (predicate(obj[key], key, obj)) return key;\n      }\n    };\n  \n    // Internal pick helper function to determine if `obj` has key `key`.\n    var keyInObj = function(value, key, obj) {\n      return key in obj;\n    };\n  \n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = restArguments(function(obj, keys) {\n      var result = {}, iteratee = keys[0];\n      if (obj == null) return result;\n      if (_.isFunction(iteratee)) {\n        if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n        keys = _.allKeys(obj);\n      } else {\n        iteratee = keyInObj;\n        keys = flatten(keys, false, false);\n        obj = Object(obj);\n      }\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n      return result;\n    });\n  \n    // Return a copy of the object without the blacklisted properties.\n    _.omit = restArguments(function(obj, keys) {\n      var iteratee = keys[0], context;\n      if (_.isFunction(iteratee)) {\n        iteratee = _.negate(iteratee);\n        if (keys.length > 1) context = keys[1];\n      } else {\n        keys = _.map(flatten(keys, false, false), String);\n        iteratee = function(value, key) {\n          return !_.contains(keys, key);\n        };\n      }\n      return _.pick(obj, iteratee, context);\n    });\n  \n    // Fill in a given object with default properties.\n    _.defaults = createAssigner(_.allKeys, true);\n  \n    // Creates an object that inherits from the given prototype object.\n    // If additional properties are provided then they will be added to the\n    // created object.\n    _.create = function(prototype, props) {\n      var result = baseCreate(prototype);\n      if (props) _.extendOwn(result, props);\n      return result;\n    };\n  \n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function(obj) {\n      if (!_.isObject(obj)) return obj;\n      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n  \n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function(obj, interceptor) {\n      interceptor(obj);\n      return obj;\n    };\n  \n    // Returns whether an object has a given set of `key:value` pairs.\n    _.isMatch = function(object, attrs) {\n      var keys = _.keys(attrs), length = keys.length;\n      if (object == null) return !length;\n      var obj = Object(object);\n      for (var i = 0; i < length; i++) {\n        var key = keys[i];\n        if (attrs[key] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  \n  \n    // Internal recursive comparison function for `isEqual`.\n    var eq, deepEq;\n    eq = function(a, b, aStack, bStack) {\n      // Identical objects are equal. `0 === -0`, but they aren't identical.\n      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n      if (a === b) return a !== 0 || 1 / a === 1 / b;\n      // `null` or `undefined` only equal to itself (strict comparison).\n      if (a == null || b == null) return false;\n      // `NaN`s are equivalent, but non-reflexive.\n      if (a !== a) return b !== b;\n      // Exhaust primitive checks\n      var type = typeof a;\n      if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n      return deepEq(a, b, aStack, bStack);\n    };\n  \n    // Internal recursive comparison function for `isEqual`.\n    deepEq = function(a, b, aStack, bStack) {\n      // Unwrap any wrapped objects.\n      if (a instanceof _) a = a._wrapped;\n      if (b instanceof _) b = b._wrapped;\n      // Compare `[[Class]]` names.\n      var className = toString.call(a);\n      if (className !== toString.call(b)) return false;\n      switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case '[object String]':\n          // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n          // equivalent to `new String(\"5\")`.\n          return '' + a === '' + b;\n        case '[object Number]':\n          // `NaN`s are equivalent, but non-reflexive.\n          // Object(NaN) is equivalent to NaN.\n          if (+a !== +a) return +b !== +b;\n          // An `egal` comparison is performed for other numeric values.\n          return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n          // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n          // millisecond representations. Note that invalid dates with millisecond representations\n          // of `NaN` are not equivalent.\n          return +a === +b;\n        case '[object Symbol]':\n          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      }\n  \n      var areArrays = className === '[object Array]';\n      if (!areArrays) {\n        if (typeof a != 'object' || typeof b != 'object') return false;\n  \n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                                 _.isFunction(bCtor) && bCtor instanceof bCtor)\n                            && ('constructor' in a && 'constructor' in b)) {\n          return false;\n        }\n      }\n      // Assume equality for cyclic structures. The algorithm for detecting cyclic\n      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  \n      // Initializing stack of traversed objects.\n      // It's done here since we only need them for objects and arrays comparison.\n      aStack = aStack || [];\n      bStack = bStack || [];\n      var length = aStack.length;\n      while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b;\n      }\n  \n      // Add the first object to the stack of traversed objects.\n      aStack.push(a);\n      bStack.push(b);\n  \n      // Recursively compare objects and arrays.\n      if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length) return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n          if (!eq(a[length], b[length], aStack, bStack)) return false;\n        }\n      } else {\n        // Deep compare objects.\n        var keys = _.keys(a), key;\n        length = keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (_.keys(b).length !== length) return false;\n        while (length--) {\n          // Deep compare each member\n          key = keys[length];\n          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n        }\n      }\n      // Remove the first object from the stack of traversed objects.\n      aStack.pop();\n      bStack.pop();\n      return true;\n    };\n  \n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function(a, b) {\n      return eq(a, b);\n    };\n  \n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function(obj) {\n      if (obj == null) return true;\n      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n      return _.keys(obj).length === 0;\n    };\n  \n    // Is a given value a DOM element?\n    _.isElement = function(obj) {\n      return !!(obj && obj.nodeType === 1);\n    };\n  \n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function(obj) {\n      return toString.call(obj) === '[object Array]';\n    };\n  \n    // Is a given variable an object?\n    _.isObject = function(obj) {\n      var type = typeof obj;\n      return type === 'function' || type === 'object' && !!obj;\n    };\n  \n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n      _['is' + name] = function(obj) {\n        return toString.call(obj) === '[object ' + name + ']';\n      };\n    });\n  \n    // Define a fallback version of the method in browsers (ahem, IE < 9), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n      _.isArguments = function(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  \n    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n    var nodelist = root.document && root.document.childNodes;\n    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n      _.isFunction = function(obj) {\n        return typeof obj == 'function' || false;\n      };\n    }\n  \n    // Is a given object a finite number?\n    _.isFinite = function(obj) {\n      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n  \n    // Is the given value `NaN`?\n    _.isNaN = function(obj) {\n      return _.isNumber(obj) && isNaN(obj);\n    };\n  \n    // Is a given value a boolean?\n    _.isBoolean = function(obj) {\n      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n    };\n  \n    // Is a given value equal to null?\n    _.isNull = function(obj) {\n      return obj === null;\n    };\n  \n    // Is a given variable undefined?\n    _.isUndefined = function(obj) {\n      return obj === void 0;\n    };\n  \n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function(obj, path) {\n      if (!_.isArray(path)) {\n        return has(obj, path);\n      }\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        var key = path[i];\n        if (obj == null || !hasOwnProperty.call(obj, key)) {\n          return false;\n        }\n        obj = obj[key];\n      }\n      return !!length;\n    };\n  \n    // Utility Functions\n    // -----------------\n  \n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function() {\n      root._ = previousUnderscore;\n      return this;\n    };\n  \n    // Keep the identity function around for default iteratees.\n    _.identity = function(value) {\n      return value;\n    };\n  \n    // Predicate-generating functions. Often useful outside of Underscore.\n    _.constant = function(value) {\n      return function() {\n        return value;\n      };\n    };\n  \n    _.noop = function(){};\n  \n    // Creates a function that, when passed an object, will traverse that object鈥檚\n    // properties down the given `path`, specified as an array of keys or indexes.\n    _.property = function(path) {\n      if (!_.isArray(path)) {\n        return shallowProperty(path);\n      }\n      return function(obj) {\n        return deepGet(obj, path);\n      };\n    };\n  \n    // Generates a function for a given object that returns a given property.\n    _.propertyOf = function(obj) {\n      if (obj == null) {\n        return function(){};\n      }\n      return function(path) {\n        return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n      };\n    };\n  \n    // Returns a predicate for checking whether an object has a given set of\n    // `key:value` pairs.\n    _.matcher = _.matches = function(attrs) {\n      attrs = _.extendOwn({}, attrs);\n      return function(obj) {\n        return _.isMatch(obj, attrs);\n      };\n    };\n  \n    // Run a function **n** times.\n    _.times = function(n, iteratee, context) {\n      var accum = Array(Math.max(0, n));\n      iteratee = optimizeCb(iteratee, context, 1);\n      for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n      return accum;\n    };\n  \n    // Return a random integer between min and max (inclusive).\n    _.random = function(min, max) {\n      if (max == null) {\n        max = min;\n        min = 0;\n      }\n      return min + Math.floor(Math.random() * (max - min + 1));\n    };\n  \n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function() {\n      return new Date().getTime();\n    };\n  \n    // List of HTML entities for escaping.\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var unescapeMap = _.invert(escapeMap);\n  \n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    var createEscaper = function(map) {\n      var escaper = function(match) {\n        return map[match];\n      };\n      // Regexes for identifying a key that needs to be escaped.\n      var source = '(?:' + _.keys(map).join('|') + ')';\n      var testRegexp = RegExp(source);\n      var replaceRegexp = RegExp(source, 'g');\n      return function(string) {\n        string = string == null ? '' : '' + string;\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n      };\n    };\n    _.escape = createEscaper(escapeMap);\n    _.unescape = createEscaper(unescapeMap);\n  \n    // Traverses the children of `obj` along `path`. If a child is a function, it\n    // is invoked with its parent as context. Returns the value of the final\n    // child, or `fallback` if any child is undefined.\n    _.result = function(obj, path, fallback) {\n      if (!_.isArray(path)) path = [path];\n      var length = path.length;\n      if (!length) {\n        return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n      }\n      for (var i = 0; i < length; i++) {\n        var prop = obj == null ? void 0 : obj[path[i]];\n        if (prop === void 0) {\n          prop = fallback;\n          i = length; // Ensure we don't continue iterating.\n        }\n        obj = _.isFunction(prop) ? prop.call(obj) : prop;\n      }\n      return obj;\n    };\n  \n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function(prefix) {\n      var id = ++idCounter + '';\n      return prefix ? prefix + id : id;\n    };\n  \n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n      evaluate: /<%([\\s\\S]+?)%>/g,\n      interpolate: /<%=([\\s\\S]+?)%>/g,\n      escape: /<%-([\\s\\S]+?)%>/g\n    };\n  \n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n  \n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n      \"'\": \"'\",\n      '\\\\': '\\\\',\n      '\\r': 'r',\n      '\\n': 'n',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n  \n    var escapeChar = function(match) {\n      return '\\\\' + escapes[match];\n    };\n  \n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    // NB: `oldSettings` only exists for backwards compatibility.\n    _.template = function(text, settings, oldSettings) {\n      if (!settings && oldSettings) settings = oldSettings;\n      settings = _.defaults({}, settings, _.templateSettings);\n  \n      // Combine delimiters into one regular expression via alternation.\n      var matcher = RegExp([\n        (settings.escape || noMatch).source,\n        (settings.interpolate || noMatch).source,\n        (settings.evaluate || noMatch).source\n      ].join('|') + '|$', 'g');\n  \n      // Compile the template source, escaping string literals appropriately.\n      var index = 0;\n      var source = \"__p+='\";\n      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n        index = offset + match.length;\n  \n        if (escape) {\n          source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n        } else if (interpolate) {\n          source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n        } else if (evaluate) {\n          source += \"';\\n\" + evaluate + \"\\n__p+='\";\n        }\n  \n        // Adobe VMs need the match returned to produce the correct offset.\n        return match;\n      });\n      source += \"';\\n\";\n  \n      // If a variable is not specified, place data values in local scope.\n      if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n  \n      source = \"var __t,__p='',__j=Array.prototype.join,\" +\n        \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n        source + 'return __p;\\n';\n  \n      var render;\n      try {\n        render = new Function(settings.variable || 'obj', '_', source);\n      } catch (e) {\n        e.source = source;\n        throw e;\n      }\n  \n      var template = function(data) {\n        return render.call(this, data, _);\n      };\n  \n      // Provide the compiled source as a convenience for precompilation.\n      var argument = settings.variable || 'obj';\n      template.source = 'function(' + argument + '){\\n' + source + '}';\n  \n      return template;\n    };\n  \n    // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n    _.chain = function(obj) {\n      var instance = _(obj);\n      instance._chain = true;\n      return instance;\n    };\n  \n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n  \n    // Helper function to continue chaining intermediate results.\n    var chainResult = function(instance, obj) {\n      return instance._chain ? _(obj).chain() : obj;\n    };\n  \n    // Add your own custom functions to the Underscore object.\n    _.mixin = function(obj) {\n      _.each(_.functions(obj), function(name) {\n        var func = _[name] = obj[name];\n        _.prototype[name] = function() {\n          var args = [this._wrapped];\n          push.apply(args, arguments);\n          return chainResult(this, func.apply(_, args));\n        };\n      });\n      return _;\n    };\n  \n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n  \n    // Add all mutator Array functions to the wrapper.\n    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        var obj = this._wrapped;\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n        return chainResult(this, obj);\n      };\n    });\n  \n    // Add all accessor Array functions to the wrapper.\n    _.each(['concat', 'join', 'slice'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        return chainResult(this, method.apply(this._wrapped, arguments));\n      };\n    });\n  \n    // Extracts the result from a wrapped and chained object.\n    _.prototype.value = function() {\n      return this._wrapped;\n    };\n  \n    // Provide unwrapping proxy for some methods used in engine operations\n    // such as arithmetic and JSON stringification.\n    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n    _.prototype.toString = function() {\n      return String(this._wrapped);\n    };\n  \n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (typeof define == 'function' && define.amd) {\n      define('underscore', [], function() {\n        return _;\n      });\n    }\n  }());","date":"2019-07-17T08:01:53.592Z","updated":"2019-07-17T08:01:53.592Z","path":"demo/js/underscore.js","layout":"false","title":"","comments":1,"_id":"cjzcl76aq003gdkhshhxm14au","content":"//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n    // Baseline setup\n    // --------------\n  \n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self == 'object' && self.self === self && self ||\n              typeof global == 'object' && global.global === global && global ||\n              this ||\n              {};\n  \n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n  \n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n  \n    // Create quick reference variables for speed access to core prototypes.\n    var push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n  \n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeCreate = Object.create;\n  \n    // Naked function reference for surrogate-prototype-swapping.\n    var Ctor = function(){};\n  \n    // Create a safe reference to the Underscore object for use below.\n    var _ = function(obj) {\n      if (obj instanceof _) return obj;\n      if (!(this instanceof _)) return new _(obj);\n      this._wrapped = obj;\n    };\n  \n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for their old module API. If we're in\n    // the browser, add `_` as a global object.\n    // (`nodeType` is checked to ensure that `module`\n    // and `exports` are not HTML elements.)\n    if (typeof exports != 'undefined' && !exports.nodeType) {\n      if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n        exports = module.exports = _;\n      }\n      exports._ = _;\n    } else {\n      root._ = _;\n    }\n  \n    // Current version.\n    _.VERSION = '1.9.1';\n  \n    // Internal function that returns an efficient (for current engines) version\n    // of the passed-in callback, to be repeatedly applied in other Underscore\n    // functions.\n    var optimizeCb = function(func, context, argCount) {\n      if (context === void 0) return func;\n      switch (argCount == null ? 3 : argCount) {\n        case 1: return function(value) {\n          return func.call(context, value);\n        };\n        // The 2-argument case is omitted because we鈥檙e not using it.\n        case 3: return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n      }\n      return function() {\n        return func.apply(context, arguments);\n      };\n    };\n  \n    var builtinIteratee;\n  \n    // An internal function to generate callbacks that can be applied to each\n    // element in a collection, returning the desired result 鈥� either `identity`,\n    // an arbitrary callback, a property matcher, or a property accessor.\n    var cb = function(value, context, argCount) {\n      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n      if (value == null) return _.identity;\n      if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n      return _.property(value);\n    };\n  \n    // External wrapper for our callback generator. Users may customize\n    // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n    // This abstraction hides the internal-only argCount argument.\n    _.iteratee = builtinIteratee = function(value, context) {\n      return cb(value, context, Infinity);\n    };\n  \n    // Some functions take a variable number of arguments, or a few expected\n    // arguments at the beginning and then a variable number of values to operate\n    // on. This helper accumulates all remaining arguments past the function鈥檚\n    // argument length (or an explicit `startIndex`), into an array that becomes\n    // the last argument. Similar to ES6鈥檚 \"rest parameter\".\n    var restArguments = function(func, startIndex) {\n      startIndex = startIndex == null ? func.length - 1 : +startIndex;\n      return function() {\n        var length = Math.max(arguments.length - startIndex, 0),\n            rest = Array(length),\n            index = 0;\n        for (; index < length; index++) {\n          rest[index] = arguments[index + startIndex];\n        }\n        switch (startIndex) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, arguments[0], rest);\n          case 2: return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for (index = 0; index < startIndex; index++) {\n          args[index] = arguments[index];\n        }\n        args[startIndex] = rest;\n        return func.apply(this, args);\n      };\n    };\n  \n    // An internal function for creating a new object that inherits from another.\n    var baseCreate = function(prototype) {\n      if (!_.isObject(prototype)) return {};\n      if (nativeCreate) return nativeCreate(prototype);\n      Ctor.prototype = prototype;\n      var result = new Ctor;\n      Ctor.prototype = null;\n      return result;\n    };\n  \n    var shallowProperty = function(key) {\n      return function(obj) {\n        return obj == null ? void 0 : obj[key];\n      };\n    };\n  \n    var has = function(obj, path) {\n      return obj != null && hasOwnProperty.call(obj, path);\n    }\n  \n    var deepGet = function(obj, path) {\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        if (obj == null) return void 0;\n        obj = obj[path[i]];\n      }\n      return length ? obj : void 0;\n    };\n  \n    // Helper for collection methods to determine whether a collection\n    // should be iterated as an array or as an object.\n    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n    var getLength = shallowProperty('length');\n    var isArrayLike = function(collection) {\n      var length = getLength(collection);\n      return typeof length == 'number' && length >= 0 && length <= max_array_index;=\"\" };=\"\" collection=\"\" functions=\"\" --------------------=\"\" the=\"\" cornerstone,=\"\" an=\"\" `each`=\"\" implementation,=\"\" aka=\"\" `foreach`.=\"\" handles=\"\" raw=\"\" objects=\"\" in=\"\" addition=\"\" to=\"\" array-likes.=\"\" treats=\"\" all=\"\" sparse=\"\" array-likes=\"\" as=\"\" if=\"\" they=\"\" were=\"\" dense.=\"\" _.each=\"_.forEach\" ==\"\" function(obj,=\"\" iteratee,=\"\" context)=\"\" {=\"\" iteratee=\"optimizeCb(iteratee,\" context);=\"\" var=\"\" i,=\"\" length;=\"\" (isarraylike(obj))=\"\" for=\"\" (i=\"0,\" length=\"obj.length;\" i=\"\" <=\"\" i++)=\"\" iteratee(obj[i],=\"\" obj);=\"\" }=\"\" else=\"\" keys=\"_.keys(obj);\" iteratee(obj[keys[i]],=\"\" keys[i],=\"\" return=\"\" obj;=\"\" results=\"\" of=\"\" applying=\"\" each=\"\" element.=\"\" _.map=\"_.collect\" &&=\"\" _.keys(obj),=\"\" ||=\"\" obj).length,=\"\" (var=\"\" index=\"0;\" index++)=\"\" currentkey=\"keys\" ?=\"\" keys[index]=\"\" :=\"\" index;=\"\" results[index]=\"iteratee(obj[currentKey],\" currentkey,=\"\" results;=\"\" create=\"\" a=\"\" reducing=\"\" function=\"\" iterating=\"\" left=\"\" or=\"\" right.=\"\" createreduce=\"function(dir)\" wrap=\"\" code=\"\" that=\"\" reassigns=\"\" argument=\"\" variables=\"\" separate=\"\" than=\"\" one=\"\" accesses=\"\" `arguments.length`=\"\" avoid=\"\" perf=\"\" hit.=\"\" (#1991)=\"\" reducer=\"function(obj,\" memo,=\"\" initial)=\"\"> 0 ? 0 : length - 1;\n        if (!initial) {\n          memo = obj[keys ? keys[index] : index];\n          index += dir;\n        }\n        for (; index >= 0 && index < length; index += dir) {\n          var currentKey = keys ? keys[index] : index;\n          memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        }\n        return memo;\n      };\n  \n      return function(obj, iteratee, memo, context) {\n        var initial = arguments.length >= 3;\n        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n      };\n    };\n  \n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`.\n    _.reduce = _.foldl = _.inject = createReduce(1);\n  \n    // The right-associative version of reduce, also known as `foldr`.\n    _.reduceRight = _.foldr = createReduce(-1);\n  \n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function(obj, predicate, context) {\n      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n      var key = keyFinder(obj, predicate, context);\n      if (key !== void 0 && key !== -1) return obj[key];\n    };\n  \n    // Return all the elements that pass a truth test.\n    // Aliased as `select`.\n    _.filter = _.select = function(obj, predicate, context) {\n      var results = [];\n      predicate = cb(predicate, context);\n      _.each(obj, function(value, index, list) {\n        if (predicate(value, index, list)) results.push(value);\n      });\n      return results;\n    };\n  \n    // Return all the elements for which a truth test fails.\n    _.reject = function(obj, predicate, context) {\n      return _.filter(obj, _.negate(cb(predicate)), context);\n    };\n  \n    // Determine whether all of the elements match a truth test.\n    // Aliased as `all`.\n    _.every = _.all = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (!predicate(obj[currentKey], currentKey, obj)) return false;\n      }\n      return true;\n    };\n  \n    // Determine if at least one element in the object matches a truth test.\n    // Aliased as `any`.\n    _.some = _.any = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (predicate(obj[currentKey], currentKey, obj)) return true;\n      }\n      return false;\n    };\n  \n    // Determine if the array or object contains a given item (using `===`).\n    // Aliased as `includes` and `include`.\n    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n      return _.indexOf(obj, item, fromIndex) >= 0;\n    };\n  \n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = restArguments(function(obj, path, args) {\n      var contextPath, func;\n      if (_.isFunction(path)) {\n        func = path;\n      } else if (_.isArray(path)) {\n        contextPath = path.slice(0, -1);\n        path = path[path.length - 1];\n      }\n      return _.map(obj, function(context) {\n        var method = func;\n        if (!method) {\n          if (contextPath && contextPath.length) {\n            context = deepGet(context, contextPath);\n          }\n          if (context == null) return void 0;\n          method = context[path];\n        }\n        return method == null ? method : method.apply(context, args);\n      });\n    });\n  \n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function(obj, key) {\n      return _.map(obj, _.property(key));\n    };\n  \n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function(obj, attrs) {\n      return _.filter(obj, _.matcher(attrs));\n    };\n  \n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function(obj, attrs) {\n      return _.find(obj, _.matcher(attrs));\n    };\n  \n    // Return the maximum element (or element-based computation).\n    _.max = function(obj, iteratee, context) {\n      var result = -Infinity, lastComputed = -Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value > result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Return the minimum element (or element-based computation).\n    _.min = function(obj, iteratee, context) {\n      var result = Infinity, lastComputed = Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value < result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed < lastComputed || computed === Infinity && result === Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Shuffle a collection.\n    _.shuffle = function(obj) {\n      return _.sample(obj, Infinity);\n    };\n  \n    // Sample **n** random values from a collection using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher鈥揧ates_shuffle).\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function(obj, n, guard) {\n      if (n == null || guard) {\n        if (!isArrayLike(obj)) obj = _.values(obj);\n        return obj[_.random(obj.length - 1)];\n      }\n      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n      var length = getLength(sample);\n      n = Math.max(Math.min(n, length), 0);\n      var last = length - 1;\n      for (var index = 0; index < n; index++) {\n        var rand = _.random(index, last);\n        var temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n      }\n      return sample.slice(0, n);\n    };\n  \n    // Sort the object's values by a criterion produced by an iteratee.\n    _.sortBy = function(obj, iteratee, context) {\n      var index = 0;\n      iteratee = cb(iteratee, context);\n      return _.pluck(_.map(obj, function(value, key, list) {\n        return {\n          value: value,\n          index: index++,\n          criteria: iteratee(value, key, list)\n        };\n      }).sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n          if (a > b || a === void 0) return 1;\n          if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n      }), 'value');\n    };\n  \n    // An internal function used for aggregate \"group by\" operations.\n    var group = function(behavior, partition) {\n      return function(obj, iteratee, context) {\n        var result = partition ? [[], []] : {};\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(value, index) {\n          var key = iteratee(value, index, obj);\n          behavior(result, value, key);\n        });\n        return result;\n      };\n    };\n  \n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function(result, value, key) {\n      if (has(result, key)) result[key].push(value); else result[key] = [value];\n    });\n  \n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function(result, value, key) {\n      result[key] = value;\n    });\n  \n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function(result, value, key) {\n      if (has(result, key)) result[key]++; else result[key] = 1;\n    });\n  \n    var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function(obj) {\n      if (!obj) return [];\n      if (_.isArray(obj)) return slice.call(obj);\n      if (_.isString(obj)) {\n        // Keep surrogate pair characters together\n        return obj.match(reStrSymbol);\n      }\n      if (isArrayLike(obj)) return _.map(obj, _.identity);\n      return _.values(obj);\n    };\n  \n    // Return the number of elements in an object.\n    _.size = function(obj) {\n      if (obj == null) return 0;\n      return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n    };\n  \n    // Split a collection into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = group(function(result, value, pass) {\n      result[pass ? 0 : 1].push(value);\n    }, true);\n  \n    // Array Functions\n    // ---------------\n  \n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[0];\n      return _.initial(array, array.length - n);\n    };\n  \n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N.\n    _.initial = function(array, n, guard) {\n      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n    };\n  \n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array.\n    _.last = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[array.length - 1];\n      return _.rest(array, Math.max(0, array.length - n));\n    };\n  \n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array.\n    _.rest = _.tail = _.drop = function(array, n, guard) {\n      return slice.call(array, n == null || guard ? 1 : n);\n    };\n  \n    // Trim out all falsy values from an array.\n    _.compact = function(array) {\n      return _.filter(array, Boolean);\n    };\n  \n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function(input, shallow, strict, output) {\n      output = output || [];\n      var idx = output.length;\n      for (var i = 0, length = getLength(input); i < length; i++) {\n        var value = input[i];\n        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n          // Flatten current level of array or arguments object.\n          if (shallow) {\n            var j = 0, len = value.length;\n            while (j < len) output[idx++] = value[j++];\n          } else {\n            flatten(value, shallow, strict, output);\n            idx = output.length;\n          }\n        } else if (!strict) {\n          output[idx++] = value;\n        }\n      }\n      return output;\n    };\n  \n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function(array, shallow) {\n      return flatten(array, shallow, false);\n    };\n  \n    // Return a version of the array that does not contain the specified value(s).\n    _.without = restArguments(function(array, otherArrays) {\n      return _.difference(array, otherArrays);\n    });\n  \n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // The faster algorithm will not work with an iteratee if the iteratee\n    // is not a one-to-one function, so providing an iteratee will disable\n    // the faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n      if (!_.isBoolean(isSorted)) {\n        context = iteratee;\n        iteratee = isSorted;\n        isSorted = false;\n      }\n      if (iteratee != null) iteratee = cb(iteratee, context);\n      var result = [];\n      var seen = [];\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var value = array[i],\n            computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted && !iteratee) {\n          if (!i || seen !== computed) result.push(value);\n          seen = computed;\n        } else if (iteratee) {\n          if (!_.contains(seen, computed)) {\n            seen.push(computed);\n            result.push(value);\n          }\n        } else if (!_.contains(result, value)) {\n          result.push(value);\n        }\n      }\n      return result;\n    };\n  \n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = restArguments(function(arrays) {\n      return _.uniq(flatten(arrays, true, true));\n    });\n  \n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function(array) {\n      var result = [];\n      var argsLength = arguments.length;\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var item = array[i];\n        if (_.contains(result, item)) continue;\n        var j;\n        for (j = 1; j < argsLength; j++) {\n          if (!_.contains(arguments[j], item)) break;\n        }\n        if (j === argsLength) result.push(item);\n      }\n      return result;\n    };\n  \n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = restArguments(function(array, rest) {\n      rest = flatten(rest, true, true);\n      return _.filter(array, function(value){\n        return !_.contains(rest, value);\n      });\n    });\n  \n    // Complement of _.zip. Unzip accepts an array of arrays and groups\n    // each array's elements on shared indices.\n    _.unzip = function(array) {\n      var length = array && _.max(array, getLength).length || 0;\n      var result = Array(length);\n  \n      for (var index = 0; index < length; index++) {\n        result[index] = _.pluck(array, index);\n      }\n      return result;\n    };\n  \n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = restArguments(_.unzip);\n  \n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values. Passing by pairs is the reverse of _.pairs.\n    _.object = function(list, values) {\n      var result = {};\n      for (var i = 0, length = getLength(list); i < length; i++) {\n        if (values) {\n          result[list[i]] = values[i];\n        } else {\n          result[list[i][0]] = list[i][1];\n        }\n      }\n      return result;\n    };\n  \n    // Generator function to create the findIndex and findLastIndex functions.\n    var createPredicateIndexFinder = function(dir) {\n      return function(array, predicate, context) {\n        predicate = cb(predicate, context);\n        var length = getLength(array);\n        var index = dir > 0 ? 0 : length - 1;\n        for (; index >= 0 && index < length; index += dir) {\n          if (predicate(array[index], index, array)) return index;\n        }\n        return -1;\n      };\n    };\n  \n    // Returns the first index on an array-like that passes a predicate test.\n    _.findIndex = createPredicateIndexFinder(1);\n    _.findLastIndex = createPredicateIndexFinder(-1);\n  \n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function(array, obj, iteratee, context) {\n      iteratee = cb(iteratee, context, 1);\n      var value = iteratee(obj);\n      var low = 0, high = getLength(array);\n      while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n      }\n      return low;\n    };\n  \n    // Generator function to create the indexOf and lastIndexOf functions.\n    var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n      return function(array, item, idx) {\n        var i = 0, length = getLength(array);\n        if (typeof idx == 'number') {\n          if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n          } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n          }\n        } else if (sortedIndex && idx && length) {\n          idx = sortedIndex(array, item);\n          return array[idx] === item ? idx : -1;\n        }\n        if (item !== item) {\n          idx = predicateFind(slice.call(array, i, length), _.isNaN);\n          return idx >= 0 ? idx + i : -1;\n        }\n        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n          if (array[idx] === item) return idx;\n        }\n        return -1;\n      };\n    };\n  \n    // Return the position of the first occurrence of an item in an array,\n    // or -1 if the item is not included in the array.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n  \n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function(start, stop, step) {\n      if (stop == null) {\n        stop = start || 0;\n        start = 0;\n      }\n      if (!step) {\n        step = stop < start ? -1 : 1;\n      }\n  \n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var range = Array(length);\n  \n      for (var idx = 0; idx < length; idx++, start += step) {\n        range[idx] = start;\n      }\n  \n      return range;\n    };\n  \n    // Chunk a single array into multiple arrays, each containing `count` or fewer\n    // items.\n    _.chunk = function(array, count) {\n      if (count == null || count < 1) return [];\n      var result = [];\n      var i = 0, length = array.length;\n      while (i < length) {\n        result.push(slice.call(array, i, i += count));\n      }\n      return result;\n    };\n  \n    // Function (ahem) Functions\n    // ------------------\n  \n    // Determines whether to execute a function as a constructor\n    // or a normal function with the provided arguments.\n    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n      var self = baseCreate(sourceFunc.prototype);\n      var result = sourceFunc.apply(self, args);\n      if (_.isObject(result)) return result;\n      return self;\n    };\n  \n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = restArguments(function(func, context, args) {\n      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n      var bound = restArguments(function(callArgs) {\n        return executeBound(func, bound, context, this, args.concat(callArgs));\n      });\n      return bound;\n    });\n  \n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder by default, allowing any combination of arguments to be\n    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n    _.partial = restArguments(function(func, boundArgs) {\n      var placeholder = _.partial.placeholder;\n      var bound = function() {\n        var position = 0, length = boundArgs.length;\n        var args = Array(length);\n        for (var i = 0; i < length; i++) {\n          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n        }\n        while (position < arguments.length) args.push(arguments[position++]);\n        return executeBound(func, bound, this, this, args);\n      };\n      return bound;\n    });\n  \n    _.partial.placeholder = _;\n  \n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = restArguments(function(obj, keys) {\n      keys = flatten(keys, false, false);\n      var index = keys.length;\n      if (index < 1) throw new Error('bindAll must be passed function names');\n      while (index--) {\n        var key = keys[index];\n        obj[key] = _.bind(obj[key], obj);\n      }\n    });\n  \n    // Memoize an expensive function by storing its results.\n    _.memoize = function(func, hasher) {\n      var memoize = function(key) {\n        var cache = memoize.cache;\n        var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n        if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n        return cache[address];\n      };\n      memoize.cache = {};\n      return memoize;\n    };\n  \n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = restArguments(function(func, wait, args) {\n      return setTimeout(function() {\n        return func.apply(null, args);\n      }, wait);\n    });\n  \n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = _.partial(_.delay, _, 1);\n  \n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function(func, wait, options) {\n      var timeout, context, args, result;\n      var previous = 0;\n      if (!options) options = {};\n  \n      var later = function() {\n        previous = options.leading === false ? 0 : _.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      };\n  \n      var throttled = function() {\n        var now = _.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0=\"\" ||=\"\" remaining=\"\"> wait) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n          }\n          previous = now;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining);\n        }\n        return result;\n      };\n  \n      throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n      };\n  \n      return throttled;\n    };\n  \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function(func, wait, immediate) {\n      var timeout, result;\n  \n      var later = function(context, args) {\n        timeout = null;\n        if (args) result = func.apply(context, args);\n      };\n  \n      var debounced = restArguments(function(args) {\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n          var callNow = !timeout;\n          timeout = setTimeout(later, wait);\n          if (callNow) result = func.apply(this, args);\n        } else {\n          timeout = _.delay(later, wait, this, args);\n        }\n  \n        return result;\n      });\n  \n      debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n      };\n  \n      return debounced;\n    };\n  \n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function(func, wrapper) {\n      return _.partial(wrapper, func);\n    };\n  \n    // Returns a negated version of the passed-in predicate.\n    _.negate = function(predicate) {\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    };\n  \n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function() {\n      var args = arguments;\n      var start = args.length - 1;\n      return function() {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) result = args[i].call(this, result);\n        return result;\n      };\n    };\n  \n    // Returns a function that will only be executed on and after the Nth call.\n    _.after = function(times, func) {\n      return function() {\n        if (--times < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    };\n  \n    // Returns a function that will only be executed up to (but not including) the Nth call.\n    _.before = function(times, func) {\n      var memo;\n      return function() {\n        if (--times > 0) {\n          memo = func.apply(this, arguments);\n        }\n        if (times <= 2=\"\" 9=\"\" 1)=\"\" func=\"null;\" return=\"\" memo;=\"\" };=\"\" returns=\"\" a=\"\" function=\"\" that=\"\" will=\"\" be=\"\" executed=\"\" at=\"\" most=\"\" one=\"\" time,=\"\" no=\"\" matter=\"\" how=\"\" often=\"\" you=\"\" call=\"\" it.=\"\" useful=\"\" for=\"\" lazy=\"\" initialization.=\"\" _.once=\"_.partial(_.before,\" 2);=\"\" _.restarguments=\"restArguments;\" object=\"\" functions=\"\" ----------------=\"\" keys=\"\" in=\"\" ie=\"\" <=\"\" won't=\"\" iterated=\"\" by=\"\" `for=\"\" key=\"\" ...`=\"\" and=\"\" thus=\"\" missed.=\"\" var=\"\" hasenumbug=\"!{toString:\" null}.propertyisenumerable('tostring');=\"\" nonenumerableprops=\"['valueOf',\" 'isprototypeof',=\"\" 'tostring',=\"\" 'propertyisenumerable',=\"\" 'hasownproperty',=\"\" 'tolocalestring'];=\"\" collectnonenumprops=\"function(obj,\" keys)=\"\" {=\"\" nonenumidx=\"nonEnumerableProps.length;\" constructor=\"obj.constructor;\" proto=\"_.isFunction(constructor)\" &&=\"\" constructor.prototype=\"\" ||=\"\" objproto;=\"\" is=\"\" special=\"\" case.=\"\" prop=\"constructor\" ;=\"\" if=\"\" (has(obj,=\"\" prop)=\"\" !_.contains(keys,=\"\" prop))=\"\" keys.push(prop);=\"\" while=\"\" (nonenumidx--)=\"\" (prop=\"\" obj=\"\" obj[prop]=\"\" !=\"=\" proto[prop]=\"\" }=\"\" retrieve=\"\" the=\"\" names=\"\" of=\"\" an=\"\" object's=\"\" own=\"\" properties.=\"\" delegates=\"\" to=\"\" **ecmascript=\"\" 5**'s=\"\" native=\"\" `object.keys`.=\"\" _.keys=\"function(obj)\" (!_.isobject(obj))=\"\" [];=\"\" (nativekeys)=\"\" nativekeys(obj);=\"\" (var=\"\" obj)=\"\" key))=\"\" keys.push(key);=\"\" ahem,=\"\" 9.=\"\" (hasenumbug)=\"\" collectnonenumprops(obj,=\"\" keys);=\"\" keys;=\"\" all=\"\" property=\"\" object.=\"\" _.allkeys=\"function(obj)\" values=\"\" _.values=\"function(obj)\" length=\"keys.length;\" i=\"0;\" length;=\"\" i++)=\"\" values[i]=\"obj[keys[i]];\" values;=\"\" results=\"\" applying=\"\" iteratee=\"\" each=\"\" element=\"\" contrast=\"\" _.map=\"\" it=\"\" _.mapobject=\"function(obj,\" iteratee,=\"\" context)=\"\" context);=\"\" index=\"0;\" index++)=\"\" currentkey=\"keys[index];\" results[currentkey]=\"iteratee(obj[currentKey],\" currentkey,=\"\" obj);=\"\" results;=\"\" convert=\"\" into=\"\" list=\"\" `[key,=\"\" value]`=\"\" pairs.=\"\" opposite=\"\" _.object.=\"\" _.pairs=\"function(obj)\" pairs=\"Array(length);\" pairs[i]=\"[keys[i],\" obj[keys[i]]];=\"\" pairs;=\"\" invert=\"\" must=\"\" serializable.=\"\" _.invert=\"function(obj)\" result=\"{};\" result[obj[keys[i]]]=\"keys[i];\" result;=\"\" sorted=\"\" available=\"\" on=\"\" aliased=\"\" as=\"\" `methods`.=\"\" _.functions=\"_.methods\" ==\"\" function(obj)=\"\" (_.isfunction(obj[key]))=\"\" names.push(key);=\"\" names.sort();=\"\" internal=\"\" creating=\"\" assigner=\"\" functions.=\"\" createassigner=\"function(keysFunc,\" defaults)=\"\" (defaults)=\"\" (length=\"\" null)=\"\" obj;=\"\" source=\"arguments[index],\" l=\"keys.length;\" l;=\"\" (!defaults=\"\" obj[key]=\"==\" void=\"\" 0)=\"\" extend=\"\" given=\"\" with=\"\" properties=\"\" passed-in=\"\" object(s).=\"\" _.extend=\"createAssigner(_.allKeys);\" assigns=\"\" (https:=\"\" developer.mozilla.org=\"\" docs=\"\" web=\"\" javascript=\"\" reference=\"\" global_objects=\"\" assign)=\"\" _.extendown=\"_.assign\" createassigner(_.keys);=\"\" first=\"\" passes=\"\" predicate=\"\" test.=\"\" _.findkey=\"function(obj,\" predicate,=\"\" key;=\"\" (predicate(obj[key],=\"\" key,=\"\" obj))=\"\" pick=\"\" helper=\"\" determine=\"\" `obj`=\"\" has=\"\" `key`.=\"\" keyinobj=\"function(value,\" copy=\"\" only=\"\" containing=\"\" whitelisted=\"\" _.pick=\"restArguments(function(obj,\" (obj=\"=\" (_.isfunction(iteratee))=\"\" (keys.length=\"\"> 1) iteratee = optimizeCb(iteratee, keys[1]);\n        keys = _.allKeys(obj);\n      } else {\n        iteratee = keyInObj;\n        keys = flatten(keys, false, false);\n        obj = Object(obj);\n      }\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n      return result;\n    });\n  \n    // Return a copy of the object without the blacklisted properties.\n    _.omit = restArguments(function(obj, keys) {\n      var iteratee = keys[0], context;\n      if (_.isFunction(iteratee)) {\n        iteratee = _.negate(iteratee);\n        if (keys.length > 1) context = keys[1];\n      } else {\n        keys = _.map(flatten(keys, false, false), String);\n        iteratee = function(value, key) {\n          return !_.contains(keys, key);\n        };\n      }\n      return _.pick(obj, iteratee, context);\n    });\n  \n    // Fill in a given object with default properties.\n    _.defaults = createAssigner(_.allKeys, true);\n  \n    // Creates an object that inherits from the given prototype object.\n    // If additional properties are provided then they will be added to the\n    // created object.\n    _.create = function(prototype, props) {\n      var result = baseCreate(prototype);\n      if (props) _.extendOwn(result, props);\n      return result;\n    };\n  \n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function(obj) {\n      if (!_.isObject(obj)) return obj;\n      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n  \n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function(obj, interceptor) {\n      interceptor(obj);\n      return obj;\n    };\n  \n    // Returns whether an object has a given set of `key:value` pairs.\n    _.isMatch = function(object, attrs) {\n      var keys = _.keys(attrs), length = keys.length;\n      if (object == null) return !length;\n      var obj = Object(object);\n      for (var i = 0; i < length; i++) {\n        var key = keys[i];\n        if (attrs[key] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  \n  \n    // Internal recursive comparison function for `isEqual`.\n    var eq, deepEq;\n    eq = function(a, b, aStack, bStack) {\n      // Identical objects are equal. `0 === -0`, but they aren't identical.\n      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n      if (a === b) return a !== 0 || 1 / a === 1 / b;\n      // `null` or `undefined` only equal to itself (strict comparison).\n      if (a == null || b == null) return false;\n      // `NaN`s are equivalent, but non-reflexive.\n      if (a !== a) return b !== b;\n      // Exhaust primitive checks\n      var type = typeof a;\n      if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n      return deepEq(a, b, aStack, bStack);\n    };\n  \n    // Internal recursive comparison function for `isEqual`.\n    deepEq = function(a, b, aStack, bStack) {\n      // Unwrap any wrapped objects.\n      if (a instanceof _) a = a._wrapped;\n      if (b instanceof _) b = b._wrapped;\n      // Compare `[[Class]]` names.\n      var className = toString.call(a);\n      if (className !== toString.call(b)) return false;\n      switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case '[object String]':\n          // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n          // equivalent to `new String(\"5\")`.\n          return '' + a === '' + b;\n        case '[object Number]':\n          // `NaN`s are equivalent, but non-reflexive.\n          // Object(NaN) is equivalent to NaN.\n          if (+a !== +a) return +b !== +b;\n          // An `egal` comparison is performed for other numeric values.\n          return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n          // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n          // millisecond representations. Note that invalid dates with millisecond representations\n          // of `NaN` are not equivalent.\n          return +a === +b;\n        case '[object Symbol]':\n          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      }\n  \n      var areArrays = className === '[object Array]';\n      if (!areArrays) {\n        if (typeof a != 'object' || typeof b != 'object') return false;\n  \n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                                 _.isFunction(bCtor) && bCtor instanceof bCtor)\n                            && ('constructor' in a && 'constructor' in b)) {\n          return false;\n        }\n      }\n      // Assume equality for cyclic structures. The algorithm for detecting cyclic\n      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  \n      // Initializing stack of traversed objects.\n      // It's done here since we only need them for objects and arrays comparison.\n      aStack = aStack || [];\n      bStack = bStack || [];\n      var length = aStack.length;\n      while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b;\n      }\n  \n      // Add the first object to the stack of traversed objects.\n      aStack.push(a);\n      bStack.push(b);\n  \n      // Recursively compare objects and arrays.\n      if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length) return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n          if (!eq(a[length], b[length], aStack, bStack)) return false;\n        }\n      } else {\n        // Deep compare objects.\n        var keys = _.keys(a), key;\n        length = keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (_.keys(b).length !== length) return false;\n        while (length--) {\n          // Deep compare each member\n          key = keys[length];\n          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n        }\n      }\n      // Remove the first object from the stack of traversed objects.\n      aStack.pop();\n      bStack.pop();\n      return true;\n    };\n  \n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function(a, b) {\n      return eq(a, b);\n    };\n  \n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function(obj) {\n      if (obj == null) return true;\n      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n      return _.keys(obj).length === 0;\n    };\n  \n    // Is a given value a DOM element?\n    _.isElement = function(obj) {\n      return !!(obj && obj.nodeType === 1);\n    };\n  \n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function(obj) {\n      return toString.call(obj) === '[object Array]';\n    };\n  \n    // Is a given variable an object?\n    _.isObject = function(obj) {\n      var type = typeof obj;\n      return type === 'function' || type === 'object' && !!obj;\n    };\n  \n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n      _['is' + name] = function(obj) {\n        return toString.call(obj) === '[object ' + name + ']';\n      };\n    });\n  \n    // Define a fallback version of the method in browsers (ahem, IE < 9), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n      _.isArguments = function(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  \n    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n    var nodelist = root.document && root.document.childNodes;\n    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n      _.isFunction = function(obj) {\n        return typeof obj == 'function' || false;\n      };\n    }\n  \n    // Is a given object a finite number?\n    _.isFinite = function(obj) {\n      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n  \n    // Is the given value `NaN`?\n    _.isNaN = function(obj) {\n      return _.isNumber(obj) && isNaN(obj);\n    };\n  \n    // Is a given value a boolean?\n    _.isBoolean = function(obj) {\n      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n    };\n  \n    // Is a given value equal to null?\n    _.isNull = function(obj) {\n      return obj === null;\n    };\n  \n    // Is a given variable undefined?\n    _.isUndefined = function(obj) {\n      return obj === void 0;\n    };\n  \n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function(obj, path) {\n      if (!_.isArray(path)) {\n        return has(obj, path);\n      }\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        var key = path[i];\n        if (obj == null || !hasOwnProperty.call(obj, key)) {\n          return false;\n        }\n        obj = obj[key];\n      }\n      return !!length;\n    };\n  \n    // Utility Functions\n    // -----------------\n  \n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function() {\n      root._ = previousUnderscore;\n      return this;\n    };\n  \n    // Keep the identity function around for default iteratees.\n    _.identity = function(value) {\n      return value;\n    };\n  \n    // Predicate-generating functions. Often useful outside of Underscore.\n    _.constant = function(value) {\n      return function() {\n        return value;\n      };\n    };\n  \n    _.noop = function(){};\n  \n    // Creates a function that, when passed an object, will traverse that object鈥檚\n    // properties down the given `path`, specified as an array of keys or indexes.\n    _.property = function(path) {\n      if (!_.isArray(path)) {\n        return shallowProperty(path);\n      }\n      return function(obj) {\n        return deepGet(obj, path);\n      };\n    };\n  \n    // Generates a function for a given object that returns a given property.\n    _.propertyOf = function(obj) {\n      if (obj == null) {\n        return function(){};\n      }\n      return function(path) {\n        return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n      };\n    };\n  \n    // Returns a predicate for checking whether an object has a given set of\n    // `key:value` pairs.\n    _.matcher = _.matches = function(attrs) {\n      attrs = _.extendOwn({}, attrs);\n      return function(obj) {\n        return _.isMatch(obj, attrs);\n      };\n    };\n  \n    // Run a function **n** times.\n    _.times = function(n, iteratee, context) {\n      var accum = Array(Math.max(0, n));\n      iteratee = optimizeCb(iteratee, context, 1);\n      for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n      return accum;\n    };\n  \n    // Return a random integer between min and max (inclusive).\n    _.random = function(min, max) {\n      if (max == null) {\n        max = min;\n        min = 0;\n      }\n      return min + Math.floor(Math.random() * (max - min + 1));\n    };\n  \n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function() {\n      return new Date().getTime();\n    };\n  \n    // List of HTML entities for escaping.\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',=\"\" '=\"\">': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var unescapeMap = _.invert(escapeMap);\n  \n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    var createEscaper = function(map) {\n      var escaper = function(match) {\n        return map[match];\n      };\n      // Regexes for identifying a key that needs to be escaped.\n      var source = '(?:' + _.keys(map).join('|') + ')';\n      var testRegexp = RegExp(source);\n      var replaceRegexp = RegExp(source, 'g');\n      return function(string) {\n        string = string == null ? '' : '' + string;\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n      };\n    };\n    _.escape = createEscaper(escapeMap);\n    _.unescape = createEscaper(unescapeMap);\n  \n    // Traverses the children of `obj` along `path`. If a child is a function, it\n    // is invoked with its parent as context. Returns the value of the final\n    // child, or `fallback` if any child is undefined.\n    _.result = function(obj, path, fallback) {\n      if (!_.isArray(path)) path = [path];\n      var length = path.length;\n      if (!length) {\n        return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n      }\n      for (var i = 0; i < length; i++) {\n        var prop = obj == null ? void 0 : obj[path[i]];\n        if (prop === void 0) {\n          prop = fallback;\n          i = length; // Ensure we don't continue iterating.\n        }\n        obj = _.isFunction(prop) ? prop.call(obj) : prop;\n      }\n      return obj;\n    };\n  \n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function(prefix) {\n      var id = ++idCounter + '';\n      return prefix ? prefix + id : id;\n    };\n  \n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n      evaluate: /<%([\\s\\s]+?)%>/g,\n      interpolate: /<%=([\\s\\s]+?)%>/g,\n      escape: /<%-([\\s\\s]+?)%>/g\n    };\n  \n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n  \n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n      \"'\": \"'\",\n      '\\\\': '\\\\',\n      '\\r': 'r',\n      '\\n': 'n',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n  \n    var escapeChar = function(match) {\n      return '\\\\' + escapes[match];\n    };\n  \n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    // NB: `oldSettings` only exists for backwards compatibility.\n    _.template = function(text, settings, oldSettings) {\n      if (!settings && oldSettings) settings = oldSettings;\n      settings = _.defaults({}, settings, _.templateSettings);\n  \n      // Combine delimiters into one regular expression via alternation.\n      var matcher = RegExp([\n        (settings.escape || noMatch).source,\n        (settings.interpolate || noMatch).source,\n        (settings.evaluate || noMatch).source\n      ].join('|') + '|$', 'g');\n  \n      // Compile the template source, escaping string literals appropriately.\n      var index = 0;\n      var source = \"__p+='\";\n      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n        index = offset + match.length;\n  \n        if (escape) {\n          source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n        } else if (interpolate) {\n          source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n        } else if (evaluate) {\n          source += \"';\\n\" + evaluate + \"\\n__p+='\";\n        }\n  \n        // Adobe VMs need the match returned to produce the correct offset.\n        return match;\n      });\n      source += \"';\\n\";\n  \n      // If a variable is not specified, place data values in local scope.\n      if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n  \n      source = \"var __t,__p='',__j=Array.prototype.join,\" +\n        \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n        source + 'return __p;\\n';\n  \n      var render;\n      try {\n        render = new Function(settings.variable || 'obj', '_', source);\n      } catch (e) {\n        e.source = source;\n        throw e;\n      }\n  \n      var template = function(data) {\n        return render.call(this, data, _);\n      };\n  \n      // Provide the compiled source as a convenience for precompilation.\n      var argument = settings.variable || 'obj';\n      template.source = 'function(' + argument + '){\\n' + source + '}';\n  \n      return template;\n    };\n  \n    // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n    _.chain = function(obj) {\n      var instance = _(obj);\n      instance._chain = true;\n      return instance;\n    };\n  \n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n  \n    // Helper function to continue chaining intermediate results.\n    var chainResult = function(instance, obj) {\n      return instance._chain ? _(obj).chain() : obj;\n    };\n  \n    // Add your own custom functions to the Underscore object.\n    _.mixin = function(obj) {\n      _.each(_.functions(obj), function(name) {\n        var func = _[name] = obj[name];\n        _.prototype[name] = function() {\n          var args = [this._wrapped];\n          push.apply(args, arguments);\n          return chainResult(this, func.apply(_, args));\n        };\n      });\n      return _;\n    };\n  \n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n  \n    // Add all mutator Array functions to the wrapper.\n    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        var obj = this._wrapped;\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n        return chainResult(this, obj);\n      };\n    });\n  \n    // Add all accessor Array functions to the wrapper.\n    _.each(['concat', 'join', 'slice'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        return chainResult(this, method.apply(this._wrapped, arguments));\n      };\n    });\n  \n    // Extracts the result from a wrapped and chained object.\n    _.prototype.value = function() {\n      return this._wrapped;\n    };\n  \n    // Provide unwrapping proxy for some methods used in engine operations\n    // such as arithmetic and JSON stringification.\n    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n    _.prototype.toString = function() {\n      return String(this._wrapped);\n    };\n  \n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (typeof define == 'function' && define.amd) {\n      define('underscore', [], function() {\n        return _;\n      });\n    }\n  }());</%-([\\s\\s]+?)%></%=([\\s\\s]+?)%></%([\\s\\s]+?)%></':></=></=></=>","excerpt":"","more":"//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n    // Baseline setup\n    // --------------\n  \n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self == 'object' && self.self === self && self ||\n              typeof global == 'object' && global.global === global && global ||\n              this ||\n              {};\n  \n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n  \n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n  \n    // Create quick reference variables for speed access to core prototypes.\n    var push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n  \n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeCreate = Object.create;\n  \n    // Naked function reference for surrogate-prototype-swapping.\n    var Ctor = function(){};\n  \n    // Create a safe reference to the Underscore object for use below.\n    var _ = function(obj) {\n      if (obj instanceof _) return obj;\n      if (!(this instanceof _)) return new _(obj);\n      this._wrapped = obj;\n    };\n  \n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for their old module API. If we're in\n    // the browser, add `_` as a global object.\n    // (`nodeType` is checked to ensure that `module`\n    // and `exports` are not HTML elements.)\n    if (typeof exports != 'undefined' && !exports.nodeType) {\n      if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n        exports = module.exports = _;\n      }\n      exports._ = _;\n    } else {\n      root._ = _;\n    }\n  \n    // Current version.\n    _.VERSION = '1.9.1';\n  \n    // Internal function that returns an efficient (for current engines) version\n    // of the passed-in callback, to be repeatedly applied in other Underscore\n    // functions.\n    var optimizeCb = function(func, context, argCount) {\n      if (context === void 0) return func;\n      switch (argCount == null ? 3 : argCount) {\n        case 1: return function(value) {\n          return func.call(context, value);\n        };\n        // The 2-argument case is omitted because we鈥檙e not using it.\n        case 3: return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n      }\n      return function() {\n        return func.apply(context, arguments);\n      };\n    };\n  \n    var builtinIteratee;\n  \n    // An internal function to generate callbacks that can be applied to each\n    // element in a collection, returning the desired result 鈥� either `identity`,\n    // an arbitrary callback, a property matcher, or a property accessor.\n    var cb = function(value, context, argCount) {\n      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n      if (value == null) return _.identity;\n      if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n      return _.property(value);\n    };\n  \n    // External wrapper for our callback generator. Users may customize\n    // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n    // This abstraction hides the internal-only argCount argument.\n    _.iteratee = builtinIteratee = function(value, context) {\n      return cb(value, context, Infinity);\n    };\n  \n    // Some functions take a variable number of arguments, or a few expected\n    // arguments at the beginning and then a variable number of values to operate\n    // on. This helper accumulates all remaining arguments past the function鈥檚\n    // argument length (or an explicit `startIndex`), into an array that becomes\n    // the last argument. Similar to ES6鈥檚 \"rest parameter\".\n    var restArguments = function(func, startIndex) {\n      startIndex = startIndex == null ? func.length - 1 : +startIndex;\n      return function() {\n        var length = Math.max(arguments.length - startIndex, 0),\n            rest = Array(length),\n            index = 0;\n        for (; index < length; index++) {\n          rest[index] = arguments[index + startIndex];\n        }\n        switch (startIndex) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, arguments[0], rest);\n          case 2: return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for (index = 0; index < startIndex; index++) {\n          args[index] = arguments[index];\n        }\n        args[startIndex] = rest;\n        return func.apply(this, args);\n      };\n    };\n  \n    // An internal function for creating a new object that inherits from another.\n    var baseCreate = function(prototype) {\n      if (!_.isObject(prototype)) return {};\n      if (nativeCreate) return nativeCreate(prototype);\n      Ctor.prototype = prototype;\n      var result = new Ctor;\n      Ctor.prototype = null;\n      return result;\n    };\n  \n    var shallowProperty = function(key) {\n      return function(obj) {\n        return obj == null ? void 0 : obj[key];\n      };\n    };\n  \n    var has = function(obj, path) {\n      return obj != null && hasOwnProperty.call(obj, path);\n    }\n  \n    var deepGet = function(obj, path) {\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        if (obj == null) return void 0;\n        obj = obj[path[i]];\n      }\n      return length ? obj : void 0;\n    };\n  \n    // Helper for collection methods to determine whether a collection\n    // should be iterated as an array or as an object.\n    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n    var getLength = shallowProperty('length');\n    var isArrayLike = function(collection) {\n      var length = getLength(collection);\n      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n    };\n  \n    // Collection Functions\n    // --------------------\n  \n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles raw objects in addition to array-likes. Treats all\n    // sparse array-likes as if they were dense.\n    _.each = _.forEach = function(obj, iteratee, context) {\n      iteratee = optimizeCb(iteratee, context);\n      var i, length;\n      if (isArrayLike(obj)) {\n        for (i = 0, length = obj.length; i < length; i++) {\n          iteratee(obj[i], i, obj);\n        }\n      } else {\n        var keys = _.keys(obj);\n        for (i = 0, length = keys.length; i < length; i++) {\n          iteratee(obj[keys[i]], keys[i], obj);\n        }\n      }\n      return obj;\n    };\n  \n    // Return the results of applying the iteratee to each element.\n    _.map = _.collect = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          results = Array(length);\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Create a reducing function iterating left or right.\n    var createReduce = function(dir) {\n      // Wrap code that reassigns argument variables in a separate function than\n      // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n      var reducer = function(obj, iteratee, memo, initial) {\n        var keys = !isArrayLike(obj) && _.keys(obj),\n            length = (keys || obj).length,\n            index = dir > 0 ? 0 : length - 1;\n        if (!initial) {\n          memo = obj[keys ? keys[index] : index];\n          index += dir;\n        }\n        for (; index >= 0 && index < length; index += dir) {\n          var currentKey = keys ? keys[index] : index;\n          memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        }\n        return memo;\n      };\n  \n      return function(obj, iteratee, memo, context) {\n        var initial = arguments.length >= 3;\n        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n      };\n    };\n  \n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`.\n    _.reduce = _.foldl = _.inject = createReduce(1);\n  \n    // The right-associative version of reduce, also known as `foldr`.\n    _.reduceRight = _.foldr = createReduce(-1);\n  \n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function(obj, predicate, context) {\n      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n      var key = keyFinder(obj, predicate, context);\n      if (key !== void 0 && key !== -1) return obj[key];\n    };\n  \n    // Return all the elements that pass a truth test.\n    // Aliased as `select`.\n    _.filter = _.select = function(obj, predicate, context) {\n      var results = [];\n      predicate = cb(predicate, context);\n      _.each(obj, function(value, index, list) {\n        if (predicate(value, index, list)) results.push(value);\n      });\n      return results;\n    };\n  \n    // Return all the elements for which a truth test fails.\n    _.reject = function(obj, predicate, context) {\n      return _.filter(obj, _.negate(cb(predicate)), context);\n    };\n  \n    // Determine whether all of the elements match a truth test.\n    // Aliased as `all`.\n    _.every = _.all = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (!predicate(obj[currentKey], currentKey, obj)) return false;\n      }\n      return true;\n    };\n  \n    // Determine if at least one element in the object matches a truth test.\n    // Aliased as `any`.\n    _.some = _.any = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length;\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys ? keys[index] : index;\n        if (predicate(obj[currentKey], currentKey, obj)) return true;\n      }\n      return false;\n    };\n  \n    // Determine if the array or object contains a given item (using `===`).\n    // Aliased as `includes` and `include`.\n    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n      return _.indexOf(obj, item, fromIndex) >= 0;\n    };\n  \n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = restArguments(function(obj, path, args) {\n      var contextPath, func;\n      if (_.isFunction(path)) {\n        func = path;\n      } else if (_.isArray(path)) {\n        contextPath = path.slice(0, -1);\n        path = path[path.length - 1];\n      }\n      return _.map(obj, function(context) {\n        var method = func;\n        if (!method) {\n          if (contextPath && contextPath.length) {\n            context = deepGet(context, contextPath);\n          }\n          if (context == null) return void 0;\n          method = context[path];\n        }\n        return method == null ? method : method.apply(context, args);\n      });\n    });\n  \n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function(obj, key) {\n      return _.map(obj, _.property(key));\n    };\n  \n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function(obj, attrs) {\n      return _.filter(obj, _.matcher(attrs));\n    };\n  \n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function(obj, attrs) {\n      return _.find(obj, _.matcher(attrs));\n    };\n  \n    // Return the maximum element (or element-based computation).\n    _.max = function(obj, iteratee, context) {\n      var result = -Infinity, lastComputed = -Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value > result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Return the minimum element (or element-based computation).\n    _.min = function(obj, iteratee, context) {\n      var result = Infinity, lastComputed = Infinity,\n          value, computed;\n      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n        obj = isArrayLike(obj) ? obj : _.values(obj);\n        for (var i = 0, length = obj.length; i < length; i++) {\n          value = obj[i];\n          if (value != null && value < result) {\n            result = value;\n          }\n        }\n      } else {\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(v, index, list) {\n          computed = iteratee(v, index, list);\n          if (computed < lastComputed || computed === Infinity && result === Infinity) {\n            result = v;\n            lastComputed = computed;\n          }\n        });\n      }\n      return result;\n    };\n  \n    // Shuffle a collection.\n    _.shuffle = function(obj) {\n      return _.sample(obj, Infinity);\n    };\n  \n    // Sample **n** random values from a collection using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher鈥揧ates_shuffle).\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function(obj, n, guard) {\n      if (n == null || guard) {\n        if (!isArrayLike(obj)) obj = _.values(obj);\n        return obj[_.random(obj.length - 1)];\n      }\n      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n      var length = getLength(sample);\n      n = Math.max(Math.min(n, length), 0);\n      var last = length - 1;\n      for (var index = 0; index < n; index++) {\n        var rand = _.random(index, last);\n        var temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n      }\n      return sample.slice(0, n);\n    };\n  \n    // Sort the object's values by a criterion produced by an iteratee.\n    _.sortBy = function(obj, iteratee, context) {\n      var index = 0;\n      iteratee = cb(iteratee, context);\n      return _.pluck(_.map(obj, function(value, key, list) {\n        return {\n          value: value,\n          index: index++,\n          criteria: iteratee(value, key, list)\n        };\n      }).sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n          if (a > b || a === void 0) return 1;\n          if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n      }), 'value');\n    };\n  \n    // An internal function used for aggregate \"group by\" operations.\n    var group = function(behavior, partition) {\n      return function(obj, iteratee, context) {\n        var result = partition ? [[], []] : {};\n        iteratee = cb(iteratee, context);\n        _.each(obj, function(value, index) {\n          var key = iteratee(value, index, obj);\n          behavior(result, value, key);\n        });\n        return result;\n      };\n    };\n  \n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function(result, value, key) {\n      if (has(result, key)) result[key].push(value); else result[key] = [value];\n    });\n  \n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function(result, value, key) {\n      result[key] = value;\n    });\n  \n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function(result, value, key) {\n      if (has(result, key)) result[key]++; else result[key] = 1;\n    });\n  \n    var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function(obj) {\n      if (!obj) return [];\n      if (_.isArray(obj)) return slice.call(obj);\n      if (_.isString(obj)) {\n        // Keep surrogate pair characters together\n        return obj.match(reStrSymbol);\n      }\n      if (isArrayLike(obj)) return _.map(obj, _.identity);\n      return _.values(obj);\n    };\n  \n    // Return the number of elements in an object.\n    _.size = function(obj) {\n      if (obj == null) return 0;\n      return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n    };\n  \n    // Split a collection into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = group(function(result, value, pass) {\n      result[pass ? 0 : 1].push(value);\n    }, true);\n  \n    // Array Functions\n    // ---------------\n  \n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[0];\n      return _.initial(array, array.length - n);\n    };\n  \n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N.\n    _.initial = function(array, n, guard) {\n      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n    };\n  \n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array.\n    _.last = function(array, n, guard) {\n      if (array == null || array.length < 1) return n == null ? void 0 : [];\n      if (n == null || guard) return array[array.length - 1];\n      return _.rest(array, Math.max(0, array.length - n));\n    };\n  \n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array.\n    _.rest = _.tail = _.drop = function(array, n, guard) {\n      return slice.call(array, n == null || guard ? 1 : n);\n    };\n  \n    // Trim out all falsy values from an array.\n    _.compact = function(array) {\n      return _.filter(array, Boolean);\n    };\n  \n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function(input, shallow, strict, output) {\n      output = output || [];\n      var idx = output.length;\n      for (var i = 0, length = getLength(input); i < length; i++) {\n        var value = input[i];\n        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n          // Flatten current level of array or arguments object.\n          if (shallow) {\n            var j = 0, len = value.length;\n            while (j < len) output[idx++] = value[j++];\n          } else {\n            flatten(value, shallow, strict, output);\n            idx = output.length;\n          }\n        } else if (!strict) {\n          output[idx++] = value;\n        }\n      }\n      return output;\n    };\n  \n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function(array, shallow) {\n      return flatten(array, shallow, false);\n    };\n  \n    // Return a version of the array that does not contain the specified value(s).\n    _.without = restArguments(function(array, otherArrays) {\n      return _.difference(array, otherArrays);\n    });\n  \n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // The faster algorithm will not work with an iteratee if the iteratee\n    // is not a one-to-one function, so providing an iteratee will disable\n    // the faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n      if (!_.isBoolean(isSorted)) {\n        context = iteratee;\n        iteratee = isSorted;\n        isSorted = false;\n      }\n      if (iteratee != null) iteratee = cb(iteratee, context);\n      var result = [];\n      var seen = [];\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var value = array[i],\n            computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted && !iteratee) {\n          if (!i || seen !== computed) result.push(value);\n          seen = computed;\n        } else if (iteratee) {\n          if (!_.contains(seen, computed)) {\n            seen.push(computed);\n            result.push(value);\n          }\n        } else if (!_.contains(result, value)) {\n          result.push(value);\n        }\n      }\n      return result;\n    };\n  \n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = restArguments(function(arrays) {\n      return _.uniq(flatten(arrays, true, true));\n    });\n  \n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function(array) {\n      var result = [];\n      var argsLength = arguments.length;\n      for (var i = 0, length = getLength(array); i < length; i++) {\n        var item = array[i];\n        if (_.contains(result, item)) continue;\n        var j;\n        for (j = 1; j < argsLength; j++) {\n          if (!_.contains(arguments[j], item)) break;\n        }\n        if (j === argsLength) result.push(item);\n      }\n      return result;\n    };\n  \n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = restArguments(function(array, rest) {\n      rest = flatten(rest, true, true);\n      return _.filter(array, function(value){\n        return !_.contains(rest, value);\n      });\n    });\n  \n    // Complement of _.zip. Unzip accepts an array of arrays and groups\n    // each array's elements on shared indices.\n    _.unzip = function(array) {\n      var length = array && _.max(array, getLength).length || 0;\n      var result = Array(length);\n  \n      for (var index = 0; index < length; index++) {\n        result[index] = _.pluck(array, index);\n      }\n      return result;\n    };\n  \n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = restArguments(_.unzip);\n  \n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values. Passing by pairs is the reverse of _.pairs.\n    _.object = function(list, values) {\n      var result = {};\n      for (var i = 0, length = getLength(list); i < length; i++) {\n        if (values) {\n          result[list[i]] = values[i];\n        } else {\n          result[list[i][0]] = list[i][1];\n        }\n      }\n      return result;\n    };\n  \n    // Generator function to create the findIndex and findLastIndex functions.\n    var createPredicateIndexFinder = function(dir) {\n      return function(array, predicate, context) {\n        predicate = cb(predicate, context);\n        var length = getLength(array);\n        var index = dir > 0 ? 0 : length - 1;\n        for (; index >= 0 && index < length; index += dir) {\n          if (predicate(array[index], index, array)) return index;\n        }\n        return -1;\n      };\n    };\n  \n    // Returns the first index on an array-like that passes a predicate test.\n    _.findIndex = createPredicateIndexFinder(1);\n    _.findLastIndex = createPredicateIndexFinder(-1);\n  \n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function(array, obj, iteratee, context) {\n      iteratee = cb(iteratee, context, 1);\n      var value = iteratee(obj);\n      var low = 0, high = getLength(array);\n      while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n      }\n      return low;\n    };\n  \n    // Generator function to create the indexOf and lastIndexOf functions.\n    var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n      return function(array, item, idx) {\n        var i = 0, length = getLength(array);\n        if (typeof idx == 'number') {\n          if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n          } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n          }\n        } else if (sortedIndex && idx && length) {\n          idx = sortedIndex(array, item);\n          return array[idx] === item ? idx : -1;\n        }\n        if (item !== item) {\n          idx = predicateFind(slice.call(array, i, length), _.isNaN);\n          return idx >= 0 ? idx + i : -1;\n        }\n        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n          if (array[idx] === item) return idx;\n        }\n        return -1;\n      };\n    };\n  \n    // Return the position of the first occurrence of an item in an array,\n    // or -1 if the item is not included in the array.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n  \n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function(start, stop, step) {\n      if (stop == null) {\n        stop = start || 0;\n        start = 0;\n      }\n      if (!step) {\n        step = stop < start ? -1 : 1;\n      }\n  \n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var range = Array(length);\n  \n      for (var idx = 0; idx < length; idx++, start += step) {\n        range[idx] = start;\n      }\n  \n      return range;\n    };\n  \n    // Chunk a single array into multiple arrays, each containing `count` or fewer\n    // items.\n    _.chunk = function(array, count) {\n      if (count == null || count < 1) return [];\n      var result = [];\n      var i = 0, length = array.length;\n      while (i < length) {\n        result.push(slice.call(array, i, i += count));\n      }\n      return result;\n    };\n  \n    // Function (ahem) Functions\n    // ------------------\n  \n    // Determines whether to execute a function as a constructor\n    // or a normal function with the provided arguments.\n    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n      var self = baseCreate(sourceFunc.prototype);\n      var result = sourceFunc.apply(self, args);\n      if (_.isObject(result)) return result;\n      return self;\n    };\n  \n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = restArguments(function(func, context, args) {\n      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n      var bound = restArguments(function(callArgs) {\n        return executeBound(func, bound, context, this, args.concat(callArgs));\n      });\n      return bound;\n    });\n  \n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder by default, allowing any combination of arguments to be\n    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n    _.partial = restArguments(function(func, boundArgs) {\n      var placeholder = _.partial.placeholder;\n      var bound = function() {\n        var position = 0, length = boundArgs.length;\n        var args = Array(length);\n        for (var i = 0; i < length; i++) {\n          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n        }\n        while (position < arguments.length) args.push(arguments[position++]);\n        return executeBound(func, bound, this, this, args);\n      };\n      return bound;\n    });\n  \n    _.partial.placeholder = _;\n  \n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = restArguments(function(obj, keys) {\n      keys = flatten(keys, false, false);\n      var index = keys.length;\n      if (index < 1) throw new Error('bindAll must be passed function names');\n      while (index--) {\n        var key = keys[index];\n        obj[key] = _.bind(obj[key], obj);\n      }\n    });\n  \n    // Memoize an expensive function by storing its results.\n    _.memoize = function(func, hasher) {\n      var memoize = function(key) {\n        var cache = memoize.cache;\n        var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n        if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n        return cache[address];\n      };\n      memoize.cache = {};\n      return memoize;\n    };\n  \n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = restArguments(function(func, wait, args) {\n      return setTimeout(function() {\n        return func.apply(null, args);\n      }, wait);\n    });\n  \n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = _.partial(_.delay, _, 1);\n  \n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function(func, wait, options) {\n      var timeout, context, args, result;\n      var previous = 0;\n      if (!options) options = {};\n  \n      var later = function() {\n        previous = options.leading === false ? 0 : _.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      };\n  \n      var throttled = function() {\n        var now = _.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n          }\n          previous = now;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining);\n        }\n        return result;\n      };\n  \n      throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n      };\n  \n      return throttled;\n    };\n  \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function(func, wait, immediate) {\n      var timeout, result;\n  \n      var later = function(context, args) {\n        timeout = null;\n        if (args) result = func.apply(context, args);\n      };\n  \n      var debounced = restArguments(function(args) {\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n          var callNow = !timeout;\n          timeout = setTimeout(later, wait);\n          if (callNow) result = func.apply(this, args);\n        } else {\n          timeout = _.delay(later, wait, this, args);\n        }\n  \n        return result;\n      });\n  \n      debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n      };\n  \n      return debounced;\n    };\n  \n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function(func, wrapper) {\n      return _.partial(wrapper, func);\n    };\n  \n    // Returns a negated version of the passed-in predicate.\n    _.negate = function(predicate) {\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    };\n  \n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function() {\n      var args = arguments;\n      var start = args.length - 1;\n      return function() {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) result = args[i].call(this, result);\n        return result;\n      };\n    };\n  \n    // Returns a function that will only be executed on and after the Nth call.\n    _.after = function(times, func) {\n      return function() {\n        if (--times < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    };\n  \n    // Returns a function that will only be executed up to (but not including) the Nth call.\n    _.before = function(times, func) {\n      var memo;\n      return function() {\n        if (--times > 0) {\n          memo = func.apply(this, arguments);\n        }\n        if (times <= 1) func = null;\n        return memo;\n      };\n    };\n  \n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = _.partial(_.before, 2);\n  \n    _.restArguments = restArguments;\n  \n    // Object Functions\n    // ----------------\n  \n    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  \n    var collectNonEnumProps = function(obj, keys) {\n      var nonEnumIdx = nonEnumerableProps.length;\n      var constructor = obj.constructor;\n      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n  \n      // Constructor is a special case.\n      var prop = 'constructor';\n      if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n  \n      while (nonEnumIdx--) {\n        prop = nonEnumerableProps[nonEnumIdx];\n        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n          keys.push(prop);\n        }\n      }\n    };\n  \n    // Retrieve the names of an object's own properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\n    _.keys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      if (nativeKeys) return nativeKeys(obj);\n      var keys = [];\n      for (var key in obj) if (has(obj, key)) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve all the property names of an object.\n    _.allKeys = function(obj) {\n      if (!_.isObject(obj)) return [];\n      var keys = [];\n      for (var key in obj) keys.push(key);\n      // Ahem, IE < 9.\n      if (hasEnumBug) collectNonEnumProps(obj, keys);\n      return keys;\n    };\n  \n    // Retrieve the values of an object's properties.\n    _.values = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var values = Array(length);\n      for (var i = 0; i < length; i++) {\n        values[i] = obj[keys[i]];\n      }\n      return values;\n    };\n  \n    // Returns the results of applying the iteratee to each element of the object.\n    // In contrast to _.map it returns an object.\n    _.mapObject = function(obj, iteratee, context) {\n      iteratee = cb(iteratee, context);\n      var keys = _.keys(obj),\n          length = keys.length,\n          results = {};\n      for (var index = 0; index < length; index++) {\n        var currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n    };\n  \n    // Convert an object into a list of `[key, value]` pairs.\n    // The opposite of _.object.\n    _.pairs = function(obj) {\n      var keys = _.keys(obj);\n      var length = keys.length;\n      var pairs = Array(length);\n      for (var i = 0; i < length; i++) {\n        pairs[i] = [keys[i], obj[keys[i]]];\n      }\n      return pairs;\n    };\n  \n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function(obj) {\n      var result = {};\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        result[obj[keys[i]]] = keys[i];\n      }\n      return result;\n    };\n  \n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`.\n    _.functions = _.methods = function(obj) {\n      var names = [];\n      for (var key in obj) {\n        if (_.isFunction(obj[key])) names.push(key);\n      }\n      return names.sort();\n    };\n  \n    // An internal function for creating assigner functions.\n    var createAssigner = function(keysFunc, defaults) {\n      return function(obj) {\n        var length = arguments.length;\n        if (defaults) obj = Object(obj);\n        if (length < 2 || obj == null) return obj;\n        for (var index = 1; index < length; index++) {\n          var source = arguments[index],\n              keys = keysFunc(source),\n              l = keys.length;\n          for (var i = 0; i < l; i++) {\n            var key = keys[i];\n            if (!defaults || obj[key] === void 0) obj[key] = source[key];\n          }\n        }\n        return obj;\n      };\n    };\n  \n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = createAssigner(_.allKeys);\n  \n    // Assigns a given object with all the own properties in the passed-in object(s).\n    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    _.extendOwn = _.assign = createAssigner(_.keys);\n  \n    // Returns the first key on an object that passes a predicate test.\n    _.findKey = function(obj, predicate, context) {\n      predicate = cb(predicate, context);\n      var keys = _.keys(obj), key;\n      for (var i = 0, length = keys.length; i < length; i++) {\n        key = keys[i];\n        if (predicate(obj[key], key, obj)) return key;\n      }\n    };\n  \n    // Internal pick helper function to determine if `obj` has key `key`.\n    var keyInObj = function(value, key, obj) {\n      return key in obj;\n    };\n  \n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = restArguments(function(obj, keys) {\n      var result = {}, iteratee = keys[0];\n      if (obj == null) return result;\n      if (_.isFunction(iteratee)) {\n        if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n        keys = _.allKeys(obj);\n      } else {\n        iteratee = keyInObj;\n        keys = flatten(keys, false, false);\n        obj = Object(obj);\n      }\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n      return result;\n    });\n  \n    // Return a copy of the object without the blacklisted properties.\n    _.omit = restArguments(function(obj, keys) {\n      var iteratee = keys[0], context;\n      if (_.isFunction(iteratee)) {\n        iteratee = _.negate(iteratee);\n        if (keys.length > 1) context = keys[1];\n      } else {\n        keys = _.map(flatten(keys, false, false), String);\n        iteratee = function(value, key) {\n          return !_.contains(keys, key);\n        };\n      }\n      return _.pick(obj, iteratee, context);\n    });\n  \n    // Fill in a given object with default properties.\n    _.defaults = createAssigner(_.allKeys, true);\n  \n    // Creates an object that inherits from the given prototype object.\n    // If additional properties are provided then they will be added to the\n    // created object.\n    _.create = function(prototype, props) {\n      var result = baseCreate(prototype);\n      if (props) _.extendOwn(result, props);\n      return result;\n    };\n  \n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function(obj) {\n      if (!_.isObject(obj)) return obj;\n      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n  \n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function(obj, interceptor) {\n      interceptor(obj);\n      return obj;\n    };\n  \n    // Returns whether an object has a given set of `key:value` pairs.\n    _.isMatch = function(object, attrs) {\n      var keys = _.keys(attrs), length = keys.length;\n      if (object == null) return !length;\n      var obj = Object(object);\n      for (var i = 0; i < length; i++) {\n        var key = keys[i];\n        if (attrs[key] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  \n  \n    // Internal recursive comparison function for `isEqual`.\n    var eq, deepEq;\n    eq = function(a, b, aStack, bStack) {\n      // Identical objects are equal. `0 === -0`, but they aren't identical.\n      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n      if (a === b) return a !== 0 || 1 / a === 1 / b;\n      // `null` or `undefined` only equal to itself (strict comparison).\n      if (a == null || b == null) return false;\n      // `NaN`s are equivalent, but non-reflexive.\n      if (a !== a) return b !== b;\n      // Exhaust primitive checks\n      var type = typeof a;\n      if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n      return deepEq(a, b, aStack, bStack);\n    };\n  \n    // Internal recursive comparison function for `isEqual`.\n    deepEq = function(a, b, aStack, bStack) {\n      // Unwrap any wrapped objects.\n      if (a instanceof _) a = a._wrapped;\n      if (b instanceof _) b = b._wrapped;\n      // Compare `[[Class]]` names.\n      var className = toString.call(a);\n      if (className !== toString.call(b)) return false;\n      switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case '[object String]':\n          // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n          // equivalent to `new String(\"5\")`.\n          return '' + a === '' + b;\n        case '[object Number]':\n          // `NaN`s are equivalent, but non-reflexive.\n          // Object(NaN) is equivalent to NaN.\n          if (+a !== +a) return +b !== +b;\n          // An `egal` comparison is performed for other numeric values.\n          return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n          // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n          // millisecond representations. Note that invalid dates with millisecond representations\n          // of `NaN` are not equivalent.\n          return +a === +b;\n        case '[object Symbol]':\n          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      }\n  \n      var areArrays = className === '[object Array]';\n      if (!areArrays) {\n        if (typeof a != 'object' || typeof b != 'object') return false;\n  \n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                                 _.isFunction(bCtor) && bCtor instanceof bCtor)\n                            && ('constructor' in a && 'constructor' in b)) {\n          return false;\n        }\n      }\n      // Assume equality for cyclic structures. The algorithm for detecting cyclic\n      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  \n      // Initializing stack of traversed objects.\n      // It's done here since we only need them for objects and arrays comparison.\n      aStack = aStack || [];\n      bStack = bStack || [];\n      var length = aStack.length;\n      while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b;\n      }\n  \n      // Add the first object to the stack of traversed objects.\n      aStack.push(a);\n      bStack.push(b);\n  \n      // Recursively compare objects and arrays.\n      if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length) return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n          if (!eq(a[length], b[length], aStack, bStack)) return false;\n        }\n      } else {\n        // Deep compare objects.\n        var keys = _.keys(a), key;\n        length = keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (_.keys(b).length !== length) return false;\n        while (length--) {\n          // Deep compare each member\n          key = keys[length];\n          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n        }\n      }\n      // Remove the first object from the stack of traversed objects.\n      aStack.pop();\n      bStack.pop();\n      return true;\n    };\n  \n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function(a, b) {\n      return eq(a, b);\n    };\n  \n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function(obj) {\n      if (obj == null) return true;\n      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n      return _.keys(obj).length === 0;\n    };\n  \n    // Is a given value a DOM element?\n    _.isElement = function(obj) {\n      return !!(obj && obj.nodeType === 1);\n    };\n  \n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function(obj) {\n      return toString.call(obj) === '[object Array]';\n    };\n  \n    // Is a given variable an object?\n    _.isObject = function(obj) {\n      var type = typeof obj;\n      return type === 'function' || type === 'object' && !!obj;\n    };\n  \n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n      _['is' + name] = function(obj) {\n        return toString.call(obj) === '[object ' + name + ']';\n      };\n    });\n  \n    // Define a fallback version of the method in browsers (ahem, IE < 9), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n      _.isArguments = function(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  \n    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n    var nodelist = root.document && root.document.childNodes;\n    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n      _.isFunction = function(obj) {\n        return typeof obj == 'function' || false;\n      };\n    }\n  \n    // Is a given object a finite number?\n    _.isFinite = function(obj) {\n      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n  \n    // Is the given value `NaN`?\n    _.isNaN = function(obj) {\n      return _.isNumber(obj) && isNaN(obj);\n    };\n  \n    // Is a given value a boolean?\n    _.isBoolean = function(obj) {\n      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n    };\n  \n    // Is a given value equal to null?\n    _.isNull = function(obj) {\n      return obj === null;\n    };\n  \n    // Is a given variable undefined?\n    _.isUndefined = function(obj) {\n      return obj === void 0;\n    };\n  \n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function(obj, path) {\n      if (!_.isArray(path)) {\n        return has(obj, path);\n      }\n      var length = path.length;\n      for (var i = 0; i < length; i++) {\n        var key = path[i];\n        if (obj == null || !hasOwnProperty.call(obj, key)) {\n          return false;\n        }\n        obj = obj[key];\n      }\n      return !!length;\n    };\n  \n    // Utility Functions\n    // -----------------\n  \n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function() {\n      root._ = previousUnderscore;\n      return this;\n    };\n  \n    // Keep the identity function around for default iteratees.\n    _.identity = function(value) {\n      return value;\n    };\n  \n    // Predicate-generating functions. Often useful outside of Underscore.\n    _.constant = function(value) {\n      return function() {\n        return value;\n      };\n    };\n  \n    _.noop = function(){};\n  \n    // Creates a function that, when passed an object, will traverse that object鈥檚\n    // properties down the given `path`, specified as an array of keys or indexes.\n    _.property = function(path) {\n      if (!_.isArray(path)) {\n        return shallowProperty(path);\n      }\n      return function(obj) {\n        return deepGet(obj, path);\n      };\n    };\n  \n    // Generates a function for a given object that returns a given property.\n    _.propertyOf = function(obj) {\n      if (obj == null) {\n        return function(){};\n      }\n      return function(path) {\n        return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n      };\n    };\n  \n    // Returns a predicate for checking whether an object has a given set of\n    // `key:value` pairs.\n    _.matcher = _.matches = function(attrs) {\n      attrs = _.extendOwn({}, attrs);\n      return function(obj) {\n        return _.isMatch(obj, attrs);\n      };\n    };\n  \n    // Run a function **n** times.\n    _.times = function(n, iteratee, context) {\n      var accum = Array(Math.max(0, n));\n      iteratee = optimizeCb(iteratee, context, 1);\n      for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n      return accum;\n    };\n  \n    // Return a random integer between min and max (inclusive).\n    _.random = function(min, max) {\n      if (max == null) {\n        max = min;\n        min = 0;\n      }\n      return min + Math.floor(Math.random() * (max - min + 1));\n    };\n  \n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function() {\n      return new Date().getTime();\n    };\n  \n    // List of HTML entities for escaping.\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var unescapeMap = _.invert(escapeMap);\n  \n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    var createEscaper = function(map) {\n      var escaper = function(match) {\n        return map[match];\n      };\n      // Regexes for identifying a key that needs to be escaped.\n      var source = '(?:' + _.keys(map).join('|') + ')';\n      var testRegexp = RegExp(source);\n      var replaceRegexp = RegExp(source, 'g');\n      return function(string) {\n        string = string == null ? '' : '' + string;\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n      };\n    };\n    _.escape = createEscaper(escapeMap);\n    _.unescape = createEscaper(unescapeMap);\n  \n    // Traverses the children of `obj` along `path`. If a child is a function, it\n    // is invoked with its parent as context. Returns the value of the final\n    // child, or `fallback` if any child is undefined.\n    _.result = function(obj, path, fallback) {\n      if (!_.isArray(path)) path = [path];\n      var length = path.length;\n      if (!length) {\n        return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n      }\n      for (var i = 0; i < length; i++) {\n        var prop = obj == null ? void 0 : obj[path[i]];\n        if (prop === void 0) {\n          prop = fallback;\n          i = length; // Ensure we don't continue iterating.\n        }\n        obj = _.isFunction(prop) ? prop.call(obj) : prop;\n      }\n      return obj;\n    };\n  \n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function(prefix) {\n      var id = ++idCounter + '';\n      return prefix ? prefix + id : id;\n    };\n  \n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n      evaluate: /<%([\\s\\S]+?)%>/g,\n      interpolate: /<%=([\\s\\S]+?)%>/g,\n      escape: /<%-([\\s\\S]+?)%>/g\n    };\n  \n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n  \n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n      \"'\": \"'\",\n      '\\\\': '\\\\',\n      '\\r': 'r',\n      '\\n': 'n',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n  \n    var escapeChar = function(match) {\n      return '\\\\' + escapes[match];\n    };\n  \n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    // NB: `oldSettings` only exists for backwards compatibility.\n    _.template = function(text, settings, oldSettings) {\n      if (!settings && oldSettings) settings = oldSettings;\n      settings = _.defaults({}, settings, _.templateSettings);\n  \n      // Combine delimiters into one regular expression via alternation.\n      var matcher = RegExp([\n        (settings.escape || noMatch).source,\n        (settings.interpolate || noMatch).source,\n        (settings.evaluate || noMatch).source\n      ].join('|') + '|$', 'g');\n  \n      // Compile the template source, escaping string literals appropriately.\n      var index = 0;\n      var source = \"__p+='\";\n      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n        index = offset + match.length;\n  \n        if (escape) {\n          source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n        } else if (interpolate) {\n          source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n        } else if (evaluate) {\n          source += \"';\\n\" + evaluate + \"\\n__p+='\";\n        }\n  \n        // Adobe VMs need the match returned to produce the correct offset.\n        return match;\n      });\n      source += \"';\\n\";\n  \n      // If a variable is not specified, place data values in local scope.\n      if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n  \n      source = \"var __t,__p='',__j=Array.prototype.join,\" +\n        \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n        source + 'return __p;\\n';\n  \n      var render;\n      try {\n        render = new Function(settings.variable || 'obj', '_', source);\n      } catch (e) {\n        e.source = source;\n        throw e;\n      }\n  \n      var template = function(data) {\n        return render.call(this, data, _);\n      };\n  \n      // Provide the compiled source as a convenience for precompilation.\n      var argument = settings.variable || 'obj';\n      template.source = 'function(' + argument + '){\\n' + source + '}';\n  \n      return template;\n    };\n  \n    // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n    _.chain = function(obj) {\n      var instance = _(obj);\n      instance._chain = true;\n      return instance;\n    };\n  \n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n  \n    // Helper function to continue chaining intermediate results.\n    var chainResult = function(instance, obj) {\n      return instance._chain ? _(obj).chain() : obj;\n    };\n  \n    // Add your own custom functions to the Underscore object.\n    _.mixin = function(obj) {\n      _.each(_.functions(obj), function(name) {\n        var func = _[name] = obj[name];\n        _.prototype[name] = function() {\n          var args = [this._wrapped];\n          push.apply(args, arguments);\n          return chainResult(this, func.apply(_, args));\n        };\n      });\n      return _;\n    };\n  \n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n  \n    // Add all mutator Array functions to the wrapper.\n    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        var obj = this._wrapped;\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n        return chainResult(this, obj);\n      };\n    });\n  \n    // Add all accessor Array functions to the wrapper.\n    _.each(['concat', 'join', 'slice'], function(name) {\n      var method = ArrayProto[name];\n      _.prototype[name] = function() {\n        return chainResult(this, method.apply(this._wrapped, arguments));\n      };\n    });\n  \n    // Extracts the result from a wrapped and chained object.\n    _.prototype.value = function() {\n      return this._wrapped;\n    };\n  \n    // Provide unwrapping proxy for some methods used in engine operations\n    // such as arithmetic and JSON stringification.\n    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n    _.prototype.toString = function() {\n      return String(this._wrapped);\n    };\n  \n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (typeof define == 'function' && define.amd) {\n      define('underscore', [], function() {\n        return _;\n      });\n    }\n  }());"},{"_content":"/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global, setTimeout) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.3.6',\n        commentRegExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:\"'=]|^)\\/\\/.*$/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    //Could match something like ')//comment', do not lose the prefix to comment.\n    function commentReplace(match, singlePrefix) {\n        return singlePrefix || '';\n    }\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttps://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (isNormalized) {\n                        normalizedName = name;\n                    } else if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                var resLoadMaps = [];\n                                each(this.depMaps, function (depMap) {\n                                    resLoadMaps.push(depMap.normalizedMap || depMap);\n                                });\n                                req.onResourceLoad(context, this.map, resLoadMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.map.normalizedMap = normalizedMap;\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                // Convert old style urlArgs string to a function.\n                if (typeof cfg.urlArgs === 'string') {\n                    var urlArgs = cfg.urlArgs;\n                    cfg.urlArgs = function(id, url) {\n                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;\n                    };\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|^blob\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs && !/^blob\\:/.test(url) ?\n                       url + config.urlArgs(moduleName, url) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    var parents = [];\n                    eachProp(registry, function(value, key) {\n                        if (key.indexOf('_@r') !== 0) {\n                            each(value.depMaps, function(depMap) {\n                                if (depMap.id === data.id) {\n                                    parents.push(key);\n                                    return true;\n                                }\n                            });\n                        }\n                    });\n                    return onError(makeError('scripterror', 'Script error for \"' + data.id +\n                                             (parents.length ?\n                                             '\", needed by: ' + parents.join(', ') :\n                                             '\"'), evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/requirejs/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/requirejs/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //Calling onNodeCreated after all properties on the node have been\n            //set, but before it is placed in the DOM.\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation is that a build has been done so\n                //that only one script needs to be loaded anyway. This may need\n                //to be reevaluated if other use cases become common.\n\n                // Post a task to the event loop to work around a bug in WebKit\n                // where the worker gets garbage-collected after calling\n                // importScripts(): https://webkit.org/b/153317\n                setTimeout(function() {}, 0);\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one,\n                //but only do so if the data-main value is not a loader plugin\n                //module ID.\n                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, commentReplace)\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));","source":"demo/js/require.js","raw":"/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global, setTimeout) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.3.6',\n        commentRegExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:\"'=]|^)\\/\\/.*$/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    //Could match something like ')//comment', do not lose the prefix to comment.\n    function commentReplace(match, singlePrefix) {\n        return singlePrefix || '';\n    }\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttps://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (isNormalized) {\n                        normalizedName = name;\n                    } else if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                var resLoadMaps = [];\n                                each(this.depMaps, function (depMap) {\n                                    resLoadMaps.push(depMap.normalizedMap || depMap);\n                                });\n                                req.onResourceLoad(context, this.map, resLoadMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.map.normalizedMap = normalizedMap;\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                // Convert old style urlArgs string to a function.\n                if (typeof cfg.urlArgs === 'string') {\n                    var urlArgs = cfg.urlArgs;\n                    cfg.urlArgs = function(id, url) {\n                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;\n                    };\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|^blob\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs && !/^blob\\:/.test(url) ?\n                       url + config.urlArgs(moduleName, url) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    var parents = [];\n                    eachProp(registry, function(value, key) {\n                        if (key.indexOf('_@r') !== 0) {\n                            each(value.depMaps, function(depMap) {\n                                if (depMap.id === data.id) {\n                                    parents.push(key);\n                                    return true;\n                                }\n                            });\n                        }\n                    });\n                    return onError(makeError('scripterror', 'Script error for \"' + data.id +\n                                             (parents.length ?\n                                             '\", needed by: ' + parents.join(', ') :\n                                             '\"'), evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/requirejs/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/requirejs/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //Calling onNodeCreated after all properties on the node have been\n            //set, but before it is placed in the DOM.\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation is that a build has been done so\n                //that only one script needs to be loaded anyway. This may need\n                //to be reevaluated if other use cases become common.\n\n                // Post a task to the event loop to work around a bug in WebKit\n                // where the worker gets garbage-collected after calling\n                // importScripts(): https://webkit.org/b/153317\n                setTimeout(function() {}, 0);\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one,\n                //but only do so if the data-main value is not a loader plugin\n                //module ID.\n                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, commentReplace)\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));","date":"2019-07-16T02:33:21.123Z","updated":"2019-07-16T02:33:21.123Z","path":"demo/js/require.js","layout":"false","title":"","comments":1,"_id":"cjzcl76ar003hdkhslgcj0ha9","content":"/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global, setTimeout) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.3.6',\n        commentRegExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:\"'=]|^)\\/\\/.*$/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    //Could match something like ')//comment', do not lose the prefix to comment.\n    function commentReplace(match, singlePrefix) {\n        return singlePrefix || '';\n    }\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttps://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (isNormalized) {\n                        normalizedName = name;\n                    } else if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                var resLoadMaps = [];\n                                each(this.depMaps, function (depMap) {\n                                    resLoadMaps.push(depMap.normalizedMap || depMap);\n                                });\n                                req.onResourceLoad(context, this.map, resLoadMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.map.normalizedMap = normalizedMap;\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                // Convert old style urlArgs string to a function.\n                if (typeof cfg.urlArgs === 'string') {\n                    var urlArgs = cfg.urlArgs;\n                    cfg.urlArgs = function(id, url) {\n                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;\n                    };\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|^blob\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs && !/^blob\\:/.test(url) ?\n                       url + config.urlArgs(moduleName, url) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    var parents = [];\n                    eachProp(registry, function(value, key) {\n                        if (key.indexOf('_@r') !== 0) {\n                            each(value.depMaps, function(depMap) {\n                                if (depMap.id === data.id) {\n                                    parents.push(key);\n                                    return true;\n                                }\n                            });\n                        }\n                    });\n                    return onError(makeError('scripterror', 'Script error for \"' + data.id +\n                                             (parents.length ?\n                                             '\", needed by: ' + parents.join(', ') :\n                                             '\"'), evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/requirejs/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/requirejs/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //Calling onNodeCreated after all properties on the node have been\n            //set, but before it is placed in the DOM.\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation is that a build has been done so\n                //that only one script needs to be loaded anyway. This may need\n                //to be reevaluated if other use cases become common.\n\n                // Post a task to the event loop to work around a bug in WebKit\n                // where the worker gets garbage-collected after calling\n                // importScripts(): https://webkit.org/b/153317\n                setTimeout(function() {}, 0);\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one,\n                //but only do so if the data-main value is not a loader plugin\n                //module ID.\n                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, commentReplace)\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));","excerpt":"","more":"/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global, setTimeout) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.3.6',\n        commentRegExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:\"'=]|^)\\/\\/.*$/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    //Could match something like ')//comment', do not lose the prefix to comment.\n    function commentReplace(match, singlePrefix) {\n        return singlePrefix || '';\n    }\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttps://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (isNormalized) {\n                        normalizedName = name;\n                    } else if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                var resLoadMaps = [];\n                                each(this.depMaps, function (depMap) {\n                                    resLoadMaps.push(depMap.normalizedMap || depMap);\n                                });\n                                req.onResourceLoad(context, this.map, resLoadMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.map.normalizedMap = normalizedMap;\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                // Convert old style urlArgs string to a function.\n                if (typeof cfg.urlArgs === 'string') {\n                    var urlArgs = cfg.urlArgs;\n                    cfg.urlArgs = function(id, url) {\n                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;\n                    };\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|^blob\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs && !/^blob\\:/.test(url) ?\n                       url + config.urlArgs(moduleName, url) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    var parents = [];\n                    eachProp(registry, function(value, key) {\n                        if (key.indexOf('_@r') !== 0) {\n                            each(value.depMaps, function(depMap) {\n                                if (depMap.id === data.id) {\n                                    parents.push(key);\n                                    return true;\n                                }\n                            });\n                        }\n                    });\n                    return onError(makeError('scripterror', 'Script error for \"' + data.id +\n                                             (parents.length ?\n                                             '\", needed by: ' + parents.join(', ') :\n                                             '\"'), evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/requirejs/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/requirejs/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //Calling onNodeCreated after all properties on the node have been\n            //set, but before it is placed in the DOM.\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation is that a build has been done so\n                //that only one script needs to be loaded anyway. This may need\n                //to be reevaluated if other use cases become common.\n\n                // Post a task to the event loop to work around a bug in WebKit\n                // where the worker gets garbage-collected after calling\n                // importScripts(): https://webkit.org/b/153317\n                setTimeout(function() {}, 0);\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one,\n                //but only do so if the data-main value is not a loader plugin\n                //module ID.\n                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, commentReplace)\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));"},{"_content":"/**\n * @license\n * lodash 4.5.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash -o ./dist/lodash.js`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n    /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n    var undefined;\n  \n    /** Used as the semantic version number. */\n    var VERSION = '4.5.0';\n  \n    /** Used to compose bitmasks for wrapper metadata. */\n    var BIND_FLAG = 1,\n        BIND_KEY_FLAG = 2,\n        CURRY_BOUND_FLAG = 4,\n        CURRY_FLAG = 8,\n        CURRY_RIGHT_FLAG = 16,\n        PARTIAL_FLAG = 32,\n        PARTIAL_RIGHT_FLAG = 64,\n        ARY_FLAG = 128,\n        REARG_FLAG = 256,\n        FLIP_FLAG = 512;\n  \n    /** Used to compose bitmasks for comparison styles. */\n    var UNORDERED_COMPARE_FLAG = 1,\n        PARTIAL_COMPARE_FLAG = 2;\n  \n    /** Used as default options for `_.truncate`. */\n    var DEFAULT_TRUNC_LENGTH = 30,\n        DEFAULT_TRUNC_OMISSION = '...';\n  \n    /** Used to detect hot functions by number of calls within a span of milliseconds. */\n    var HOT_COUNT = 150,\n        HOT_SPAN = 16;\n  \n    /** Used as the size to enable large array optimizations. */\n    var LARGE_ARRAY_SIZE = 200;\n  \n    /** Used to indicate the type of lazy iteratees. */\n    var LAZY_FILTER_FLAG = 1,\n        LAZY_MAP_FLAG = 2,\n        LAZY_WHILE_FLAG = 3;\n  \n    /** Used as the `TypeError` message for \"Functions\" methods. */\n    var FUNC_ERROR_TEXT = 'Expected a function';\n  \n    /** Used to stand-in for `undefined` hash values. */\n    var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  \n    /** Used as references for various `Number` constants. */\n    var INFINITY = 1 / 0,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_INTEGER = 1.7976931348623157e+308,\n        NAN = 0 / 0;\n  \n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n  \n    /** Used as the internal argument placeholder. */\n    var PLACEHOLDER = '__lodash_placeholder__';\n  \n    /** `Object#toString` result references. */\n    var argsTag = '[object Arguments]',\n        arrayTag = '[object Array]',\n        boolTag = '[object Boolean]',\n        dateTag = '[object Date]',\n        errorTag = '[object Error]',\n        funcTag = '[object Function]',\n        genTag = '[object GeneratorFunction]',\n        mapTag = '[object Map]',\n        numberTag = '[object Number]',\n        objectTag = '[object Object]',\n        regexpTag = '[object RegExp]',\n        setTag = '[object Set]',\n        stringTag = '[object String]',\n        symbolTag = '[object Symbol]',\n        weakMapTag = '[object WeakMap]',\n        weakSetTag = '[object WeakSet]';\n  \n    var arrayBufferTag = '[object ArrayBuffer]',\n        float32Tag = '[object Float32Array]',\n        float64Tag = '[object Float64Array]',\n        int8Tag = '[object Int8Array]',\n        int16Tag = '[object Int16Array]',\n        int32Tag = '[object Int32Array]',\n        uint8Tag = '[object Uint8Array]',\n        uint8ClampedTag = '[object Uint8ClampedArray]',\n        uint16Tag = '[object Uint16Array]',\n        uint32Tag = '[object Uint32Array]';\n  \n    /** Used to match empty string literals in compiled template source. */\n    var reEmptyStringLeading = /\\b__p \\+= '';/g,\n        reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n        reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n  \n    /** Used to match HTML entities and HTML characters. */\n    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n        reUnescapedHtml = /[&<>\"'`]/g,\n        reHasEscapedHtml = RegExp(reEscapedHtml.source),\n        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n  \n    /** Used to match template delimiters. */\n    var reEscape = /<%-([\\s\\S]+?)%>/g,\n        reEvaluate = /<%([\\s\\S]+?)%>/g,\n        reInterpolate = /<%=([\\s\\S]+?)%>/g;\n  \n    /** Used to match property names within property paths. */\n    var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        reIsPlainProp = /^\\w*$/,\n        rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n  \n    /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n        reHasRegExpChar = RegExp(reRegExpChar.source);\n  \n    /** Used to match leading and trailing whitespace. */\n    var reTrim = /^\\s+|\\s+$/g,\n        reTrimStart = /^\\s+/,\n        reTrimEnd = /\\s+$/;\n  \n    /** Used to match backslashes in property paths. */\n    var reEscapeChar = /\\\\(\\\\)?/g;\n  \n    /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n    var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n  \n    /** Used to match `RegExp` flags from their coerced string values. */\n    var reFlags = /\\w*$/;\n  \n    /** Used to detect hexadecimal string values. */\n    var reHasHexPrefix = /^0x/i;\n  \n    /** Used to detect bad signed hexadecimal string values. */\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  \n    /** Used to detect binary string values. */\n    var reIsBinary = /^0b[01]+$/i;\n  \n    /** Used to detect host constructors (Safari > 5). */\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  \n    /** Used to detect octal string values. */\n    var reIsOctal = /^0o[0-7]+$/i;\n  \n    /** Used to detect unsigned integer values. */\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  \n    /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n    var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n  \n    /** Used to ensure capturing order of template delimiters. */\n    var reNoMatch = /($^)/;\n  \n    /** Used to match unescaped characters in compiled string literals. */\n    var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n  \n    /** Used to compose unicode character classes. */\n    var rsAstralRange = '\\\\ud800-\\\\udfff',\n        rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n        rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n        rsDingbatRange = '\\\\u2700-\\\\u27bf',\n        rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n        rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n        rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n        rsQuoteRange = '\\\\u2018\\\\u2019\\\\u201c\\\\u201d',\n        rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n        rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n        rsVarRange = '\\\\ufe0e\\\\ufe0f',\n        rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;\n  \n    /** Used to compose unicode capture groups. */\n    var rsAstral = '[' + rsAstralRange + ']',\n        rsBreak = '[' + rsBreakRange + ']',\n        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n        rsDigits = '\\\\d+',\n        rsDingbat = '[' + rsDingbatRange + ']',\n        rsLower = '[' + rsLowerRange + ']',\n        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n        rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n        rsNonAstral = '[^' + rsAstralRange + ']',\n        rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n        rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n        rsUpper = '[' + rsUpperRange + ']',\n        rsZWJ = '\\\\u200d';\n  \n    /** Used to compose unicode regexes. */\n    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n        reOptMod = rsModifier + '?',\n        rsOptVar = '[' + rsVarRange + ']?',\n        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n        rsSeq = rsOptVar + reOptMod + rsOptJoin,\n        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  \n    /**\n     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n     */\n    var reComboMark = RegExp(rsCombo, 'g');\n  \n    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  \n    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n  \n    /** Used to match non-compound words composed of alphanumeric characters. */\n    var reBasicWord = /[a-zA-Z0-9]+/g;\n  \n    /** Used to match complex or compound words. */\n    var reComplexWord = RegExp([\n      rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n      rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n      rsUpper + '?' + rsLowerMisc + '+',\n      rsUpper + '+',\n      rsDigits,\n      rsEmoji\n    ].join('|'), 'g');\n  \n    /** Used to detect strings that need a more robust regexp to match words. */\n    var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n  \n    /** Used to assign default `context` object properties. */\n    var contextProps = [\n      'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n      'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',\n      'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n    ];\n  \n    /** Used to make template sourceURLs easier to identify. */\n    var templateCounter = -1;\n  \n    /** Used to identify `toStringTag` values of typed arrays. */\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n    typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n    typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n    typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n    typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n    typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n    typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  \n    /** Used to identify `toStringTag` values supported by `_.clone`. */\n    var cloneableTags = {};\n    cloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n    cloneableTags[dateTag] = cloneableTags[float32Tag] =\n    cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n    cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n    cloneableTags[mapTag] = cloneableTags[numberTag] =\n    cloneableTags[objectTag] = cloneableTags[regexpTag] =\n    cloneableTags[setTag] = cloneableTags[stringTag] =\n    cloneableTags[symbolTag] = cloneableTags[uint8Tag] =\n    cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =\n    cloneableTags[uint32Tag] = true;\n    cloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n  \n    /** Used to map latin-1 supplementary letters to basic latin letters. */\n    var deburredLetters = {\n      '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n      '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n      '\\xc7': 'C',  '\\xe7': 'c',\n      '\\xd0': 'D',  '\\xf0': 'd',\n      '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n      '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n      '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n      '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n      '\\xd1': 'N',  '\\xf1': 'n',\n      '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n      '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n      '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n      '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n      '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n      '\\xc6': 'Ae', '\\xe6': 'ae',\n      '\\xde': 'Th', '\\xfe': 'th',\n      '\\xdf': 'ss'\n    };\n  \n    /** Used to map characters to HTML entities. */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '`': '&#96;'\n    };\n  \n    /** Used to map HTML entities to characters. */\n    var htmlUnescapes = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#96;': '`'\n    };\n  \n    /** Used to determine if values are of the language type `Object`. */\n    var objectTypes = {\n      'function': true,\n      'object': true\n    };\n  \n    /** Used to escape characters for inclusion in compiled string literals. */\n    var stringEscapes = {\n      '\\\\': '\\\\',\n      \"'\": \"'\",\n      '\\n': 'n',\n      '\\r': 'r',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    /** Built-in method references without a dependency on `root`. */\n    var freeParseFloat = parseFloat,\n        freeParseInt = parseInt;\n  \n    /** Detect free variable `exports`. */\n    var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n      ? exports\n      : undefined;\n  \n    /** Detect free variable `module`. */\n    var freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n      ? module\n      : undefined;\n  \n    /** Detect the popular CommonJS extension `module.exports`. */\n    var moduleExports = (freeModule && freeModule.exports === freeExports)\n      ? freeExports\n      : undefined;\n  \n    /** Detect free variable `global` from Node.js. */\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n  \n    /** Detect free variable `self`. */\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  \n    /** Detect free variable `window`. */\n    var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  \n    /** Detect `this` as the global object. */\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  \n    /**\n     * Used as a reference to the global object.\n     *\n     * The `this` value is used if it's the global object to avoid Greasemonkey's\n     * restricted `window` object, otherwise the `window` object is used.\n     */\n    var root = freeGlobal ||\n      ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n        freeSelf || thisGlobal || Function('return this')();\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Adds the key-value `pair` to `map`.\n     *\n     * @private\n     * @param {Object} map The map to modify.\n     * @param {Array} pair The key-value pair to add.\n     * @returns {Object} Returns `map`.\n     */\n    function addMapEntry(map, pair) {\n      map.set(pair[0], pair[1]);\n      return map;\n    }\n  \n    /**\n     * Adds `value` to `set`.\n     *\n     * @private\n     * @param {Object} set The set to modify.\n     * @param {*} value The value to add.\n     * @returns {Object} Returns `set`.\n     */\n    function addSetEntry(set, value) {\n      set.add(value);\n      return set;\n    }\n  \n    /**\n     * A faster alternative to `Function#apply`, this function invokes `func`\n     * with the `this` binding of `thisArg` and the arguments of `args`.\n     *\n     * @private\n     * @param {Function} func The function to invoke.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} args The arguments to invoke `func` with.\n     * @returns {*} Returns the result of `func`.\n     */\n    function apply(func, thisArg, args) {\n      var length = args.length;\n      switch (length) {\n        case 0: return func.call(thisArg);\n        case 1: return func.call(thisArg, args[0]);\n        case 2: return func.call(thisArg, args[0], args[1]);\n        case 3: return func.call(thisArg, args[0], args[1], args[2]);\n      }\n      return func.apply(thisArg, args);\n    }\n  \n    /**\n     * A specialized version of `baseAggregator` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function arrayAggregator(array, setter, iteratee, accumulator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index];\n        setter(accumulator, value, iteratee(value), array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * Creates a new array concatenating `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The first array to concatenate.\n     * @param {Array} other The second array to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n  \n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.forEach` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n  \n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.every` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    /**\n     * A specialized version of `_.filter` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.includes` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludes(array, value) {\n      return !!array.length && baseIndexOf(array, value, 0) > -1;\n    }\n  \n    /**\n     * A specialized version of `_.includesWith` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @param {Function} comparator The comparator invoked per element.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludesWith(array, value, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (comparator(value, array[index])) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * A specialized version of `_.map` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n  \n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n  \n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n  \n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.reduce` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initAccum) {\n      var index = -1,\n          length = array.length;\n  \n      if (initAccum && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n      var length = array.length;\n      if (initAccum && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.some` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n  \n        if (current != null && (computed === undefined\n              ? current === current\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of methods like `_.find` and `_.findKey`, without\n     * support for iteratee shorthands, which iterates over `collection` using\n     * `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseFindIndex(array, predicate, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} fromIndex The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseIndexOf(array, value, fromIndex) {\n      if (value !== value) {\n        return indexOfNaN(array, fromIndex);\n      }\n      var index = fromIndex - 1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight`, without support\n     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initAccum\n          ? (initAccum = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n  \n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n  \n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n  \n    /**\n     * The base implementation of `_.sum` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(array, iteratee) {\n      var result,\n          index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var current = iteratee(array[index]);\n        if (current !== undefined) {\n          result = result === undefined ? current : (result + current);\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.times` without support for iteratee shorthands\n     * or max array length checks.\n     *\n     * @private\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     */\n    function baseTimes(n, iteratee) {\n      var index = -1,\n          result = Array(n);\n  \n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n     * of key-value pairs for `object` corresponding to the property names of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the new array of key-value pairs.\n     */\n    function baseToPairs(object, props) {\n      return arrayMap(props, function(key) {\n        return [key, object[key]];\n      });\n    }\n  \n    /**\n     * The base implementation of `_.unary` without support for storing wrapper metadata.\n     *\n     * @private\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new function.\n     */\n    function baseUnary(func) {\n      return function(value) {\n        return func(value);\n      };\n    }\n  \n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      return arrayMap(props, function(key) {\n        return object[key];\n      });\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the first unmatched string symbol.\n     */\n    function charsStartIndex(strSymbols, chrSymbols) {\n      var index = -1,\n          length = strSymbols.length;\n  \n      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the last unmatched string symbol.\n     */\n    function charsEndIndex(strSymbols, chrSymbols) {\n      var index = strSymbols.length;\n  \n      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Checks if `value` is a global object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n     */\n    function checkGlobal(value) {\n      return (value && value.Object === Object) ? value : null;\n    }\n  \n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsNull = value === null,\n            valIsUndef = value === undefined,\n            valIsReflexive = value === value;\n  \n        var othIsNull = other === null,\n            othIsUndef = other === undefined,\n            othIsReflexive = other === other;\n  \n        if ((value > other && !othIsNull) || !valIsReflexive ||\n            (valIsNull && !othIsUndef && othIsReflexive) ||\n            (valIsUndef && othIsReflexive)) {\n          return 1;\n        }\n        if ((value < other && !valIsNull) || !othIsReflexive ||\n            (othIsNull && !valIsUndef && valIsReflexive) ||\n            (othIsUndef && valIsReflexive)) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n  \n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n  \n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n  \n    /**\n     * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n     *\n     * @private\n     * @param {string} letter The matched letter to deburr.\n     * @returns {string} Returns the deburred letter.\n     */\n    function deburrLetter(letter) {\n      return deburredLetters[letter];\n    }\n  \n    /**\n     * Used by `_.escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(chr) {\n      return htmlEscapes[chr];\n    }\n  \n    /**\n     * Used by `_.template` to escape characters for inclusion in compiled string literals.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeStringChar(chr) {\n      return '\\\\' + stringEscapes[chr];\n    }\n  \n    /**\n     * Gets the index at which the first occurrence of `NaN` is found in `array`.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {number} fromIndex The index to search from.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n     */\n    function indexOfNaN(array, fromIndex, fromRight) {\n      var length = array.length,\n          index = fromIndex + (fromRight ? 0 : -1);\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        var other = array[index];\n        if (other !== other) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * Checks if `value` is a host object in IE < 9.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n     */\n    function isHostObject(value) {\n      // Many host objects are `Object` objects that can coerce to strings\n      // despite having improperly defined `toString` methods.\n      var result = false;\n      if (value != null && typeof value.toString != 'function') {\n        try {\n          result = !!(value + '');\n        } catch (e) {}\n      }\n      return result;\n    }\n  \n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n  \n    /**\n     * Converts `iterator` to an array.\n     *\n     * @private\n     * @param {Object} iterator The iterator to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function iteratorToArray(iterator) {\n      var data,\n          result = [];\n  \n      while (!(data = iterator.next()).done) {\n        result.push(data.value);\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `map` to an array.\n     *\n     * @private\n     * @param {Object} map The map to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function mapToArray(map) {\n      var index = -1,\n          result = Array(map.size);\n  \n      map.forEach(function(value, key) {\n        result[++index] = [key, value];\n      });\n      return result;\n    }\n  \n    /**\n     * Replaces all `placeholder` elements in `array` with an internal placeholder\n     * and returns an array of their indexes.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {*} placeholder The placeholder to replace.\n     * @returns {Array} Returns the new array of placeholder indexes.\n     */\n    function replaceHolders(array, placeholder) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        if (array[index] === placeholder) {\n          array[index] = PLACEHOLDER;\n          result[++resIndex] = index;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `set` to an array.\n     *\n     * @private\n     * @param {Object} set The set to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function setToArray(set) {\n      var index = -1,\n          result = Array(set.size);\n  \n      set.forEach(function(value) {\n        result[++index] = value;\n      });\n      return result;\n    }\n  \n    /**\n     * Gets the number of symbols in `string`.\n     *\n     * @private\n     * @param {string} string The string to inspect.\n     * @returns {number} Returns the string size.\n     */\n    function stringSize(string) {\n      if (!(string && reHasComplexSymbol.test(string))) {\n        return string.length;\n      }\n      var result = reComplexSymbol.lastIndex = 0;\n      while (reComplexSymbol.test(string)) {\n        result++;\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `string` to an array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function stringToArray(string) {\n      return string.match(reComplexSymbol);\n    }\n  \n    /**\n     * Used by `_.unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} chr The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(chr) {\n      return htmlUnescapes[chr];\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Create a new pristine `lodash` function using the `context` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Util\n     * @param {Object} [context=root] The context object.\n     * @returns {Function} Returns a new `lodash` function.\n     * @example\n     *\n     * _.mixin({ 'foo': _.constant('foo') });\n     *\n     * var lodash = _.runInContext();\n     * lodash.mixin({ 'bar': lodash.constant('bar') });\n     *\n     * _.isFunction(_.foo);\n     * // => true\n     * _.isFunction(_.bar);\n     * // => false\n     *\n     * lodash.isFunction(lodash.foo);\n     * // => false\n     * lodash.isFunction(lodash.bar);\n     * // => true\n     *\n     * // Use `context` to mock `Date#getTime` use in `_.now`.\n     * var mock = _.runInContext({\n     *   'Date': function() {\n     *     return { 'getTime': getTimeMock };\n     *   }\n     * });\n     *\n     * // Create a suped-up `defer` in Node.js.\n     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n     */\n    function runInContext(context) {\n      context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;\n  \n      /** Built-in constructor references. */\n      var Date = context.Date,\n          Error = context.Error,\n          Math = context.Math,\n          RegExp = context.RegExp,\n          TypeError = context.TypeError;\n  \n      /** Used for built-in method references. */\n      var arrayProto = context.Array.prototype,\n          objectProto = context.Object.prototype;\n  \n      /** Used to resolve the decompiled source of functions. */\n      var funcToString = context.Function.prototype.toString;\n  \n      /** Used to check objects for own properties. */\n      var hasOwnProperty = objectProto.hasOwnProperty;\n  \n      /** Used to generate unique IDs. */\n      var idCounter = 0;\n  \n      /** Used to infer the `Object` constructor. */\n      var objectCtorString = funcToString.call(Object);\n  \n      /**\n       * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n       * of values.\n       */\n      var objectToString = objectProto.toString;\n  \n      /** Used to restore the original `_` reference in `_.noConflict`. */\n      var oldDash = root._;\n  \n      /** Used to detect if a method is native. */\n      var reIsNative = RegExp('^' +\n        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n      );\n  \n      /** Built-in value references. */\n      var Buffer = moduleExports ? context.Buffer : undefined,\n          Reflect = context.Reflect,\n          Symbol = context.Symbol,\n          Uint8Array = context.Uint8Array,\n          clearTimeout = context.clearTimeout,\n          enumerate = Reflect ? Reflect.enumerate : undefined,\n          getPrototypeOf = Object.getPrototypeOf,\n          getOwnPropertySymbols = Object.getOwnPropertySymbols,\n          iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,\n          objectCreate = Object.create,\n          propertyIsEnumerable = objectProto.propertyIsEnumerable,\n          setTimeout = context.setTimeout,\n          splice = arrayProto.splice;\n  \n      /* Built-in method references for those with the same name as other `lodash` methods. */\n      var nativeCeil = Math.ceil,\n          nativeFloor = Math.floor,\n          nativeIsFinite = context.isFinite,\n          nativeJoin = arrayProto.join,\n          nativeKeys = Object.keys,\n          nativeMax = Math.max,\n          nativeMin = Math.min,\n          nativeParseInt = context.parseInt,\n          nativeRandom = Math.random,\n          nativeReverse = arrayProto.reverse;\n  \n      /* Built-in method references that are verified to be native. */\n      var Map = getNative(context, 'Map'),\n          Set = getNative(context, 'Set'),\n          WeakMap = getNative(context, 'WeakMap'),\n          nativeCreate = getNative(Object, 'create');\n  \n      /** Used to store function metadata. */\n      var metaMap = WeakMap && new WeakMap;\n  \n      /** Used to detect maps, sets, and weakmaps. */\n      var mapCtorString = Map ? funcToString.call(Map) : '',\n          setCtorString = Set ? funcToString.call(Set) : '',\n          weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';\n  \n      /** Used to convert symbols to primitives and strings. */\n      var symbolProto = Symbol ? Symbol.prototype : undefined,\n          symbolValueOf = Symbol ? symbolProto.valueOf : undefined,\n          symbolToString = Symbol ? symbolProto.toString : undefined;\n  \n      /** Used to lookup unminified function names. */\n      var realNames = {};\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object which wraps `value` to enable implicit method\n       * chaining. Methods that operate on and return arrays, collections, and\n       * functions can be chained together. Methods that retrieve a single value or\n       * may return a primitive value will automatically end the chain sequence and\n       * return the unwrapped value. Otherwise, the value must be unwrapped with\n       * `_#value`.\n       *\n       * Explicit chaining, which must be unwrapped with `_#value` in all cases,\n       * may be enabled using `_.chain`.\n       *\n       * The execution of chained methods is lazy, that is, it's deferred until\n       * `_#value` is implicitly or explicitly called.\n       *\n       * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n       * fusion is an optimization to merge iteratee calls; this avoids the creation\n       * of intermediate arrays and can greatly reduce the number of iteratee executions.\n       * Sections of a chain sequence qualify for shortcut fusion if the section is\n       * applied to an array of at least two hundred elements and any iteratees\n       * accept only one argument. The heuristic for whether a section qualifies\n       * for shortcut fusion is subject to change.\n       *\n       * Chaining is supported in custom builds as long as the `_#value` method is\n       * directly or indirectly included in the build.\n       *\n       * In addition to lodash methods, wrappers have `Array` and `String` methods.\n       *\n       * The wrapper `Array` methods are:\n       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n       *\n       * The wrapper `String` methods are:\n       * `replace` and `split`\n       *\n       * The wrapper methods that support shortcut fusion are:\n       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n       *\n       * The chainable wrapper methods are:\n       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,\n       * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,\n       * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flattenDepth`,\n       * `flip`, `flow`, `flowRight`, `fromPairs`, `functions`, `functionsIn`,\n       * `groupBy`, `initial`, `intersection`, `intersectionBy`, `intersectionWith`,\n       * `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`,\n       * `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`, `memoize`,\n       * `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`, `nthArg`,\n       * `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`, `overEvery`,\n       * `overSome`, `partial`, `partialRight`, `partition`, `pick`, `pickBy`, `plant`,\n       * `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAt`, `push`,\n       * `range`, `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`,\n       * `sampleSize`, `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`,\n       * `splice`, `spread`, `tail`, `take`, `takeRight`, `takeRightWhile`,\n       * `takeWhile`, `tap`, `throttle`, `thru`, `toArray`, `toPairs`, `toPairsIn`,\n       * `toPath`, `toPlainObject`, `transform`, `unary`, `union`, `unionBy`,\n       * `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`, `unshift`, `unzip`,\n       * `unzipWith`, `values`, `valuesIn`, `without`, `wrap`, `xor`, `xorBy`,\n       * `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, and `zipWith`\n       *\n       * The wrapper methods that are **not** chainable by default are:\n       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,\n       * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n       * `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`, `forIn`,\n       * `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`,\n       * `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`,\n       * `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,\n       * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,\n       * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,\n       * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,\n       * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,\n       * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,\n       * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,\n       * `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`,\n       * `now`, `pad`, `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`,\n       * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `sample`,\n       * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`,\n       * `sortedLastIndex`, `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`,\n       * `sum`, `sumBy`, `template`, `times`, `toLower`, `toInteger`, `toLength`,\n       * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,\n       * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,\n       * `value`, and `words`\n       *\n       * @name _\n       * @constructor\n       * @category Seq\n       * @param {*} value The value to wrap in a `lodash` instance.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2, 3]);\n       *\n       * // Returns an unwrapped value.\n       * wrapped.reduce(_.add);\n       * // => 6\n       *\n       * // Returns a wrapped value.\n       * var squares = wrapped.map(square);\n       *\n       * _.isArray(squares);\n       * // => false\n       *\n       * _.isArray(squares.value());\n       * // => true\n       */\n      function lodash(value) {\n        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n          if (value instanceof LodashWrapper) {\n            return value;\n          }\n          if (hasOwnProperty.call(value, '__wrapped__')) {\n            return wrapperClone(value);\n          }\n        }\n        return new LodashWrapper(value);\n      }\n  \n      /**\n       * The function whose prototype all chaining wrappers inherit from.\n       *\n       * @private\n       */\n      function baseLodash() {\n        // No operation performed.\n      }\n  \n      /**\n       * The base constructor for creating `lodash` wrapper objects.\n       *\n       * @private\n       * @param {*} value The value to wrap.\n       * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n       */\n      function LodashWrapper(value, chainAll) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__chain__ = !!chainAll;\n        this.__index__ = 0;\n        this.__values__ = undefined;\n      }\n  \n      /**\n       * By default, the template delimiters used by lodash are like those in\n       * embedded Ruby (ERB). Change the following template settings to use\n       * alternative delimiters.\n       *\n       * @static\n       * @memberOf _\n       * @type {Object}\n       */\n      lodash.templateSettings = {\n  \n        /**\n         * Used to detect `data` property values to be HTML-escaped.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'escape': reEscape,\n  \n        /**\n         * Used to detect code to be evaluated.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'evaluate': reEvaluate,\n  \n        /**\n         * Used to detect `data` property values to inject.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'interpolate': reInterpolate,\n  \n        /**\n         * Used to reference the data object in the template text.\n         *\n         * @memberOf _.templateSettings\n         * @type {string}\n         */\n        'variable': '',\n  \n        /**\n         * Used to import variables into the compiled template.\n         *\n         * @memberOf _.templateSettings\n         * @type {Object}\n         */\n        'imports': {\n  \n          /**\n           * A reference to the `lodash` function.\n           *\n           * @memberOf _.templateSettings.imports\n           * @type {Function}\n           */\n          '_': lodash\n        }\n      };\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n       *\n       * @private\n       * @constructor\n       * @param {*} value The value to wrap.\n       */\n      function LazyWrapper(value) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__dir__ = 1;\n        this.__filtered__ = false;\n        this.__iteratees__ = [];\n        this.__takeCount__ = MAX_ARRAY_LENGTH;\n        this.__views__ = [];\n      }\n  \n      /**\n       * Creates a clone of the lazy wrapper object.\n       *\n       * @private\n       * @name clone\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the cloned `LazyWrapper` object.\n       */\n      function lazyClone() {\n        var result = new LazyWrapper(this.__wrapped__);\n        result.__actions__ = copyArray(this.__actions__);\n        result.__dir__ = this.__dir__;\n        result.__filtered__ = this.__filtered__;\n        result.__iteratees__ = copyArray(this.__iteratees__);\n        result.__takeCount__ = this.__takeCount__;\n        result.__views__ = copyArray(this.__views__);\n        return result;\n      }\n  \n      /**\n       * Reverses the direction of lazy iteration.\n       *\n       * @private\n       * @name reverse\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the new reversed `LazyWrapper` object.\n       */\n      function lazyReverse() {\n        if (this.__filtered__) {\n          var result = new LazyWrapper(this);\n          result.__dir__ = -1;\n          result.__filtered__ = true;\n        } else {\n          result = this.clone();\n          result.__dir__ *= -1;\n        }\n        return result;\n      }\n  \n      /**\n       * Extracts the unwrapped value from its lazy wrapper.\n       *\n       * @private\n       * @name value\n       * @memberOf LazyWrapper\n       * @returns {*} Returns the unwrapped value.\n       */\n      function lazyValue() {\n        var array = this.__wrapped__.value(),\n            dir = this.__dir__,\n            isArr = isArray(array),\n            isRight = dir < 0,\n            arrLength = isArr ? array.length : 0,\n            view = getView(0, arrLength, this.__views__),\n            start = view.start,\n            end = view.end,\n            length = end - start,\n            index = isRight ? end : (start - 1),\n            iteratees = this.__iteratees__,\n            iterLength = iteratees.length,\n            resIndex = 0,\n            takeCount = nativeMin(length, this.__takeCount__);\n  \n        if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n            (arrLength == length && takeCount == length)) {\n          return baseWrapperValue(array, this.__actions__);\n        }\n        var result = [];\n  \n        outer:\n        while (length-- && resIndex < takeCount) {\n          index += dir;\n  \n          var iterIndex = -1,\n              value = array[index];\n  \n          while (++iterIndex < iterLength) {\n            var data = iteratees[iterIndex],\n                iteratee = data.iteratee,\n                type = data.type,\n                computed = iteratee(value);\n  \n            if (type == LAZY_MAP_FLAG) {\n              value = computed;\n            } else if (!computed) {\n              if (type == LAZY_FILTER_FLAG) {\n                continue outer;\n              } else {\n                break outer;\n              }\n            }\n          }\n          result[resIndex++] = value;\n        }\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an hash object.\n       *\n       * @private\n       * @constructor\n       * @returns {Object} Returns the new hash object.\n       */\n      function Hash() {}\n  \n      /**\n       * Removes `key` and its value from the hash.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function hashDelete(hash, key) {\n        return hashHas(hash, key) && delete hash[key];\n      }\n  \n      /**\n       * Gets the hash value for `key`.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function hashGet(hash, key) {\n        if (nativeCreate) {\n          var result = hash[key];\n          return result === HASH_UNDEFINED ? undefined : result;\n        }\n        return hasOwnProperty.call(hash, key) ? hash[key] : undefined;\n      }\n  \n      /**\n       * Checks if a hash value for `key` exists.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function hashHas(hash, key) {\n        return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);\n      }\n  \n      /**\n       * Sets the hash `key` to `value`.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function hashSet(hash, key, value) {\n        hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a map cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function MapCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the map.\n       *\n       * @private\n       * @name clear\n       * @memberOf MapCache\n       */\n      function mapClear() {\n        this.__data__ = {\n          'hash': new Hash,\n          'map': Map ? new Map : [],\n          'string': new Hash\n        };\n      }\n  \n      /**\n       * Removes `key` and its value from the map.\n       *\n       * @private\n       * @name delete\n       * @memberOf MapCache\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function mapDelete(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashDelete(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map['delete'](key) : assocDelete(data.map, key);\n      }\n  \n      /**\n       * Gets the map value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf MapCache\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function mapGet(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashGet(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.get(key) : assocGet(data.map, key);\n      }\n  \n      /**\n       * Checks if a map value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf MapCache\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function mapHas(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashHas(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.has(key) : assocHas(data.map, key);\n      }\n  \n      /**\n       * Sets the map `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf MapCache\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the map cache object.\n       */\n      function mapSet(key, value) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n        } else if (Map) {\n          data.map.set(key, value);\n        } else {\n          assocSet(data.map, key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       *\n       * Creates a set cache object to store unique values.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function SetCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.__data__ = new MapCache;\n        while (++index < length) {\n          this.push(values[index]);\n        }\n      }\n  \n      /**\n       * Checks if `value` is in `cache`.\n       *\n       * @private\n       * @param {Object} cache The set cache to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns `true` if `value` is found, else `false`.\n       */\n      function cacheHas(cache, value) {\n        var map = cache.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          return hash[value] === HASH_UNDEFINED;\n        }\n        return map.has(value);\n      }\n  \n      /**\n       * Adds `value` to the set cache.\n       *\n       * @private\n       * @name push\n       * @memberOf SetCache\n       * @param {*} value The value to cache.\n       */\n      function cachePush(value) {\n        var map = this.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          hash[value] = HASH_UNDEFINED;\n        }\n        else {\n          map.set(value, HASH_UNDEFINED);\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a stack cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function Stack(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the stack.\n       *\n       * @private\n       * @name clear\n       * @memberOf Stack\n       */\n      function stackClear() {\n        this.__data__ = { 'array': [], 'map': null };\n      }\n  \n      /**\n       * Removes `key` and its value from the stack.\n       *\n       * @private\n       * @name delete\n       * @memberOf Stack\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function stackDelete(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocDelete(array, key) : data.map['delete'](key);\n      }\n  \n      /**\n       * Gets the stack value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf Stack\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function stackGet(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocGet(array, key) : data.map.get(key);\n      }\n  \n      /**\n       * Checks if a stack value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf Stack\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function stackHas(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocHas(array, key) : data.map.has(key);\n      }\n  \n      /**\n       * Sets the stack `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf Stack\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the stack cache object.\n       */\n      function stackSet(key, value) {\n        var data = this.__data__,\n            array = data.array;\n  \n        if (array) {\n          if (array.length < (LARGE_ARRAY_SIZE - 1)) {\n            assocSet(array, key, value);\n          } else {\n            data.array = null;\n            data.map = new MapCache(array);\n          }\n        }\n        var map = data.map;\n        if (map) {\n          map.set(key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Removes `key` and its value from the associative array.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function assocDelete(array, key) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          return false;\n        }\n        var lastIndex = array.length - 1;\n        if (index == lastIndex) {\n          array.pop();\n        } else {\n          splice.call(array, index, 1);\n        }\n        return true;\n      }\n  \n      /**\n       * Gets the associative array value for `key`.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function assocGet(array, key) {\n        var index = assocIndexOf(array, key);\n        return index < 0 ? undefined : array[index][1];\n      }\n  \n      /**\n       * Checks if an associative array value for `key` exists.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function assocHas(array, key) {\n        return assocIndexOf(array, key) > -1;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `key` is found in `array`\n       * of key-value pairs.\n       *\n       * @private\n       * @param {Array} array The array to search.\n       * @param {*} key The key to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       */\n      function assocIndexOf(array, key) {\n        var length = array.length;\n        while (length--) {\n          if (eq(array[length][0], key)) {\n            return length;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Sets the associative array `key` to `value`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function assocSet(array, key, value) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          array.push([key, value]);\n        } else {\n          array[index][1] = value;\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Used by `_.defaults` to customize its `_.assignIn` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to assign.\n       * @param {Object} object The parent object of `objValue`.\n       * @returns {*} Returns the value to assign.\n       */\n      function assignInDefaults(objValue, srcValue, key, object) {\n        if (objValue === undefined ||\n            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n          return srcValue;\n        }\n        return objValue;\n      }\n  \n      /**\n       * This function is like `assignValue` except that it doesn't assign `undefined` values.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignMergeValue(object, key, value) {\n        if ((value !== undefined && !eq(object[key], value)) ||\n            (typeof key == 'number' && value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Assigns `value` to `key` of `object` if the existing value is not equivalent\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignValue(object, key, value) {\n        var objValue = object[key];\n        if ((!eq(objValue, value) ||\n              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||\n            (value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Aggregates elements of `collection` on `accumulator` with keys transformed\n       * by `iteratee` and values set by `setter`.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform keys.\n       * @param {Object} accumulator The initial aggregated object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseAggregator(collection, setter, iteratee, accumulator) {\n        baseEach(collection, function(value, key, collection) {\n          setter(accumulator, value, iteratee(value), collection);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.assign` without support for multiple sources\n       * or `customizer` functions.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @returns {Object} Returns `object`.\n       */\n      function baseAssign(object, source) {\n        return object && copyObject(source, keys(source), object);\n      }\n  \n      /**\n       * The base implementation of `_.at` without support for individual paths.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {string[]} paths The property paths of elements to pick.\n       * @returns {Array} Returns the new array of picked elements.\n       */\n      function baseAt(object, paths) {\n        var index = -1,\n            isNil = object == null,\n            length = paths.length,\n            result = Array(length);\n  \n        while (++index < length) {\n          result[index] = isNil ? undefined : get(object, paths[index]);\n        }\n        return result;\n      }\n  \n      /**\n       * Casts `value` to an empty array if it's not an array like object.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastArrayLikeObject(value) {\n        return isArrayLikeObject(value) ? value : [];\n      }\n  \n      /**\n       * Casts `value` to `identity` if it's not a function.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastFunction(value) {\n        return typeof value == 'function' ? value : identity;\n      }\n  \n      /**\n       * Casts `value` to a path array if it's not one.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast property path array.\n       */\n      function baseCastPath(value) {\n        return isArray(value) ? value : stringToPath(value);\n      }\n  \n      /**\n       * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       */\n      function baseClamp(number, lower, upper) {\n        if (number === number) {\n          if (upper !== undefined) {\n            number = number <= upper ? number : upper;\n          }\n          if (lower !== undefined) {\n            number = number >= lower ? number : lower;\n          }\n        }\n        return number;\n      }\n  \n      /**\n       * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n       * traversed objects.\n       *\n       * @private\n       * @param {*} value The value to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @param {string} [key] The key of `value`.\n       * @param {Object} [object] The parent object of `value`.\n       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n       * @returns {*} Returns the cloned value.\n       */\n      function baseClone(value, isDeep, customizer, key, object, stack) {\n        var result;\n        if (customizer) {\n          result = object ? customizer(value, key, object, stack) : customizer(value);\n        }\n        if (result !== undefined) {\n          return result;\n        }\n        if (!isObject(value)) {\n          return value;\n        }\n        var isArr = isArray(value);\n        if (isArr) {\n          result = initCloneArray(value);\n          if (!isDeep) {\n            return copyArray(value, result);\n          }\n        } else {\n          var tag = getTag(value),\n              isFunc = tag == funcTag || tag == genTag;\n  \n          if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n          }\n          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n              return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n              return copySymbols(value, baseAssign(result, value));\n            }\n          } else {\n            if (!cloneableTags[tag]) {\n              return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n          }\n        }\n        // Check for circular references and return its corresponding clone.\n        stack || (stack = new Stack);\n        var stacked = stack.get(value);\n        if (stacked) {\n          return stacked;\n        }\n        stack.set(value, result);\n  \n        // Recursively populate clone (susceptible to call stack limits).\n        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n          assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));\n        });\n        return isArr ? result : copySymbols(value, result);\n      }\n  \n      /**\n       * The base implementation of `_.conforms` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       */\n      function baseConforms(source) {\n        var props = keys(source),\n            length = props.length;\n  \n        return function(object) {\n          if (object == null) {\n            return !length;\n          }\n          var index = length;\n          while (index--) {\n            var key = props[index],\n                predicate = source[key],\n                value = object[key];\n  \n            if ((value === undefined && !(key in Object(object))) || !predicate(value)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n  \n      /**\n       * The base implementation of `_.create` without support for assigning\n       * properties to the created object.\n       *\n       * @private\n       * @param {Object} prototype The object to inherit from.\n       * @returns {Object} Returns the new object.\n       */\n      function baseCreate(proto) {\n        return isObject(proto) ? objectCreate(proto) : {};\n      }\n  \n      /**\n       * The base implementation of `_.delay` and `_.defer` which accepts an array\n       * of `func` arguments.\n       *\n       * @private\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {Object} args The arguments to provide to `func`.\n       * @returns {number} Returns the timer id.\n       */\n      function baseDelay(func, wait, args) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return setTimeout(function() { func.apply(undefined, args); }, wait);\n      }\n  \n      /**\n       * The base implementation of methods like `_.difference` without support for\n       * excluding multiple arrays or iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Array} values The values to exclude.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       */\n      function baseDifference(array, values, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            isCommon = true,\n            length = array.length,\n            result = [],\n            valuesLength = values.length;\n  \n        if (!length) {\n          return result;\n        }\n        if (iteratee) {\n          values = arrayMap(values, baseUnary(iteratee));\n        }\n        if (comparator) {\n          includes = arrayIncludesWith;\n          isCommon = false;\n        }\n        else if (values.length >= LARGE_ARRAY_SIZE) {\n          includes = cacheHas;\n          isCommon = false;\n          values = new SetCache(values);\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var valuesIndex = valuesLength;\n            while (valuesIndex--) {\n              if (values[valuesIndex] === computed) {\n                continue outer;\n              }\n            }\n            result.push(value);\n          }\n          else if (!includes(values, computed, comparator)) {\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.forEach` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEach = createBaseEach(baseForOwn);\n  \n      /**\n       * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEachRight = createBaseEach(baseForOwnRight, true);\n  \n      /**\n       * The base implementation of `_.every` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`\n       */\n      function baseEvery(collection, predicate) {\n        var result = true;\n        baseEach(collection, function(value, index, collection) {\n          result = !!predicate(value, index, collection);\n          return result;\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.fill` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       */\n      function baseFill(array, value, start, end) {\n        var length = array.length;\n  \n        start = toInteger(start);\n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = (end === undefined || end > length) ? length : toInteger(end);\n        if (end < 0) {\n          end += length;\n        }\n        end = start > end ? 0 : toLength(end);\n        while (start < end) {\n          array[start++] = value;\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.filter` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       */\n      function baseFilter(collection, predicate) {\n        var result = [];\n        baseEach(collection, function(value, index, collection) {\n          if (predicate(value, index, collection)) {\n            result.push(value);\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.flatten` with support for restricting flattening.\n       *\n       * @private\n       * @param {Array} array The array to flatten.\n       * @param {number} depth The maximum recursion depth.\n       * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n       * @param {Array} [result=[]] The initial result value.\n       * @returns {Array} Returns the new flattened array.\n       */\n      function baseFlatten(array, depth, isStrict, result) {\n        result || (result = []);\n  \n        var index = -1,\n            length = array.length;\n  \n        while (++index < length) {\n          var value = array[index];\n          if (depth > 0 && isArrayLikeObject(value) &&\n              (isStrict || isArray(value) || isArguments(value))) {\n            if (depth > 1) {\n              // Recursively flatten arrays (susceptible to call stack limits).\n              baseFlatten(value, depth - 1, isStrict, result);\n            } else {\n              arrayPush(result, value);\n            }\n          } else if (!isStrict) {\n            result[result.length] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `baseForIn` and `baseForOwn` which iterates\n       * over `object` properties returned by `keysFunc` invoking `iteratee` for\n       * each property. Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseFor = createBaseFor();\n  \n      /**\n       * This function is like `baseFor` except that it iterates over properties\n       * in the opposite order.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseForRight = createBaseFor(true);\n  \n      /**\n       * The base implementation of `_.forIn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForIn(object, iteratee) {\n        return object == null ? object : baseFor(object, iteratee, keysIn);\n      }\n  \n      /**\n       * The base implementation of `_.forOwn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwn(object, iteratee) {\n        return object && baseFor(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwnRight(object, iteratee) {\n        return object && baseForRight(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.functions` which creates an array of\n       * `object` function property names filtered from `props`.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Array} props The property names to filter.\n       * @returns {Array} Returns the new array of filtered property names.\n       */\n      function baseFunctions(object, props) {\n        return arrayFilter(props, function(key) {\n          return isFunction(object[key]);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.get` without support for default values.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseGet(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = 0,\n            length = path.length;\n  \n        while (object != null && index < length) {\n          object = object[path[index++]];\n        }\n        return (index && index == length) ? object : undefined;\n      }\n  \n      /**\n       * The base implementation of `_.has` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHas(object, key) {\n        // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n        // that are composed entirely of index properties, return `false` for\n        // `hasOwnProperty` checks of them.\n        return hasOwnProperty.call(object, key) ||\n          (typeof object == 'object' && key in object && getPrototypeOf(object) === null);\n      }\n  \n      /**\n       * The base implementation of `_.hasIn` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHasIn(object, key) {\n        return key in Object(object);\n      }\n  \n      /**\n       * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to check.\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       */\n      function baseInRange(number, start, end) {\n        return number >= nativeMin(start, end) && number < nativeMax(start, end);\n      }\n  \n      /**\n       * The base implementation of methods like `_.intersection`, without support\n       * for iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       */\n      function baseIntersection(arrays, iteratee, comparator) {\n        var includes = comparator ? arrayIncludesWith : arrayIncludes,\n            othLength = arrays.length,\n            othIndex = othLength,\n            caches = Array(othLength),\n            result = [];\n  \n        while (othIndex--) {\n          var array = arrays[othIndex];\n          if (othIndex && iteratee) {\n            array = arrayMap(array, baseUnary(iteratee));\n          }\n          caches[othIndex] = !comparator && (iteratee || array.length >= 120)\n            ? new SetCache(othIndex && array)\n            : undefined;\n        }\n        array = arrays[0];\n  \n        var index = -1,\n            length = array.length,\n            seen = caches[0];\n  \n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (!(seen\n                ? cacheHas(seen, computed)\n                : includes(result, computed, comparator)\n              )) {\n            var othIndex = othLength;\n            while (--othIndex) {\n              var cache = caches[othIndex];\n              if (!(cache\n                    ? cacheHas(cache, computed)\n                    : includes(arrays[othIndex], computed, comparator))\n                  ) {\n                continue outer;\n              }\n            }\n            if (seen) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.invert` and `_.invertBy` which inverts\n       * `object` with values transformed by `iteratee` and set by `setter`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform values.\n       * @param {Object} accumulator The initial inverted object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseInverter(object, setter, iteratee, accumulator) {\n        baseForOwn(object, function(value, key, object) {\n          setter(accumulator, iteratee(value), key, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.invoke` without support for individual\n       * method arguments.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {Array} args The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       */\n      function baseInvoke(object, path, args) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          path = last(path);\n        }\n        var func = object == null ? object : object[path];\n        return func == null ? undefined : apply(func, object, args);\n      }\n  \n      /**\n       * The base implementation of `_.isEqual` which supports partial comparisons\n       * and tracks traversed objects.\n       *\n       * @private\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {boolean} [bitmask] The bitmask of comparison flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - Unordered comparison\n       *     2 - Partial comparison\n       * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       */\n      function baseIsEqual(value, other, customizer, bitmask, stack) {\n        if (value === other) {\n          return true;\n        }\n        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n          return value !== value && other !== other;\n        }\n        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqual` for arrays and objects which performs\n       * deep comparisons and tracks traversed objects enabling objects with circular\n       * references to be compared.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n        var objIsArr = isArray(object),\n            othIsArr = isArray(other),\n            objTag = arrayTag,\n            othTag = arrayTag;\n  \n        if (!objIsArr) {\n          objTag = getTag(object);\n          if (objTag == argsTag) {\n            objTag = objectTag;\n          } else if (objTag != objectTag) {\n            objIsArr = isTypedArray(object);\n          }\n        }\n        if (!othIsArr) {\n          othTag = getTag(other);\n          if (othTag == argsTag) {\n            othTag = objectTag;\n          } else if (othTag != objectTag) {\n            othIsArr = isTypedArray(other);\n          }\n        }\n        var objIsObj = objTag == objectTag && !isHostObject(object),\n            othIsObj = othTag == objectTag && !isHostObject(other),\n            isSameTag = objTag == othTag;\n  \n        if (isSameTag && !(objIsArr || objIsObj)) {\n          return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);\n        }\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n        if (!isPartial) {\n          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n  \n          if (objIsWrapped || othIsWrapped) {\n            return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);\n          }\n        }\n        if (!isSameTag) {\n          return false;\n        }\n        stack || (stack = new Stack);\n        return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);\n      }\n  \n      /**\n       * The base implementation of `_.isMatch` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Array} matchData The property names, values, and compare flags to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       */\n      function baseIsMatch(object, source, matchData, customizer) {\n        var index = matchData.length,\n            length = index,\n            noCustomizer = !customizer;\n  \n        if (object == null) {\n          return !length;\n        }\n        object = Object(object);\n        while (index--) {\n          var data = matchData[index];\n          if ((noCustomizer && data[2])\n                ? data[1] !== object[data[0]]\n                : !(data[0] in object)\n              ) {\n            return false;\n          }\n        }\n        while (++index < length) {\n          data = matchData[index];\n          var key = data[0],\n              objValue = object[key],\n              srcValue = data[1];\n  \n          if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) {\n              return false;\n            }\n          } else {\n            var stack = new Stack,\n                result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;\n  \n            if (!(result === undefined\n                  ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                  : result\n                )) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * The base implementation of `_.iteratee`.\n       *\n       * @private\n       * @param {*} [value=_.identity] The value to convert to an iteratee.\n       * @returns {Function} Returns the iteratee.\n       */\n      function baseIteratee(value) {\n        var type = typeof value;\n        if (type == 'function') {\n          return value;\n        }\n        if (value == null) {\n          return identity;\n        }\n        if (type == 'object') {\n          return isArray(value)\n            ? baseMatchesProperty(value[0], value[1])\n            : baseMatches(value);\n        }\n        return property(value);\n      }\n  \n      /**\n       * The base implementation of `_.keys` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeys(object) {\n        return nativeKeys(Object(object));\n      }\n  \n      /**\n       * The base implementation of `_.keysIn` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeysIn(object) {\n        object = object == null ? object : Object(object);\n  \n        var result = [];\n        for (var key in object) {\n          result.push(key);\n        }\n        return result;\n      }\n  \n      // Fallback for IE < 9 with es6-shim.\n      if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n        baseKeysIn = function(object) {\n          return iteratorToArray(enumerate(object));\n        };\n      }\n  \n      /**\n       * The base implementation of `_.map` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       */\n      function baseMap(collection, iteratee) {\n        var index = -1,\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value, key, collection) {\n          result[++index] = iteratee(value, key, collection);\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.matches` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatches(source) {\n        var matchData = getMatchData(source);\n        if (matchData.length == 1 && matchData[0][2]) {\n          var key = matchData[0][0],\n              value = matchData[0][1];\n  \n          return function(object) {\n            if (object == null) {\n              return false;\n            }\n            return object[key] === value &&\n              (value !== undefined || (key in Object(object)));\n          };\n        }\n        return function(object) {\n          return object === source || baseIsMatch(object, source, matchData);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n       *\n       * @private\n       * @param {string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatchesProperty(path, srcValue) {\n        return function(object) {\n          var objValue = get(object, path);\n          return (objValue === undefined && objValue === srcValue)\n            ? hasIn(object, path)\n            : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.merge` without support for multiple sources.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} [customizer] The function to customize merged values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMerge(object, source, srcIndex, customizer, stack) {\n        if (object === source) {\n          return;\n        }\n        var props = (isArray(source) || isTypedArray(source))\n          ? undefined\n          : keysIn(source);\n  \n        arrayEach(props || source, function(srcValue, key) {\n          if (props) {\n            key = srcValue;\n            srcValue = source[key];\n          }\n          if (isObject(srcValue)) {\n            stack || (stack = new Stack);\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n          }\n          else {\n            var newValue = customizer\n              ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n              : undefined;\n  \n            if (newValue === undefined) {\n              newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n          }\n        });\n      }\n  \n      /**\n       * A specialized version of `baseMerge` for arrays and objects which performs\n       * deep merges and tracks traversed objects enabling objects with circular\n       * references to be merged.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {string} key The key of the value to merge.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} mergeFunc The function to merge values.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n        var objValue = object[key],\n            srcValue = source[key],\n            stacked = stack.get(srcValue);\n  \n        if (stacked) {\n          assignMergeValue(object, key, stacked);\n          return;\n        }\n        var newValue = customizer\n          ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n          : undefined;\n  \n        var isCommon = newValue === undefined;\n  \n        if (isCommon) {\n          newValue = srcValue;\n          if (isArray(srcValue) || isTypedArray(srcValue)) {\n            if (isArray(objValue)) {\n              newValue = objValue;\n            }\n            else if (isArrayLikeObject(objValue)) {\n              newValue = copyArray(objValue);\n            }\n            else {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n          }\n          else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            if (isArguments(objValue)) {\n              newValue = toPlainObject(objValue);\n            }\n            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n            else {\n              newValue = objValue;\n            }\n          }\n          else {\n            isCommon = false;\n          }\n        }\n        stack.set(srcValue, newValue);\n  \n        if (isCommon) {\n          // Recursively merge objects and arrays (susceptible to call stack limits).\n          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        }\n        assignMergeValue(object, key, newValue);\n      }\n  \n      /**\n       * The base implementation of `_.orderBy` without param guards.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n       * @param {string[]} orders The sort orders of `iteratees`.\n       * @returns {Array} Returns the new sorted array.\n       */\n      function baseOrderBy(collection, iteratees, orders) {\n        var index = -1,\n            toIteratee = getIteratee();\n  \n        iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {\n          return toIteratee(iteratee);\n        });\n  \n        var result = baseMap(collection, function(value, key, collection) {\n          var criteria = arrayMap(iteratees, function(iteratee) {\n            return iteratee(value);\n          });\n          return { 'criteria': criteria, 'index': ++index, 'value': value };\n        });\n  \n        return baseSortBy(result, function(object, other) {\n          return compareMultiple(object, other, orders);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.pick` without support for individual\n       * property names.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {string[]} props The property names to pick.\n       * @returns {Object} Returns the new object.\n       */\n      function basePick(object, props) {\n        object = Object(object);\n        return arrayReduce(props, function(result, key) {\n          if (key in object) {\n            result[key] = object[key];\n          }\n          return result;\n        }, {});\n      }\n  \n      /**\n       * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {Function} predicate The function invoked per property.\n       * @returns {Object} Returns the new object.\n       */\n      function basePickBy(object, predicate) {\n        var result = {};\n        baseForIn(object, function(value, key) {\n          if (predicate(value, key)) {\n            result[key] = value;\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.property` without support for deep paths.\n       *\n       * @private\n       * @param {string} key The key of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function baseProperty(key) {\n        return function(object) {\n          return object == null ? undefined : object[key];\n        };\n      }\n  \n      /**\n       * A specialized version of `baseProperty` which supports deep paths.\n       *\n       * @private\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function basePropertyDeep(path) {\n        return function(object) {\n          return baseGet(object, path);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.pullAll`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAll(array, values) {\n        return basePullAllBy(array, values);\n      }\n  \n      /**\n       * The base implementation of `_.pullAllBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAllBy(array, values, iteratee) {\n        var index = -1,\n            length = values.length,\n            seen = array;\n  \n        if (iteratee) {\n          seen = arrayMap(array, function(value) { return iteratee(value); });\n        }\n        while (++index < length) {\n          var fromIndex = 0,\n              value = values[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {\n            if (seen !== array) {\n              splice.call(seen, fromIndex, 1);\n            }\n            splice.call(array, fromIndex, 1);\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.pullAt` without support for individual\n       * indexes or capturing the removed elements.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {number[]} indexes The indexes of elements to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAt(array, indexes) {\n        var length = array ? indexes.length : 0,\n            lastIndex = length - 1;\n  \n        while (length--) {\n          var index = indexes[length];\n          if (lastIndex == length || index != previous) {\n            var previous = index;\n            if (isIndex(index)) {\n              splice.call(array, index, 1);\n            }\n            else if (!isKey(index, array)) {\n              var path = baseCastPath(index),\n                  object = parent(array, path);\n  \n              if (object != null) {\n                delete object[last(path)];\n              }\n            }\n            else {\n              delete array[index];\n            }\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.random` without support for returning\n       * floating-point numbers.\n       *\n       * @private\n       * @param {number} lower The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the random number.\n       */\n      function baseRandom(lower, upper) {\n        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n      }\n  \n      /**\n       * The base implementation of `_.range` and `_.rangeRight` which doesn't\n       * coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} step The value to increment or decrement by.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the new array of numbers.\n       */\n      function baseRange(start, end, step, fromRight) {\n        var index = -1,\n            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n            result = Array(length);\n  \n        while (length--) {\n          result[fromRight ? length : ++index] = start;\n          start += step;\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.set`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize path creation.\n       * @returns {Object} Returns `object`.\n       */\n      function baseSet(object, path, value, customizer) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = -1,\n            length = path.length,\n            lastIndex = length - 1,\n            nested = object;\n  \n        while (nested != null && ++index < length) {\n          var key = path[index];\n          if (isObject(nested)) {\n            var newValue = value;\n            if (index != lastIndex) {\n              var objValue = nested[key];\n              newValue = customizer ? customizer(objValue, key, nested) : undefined;\n              if (newValue === undefined) {\n                newValue = objValue == null\n                  ? (isIndex(path[index + 1]) ? [] : {})\n                  : objValue;\n              }\n            }\n            assignValue(nested, key, newValue);\n          }\n          nested = nested[key];\n        }\n        return object;\n      }\n  \n      /**\n       * The base implementation of `setData` without support for hot loop detection.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var baseSetData = !metaMap ? identity : function(func, data) {\n        metaMap.set(func, data);\n        return func;\n      };\n  \n      /**\n       * The base implementation of `_.slice` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseSlice(array, start, end) {\n        var index = -1,\n            length = array.length;\n  \n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = end > length ? length : end;\n        if (end < 0) {\n          end += length;\n        }\n        length = start > end ? 0 : ((end - start) >>> 0);\n        start >>>= 0;\n  \n        var result = Array(length);\n        while (++index < length) {\n          result[index] = array[index + start];\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.some` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       */\n      function baseSome(collection, predicate) {\n        var result;\n  \n        baseEach(collection, function(value, index, collection) {\n          result = predicate(value, index, collection);\n          return !result;\n        });\n        return !!result;\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n       * performs a binary search of `array` to determine the index at which `value`\n       * should be inserted into `array` in order to maintain its sort order.\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted\n       *  into `array`.\n       */\n      function baseSortedIndex(array, value, retHighest) {\n        var low = 0,\n            high = array ? array.length : low;\n  \n        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n          while (low < high) {\n            var mid = (low + high) >>> 1,\n                computed = array[mid];\n  \n            if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n              low = mid + 1;\n            } else {\n              high = mid;\n            }\n          }\n          return high;\n        }\n        return baseSortedIndexBy(array, value, identity, retHighest);\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n       * which invokes `iteratee` for `value` and each element of `array` to compute\n       * their sort ranking. The iteratee is invoked with one argument; (value).\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function} iteratee The iteratee invoked per element.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       */\n      function baseSortedIndexBy(array, value, iteratee, retHighest) {\n        value = iteratee(value);\n  \n        var low = 0,\n            high = array ? array.length : 0,\n            valIsNaN = value !== value,\n            valIsNull = value === null,\n            valIsUndef = value === undefined;\n  \n        while (low < high) {\n          var mid = nativeFloor((low + high) / 2),\n              computed = iteratee(array[mid]),\n              isDef = computed !== undefined,\n              isReflexive = computed === computed;\n  \n          if (valIsNaN) {\n            var setLow = isReflexive || retHighest;\n          } else if (valIsNull) {\n            setLow = isReflexive && isDef && (retHighest || computed != null);\n          } else if (valIsUndef) {\n            setLow = isReflexive && (retHighest || isDef);\n          } else if (computed == null) {\n            setLow = false;\n          } else {\n            setLow = retHighest ? (computed <= value) : (computed < value);\n          }\n          if (setLow) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return nativeMin(high, MAX_ARRAY_INDEX);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniq`.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniq(array) {\n        return baseSortedUniqBy(array);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniqBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniqBy(array, iteratee) {\n        var index = 0,\n            length = array.length,\n            value = array[0],\n            computed = iteratee ? iteratee(value) : value,\n            seen = computed,\n            resIndex = 0,\n            result = [value];\n  \n        while (++index < length) {\n          value = array[index],\n          computed = iteratee ? iteratee(value) : value;\n  \n          if (!eq(computed, seen)) {\n            seen = computed;\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseUniq(array, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            length = array.length,\n            isCommon = true,\n            result = [],\n            seen = result;\n  \n        if (comparator) {\n          isCommon = false;\n          includes = arrayIncludesWith;\n        }\n        else if (length >= LARGE_ARRAY_SIZE) {\n          var set = iteratee ? null : createSet(array);\n          if (set) {\n            return setToArray(set);\n          }\n          isCommon = false;\n          includes = cacheHas;\n          seen = new SetCache;\n        }\n        else {\n          seen = iteratee ? [] : result;\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var seenIndex = seen.length;\n            while (seenIndex--) {\n              if (seen[seenIndex] === computed) {\n                continue outer;\n              }\n            }\n            if (iteratee) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n          else if (!includes(seen, computed, comparator)) {\n            if (seen !== result) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.unset`.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       */\n      function baseUnset(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n        object = parent(object, path);\n        var key = last(path);\n        return (object != null && has(object, key)) ? delete object[key] : true;\n      }\n  \n      /**\n       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n       * without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {Function} predicate The function invoked per iteration.\n       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseWhile(array, predicate, isDrop, fromRight) {\n        var length = array.length,\n            index = fromRight ? length : -1;\n  \n        while ((fromRight ? index-- : ++index < length) &&\n          predicate(array[index], index, array)) {}\n  \n        return isDrop\n          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n      }\n  \n      /**\n       * The base implementation of `wrapperValue` which returns the result of\n       * performing a sequence of actions on the unwrapped `value`, where each\n       * successive action is supplied the return value of the previous.\n       *\n       * @private\n       * @param {*} value The unwrapped value.\n       * @param {Array} actions Actions to perform to resolve the unwrapped value.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseWrapperValue(value, actions) {\n        var result = value;\n        if (result instanceof LazyWrapper) {\n          result = result.value();\n        }\n        return arrayReduce(actions, function(result, action) {\n          return action.func.apply(action.thisArg, arrayPush([result], action.args));\n        }, result);\n      }\n  \n      /**\n       * The base implementation of methods like `_.xor`, without support for\n       * iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       */\n      function baseXor(arrays, iteratee, comparator) {\n        var index = -1,\n            length = arrays.length;\n  \n        while (++index < length) {\n          var result = result\n            ? arrayPush(\n                baseDifference(result, arrays[index], iteratee, comparator),\n                baseDifference(arrays[index], result, iteratee, comparator)\n              )\n            : arrays[index];\n        }\n        return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n      }\n  \n      /**\n       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n       *\n       * @private\n       * @param {Array} props The property names.\n       * @param {Array} values The property values.\n       * @param {Function} assignFunc The function to assign values.\n       * @returns {Object} Returns the new object.\n       */\n      function baseZipObject(props, values, assignFunc) {\n        var index = -1,\n            length = props.length,\n            valsLength = values.length,\n            result = {};\n  \n        while (++index < length) {\n          assignFunc(result, props[index], index < valsLength ? values[index] : undefined);\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a clone of  `buffer`.\n       *\n       * @private\n       * @param {Buffer} buffer The buffer to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Buffer} Returns the cloned buffer.\n       */\n      function cloneBuffer(buffer, isDeep) {\n        if (isDeep) {\n          return buffer.slice();\n        }\n        var Ctor = buffer.constructor,\n            result = new Ctor(buffer.length);\n  \n        buffer.copy(result);\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `arrayBuffer`.\n       *\n       * @private\n       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n       * @returns {ArrayBuffer} Returns the cloned array buffer.\n       */\n      function cloneArrayBuffer(arrayBuffer) {\n        var Ctor = arrayBuffer.constructor,\n            result = new Ctor(arrayBuffer.byteLength),\n            view = new Uint8Array(result);\n  \n        view.set(new Uint8Array(arrayBuffer));\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `map`.\n       *\n       * @private\n       * @param {Object} map The map to clone.\n       * @returns {Object} Returns the cloned map.\n       */\n      function cloneMap(map) {\n        var Ctor = map.constructor;\n        return arrayReduce(mapToArray(map), addMapEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of `regexp`.\n       *\n       * @private\n       * @param {Object} regexp The regexp to clone.\n       * @returns {Object} Returns the cloned regexp.\n       */\n      function cloneRegExp(regexp) {\n        var Ctor = regexp.constructor,\n            result = new Ctor(regexp.source, reFlags.exec(regexp));\n  \n        result.lastIndex = regexp.lastIndex;\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `set`.\n       *\n       * @private\n       * @param {Object} set The set to clone.\n       * @returns {Object} Returns the cloned set.\n       */\n      function cloneSet(set) {\n        var Ctor = set.constructor;\n        return arrayReduce(setToArray(set), addSetEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of the `symbol` object.\n       *\n       * @private\n       * @param {Object} symbol The symbol object to clone.\n       * @returns {Object} Returns the cloned symbol object.\n       */\n      function cloneSymbol(symbol) {\n        return Symbol ? Object(symbolValueOf.call(symbol)) : {};\n      }\n  \n      /**\n       * Creates a clone of `typedArray`.\n       *\n       * @private\n       * @param {Object} typedArray The typed array to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the cloned typed array.\n       */\n      function cloneTypedArray(typedArray, isDeep) {\n        var arrayBuffer = typedArray.buffer,\n            buffer = isDeep ? cloneArrayBuffer(arrayBuffer) : arrayBuffer,\n            Ctor = typedArray.constructor;\n  \n        return new Ctor(buffer, typedArray.byteOffset, typedArray.length);\n      }\n  \n      /**\n       * Creates an array that is the composition of partially applied arguments,\n       * placeholders, and provided arguments into a single array of arguments.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to prepend to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgs(args, partials, holders) {\n        var holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            leftIndex = -1,\n            leftLength = partials.length,\n            result = Array(leftLength + argsLength);\n  \n        while (++leftIndex < leftLength) {\n          result[leftIndex] = partials[leftIndex];\n        }\n        while (++argsIndex < holdersLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n        while (argsLength--) {\n          result[leftIndex++] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * This function is like `composeArgs` except that the arguments composition\n       * is tailored for `_.partialRight`.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to append to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgsRight(args, partials, holders) {\n        var holdersIndex = -1,\n            holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            rightIndex = -1,\n            rightLength = partials.length,\n            result = Array(argsLength + rightLength);\n  \n        while (++argsIndex < argsLength) {\n          result[argsIndex] = args[argsIndex];\n        }\n        var offset = argsIndex;\n        while (++rightIndex < rightLength) {\n          result[offset + rightIndex] = partials[rightIndex];\n        }\n        while (++holdersIndex < holdersLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * Copies the values of `source` to `array`.\n       *\n       * @private\n       * @param {Array} source The array to copy values from.\n       * @param {Array} [array=[]] The array to copy values to.\n       * @returns {Array} Returns `array`.\n       */\n      function copyArray(source, array) {\n        var index = -1,\n            length = source.length;\n  \n        array || (array = Array(length));\n        while (++index < length) {\n          array[index] = source[index];\n        }\n        return array;\n      }\n  \n      /**\n       * Copies properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObject(source, props, object) {\n        return copyObjectWith(source, props, object);\n      }\n  \n      /**\n       * This function is like `copyObject` except that it accepts a function to\n       * customize copied values.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @param {Function} [customizer] The function to customize copied values.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObjectWith(source, props, object, customizer) {\n        object || (object = {});\n  \n        var index = -1,\n            length = props.length;\n  \n        while (++index < length) {\n          var key = props[index];\n  \n          var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : source[key];\n  \n          assignValue(object, key, newValue);\n        }\n        return object;\n      }\n  \n      /**\n       * Copies own symbol properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy symbols from.\n       * @param {Object} [object={}] The object to copy symbols to.\n       * @returns {Object} Returns `object`.\n       */\n      function copySymbols(source, object) {\n        return copyObject(source, getSymbols(source), object);\n      }\n  \n      /**\n       * Creates a function like `_.groupBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} [initializer] The accumulator object initializer.\n       * @returns {Function} Returns the new aggregator function.\n       */\n      function createAggregator(setter, initializer) {\n        return function(collection, iteratee) {\n          var func = isArray(collection) ? arrayAggregator : baseAggregator,\n              accumulator = initializer ? initializer() : {};\n  \n          return func(collection, setter, getIteratee(iteratee), accumulator);\n        };\n      }\n  \n      /**\n       * Creates a function like `_.assign`.\n       *\n       * @private\n       * @param {Function} assigner The function to assign values.\n       * @returns {Function} Returns the new assigner function.\n       */\n      function createAssigner(assigner) {\n        return rest(function(object, sources) {\n          var index = -1,\n              length = sources.length,\n              customizer = length > 1 ? sources[length - 1] : undefined,\n              guard = length > 2 ? sources[2] : undefined;\n  \n          customizer = typeof customizer == 'function'\n            ? (length--, customizer)\n            : undefined;\n  \n          if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n          }\n          object = Object(object);\n          while (++index < length) {\n            var source = sources[index];\n            if (source) {\n              assigner(object, source, index, customizer);\n            }\n          }\n          return object;\n        });\n      }\n  \n      /**\n       * Creates a `baseEach` or `baseEachRight` function.\n       *\n       * @private\n       * @param {Function} eachFunc The function to iterate over a collection.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseEach(eachFunc, fromRight) {\n        return function(collection, iteratee) {\n          if (collection == null) {\n            return collection;\n          }\n          if (!isArrayLike(collection)) {\n            return eachFunc(collection, iteratee);\n          }\n          var length = collection.length,\n              index = fromRight ? length : -1,\n              iterable = Object(collection);\n  \n          while ((fromRight ? index-- : ++index < length)) {\n            if (iteratee(iterable[index], index, iterable) === false) {\n              break;\n            }\n          }\n          return collection;\n        };\n      }\n  \n      /**\n       * Creates a base function for methods like `_.forIn`.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseFor(fromRight) {\n        return function(object, iteratee, keysFunc) {\n          var index = -1,\n              iterable = Object(object),\n              props = keysFunc(object),\n              length = props.length;\n  \n          while (length--) {\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) {\n              break;\n            }\n          }\n          return object;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg`.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createBaseWrapper(func, bitmask, thisArg) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n          return fn.apply(isBind ? thisArg : this, arguments);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.lowerFirst`.\n       *\n       * @private\n       * @param {string} methodName The name of the `String` case method to use.\n       * @returns {Function} Returns the new function.\n       */\n      function createCaseFirst(methodName) {\n        return function(string) {\n          string = toString(string);\n  \n          var strSymbols = reHasComplexSymbol.test(string)\n            ? stringToArray(string)\n            : undefined;\n  \n          var chr = strSymbols ? strSymbols[0] : string.charAt(0),\n              trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);\n  \n          return chr[methodName]() + trailing;\n        };\n      }\n  \n      /**\n       * Creates a function like `_.camelCase`.\n       *\n       * @private\n       * @param {Function} callback The function to combine each word.\n       * @returns {Function} Returns the new compounder function.\n       */\n      function createCompounder(callback) {\n        return function(string) {\n          return arrayReduce(words(deburr(string)), callback, '');\n        };\n      }\n  \n      /**\n       * Creates a function that produces an instance of `Ctor` regardless of\n       * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n       *\n       * @private\n       * @param {Function} Ctor The constructor to wrap.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCtorWrapper(Ctor) {\n        return function() {\n          // Use a `switch` statement to work with class constructors.\n          // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n          // for more details.\n          var args = arguments;\n          switch (args.length) {\n            case 0: return new Ctor;\n            case 1: return new Ctor(args[0]);\n            case 2: return new Ctor(args[0], args[1]);\n            case 3: return new Ctor(args[0], args[1], args[2]);\n            case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n          }\n          var thisBinding = baseCreate(Ctor.prototype),\n              result = Ctor.apply(thisBinding, args);\n  \n          // Mimic the constructor's `return` behavior.\n          // See https://es5.github.io/#x13.2.2 for more details.\n          return isObject(result) ? result : thisBinding;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to enable currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {number} arity The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCurryWrapper(func, bitmask, arity) {\n        var Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,\n              placeholder = lodash.placeholder || wrapper.placeholder;\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n            ? []\n            : replaceHolders(args, placeholder);\n  \n          length -= holders.length;\n          return length < arity\n            ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)\n            : apply(fn, this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.flow` or `_.flowRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new flow function.\n       */\n      function createFlow(fromRight) {\n        return rest(function(funcs) {\n          funcs = baseFlatten(funcs, 1);\n  \n          var length = funcs.length,\n              index = length,\n              prereq = LodashWrapper.prototype.thru;\n  \n          if (fromRight) {\n            funcs.reverse();\n          }\n          while (index--) {\n            var func = funcs[index];\n            if (typeof func != 'function') {\n              throw new TypeError(FUNC_ERROR_TEXT);\n            }\n            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n              var wrapper = new LodashWrapper([], true);\n            }\n          }\n          index = wrapper ? index : length;\n          while (++index < length) {\n            func = funcs[index];\n  \n            var funcName = getFuncName(func),\n                data = funcName == 'wrapper' ? getData(func) : undefined;\n  \n            if (data && isLaziable(data[0]) &&\n                  data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                  !data[4].length && data[9] == 1\n                ) {\n              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n            } else {\n              wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n            }\n          }\n          return function() {\n            var args = arguments,\n                value = args[0];\n  \n            if (wrapper && args.length == 1 &&\n                isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n              return wrapper.plant(value).value();\n            }\n            var index = 0,\n                result = length ? funcs[index].apply(this, args) : value;\n  \n            while (++index < length) {\n              result = funcs[index].call(this, result);\n            }\n            return result;\n          };\n        });\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with optional `this`\n       * binding of `thisArg`, partial application, and currying.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n        var isAry = bitmask & ARY_FLAG,\n            isBind = bitmask & BIND_FLAG,\n            isBindKey = bitmask & BIND_KEY_FLAG,\n            isCurry = bitmask & CURRY_FLAG,\n            isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n            isFlip = bitmask & FLIP_FLAG,\n            Ctor = isBindKey ? undefined : createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length);\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          if (partials) {\n            args = composeArgs(args, partials, holders);\n          }\n          if (partialsRight) {\n            args = composeArgsRight(args, partialsRight, holdersRight);\n          }\n          if (isCurry || isCurryRight) {\n            var placeholder = lodash.placeholder || wrapper.placeholder,\n                argsHolders = replaceHolders(args, placeholder);\n  \n            length -= argsHolders.length;\n            if (length < arity) {\n              return createRecurryWrapper(\n                func, bitmask, createHybridWrapper, placeholder, thisArg, args,\n                argsHolders, argPos, ary, arity - length\n              );\n            }\n          }\n          var thisBinding = isBind ? thisArg : this,\n              fn = isBindKey ? thisBinding[func] : func;\n  \n          if (argPos) {\n            args = reorder(args, argPos);\n          } else if (isFlip && args.length > 1) {\n            args.reverse();\n          }\n          if (isAry && ary < args.length) {\n            args.length = ary;\n          }\n          if (this && this !== root && this instanceof wrapper) {\n            fn = Ctor || createCtorWrapper(fn);\n          }\n          return fn.apply(thisBinding, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.invertBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} toIteratee The function to resolve iteratees.\n       * @returns {Function} Returns the new inverter function.\n       */\n      function createInverter(setter, toIteratee) {\n        return function(object, iteratee) {\n          return baseInverter(object, setter, toIteratee(iteratee), {});\n        };\n      }\n  \n      /**\n       * Creates a function like `_.over`.\n       *\n       * @private\n       * @param {Function} arrayFunc The function to iterate over iteratees.\n       * @returns {Function} Returns the new invoker function.\n       */\n      function createOver(arrayFunc) {\n        return rest(function(iteratees) {\n          iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());\n          return rest(function(args) {\n            var thisArg = this;\n            return arrayFunc(iteratees, function(iteratee) {\n              return apply(iteratee, thisArg, args);\n            });\n          });\n        });\n      }\n  \n      /**\n       * Creates the padding for `string` based on `length`. The `chars` string\n       * is truncated if the number of characters exceeds `length`.\n       *\n       * @private\n       * @param {string} string The string to create padding for.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padding for `string`.\n       */\n      function createPadding(string, length, chars) {\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return '';\n        }\n        var padLength = length - strLength;\n        chars = chars === undefined ? ' ' : (chars + '');\n  \n        var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));\n        return reHasComplexSymbol.test(chars)\n          ? stringToArray(result).slice(0, padLength).join('')\n          : result.slice(0, padLength);\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg` and the `partials` prepended to those provided to\n       * the wrapper.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {Array} partials The arguments to prepend to those provided to the new function.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createPartialWrapper(func, bitmask, thisArg, partials) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var argsIndex = -1,\n              argsLength = arguments.length,\n              leftIndex = -1,\n              leftLength = partials.length,\n              args = Array(leftLength + argsLength),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n  \n          while (++leftIndex < leftLength) {\n            args[leftIndex] = partials[leftIndex];\n          }\n          while (argsLength--) {\n            args[leftIndex++] = arguments[++argsIndex];\n          }\n          return apply(fn, isBind ? thisArg : this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.range` or `_.rangeRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new range function.\n       */\n      function createRange(fromRight) {\n        return function(start, end, step) {\n          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n            end = step = undefined;\n          }\n          // Ensure the sign of `-0` is preserved.\n          start = toNumber(start);\n          start = start === start ? start : 0;\n          if (end === undefined) {\n            end = start;\n            start = 0;\n          } else {\n            end = toNumber(end) || 0;\n          }\n          step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);\n          return baseRange(start, end, step, fromRight);\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to continue currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {Function} wrapFunc The function to create the `func` wrapper.\n       * @param {*} placeholder The placeholder to replace.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n        var isCurry = bitmask & CURRY_FLAG,\n            newArgPos = argPos ? copyArray(argPos) : undefined,\n            newsHolders = isCurry ? holders : undefined,\n            newHoldersRight = isCurry ? undefined : holders,\n            newPartials = isCurry ? partials : undefined,\n            newPartialsRight = isCurry ? undefined : partials;\n  \n        bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n  \n        if (!(bitmask & CURRY_BOUND_FLAG)) {\n          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n        }\n        var newData = [\n          func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight,\n          newHoldersRight, newArgPos, ary, arity\n        ];\n  \n        var result = wrapFunc.apply(undefined, newData);\n        if (isLaziable(func)) {\n          setData(result, newData);\n        }\n        result.placeholder = placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a function like `_.round`.\n       *\n       * @private\n       * @param {string} methodName The name of the `Math` method to use when rounding.\n       * @returns {Function} Returns the new round function.\n       */\n      function createRound(methodName) {\n        var func = Math[methodName];\n        return function(number, precision) {\n          number = toNumber(number);\n          precision = toInteger(precision);\n          if (precision) {\n            // Shift with exponential notation to avoid floating-point issues.\n            // See [MDN](https://mdn.io/round#Examples) for more details.\n            var pair = (toString(number) + 'e').split('e'),\n                value = func(pair[0] + 'e' + (+pair[1] + precision));\n  \n            pair = (toString(value) + 'e').split('e');\n            return +(pair[0] + 'e' + (+pair[1] - precision));\n          }\n          return func(number);\n        };\n      }\n  \n      /**\n       * Creates a set of `values`.\n       *\n       * @private\n       * @param {Array} values The values to add to the set.\n       * @returns {Object} Returns the new set.\n       */\n      var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {\n        return new Set(values);\n      };\n  \n      /**\n       * Creates a function that either curries or invokes `func` with optional\n       * `this` binding and partially applied arguments.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - `_.bind`\n       *     2 - `_.bindKey`\n       *     4 - `_.curry` or `_.curryRight` of a bound function\n       *     8 - `_.curry`\n       *    16 - `_.curryRight`\n       *    32 - `_.partial`\n       *    64 - `_.partialRight`\n       *   128 - `_.rearg`\n       *   256 - `_.ary`\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to be partially applied.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n        var isBindKey = bitmask & BIND_KEY_FLAG;\n        if (!isBindKey && typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var length = partials ? partials.length : 0;\n        if (!length) {\n          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n          partials = holders = undefined;\n        }\n        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n        arity = arity === undefined ? arity : toInteger(arity);\n        length -= holders ? holders.length : 0;\n  \n        if (bitmask & PARTIAL_RIGHT_FLAG) {\n          var partialsRight = partials,\n              holdersRight = holders;\n  \n          partials = holders = undefined;\n        }\n        var data = isBindKey ? undefined : getData(func);\n  \n        var newData = [\n          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n          argPos, ary, arity\n        ];\n  \n        if (data) {\n          mergeData(newData, data);\n        }\n        func = newData[0];\n        bitmask = newData[1];\n        thisArg = newData[2];\n        partials = newData[3];\n        holders = newData[4];\n        arity = newData[9] = newData[9] == null\n          ? (isBindKey ? 0 : func.length)\n          : nativeMax(newData[9] - length, 0);\n  \n        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n        }\n        if (!bitmask || bitmask == BIND_FLAG) {\n          var result = createBaseWrapper(func, bitmask, thisArg);\n        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n          result = createCurryWrapper(func, bitmask, arity);\n        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n          result = createPartialWrapper(func, bitmask, thisArg, partials);\n        } else {\n          result = createHybridWrapper.apply(undefined, newData);\n        }\n        var setter = data ? baseSetData : setData;\n        return setter(result, newData);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for arrays with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Array} array The array to compare.\n       * @param {Array} other The other array to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `array` and `other` objects.\n       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n       */\n      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n        var index = -1,\n            isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            isUnordered = bitmask & UNORDERED_COMPARE_FLAG,\n            arrLength = array.length,\n            othLength = other.length;\n  \n        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(array);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(array, other);\n  \n        // Ignore non-index properties.\n        while (++index < arrLength) {\n          var arrValue = array[index],\n              othValue = other[index];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, arrValue, index, other, array, stack)\n              : customizer(arrValue, othValue, index, array, other, stack);\n          }\n          if (compared !== undefined) {\n            if (compared) {\n              continue;\n            }\n            result = false;\n            break;\n          }\n          // Recursively compare arrays (susceptible to call stack limits).\n          if (isUnordered) {\n            if (!arraySome(other, function(othValue) {\n                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);\n                })) {\n              result = false;\n              break;\n            }\n          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n            result = false;\n            break;\n          }\n        }\n        stack['delete'](array);\n        return result;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for comparing objects of\n       * the same `toStringTag`.\n       *\n       * **Note:** This function only supports comparing values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {string} tag The `toStringTag` of the objects to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {\n        switch (tag) {\n          case arrayBufferTag:\n            if ((object.byteLength != other.byteLength) ||\n                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n              return false;\n            }\n            return true;\n  \n          case boolTag:\n          case dateTag:\n            // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n            // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n            return +object == +other;\n  \n          case errorTag:\n            return object.name == other.name && object.message == other.message;\n  \n          case numberTag:\n            // Treat `NaN` vs. `NaN` as equal.\n            return (object != +object) ? other != +other : object == +other;\n  \n          case regexpTag:\n          case stringTag:\n            // Coerce regexes to strings and treat strings primitives and string\n            // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n            return object == (other + '');\n  \n          case mapTag:\n            var convert = mapToArray;\n  \n          case setTag:\n            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n            convert || (convert = setToArray);\n  \n            // Recursively compare objects (susceptible to call stack limits).\n            return (isPartial || object.size == other.size) &&\n              equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);\n  \n          case symbolTag:\n            return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));\n        }\n        return false;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for objects with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            objProps = keys(object),\n            objLength = objProps.length,\n            othProps = keys(other),\n            othLength = othProps.length;\n  \n        if (objLength != othLength && !isPartial) {\n          return false;\n        }\n        var index = objLength;\n        while (index--) {\n          var key = objProps[index];\n          if (!(isPartial ? key in other : baseHas(other, key))) {\n            return false;\n          }\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(object, other);\n  \n        var skipCtor = isPartial;\n        while (++index < objLength) {\n          key = objProps[index];\n          var objValue = object[key],\n              othValue = other[key];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, objValue, key, other, object, stack)\n              : customizer(objValue, othValue, key, object, other, stack);\n          }\n          // Recursively compare objects (susceptible to call stack limits).\n          if (!(compared === undefined\n                ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n                : compared\n              )) {\n            result = false;\n            break;\n          }\n          skipCtor || (skipCtor = key == 'constructor');\n        }\n        if (result && !skipCtor) {\n          var objCtor = object.constructor,\n              othCtor = other.constructor;\n  \n          // Non `Object` object instances with different constructors are not equal.\n          if (objCtor != othCtor &&\n              ('constructor' in object && 'constructor' in other) &&\n              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n                typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n            result = false;\n          }\n        }\n        stack['delete'](object);\n        return result;\n      }\n  \n      /**\n       * Gets metadata for `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {*} Returns the metadata for `func`.\n       */\n      var getData = !metaMap ? noop : function(func) {\n        return metaMap.get(func);\n      };\n  \n      /**\n       * Gets the name of `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {string} Returns the function name.\n       */\n      function getFuncName(func) {\n        var result = (func.name + ''),\n            array = realNames[result],\n            length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n  \n        while (length--) {\n          var data = array[length],\n              otherFunc = data.func;\n          if (otherFunc == null || otherFunc == func) {\n            return data.name;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the appropriate \"iteratee\" function. If the `_.iteratee` method is\n       * customized this function returns the custom method, otherwise it returns\n       * `baseIteratee`. If arguments are provided the chosen function is invoked\n       * with them and its result is returned.\n       *\n       * @private\n       * @param {*} [value] The value to convert to an iteratee.\n       * @param {number} [arity] The arity of the created iteratee.\n       * @returns {Function} Returns the chosen function or its result.\n       */\n      function getIteratee() {\n        var result = lodash.iteratee || iteratee;\n        result = result === iteratee ? baseIteratee : result;\n        return arguments.length ? result(arguments[0], arguments[1]) : result;\n      }\n  \n      /**\n       * Gets the \"length\" property value of `object`.\n       *\n       * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n       * that affects Safari on at least iOS 8.1-8.3 ARM64.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {*} Returns the \"length\" value.\n       */\n      var getLength = baseProperty('length');\n  \n      /**\n       * Gets the property names, values, and compare flags of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the match data of `object`.\n       */\n      function getMatchData(object) {\n        var result = toPairs(object),\n            length = result.length;\n  \n        while (length--) {\n          result[length][2] = isStrictComparable(result[length][1]);\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the native function at `key` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {string} key The key of the method to get.\n       * @returns {*} Returns the function if it's native, else `undefined`.\n       */\n      function getNative(object, key) {\n        var value = object == null ? undefined : object[key];\n        return isNative(value) ? value : undefined;\n      }\n  \n      /**\n       * Creates an array of the own symbol properties of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of symbols.\n       */\n      var getSymbols = getOwnPropertySymbols || function() {\n        return [];\n      };\n  \n      /**\n       * Gets the `toStringTag` of `value`.\n       *\n       * @private\n       * @param {*} value The value to query.\n       * @returns {string} Returns the `toStringTag`.\n       */\n      function getTag(value) {\n        return objectToString.call(value);\n      }\n  \n      // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.\n      if ((Map && getTag(new Map) != mapTag) ||\n          (Set && getTag(new Set) != setTag) ||\n          (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n        getTag = function(value) {\n          var result = objectToString.call(value),\n              Ctor = result == objectTag ? value.constructor : null,\n              ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';\n  \n          if (ctorString) {\n            switch (ctorString) {\n              case mapCtorString: return mapTag;\n              case setCtorString: return setTag;\n              case weakMapCtorString: return weakMapTag;\n            }\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Gets the view, applying any `transforms` to the `start` and `end` positions.\n       *\n       * @private\n       * @param {number} start The start of the view.\n       * @param {number} end The end of the view.\n       * @param {Array} transforms The transformations to apply to the view.\n       * @returns {Object} Returns an object containing the `start` and `end`\n       *  positions of the view.\n       */\n      function getView(start, end, transforms) {\n        var index = -1,\n            length = transforms.length;\n  \n        while (++index < length) {\n          var data = transforms[index],\n              size = data.size;\n  \n          switch (data.type) {\n            case 'drop':      start += size; break;\n            case 'dropRight': end -= size; break;\n            case 'take':      end = nativeMin(end, start + size); break;\n            case 'takeRight': start = nativeMax(start, end - size); break;\n          }\n        }\n        return { 'start': start, 'end': end };\n      }\n  \n      /**\n       * Checks if `path` exists on `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @param {Function} hasFunc The function to check properties.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       */\n      function hasPath(object, path, hasFunc) {\n        if (object == null) {\n          return false;\n        }\n        var result = hasFunc(object, path);\n        if (!result && !isKey(path)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          if (object != null) {\n            path = last(path);\n            result = hasFunc(object, path);\n          }\n        }\n        var length = object ? object.length : undefined;\n        return result || (\n          !!length && isLength(length) && isIndex(path, length) &&\n          (isArray(object) || isString(object) || isArguments(object))\n        );\n      }\n  \n      /**\n       * Initializes an array clone.\n       *\n       * @private\n       * @param {Array} array The array to clone.\n       * @returns {Array} Returns the initialized clone.\n       */\n      function initCloneArray(array) {\n        var length = array.length,\n            result = array.constructor(length);\n  \n        // Add properties assigned by `RegExp#exec`.\n        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n          result.index = array.index;\n          result.input = array.input;\n        }\n        return result;\n      }\n  \n      /**\n       * Initializes an object clone.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneObject(object) {\n        if (isPrototype(object)) {\n          return {};\n        }\n        var Ctor = object.constructor;\n        return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n  \n      /**\n       * Initializes an object clone based on its `toStringTag`.\n       *\n       * **Note:** This function only supports cloning values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @param {string} tag The `toStringTag` of the object to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneByTag(object, tag, isDeep) {\n        var Ctor = object.constructor;\n        switch (tag) {\n          case arrayBufferTag:\n            return cloneArrayBuffer(object);\n  \n          case boolTag:\n          case dateTag:\n            return new Ctor(+object);\n  \n          case float32Tag: case float64Tag:\n          case int8Tag: case int16Tag: case int32Tag:\n          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n  \n          case mapTag:\n            return cloneMap(object);\n  \n          case numberTag:\n          case stringTag:\n            return new Ctor(object);\n  \n          case regexpTag:\n            return cloneRegExp(object);\n  \n          case setTag:\n            return cloneSet(object);\n  \n          case symbolTag:\n            return cloneSymbol(object);\n        }\n      }\n  \n      /**\n       * Creates an array of index keys for `object` values of arrays,\n       * `arguments` objects, and strings, otherwise `null` is returned.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array|null} Returns index keys, else `null`.\n       */\n      function indexKeys(object) {\n        var length = object ? object.length : undefined;\n        if (isLength(length) &&\n            (isArray(object) || isString(object) || isArguments(object))) {\n          return baseTimes(length, String);\n        }\n        return null;\n      }\n  \n      /**\n       * Checks if the given arguments are from an iteratee call.\n       *\n       * @private\n       * @param {*} value The potential iteratee value argument.\n       * @param {*} index The potential iteratee index or key argument.\n       * @param {*} object The potential iteratee object argument.\n       * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n       */\n      function isIterateeCall(value, index, object) {\n        if (!isObject(object)) {\n          return false;\n        }\n        var type = typeof index;\n        if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)) {\n          return eq(object[index], value);\n        }\n        return false;\n      }\n  \n      /**\n       * Checks if `value` is a property name and not a property path.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @param {Object} [object] The object to query keys on.\n       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n       */\n      function isKey(value, object) {\n        if (typeof value == 'number') {\n          return true;\n        }\n        return !isArray(value) &&\n          (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n            (object != null && value in Object(object)));\n      }\n  \n      /**\n       * Checks if `value` is suitable for use as unique object key.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n       */\n      function isKeyable(value) {\n        var type = typeof value;\n        return type == 'number' || type == 'boolean' ||\n          (type == 'string' && value != '__proto__') || value == null;\n      }\n  \n      /**\n       * Checks if `func` has a lazy counterpart.\n       *\n       * @private\n       * @param {Function} func The function to check.\n       * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n       */\n      function isLaziable(func) {\n        var funcName = getFuncName(func),\n            other = lodash[funcName];\n  \n        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n          return false;\n        }\n        if (func === other) {\n          return true;\n        }\n        var data = getData(other);\n        return !!data && func === data[0];\n      }\n  \n      /**\n       * Checks if `value` is likely a prototype object.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n       */\n      function isPrototype(value) {\n        var Ctor = value && value.constructor,\n            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n  \n        return value === proto;\n      }\n  \n      /**\n       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` if suitable for strict\n       *  equality comparisons, else `false`.\n       */\n      function isStrictComparable(value) {\n        return value === value && !isObject(value);\n      }\n  \n      /**\n       * Merges the function metadata of `source` into `data`.\n       *\n       * Merging metadata reduces the number of wrappers used to invoke a function.\n       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n       * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n       * modify function arguments, making the order in which they are executed important,\n       * preventing the merging of metadata. However, we make an exception for a safe\n       * combined case where curried functions have `_.ary` and or `_.rearg` applied.\n       *\n       * @private\n       * @param {Array} data The destination metadata.\n       * @param {Array} source The source metadata.\n       * @returns {Array} Returns `data`.\n       */\n      function mergeData(data, source) {\n        var bitmask = data[1],\n            srcBitmask = source[1],\n            newBitmask = bitmask | srcBitmask,\n            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n  \n        var isCombo =\n          (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||\n          (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n          (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n  \n        // Exit early if metadata can't be merged.\n        if (!(isCommon || isCombo)) {\n          return data;\n        }\n        // Use source `thisArg` if available.\n        if (srcBitmask & BIND_FLAG) {\n          data[2] = source[2];\n          // Set when currying a bound function.\n          newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n        }\n        // Compose partial arguments.\n        var value = source[3];\n        if (value) {\n          var partials = data[3];\n          data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);\n          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);\n        }\n        // Compose partial right arguments.\n        value = source[5];\n        if (value) {\n          partials = data[5];\n          data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);\n          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);\n        }\n        // Use source `argPos` if available.\n        value = source[7];\n        if (value) {\n          data[7] = copyArray(value);\n        }\n        // Use source `ary` if it's smaller.\n        if (srcBitmask & ARY_FLAG) {\n          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n        }\n        // Use source `arity` if one is not provided.\n        if (data[9] == null) {\n          data[9] = source[9];\n        }\n        // Use source `func` and merge bitmasks.\n        data[0] = source[0];\n        data[1] = newBitmask;\n  \n        return data;\n      }\n  \n      /**\n       * Used by `_.defaultsDeep` to customize its `_.merge` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to merge.\n       * @param {Object} object The parent object of `objValue`.\n       * @param {Object} source The parent object of `srcValue`.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       * @returns {*} Returns the value to assign.\n       */\n      function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n        if (isObject(objValue) && isObject(srcValue)) {\n          stack.set(srcValue, objValue);\n          baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        }\n        return objValue;\n      }\n  \n      /**\n       * Gets the parent value at `path` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array} path The path to get the parent value of.\n       * @returns {*} Returns the parent value.\n       */\n      function parent(object, path) {\n        return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));\n      }\n  \n      /**\n       * Reorder `array` according to the specified indexes where the element at\n       * the first index is assigned as the first element, the element at\n       * the second index is assigned as the second element, and so on.\n       *\n       * @private\n       * @param {Array} array The array to reorder.\n       * @param {Array} indexes The arranged array indexes.\n       * @returns {Array} Returns `array`.\n       */\n      function reorder(array, indexes) {\n        var arrLength = array.length,\n            length = nativeMin(indexes.length, arrLength),\n            oldArray = copyArray(array);\n  \n        while (length--) {\n          var index = indexes[length];\n          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n        }\n        return array;\n      }\n  \n      /**\n       * Sets metadata for `func`.\n       *\n       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n       * period of time, it will trip its breaker and transition to an identity function\n       * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n       * for more details.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var setData = (function() {\n        var count = 0,\n            lastCalled = 0;\n  \n        return function(key, value) {\n          var stamp = now(),\n              remaining = HOT_SPAN - (stamp - lastCalled);\n  \n          lastCalled = stamp;\n          if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n              return key;\n            }\n          } else {\n            count = 0;\n          }\n          return baseSetData(key, value);\n        };\n      }());\n  \n      /**\n       * Converts `string` to a property path array.\n       *\n       * @private\n       * @param {string} string The string to convert.\n       * @returns {Array} Returns the property path array.\n       */\n      function stringToPath(string) {\n        var result = [];\n        toString(string).replace(rePropName, function(match, number, quote, string) {\n          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n        });\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `wrapper`.\n       *\n       * @private\n       * @param {Object} wrapper The wrapper to clone.\n       * @returns {Object} Returns the cloned wrapper.\n       */\n      function wrapperClone(wrapper) {\n        if (wrapper instanceof LazyWrapper) {\n          return wrapper.clone();\n        }\n        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n        result.__actions__ = copyArray(wrapper.__actions__);\n        result.__index__  = wrapper.__index__;\n        result.__values__ = wrapper.__values__;\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an array of elements split into groups the length of `size`.\n       * If `array` can't be split evenly, the final chunk will be the remaining\n       * elements.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to process.\n       * @param {number} [size=0] The length of each chunk.\n       * @returns {Array} Returns the new array containing chunks.\n       * @example\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 2);\n       * // => [['a', 'b'], ['c', 'd']]\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 3);\n       * // => [['a', 'b', 'c'], ['d']]\n       */\n      function chunk(array, size) {\n        size = nativeMax(toInteger(size), 0);\n  \n        var length = array ? array.length : 0;\n        if (!length || size < 1) {\n          return [];\n        }\n        var index = 0,\n            resIndex = -1,\n            result = Array(nativeCeil(length / size));\n  \n        while (index < length) {\n          result[++resIndex] = baseSlice(array, index, (index += size));\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array with all falsey values removed. The values `false`, `null`,\n       * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to compact.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.compact([0, 1, false, 2, '', 3]);\n       * // => [1, 2, 3]\n       */\n      function compact(array) {\n        var index = -1,\n            length = array ? array.length : 0,\n            resIndex = -1,\n            result = [];\n  \n        while (++index < length) {\n          var value = array[index];\n          if (value) {\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a new array concatenating `array` with any additional arrays\n       * and/or values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to concatenate.\n       * @param {...*} [values] The values to concatenate.\n       * @returns {Array} Returns the new concatenated array.\n       * @example\n       *\n       * var array = [1];\n       * var other = _.concat(array, 2, [3], [[4]]);\n       *\n       * console.log(other);\n       * // => [1, 2, 3, [4]]\n       *\n       * console.log(array);\n       * // => [1]\n       */\n      var concat = rest(function(array, values) {\n        if (!isArray(array)) {\n          array = array == null ? [] : [Object(array)];\n        }\n        values = baseFlatten(values, 1);\n        return arrayConcat(array, values);\n      });\n  \n      /**\n       * Creates an array of unique `array` values not included in the other\n       * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.difference([3, 2, 1], [4, 2]);\n       * // => [3, 1]\n       */\n      var difference = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `iteratee` which\n       * is invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n       * // => [3.1, 1.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var differenceBy = rest(function(array, values) {\n        var iteratee = last(values);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `comparator`\n       * which is invoked to compare elements of `array` to `values`. The comparator\n       * is invoked with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       *\n       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }]\n       */\n      var differenceWith = rest(function(array, values) {\n        var comparator = last(values);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.drop([1, 2, 3]);\n       * // => [2, 3]\n       *\n       * _.drop([1, 2, 3], 2);\n       * // => [3]\n       *\n       * _.drop([1, 2, 3], 5);\n       * // => []\n       *\n       * _.drop([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function drop(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.dropRight([1, 2, 3]);\n       * // => [1, 2]\n       *\n       * _.dropRight([1, 2, 3], 2);\n       * // => [1]\n       *\n       * _.dropRight([1, 2, 3], 5);\n       * // => []\n       *\n       * _.dropRight([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function dropRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the end.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.dropRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropRightWhile(users, ['active', false]);\n       * // => objects for ['barney']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropRightWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the beginning.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.dropWhile(users, function(o) { return !o.active; });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropWhile(users, ['active', false]);\n       * // => objects for ['pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true)\n          : [];\n      }\n  \n      /**\n       * Fills elements of `array` with `value` from `start` up to, but not\n       * including, `end`.\n       *\n       * **Note:** This method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.fill(array, 'a');\n       * console.log(array);\n       * // => ['a', 'a', 'a']\n       *\n       * _.fill(Array(3), 2);\n       * // => [2, 2, 2]\n       *\n       * _.fill([4, 6, 8, 10], '*', 1, 3);\n       * // => [4, '*', '*', 10]\n       */\n      function fill(array, value, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n          start = 0;\n          end = length;\n        }\n        return baseFill(array, value, start, end);\n      }\n  \n      /**\n       * This method is like `_.find` except that it returns the index of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.findIndex(users, function(o) { return o.user == 'barney'; });\n       * // => 0\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findIndex(users, { 'user': 'fred', 'active': false });\n       * // => 1\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findIndex(users, ['active', false]);\n       * // => 0\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findIndex(users, 'active');\n       * // => 2\n       */\n      function findIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3))\n          : -1;\n      }\n  \n      /**\n       * This method is like `_.findIndex` except that it iterates over elements\n       * of `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n       * // => 2\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n       * // => 0\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastIndex(users, ['active', false]);\n       * // => 2\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastIndex(users, 'active');\n       * // => 0\n       */\n      function findLastIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3), true)\n          : -1;\n      }\n  \n      /**\n       * Flattens `array` a single level deep.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flatten([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, [3, [4]], 5]\n       */\n      function flatten(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, 1) : [];\n      }\n  \n      /**\n       * Recursively flattens `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flattenDeep([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, 3, 4, 5]\n       */\n      function flattenDeep(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, INFINITY) : [];\n      }\n  \n      /**\n       * Recursively flatten `array` up to `depth` times.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @param {number} [depth=1] The maximum recursion depth.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * var array = [1, [2, [3, [4]], 5]];\n       *\n       * _.flattenDepth(array, 1);\n       * // => [1, 2, [3, [4]], 5]\n       *\n       * _.flattenDepth(array, 2);\n       * // => [1, 2, 3, [4], 5]\n       */\n      function flattenDepth(array, depth) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        depth = depth === undefined ? 1 : toInteger(depth);\n        return baseFlatten(array, depth);\n      }\n  \n      /**\n       * The inverse of `_.toPairs`; this method returns an object composed\n       * from key-value `pairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} pairs The key-value pairs.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.fromPairs([['fred', 30], ['barney', 40]]);\n       * // => { 'fred': 30, 'barney': 40 }\n       */\n      function fromPairs(pairs) {\n        var index = -1,\n            length = pairs ? pairs.length : 0,\n            result = {};\n  \n        while (++index < length) {\n          var pair = pairs[index];\n          result[pair[0]] = pair[1];\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @alias first\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the first element of `array`.\n       * @example\n       *\n       * _.head([1, 2, 3]);\n       * // => 1\n       *\n       * _.head([]);\n       * // => undefined\n       */\n      function head(array) {\n        return array ? array[0] : undefined;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `value` is found in `array`\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n       * from the end of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.indexOf([1, 2, 1, 2], 2);\n       * // => 1\n       *\n       * // Search from the `fromIndex`.\n       * _.indexOf([1, 2, 1, 2], 2, 2);\n       * // => 3\n       */\n      function indexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        fromIndex = toInteger(fromIndex);\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return baseIndexOf(array, value, fromIndex);\n      }\n  \n      /**\n       * Gets all but the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.initial([1, 2, 3]);\n       * // => [1, 2]\n       */\n      function initial(array) {\n        return dropRight(array, 1);\n      }\n  \n      /**\n       * Creates an array of unique values that are included in all given arrays\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersection([2, 1], [4, 2], [1, 2]);\n       * // => [2]\n       */\n      var intersection = rest(function(arrays) {\n        var mapped = arrayMap(arrays, baseCastArrayLikeObject);\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped)\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `iteratee`\n       * which is invoked for each element of each `arrays` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }]\n       */\n      var intersectionBy = rest(function(arrays) {\n        var iteratee = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (iteratee === last(mapped)) {\n          iteratee = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `comparator`\n       * which is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.intersectionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }]\n       */\n      var intersectionWith = rest(function(arrays) {\n        var comparator = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (comparator === last(mapped)) {\n          comparator = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Converts all elements in `array` into a string separated by `separator`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to convert.\n       * @param {string} [separator=','] The element separator.\n       * @returns {string} Returns the joined string.\n       * @example\n       *\n       * _.join(['a', 'b', 'c'], '~');\n       * // => 'a~b~c'\n       */\n      function join(array, separator) {\n        return array ? nativeJoin.call(array, separator) : '';\n      }\n  \n      /**\n       * Gets the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the last element of `array`.\n       * @example\n       *\n       * _.last([1, 2, 3]);\n       * // => 3\n       */\n      function last(array) {\n        var length = array ? array.length : 0;\n        return length ? array[length - 1] : undefined;\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it iterates over elements of\n       * `array` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=array.length-1] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.lastIndexOf([1, 2, 1, 2], 2);\n       * // => 3\n       *\n       * // Search from the `fromIndex`.\n       * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n       * // => 1\n       */\n      function lastIndexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        var index = length;\n        if (fromIndex !== undefined) {\n          index = toInteger(fromIndex);\n          index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;\n        }\n        if (value !== value) {\n          return indexOfNaN(array, index, true);\n        }\n        while (index--) {\n          if (array[index] === value) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Removes all given values from `array` using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * **Note:** Unlike `_.without`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...*} [values] The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pull(array, 2, 3);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      var pull = rest(pullAll);\n  \n      /**\n       * This method is like `_.pull` except that it accepts an array of values to remove.\n       *\n       * **Note:** Unlike `_.difference`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pullAll(array, [2, 3]);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      function pullAll(array, values) {\n        return (array && array.length && values && values.length)\n          ? basePullAll(array, values)\n          : array;\n      }\n  \n      /**\n       * This method is like `_.pullAll` except that it accepts `iteratee` which is\n       * invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n       *\n       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n       * console.log(array);\n       * // => [{ 'x': 2 }]\n       */\n      function pullAllBy(array, values, iteratee) {\n        return (array && array.length && values && values.length)\n          ? basePullAllBy(array, values, getIteratee(iteratee))\n          : array;\n      }\n  \n      /**\n       * Removes elements from `array` corresponding to `indexes` and returns an\n       * array of removed elements.\n       *\n       * **Note:** Unlike `_.at`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [5, 10, 15, 20];\n       * var evens = _.pullAt(array, 1, 3);\n       *\n       * console.log(array);\n       * // => [5, 15]\n       *\n       * console.log(evens);\n       * // => [10, 20]\n       */\n      var pullAt = rest(function(array, indexes) {\n        indexes = arrayMap(baseFlatten(indexes, 1), String);\n  \n        var result = baseAt(array, indexes);\n        basePullAt(array, indexes.sort(compareAscending));\n        return result;\n      });\n  \n      /**\n       * Removes all elements from `array` that `predicate` returns truthy for\n       * and returns an array of the removed elements. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * **Note:** Unlike `_.filter`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [1, 2, 3, 4];\n       * var evens = _.remove(array, function(n) {\n       *   return n % 2 == 0;\n       * });\n       *\n       * console.log(array);\n       * // => [1, 3]\n       *\n       * console.log(evens);\n       * // => [2, 4]\n       */\n      function remove(array, predicate) {\n        var result = [];\n        if (!(array && array.length)) {\n          return result;\n        }\n        var index = -1,\n            indexes = [],\n            length = array.length;\n  \n        predicate = getIteratee(predicate, 3);\n        while (++index < length) {\n          var value = array[index];\n          if (predicate(value, index, array)) {\n            result.push(value);\n            indexes.push(index);\n          }\n        }\n        basePullAt(array, indexes);\n        return result;\n      }\n  \n      /**\n       * Reverses `array` so that the first element becomes the last, the second\n       * element becomes the second to last, and so on.\n       *\n       * **Note:** This method mutates `array` and is based on\n       * [`Array#reverse`](https://mdn.io/Array/reverse).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.reverse(array);\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function reverse(array) {\n        return array ? nativeReverse.call(array) : array;\n      }\n  \n      /**\n       * Creates a slice of `array` from `start` up to, but not including, `end`.\n       *\n       * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)\n       * to ensure dense arrays are returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function slice(array, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n          start = 0;\n          end = length;\n        }\n        else {\n          start = start == null ? 0 : toInteger(start);\n          end = end === undefined ? length : toInteger(end);\n        }\n        return baseSlice(array, start, end);\n      }\n  \n      /**\n       * Uses a binary search to determine the lowest index at which `value` should\n       * be inserted into `array` in order to maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedIndex([30, 50], 40);\n       * // => 1\n       *\n       * _.sortedIndex([4, 5], 4);\n       * // => 0\n       */\n      function sortedIndex(array, value) {\n        return baseSortedIndex(array, value);\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n       *\n       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n       * // => 1\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 0\n       */\n      function sortedIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee));\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedIndexOf([1, 1, 2, 2], 2);\n       * // => 2\n       */\n      function sortedIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value);\n          if (index < length && eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it returns the highest\n       * index at which `value` should be inserted into `array` in order to\n       * maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedLastIndex([4, 5], 4);\n       * // => 1\n       */\n      function sortedLastIndex(array, value) {\n        return baseSortedIndex(array, value, true);\n      }\n  \n      /**\n       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 1\n       */\n      function sortedLastIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee), true);\n      }\n  \n      /**\n       * This method is like `_.lastIndexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedLastIndexOf([1, 1, 2, 2], 2);\n       * // => 3\n       */\n      function sortedLastIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value, true) - 1;\n          if (eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniq([1, 1, 2]);\n       * // => [1, 2]\n       */\n      function sortedUniq(array) {\n        return (array && array.length)\n          ? baseSortedUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniqBy` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n       * // => [1.1, 2.3]\n       */\n      function sortedUniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSortedUniqBy(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * Gets all but the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.tail([1, 2, 3]);\n       * // => [2, 3]\n       */\n      function tail(array) {\n        return drop(array, 1);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.take([1, 2, 3]);\n       * // => [1]\n       *\n       * _.take([1, 2, 3], 2);\n       * // => [1, 2]\n       *\n       * _.take([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.take([1, 2, 3], 0);\n       * // => []\n       */\n      function take(array, n, guard) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.takeRight([1, 2, 3]);\n       * // => [3]\n       *\n       * _.takeRight([1, 2, 3], 2);\n       * // => [2, 3]\n       *\n       * _.takeRight([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.takeRight([1, 2, 3], 0);\n       * // => []\n       */\n      function takeRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the end. Elements are\n       * taken until `predicate` returns falsey. The predicate is invoked with three\n       * arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.takeRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeRightWhile(users, ['active', false]);\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeRightWhile(users, 'active');\n       * // => []\n       */\n      function takeRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), false, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the beginning. Elements\n       * are taken until `predicate` returns falsey. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false},\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.takeWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeWhile(users, ['active', false]);\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeWhile(users, 'active');\n       * // => []\n       */\n      function takeWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3))\n          : [];\n      }\n  \n      /**\n       * Creates an array of unique values, in order, from all given arrays using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.union([2, 1], [4, 2], [1, 2]);\n       * // => [2, 1, 4]\n       */\n      var union = rest(function(arrays) {\n        return baseUniq(baseFlatten(arrays, 1, true));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1, 1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      var unionBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `comparator` which\n       * is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.unionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var unionWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);\n      });\n  \n      /**\n       * Creates a duplicate-free version of an array, using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons, in which only the first occurrence of each element\n       * is kept.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniq([2, 1, 2]);\n       * // => [2, 1]\n       */\n      function uniq(array) {\n        return (array && array.length)\n          ? baseUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n       * // => [2.1, 1.2]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      function uniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseUniq(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `comparator` which\n       * is invoked to compare elements of `array`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n       *\n       * _.uniqWith(objects, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n       */\n      function uniqWith(array, comparator) {\n        return (array && array.length)\n          ? baseUniq(array, undefined, comparator)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts an array of grouped\n       * elements and creates an array regrouping the elements to their pre-zip\n       * configuration.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       *\n       * _.unzip(zipped);\n       * // => [['fred', 'barney'], [30, 40], [true, false]]\n       */\n      function unzip(array) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var length = 0;\n        array = arrayFilter(array, function(group) {\n          if (isArrayLikeObject(group)) {\n            length = nativeMax(group.length, length);\n            return true;\n          }\n        });\n        return baseTimes(length, function(index) {\n          return arrayMap(array, baseProperty(index));\n        });\n      }\n  \n      /**\n       * This method is like `_.unzip` except that it accepts `iteratee` to specify\n       * how regrouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n       * // => [[1, 10, 100], [2, 20, 200]]\n       *\n       * _.unzipWith(zipped, _.add);\n       * // => [3, 30, 300]\n       */\n      function unzipWith(array, iteratee) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var result = unzip(array);\n        if (iteratee == null) {\n          return result;\n        }\n        return arrayMap(result, function(group) {\n          return apply(iteratee, undefined, group);\n        });\n      }\n  \n      /**\n       * Creates an array excluding all given values using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to filter.\n       * @param {...*} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.without([1, 2, 1, 3], 1, 2);\n       * // => [3]\n       */\n      var without = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, values)\n          : [];\n      });\n  \n      /**\n       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n       * of the given arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xor([2, 1], [4, 2]);\n       * // => [1, 4]\n       */\n      var xor = rest(function(arrays) {\n        return baseXor(arrayFilter(arrays, isArrayLikeObject));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var xorBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `comparator` which is\n       * invoked to compare elements of `arrays`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.xorWith(objects, others, _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var xorWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n      });\n  \n      /**\n       * Creates an array of grouped elements, the first of which contains the first\n       * elements of the given arrays, the second of which contains the second elements\n       * of the given arrays, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       */\n      var zip = rest(unzip);\n  \n      /**\n       * This method is like `_.fromPairs` except that it accepts two arrays,\n       * one of property names and one of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObject(['a', 'b'], [1, 2]);\n       * // => { 'a': 1, 'b': 2 }\n       */\n      function zipObject(props, values) {\n        return baseZipObject(props || [], values || [], assignValue);\n      }\n  \n      /**\n       * This method is like `_.zipObject` except that it supports property paths.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n       */\n      function zipObjectDeep(props, values) {\n        return baseZipObject(props || [], values || [], baseSet);\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts `iteratee` to specify\n       * how grouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n       *   return a + b + c;\n       * });\n       * // => [111, 222]\n       */\n      var zipWith = rest(function(arrays) {\n        var length = arrays.length,\n            iteratee = length > 1 ? arrays[length - 1] : undefined;\n  \n        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n        return unzipWith(arrays, iteratee);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.\n       * The result of such method chaining must be unwrapped with `_#value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to wrap.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36 },\n       *   { 'user': 'fred',    'age': 40 },\n       *   { 'user': 'pebbles', 'age': 1 }\n       * ];\n       *\n       * var youngest = _\n       *   .chain(users)\n       *   .sortBy('age')\n       *   .map(function(o) {\n       *     return o.user + ' is ' + o.age;\n       *   })\n       *   .head()\n       *   .value();\n       * // => 'pebbles is 1'\n       */\n      function chain(value) {\n        var result = lodash(value);\n        result.__chain__ = true;\n        return result;\n      }\n  \n      /**\n       * This method invokes `interceptor` and returns `value`. The interceptor\n       * is invoked with one argument; (value). The purpose of this method is to\n       * \"tap into\" a method chain in order to modify intermediate results.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * _([1, 2, 3])\n       *  .tap(function(array) {\n       *    // Mutate input array.\n       *    array.pop();\n       *  })\n       *  .reverse()\n       *  .value();\n       * // => [2, 1]\n       */\n      function tap(value, interceptor) {\n        interceptor(value);\n        return value;\n      }\n  \n      /**\n       * This method is like `_.tap` except that it returns the result of `interceptor`.\n       * The purpose of this method is to \"pass thru\" values replacing intermediate\n       * results in a method chain.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns the result of `interceptor`.\n       * @example\n       *\n       * _('  abc  ')\n       *  .chain()\n       *  .trim()\n       *  .thru(function(value) {\n       *    return [value];\n       *  })\n       *  .value();\n       * // => ['abc']\n       */\n      function thru(value, interceptor) {\n        return interceptor(value);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.at`.\n       *\n       * @name at\n       * @memberOf _\n       * @category Seq\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _(object).at(['a[0].b.c', 'a[1]']).value();\n       * // => [3, 4]\n       *\n       * _(['a', 'b', 'c']).at(0, 2).value();\n       * // => ['a', 'c']\n       */\n      var wrapperAt = rest(function(paths) {\n        paths = baseFlatten(paths, 1);\n        var length = paths.length,\n            start = length ? paths[0] : 0,\n            value = this.__wrapped__,\n            interceptor = function(object) { return baseAt(object, paths); };\n  \n        if (length > 1 || this.__actions__.length ||\n            !(value instanceof LazyWrapper) || !isIndex(start)) {\n          return this.thru(interceptor);\n        }\n        value = value.slice(start, +start + (length ? 1 : 0));\n        value.__actions__.push({\n          'func': thru,\n          'args': [interceptor],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(value, this.__chain__).thru(function(array) {\n          if (length && !array.length) {\n            array.push(undefined);\n          }\n          return array;\n        });\n      });\n  \n      /**\n       * Enables explicit method chaining on the wrapper object.\n       *\n       * @name chain\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // A sequence without explicit chaining.\n       * _(users).head();\n       * // => { 'user': 'barney', 'age': 36 }\n       *\n       * // A sequence with explicit chaining.\n       * _(users)\n       *   .chain()\n       *   .head()\n       *   .pick('user')\n       *   .value();\n       * // => { 'user': 'barney' }\n       */\n      function wrapperChain() {\n        return chain(this);\n      }\n  \n      /**\n       * Executes the chained sequence and returns the wrapped result.\n       *\n       * @name commit\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2];\n       * var wrapped = _(array).push(3);\n       *\n       * console.log(array);\n       * // => [1, 2]\n       *\n       * wrapped = wrapped.commit();\n       * console.log(array);\n       * // => [1, 2, 3]\n       *\n       * wrapped.last();\n       * // => 3\n       *\n       * console.log(array);\n       * // => [1, 2, 3]\n       */\n      function wrapperCommit() {\n        return new LodashWrapper(this.value(), this.__chain__);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.flatMap`.\n       *\n       * @name flatMap\n       * @memberOf _\n       * @category Seq\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _([1, 2]).flatMap(duplicate).value();\n       * // => [1, 1, 2, 2]\n       */\n      function wrapperFlatMap(iteratee) {\n        return this.map(iteratee).flatten();\n      }\n  \n      /**\n       * Gets the next value on a wrapped object following the\n       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n       *\n       * @name next\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the next iterator value.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 1 }\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 2 }\n       *\n       * wrapped.next();\n       * // => { 'done': true, 'value': undefined }\n       */\n      function wrapperNext() {\n        if (this.__values__ === undefined) {\n          this.__values__ = toArray(this.value());\n        }\n        var done = this.__index__ >= this.__values__.length,\n            value = done ? undefined : this.__values__[this.__index__++];\n  \n        return { 'done': done, 'value': value };\n      }\n  \n      /**\n       * Enables the wrapper to be iterable.\n       *\n       * @name Symbol.iterator\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the wrapper object.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped[Symbol.iterator]() === wrapped;\n       * // => true\n       *\n       * Array.from(wrapped);\n       * // => [1, 2]\n       */\n      function wrapperToIterator() {\n        return this;\n      }\n  \n      /**\n       * Creates a clone of the chained sequence planting `value` as the wrapped value.\n       *\n       * @name plant\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to plant.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2]).map(square);\n       * var other = wrapped.plant([3, 4]);\n       *\n       * other.value();\n       * // => [9, 16]\n       *\n       * wrapped.value();\n       * // => [1, 4]\n       */\n      function wrapperPlant(value) {\n        var result,\n            parent = this;\n  \n        while (parent instanceof baseLodash) {\n          var clone = wrapperClone(parent);\n          clone.__index__ = 0;\n          clone.__values__ = undefined;\n          if (result) {\n            previous.__wrapped__ = clone;\n          } else {\n            result = clone;\n          }\n          var previous = clone;\n          parent = parent.__wrapped__;\n        }\n        previous.__wrapped__ = value;\n        return result;\n      }\n  \n      /**\n       * This method is the wrapper version of `_.reverse`.\n       *\n       * **Note:** This method mutates the wrapped array.\n       *\n       * @name reverse\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _(array).reverse().value()\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function wrapperReverse() {\n        var value = this.__wrapped__;\n        if (value instanceof LazyWrapper) {\n          var wrapped = value;\n          if (this.__actions__.length) {\n            wrapped = new LazyWrapper(this);\n          }\n          wrapped = wrapped.reverse();\n          wrapped.__actions__.push({\n            'func': thru,\n            'args': [reverse],\n            'thisArg': undefined\n          });\n          return new LodashWrapper(wrapped, this.__chain__);\n        }\n        return this.thru(reverse);\n      }\n  \n      /**\n       * Executes the chained sequence to extract the unwrapped value.\n       *\n       * @name value\n       * @memberOf _\n       * @alias toJSON, valueOf\n       * @category Seq\n       * @returns {*} Returns the resolved unwrapped value.\n       * @example\n       *\n       * _([1, 2, 3]).value();\n       * // => [1, 2, 3]\n       */\n      function wrapperValue() {\n        return baseWrapperValue(this.__wrapped__, this.__actions__);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the number of times the key was returned by `iteratee`.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.countBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': 1, '6': 2 }\n       *\n       * _.countBy(['one', 'two', 'three'], 'length');\n       * // => { '3': 2, '5': 1 }\n       */\n      var countBy = createAggregator(function(result, value, key) {\n        hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n      });\n  \n      /**\n       * Checks if `predicate` returns truthy for **all** elements of `collection`.\n       * Iteration is stopped once `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n       * @example\n       *\n       * _.every([true, 1, null, 'yes'], Boolean);\n       * // => false\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': false },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.every(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.every(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.every(users, 'active');\n       * // => false\n       */\n      function every(collection, predicate, guard) {\n        var func = isArray(collection) ? arrayEvery : baseEvery;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning an array of all elements\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.filter(users, { 'age': 36, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.filter(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.filter(users, 'active');\n       * // => objects for ['barney']\n       */\n      function filter(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning the first element\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': true },\n       *   { 'user': 'fred',    'age': 40, 'active': false },\n       *   { 'user': 'pebbles', 'age': 1,  'active': true }\n       * ];\n       *\n       * _.find(users, function(o) { return o.age < 40; });\n       * // => object for 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.find(users, { 'age': 1, 'active': true });\n       * // => object for 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.find(users, ['active', false]);\n       * // => object for 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.find(users, 'active');\n       * // => object for 'barney'\n       */\n      function find(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEach);\n      }\n  \n      /**\n       * This method is like `_.find` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * _.findLast([1, 2, 3, 4], function(n) {\n       *   return n % 2 == 1;\n       * });\n       * // => 3\n       */\n      function findLast(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, true);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEachRight);\n      }\n  \n      /**\n       * Creates an array of flattened values by running each element in `collection`\n       * through `iteratee` and concating its result to the other mapped values.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _.flatMap([1, 2], duplicate);\n       * // => [1, 1, 2, 2]\n       */\n      function flatMap(collection, iteratee) {\n        return baseFlatten(map(collection, iteratee), 1);\n      }\n  \n      /**\n       * Iterates over elements of `collection` invoking `iteratee` for each element.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       * Iteratee functions may exit iteration early by explicitly returning `false`.\n       *\n       * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n       * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`\n       * for object iteration.\n       *\n       * @static\n       * @memberOf _\n       * @alias each\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _([1, 2]).forEach(function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `1` then `2`\n       *\n       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forEach(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEach(collection, iteratee)\n          : baseEach(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forEach` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @alias eachRight\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _.forEachRight([1, 2], function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `2` then `1`\n       */\n      function forEachRight(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEachRight(collection, iteratee)\n          : baseEachRight(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is an array of elements responsible for generating the key.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': [4.2], '6': [6.1, 6.3] }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.groupBy(['one', 'two', 'three'], 'length');\n       * // => { '3': ['one', 'two'], '5': ['three'] }\n       */\n      var groupBy = createAggregator(function(result, value, key) {\n        if (hasOwnProperty.call(result, key)) {\n          result[key].push(value);\n        } else {\n          result[key] = [value];\n        }\n      });\n  \n      /**\n       * Checks if `value` is in `collection`. If `collection` is a string it's checked\n       * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * is used for equality comparisons. If `fromIndex` is negative, it's used as\n       * the offset from the end of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object|string} collection The collection to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {boolean} Returns `true` if `value` is found, else `false`.\n       * @example\n       *\n       * _.includes([1, 2, 3], 1);\n       * // => true\n       *\n       * _.includes([1, 2, 3], 1, 2);\n       * // => false\n       *\n       * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n       * // => true\n       *\n       * _.includes('pebbles', 'eb');\n       * // => true\n       */\n      function includes(collection, value, fromIndex, guard) {\n        collection = isArrayLike(collection) ? collection : values(collection);\n        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n  \n        var length = collection.length;\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return isString(collection)\n          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n      }\n  \n      /**\n       * Invokes the method at `path` of each element in `collection`, returning\n       * an array of the results of each invoked method. Any additional arguments\n       * are provided to each invoked method. If `methodName` is a function it's\n       * invoked for, and `this` bound to, each element in `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Array|Function|string} path The path of the method to invoke or\n       *  the function invoked per iteration.\n       * @param {...*} [args] The arguments to invoke each method with.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n       * // => [[1, 5, 7], [1, 2, 3]]\n       *\n       * _.invokeMap([123, 456], String.prototype.split, '');\n       * // => [['1', '2', '3'], ['4', '5', '6']]\n       */\n      var invokeMap = rest(function(collection, path, args) {\n        var index = -1,\n            isFunc = typeof path == 'function',\n            isProp = isKey(path),\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value) {\n          var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n        });\n        return result;\n      });\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the last element responsible for generating the key. The\n       * iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * var array = [\n       *   { 'dir': 'left', 'code': 97 },\n       *   { 'dir': 'right', 'code': 100 }\n       * ];\n       *\n       * _.keyBy(array, function(o) {\n       *   return String.fromCharCode(o.code);\n       * });\n       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n       *\n       * _.keyBy(array, 'dir');\n       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n       */\n      var keyBy = createAggregator(function(result, value, key) {\n        result[key] = value;\n      });\n  \n      /**\n       * Creates an array of values by running each element in `collection` through\n       * `iteratee`. The iteratee is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n       *\n       * The guarded methods are:\n       * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,\n       * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,\n       * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,\n       * and `words`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * _.map([4, 8], square);\n       * // => [16, 64]\n       *\n       * _.map({ 'a': 4, 'b': 8 }, square);\n       * // => [16, 64] (iteration order is not guaranteed)\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.map(users, 'user');\n       * // => ['barney', 'fred']\n       */\n      function map(collection, iteratee) {\n        var func = isArray(collection) ? arrayMap : baseMap;\n        return func(collection, getIteratee(iteratee, 3));\n      }\n  \n      /**\n       * This method is like `_.sortBy` except that it allows specifying the sort\n       * orders of the iteratees to sort by. If `orders` is unspecified, all values\n       * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n       * descending or \"asc\" for ascending sort order of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.\n       * @param {string[]} [orders] The sort orders of `iteratees`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 34 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 36 }\n       * ];\n       *\n       * // Sort by `user` in ascending order and by `age` in descending order.\n       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      function orderBy(collection, iteratees, orders, guard) {\n        if (collection == null) {\n          return [];\n        }\n        if (!isArray(iteratees)) {\n          iteratees = iteratees == null ? [] : [iteratees];\n        }\n        orders = guard ? undefined : orders;\n        if (!isArray(orders)) {\n          orders = orders == null ? [] : [orders];\n        }\n        return baseOrderBy(collection, iteratees, orders);\n      }\n  \n      /**\n       * Creates an array of elements split into two groups, the first of which\n       * contains elements `predicate` returns truthy for, the second of which\n       * contains elements `predicate` returns falsey for. The predicate is\n       * invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of grouped elements.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': false },\n       *   { 'user': 'fred',    'age': 40, 'active': true },\n       *   { 'user': 'pebbles', 'age': 1,  'active': false }\n       * ];\n       *\n       * _.partition(users, function(o) { return o.active; });\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.partition(users, { 'age': 1, 'active': false });\n       * // => objects for [['pebbles'], ['barney', 'fred']]\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.partition(users, ['active', false]);\n       * // => objects for [['barney', 'pebbles'], ['fred']]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.partition(users, 'active');\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       */\n      var partition = createAggregator(function(result, value, key) {\n        result[key ? 0 : 1].push(value);\n      }, function() { return [[], []]; });\n  \n      /**\n       * Reduces `collection` to a value which is the accumulated result of running\n       * each element in `collection` through `iteratee`, where each successive\n       * invocation is supplied the return value of the previous. If `accumulator`\n       * is not given the first element of `collection` is used as the initial\n       * value. The iteratee is invoked with four arguments:\n       * (accumulator, value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.reduce`, `_.reduceRight`, and `_.transform`.\n       *\n       * The guarded methods are:\n       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n       * and `sortBy`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.reduce([1, 2], function(sum, n) {\n       *   return sum + n;\n       * }, 0);\n       * // => 3\n       *\n       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       *   return result;\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n       */\n      function reduce(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduce : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n      }\n  \n      /**\n       * This method is like `_.reduce` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * var array = [[0, 1], [2, 3], [4, 5]];\n       *\n       * _.reduceRight(array, function(flattened, other) {\n       *   return flattened.concat(other);\n       * }, []);\n       * // => [4, 5, 2, 3, 0, 1]\n       */\n      function reduceRight(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduceRight : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n      }\n  \n      /**\n       * The opposite of `_.filter`; this method returns the elements of `collection`\n       * that `predicate` does **not** return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': false },\n       *   { 'user': 'fred',   'age': 40, 'active': true }\n       * ];\n       *\n       * _.reject(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.reject(users, { 'age': 40, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.reject(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.reject(users, 'active');\n       * // => objects for ['barney']\n       */\n      function reject(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        predicate = getIteratee(predicate, 3);\n        return func(collection, function(value, index, collection) {\n          return !predicate(value, index, collection);\n        });\n      }\n  \n      /**\n       * Gets a random element from `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @returns {*} Returns the random element.\n       * @example\n       *\n       * _.sample([1, 2, 3, 4]);\n       * // => 2\n       */\n      function sample(collection) {\n        var array = isArrayLike(collection) ? collection : values(collection),\n            length = array.length;\n  \n        return length > 0 ? array[baseRandom(0, length - 1)] : undefined;\n      }\n  \n      /**\n       * Gets `n` random elements at unique keys from `collection` up to the\n       * size of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @param {number} [n=0] The number of elements to sample.\n       * @returns {Array} Returns the random elements.\n       * @example\n       *\n       * _.sampleSize([1, 2, 3], 2);\n       * // => [3, 1]\n       *\n       * _.sampleSize([1, 2, 3], 4);\n       * // => [2, 3, 1]\n       */\n      function sampleSize(collection, n) {\n        var index = -1,\n            result = toArray(collection),\n            length = result.length,\n            lastIndex = length - 1;\n  \n        n = baseClamp(toInteger(n), 0, length);\n        while (++index < n) {\n          var rand = baseRandom(index, lastIndex),\n              value = result[rand];\n  \n          result[rand] = result[index];\n          result[index] = value;\n        }\n        result.length = n;\n        return result;\n      }\n  \n      /**\n       * Creates an array of shuffled values, using a version of the\n       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to shuffle.\n       * @returns {Array} Returns the new shuffled array.\n       * @example\n       *\n       * _.shuffle([1, 2, 3, 4]);\n       * // => [4, 1, 3, 2]\n       */\n      function shuffle(collection) {\n        return sampleSize(collection, MAX_ARRAY_LENGTH);\n      }\n  \n      /**\n       * Gets the size of `collection` by returning its length for array-like\n       * values or the number of own enumerable properties for objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to inspect.\n       * @returns {number} Returns the collection size.\n       * @example\n       *\n       * _.size([1, 2, 3]);\n       * // => 3\n       *\n       * _.size({ 'a': 1, 'b': 2 });\n       * // => 2\n       *\n       * _.size('pebbles');\n       * // => 7\n       */\n      function size(collection) {\n        if (collection == null) {\n          return 0;\n        }\n        if (isArrayLike(collection)) {\n          var result = collection.length;\n          return (result && isString(collection)) ? stringSize(collection) : result;\n        }\n        return keys(collection).length;\n      }\n  \n      /**\n       * Checks if `predicate` returns truthy for **any** element of `collection`.\n       * Iteration is stopped once `predicate` returns truthy. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       * @example\n       *\n       * _.some([null, 0, 'yes', false], Boolean);\n       * // => true\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': true },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.some(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.some(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.some(users, 'active');\n       * // => true\n       */\n      function some(collection, predicate, guard) {\n        var func = isArray(collection) ? arraySome : baseSome;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Creates an array of elements, sorted in ascending order by the results of\n       * running each element in a collection through each iteratee. This method\n       * performs a stable sort, that is, it preserves the original sort order of\n       * equal elements. The iteratees are invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]\n       *  The iteratees to sort by, specified individually or in arrays.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 34 }\n       * ];\n       *\n       * _.sortBy(users, function(o) { return o.user; });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       *\n       * _.sortBy(users, ['user', 'age']);\n       * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n       *\n       * _.sortBy(users, 'user', function(o) {\n       *   return Math.floor(o.age / 10);\n       * });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      var sortBy = rest(function(collection, iteratees) {\n        if (collection == null) {\n          return [];\n        }\n        var length = iteratees.length;\n        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n          iteratees = [];\n        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n          iteratees.length = 1;\n        }\n        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Gets the timestamp of the number of milliseconds that have elapsed since\n       * the Unix epoch (1 January 1970 00:00:00 UTC).\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Date\n       * @returns {number} Returns the timestamp.\n       * @example\n       *\n       * _.defer(function(stamp) {\n       *   console.log(_.now() - stamp);\n       * }, _.now());\n       * // => logs the number of milliseconds it took for the deferred function to be invoked\n       */\n      var now = Date.now;\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The opposite of `_.before`; this method creates a function that invokes\n       * `func` once it's called `n` or more times.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls before `func` is invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var saves = ['profile', 'settings'];\n       *\n       * var done = _.after(saves.length, function() {\n       *   console.log('done saving!');\n       * });\n       *\n       * _.forEach(saves, function(type) {\n       *   asyncSave({ 'type': type, 'complete': done });\n       * });\n       * // => logs 'done saving!' after the two async saves have completed\n       */\n      function after(n, func) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n < 1) {\n            return func.apply(this, arguments);\n          }\n        };\n      }\n  \n      /**\n       * Creates a function that accepts up to `n` arguments, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @param {number} [n=func.length] The arity cap.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n       * // => [6, 8, 10]\n       */\n      function ary(func, n, guard) {\n        n = guard ? undefined : n;\n        n = (func && n == null) ? func.length : n;\n        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n      }\n  \n      /**\n       * Creates a function that invokes `func`, with the `this` binding and arguments\n       * of the created function, while it's called less than `n` times. Subsequent\n       * calls to the created function return the result of the last `func` invocation.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls at which `func` is no longer invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * jQuery(element).on('click', _.before(5, addContactToList));\n       * // => allows adding up to 4 contacts to the list\n       */\n      function before(n, func) {\n        var result;\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n > 0) {\n            result = func.apply(this, arguments);\n          }\n          if (n <= 1) {\n            func = undefined;\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of `thisArg`\n       * and prepends any additional `_.bind` arguments to those provided to the\n       * bound function.\n       *\n       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** Unlike native `Function#bind` this method doesn't set the \"length\"\n       * property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to bind.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var greet = function(greeting, punctuation) {\n       *   return greeting + ' ' + this.user + punctuation;\n       * };\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * var bound = _.bind(greet, object, 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bind(greet, object, _, '!');\n       * bound('hi');\n       * // => 'hi fred!'\n       */\n      var bind = rest(function(func, thisArg, partials) {\n        var bitmask = BIND_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bind.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(func, bitmask, thisArg, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes the method at `object[key]` and prepends\n       * any additional `_.bindKey` arguments to those provided to the bound function.\n       *\n       * This method differs from `_.bind` by allowing bound functions to reference\n       * methods that may be redefined or don't yet exist.\n       * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n       * for more details.\n       *\n       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Object} object The object to invoke the method on.\n       * @param {string} key The key of the method.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var object = {\n       *   'user': 'fred',\n       *   'greet': function(greeting, punctuation) {\n       *     return greeting + ' ' + this.user + punctuation;\n       *   }\n       * };\n       *\n       * var bound = _.bindKey(object, 'greet', 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * object.greet = function(greeting, punctuation) {\n       *   return greeting + 'ya ' + this.user + punctuation;\n       * };\n       *\n       * bound('!');\n       * // => 'hiya fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bindKey(object, 'greet', _, '!');\n       * bound('hi');\n       * // => 'hiya fred!'\n       */\n      var bindKey = rest(function(object, key, partials) {\n        var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bindKey.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(key, bitmask, object, partials, holders);\n      });\n  \n      /**\n       * Creates a function that accepts arguments of `func` and either invokes\n       * `func` returning its result, if at least `arity` number of arguments have\n       * been provided, or returns a function that accepts the remaining `func`\n       * arguments, and so on. The arity of `func` may be specified if `func.length`\n       * is not sufficient.\n       *\n       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curry(abc);\n       *\n       * curried(1)(2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(1)(_, 3)(2);\n       * // => [1, 2, 3]\n       */\n      function curry(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curry.placeholder;\n        return result;\n      }\n  \n      /**\n       * This method is like `_.curry` except that arguments are applied to `func`\n       * in the manner of `_.partialRight` instead of `_.partial`.\n       *\n       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curryRight(abc);\n       *\n       * curried(3)(2)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(2, 3)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(3)(1, _)(2);\n       * // => [1, 2, 3]\n       */\n      function curryRight(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curryRight.placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a debounced function that delays invoking `func` until after `wait`\n       * milliseconds have elapsed since the last time the debounced function was\n       * invoked. The debounced function comes with a `cancel` method to cancel\n       * delayed `func` invocations and a `flush` method to immediately invoke them.\n       * Provide an options object to indicate whether `func` should be invoked on\n       * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n       * with the last arguments provided to the debounced function. Subsequent calls\n       * to the debounced function return the result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the debounced function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.debounce` and `_.throttle`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to debounce.\n       * @param {number} [wait=0] The number of milliseconds to delay.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=false] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n       *  delayed before it's invoked.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new debounced function.\n       * @example\n       *\n       * // Avoid costly calculations while the window size is in flux.\n       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n       *\n       * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n       * jQuery(element).on('click', _.debounce(sendMail, 300, {\n       *   'leading': true,\n       *   'trailing': false\n       * }));\n       *\n       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n       * var source = new EventSource('/stream');\n       * jQuery(source).on('message', debounced);\n       *\n       * // Cancel the trailing debounced invocation.\n       * jQuery(window).on('popstate', debounced.cancel);\n       */\n      function debounce(func, wait, options) {\n        var args,\n            maxTimeoutId,\n            result,\n            stamp,\n            thisArg,\n            timeoutId,\n            trailingCall,\n            lastCalled = 0,\n            leading = false,\n            maxWait = false,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        wait = toNumber(wait) || 0;\n        if (isObject(options)) {\n          leading = !!options.leading;\n          maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n  \n        function cancel() {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          lastCalled = 0;\n          args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;\n        }\n  \n        function complete(isCalled, id) {\n          if (id) {\n            clearTimeout(id);\n          }\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = undefined;\n            }\n          }\n        }\n  \n        function delayed() {\n          var remaining = wait - (now() - stamp);\n          if (remaining <= 0 || remaining > wait) {\n            complete(trailingCall, maxTimeoutId);\n          } else {\n            timeoutId = setTimeout(delayed, remaining);\n          }\n        }\n  \n        function flush() {\n          if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {\n            result = func.apply(thisArg, args);\n          }\n          cancel();\n          return result;\n        }\n  \n        function maxDelayed() {\n          complete(trailing, timeoutId);\n        }\n  \n        function debounced() {\n          args = arguments;\n          stamp = now();\n          thisArg = this;\n          trailingCall = trailing && (timeoutId || !leading);\n  \n          if (maxWait === false) {\n            var leadingCall = leading && !timeoutId;\n          } else {\n            if (!lastCalled && !maxTimeoutId && !leading) {\n              lastCalled = stamp;\n            }\n            var remaining = maxWait - (stamp - lastCalled);\n  \n            var isCalled = (remaining <= 0 || remaining > maxWait) &&\n              (leading || maxTimeoutId);\n  \n            if (isCalled) {\n              if (maxTimeoutId) {\n                maxTimeoutId = clearTimeout(maxTimeoutId);\n              }\n              lastCalled = stamp;\n              result = func.apply(thisArg, args);\n            }\n            else if (!maxTimeoutId) {\n              maxTimeoutId = setTimeout(maxDelayed, remaining);\n            }\n          }\n          if (isCalled && timeoutId) {\n            timeoutId = clearTimeout(timeoutId);\n          }\n          else if (!timeoutId && wait !== maxWait) {\n            timeoutId = setTimeout(delayed, wait);\n          }\n          if (leadingCall) {\n            isCalled = true;\n            result = func.apply(thisArg, args);\n          }\n          if (isCalled && !timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n          return result;\n        }\n        debounced.cancel = cancel;\n        debounced.flush = flush;\n        return debounced;\n      }\n  \n      /**\n       * Defers invoking the `func` until the current call stack has cleared. Any\n       * additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to defer.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.defer(function(text) {\n       *   console.log(text);\n       * }, 'deferred');\n       * // => logs 'deferred' after one or more milliseconds\n       */\n      var defer = rest(function(func, args) {\n        return baseDelay(func, 1, args);\n      });\n  \n      /**\n       * Invokes `func` after `wait` milliseconds. Any additional arguments are\n       * provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.delay(function(text) {\n       *   console.log(text);\n       * }, 1000, 'later');\n       * // => logs 'later' after one second\n       */\n      var delay = rest(function(func, wait, args) {\n        return baseDelay(func, toNumber(wait) || 0, args);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments reversed.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to flip arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var flipped = _.flip(function() {\n       *   return _.toArray(arguments);\n       * });\n       *\n       * flipped('a', 'b', 'c', 'd');\n       * // => ['d', 'c', 'b', 'a']\n       */\n      function flip(func) {\n        return createWrapper(func, FLIP_FLAG);\n      }\n  \n      /**\n       * Creates a function that memoizes the result of `func`. If `resolver` is\n       * provided it determines the cache key for storing the result based on the\n       * arguments provided to the memoized function. By default, the first argument\n       * provided to the memoized function is used as the map cache key. The `func`\n       * is invoked with the `this` binding of the memoized function.\n       *\n       * **Note:** The cache is exposed as the `cache` property on the memoized\n       * function. Its creation may be customized by replacing the `_.memoize.Cache`\n       * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n       * method interface of `delete`, `get`, `has`, and `set`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to have its output memoized.\n       * @param {Function} [resolver] The function to resolve the cache key.\n       * @returns {Function} Returns the new memoizing function.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2 };\n       * var other = { 'c': 3, 'd': 4 };\n       *\n       * var values = _.memoize(_.values);\n       * values(object);\n       * // => [1, 2]\n       *\n       * values(other);\n       * // => [3, 4]\n       *\n       * object.a = 2;\n       * values(object);\n       * // => [1, 2]\n       *\n       * // Modify the result cache.\n       * values.cache.set(object, ['a', 'b']);\n       * values(object);\n       * // => ['a', 'b']\n       *\n       * // Replace `_.memoize.Cache`.\n       * _.memoize.Cache = WeakMap;\n       */\n      function memoize(func, resolver) {\n        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var memoized = function() {\n          var args = arguments,\n              key = resolver ? resolver.apply(this, args) : args[0],\n              cache = memoized.cache;\n  \n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n          var result = func.apply(this, args);\n          memoized.cache = cache.set(key, result);\n          return result;\n        };\n        memoized.cache = new memoize.Cache;\n        return memoized;\n      }\n  \n      /**\n       * Creates a function that negates the result of the predicate `func`. The\n       * `func` predicate is invoked with the `this` binding and arguments of the\n       * created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} predicate The predicate to negate.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function isEven(n) {\n       *   return n % 2 == 0;\n       * }\n       *\n       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n       * // => [1, 3, 5]\n       */\n      function negate(predicate) {\n        if (typeof predicate != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return function() {\n          return !predicate.apply(this, arguments);\n        };\n      }\n  \n      /**\n       * Creates a function that is restricted to invoking `func` once. Repeat calls\n       * to the function return the value of the first invocation. The `func` is\n       * invoked with the `this` binding and arguments of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var initialize = _.once(createApplication);\n       * initialize();\n       * initialize();\n       * // `initialize` invokes `createApplication` once\n       */\n      function once(func) {\n        return before(2, func);\n      }\n  \n      /**\n       * Creates a function that invokes `func` with arguments transformed by\n       * corresponding `transforms`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to wrap.\n       * @param {...(Function|Function[])} [transforms] The functions to transform\n       * arguments, specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function doubled(n) {\n       *   return n * 2;\n       * }\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var func = _.overArgs(function(x, y) {\n       *   return [x, y];\n       * }, square, doubled);\n       *\n       * func(9, 3);\n       * // => [81, 6]\n       *\n       * func(10, 5);\n       * // => [100, 10]\n       */\n      var overArgs = rest(function(func, transforms) {\n        transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());\n  \n        var funcsLength = transforms.length;\n        return rest(function(args) {\n          var index = -1,\n              length = nativeMin(args.length, funcsLength);\n  \n          while (++index < length) {\n            args[index] = transforms[index].call(this, args[index]);\n          }\n          return apply(func, this, args);\n        });\n      });\n  \n      /**\n       * Creates a function that invokes `func` with `partial` arguments prepended\n       * to those provided to the new function. This method is like `_.bind` except\n       * it does **not** alter the `this` binding.\n       *\n       * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var sayHelloTo = _.partial(greet, 'hello');\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       *\n       * // Partially applied with placeholders.\n       * var greetFred = _.partial(greet, _, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       */\n      var partial = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partial.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * This method is like `_.partial` except that partially applied arguments\n       * are appended to those provided to the new function.\n       *\n       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var greetFred = _.partialRight(greet, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       *\n       * // Partially applied with placeholders.\n       * var sayHelloTo = _.partialRight(greet, 'hello', _);\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       */\n      var partialRight = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partialRight.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments arranged according\n       * to the specified indexes where the argument value at the first index is\n       * provided as the first argument, the argument value at the second index is\n       * provided as the second argument, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to rearrange arguments for.\n       * @param {...(number|number[])} indexes The arranged argument indexes,\n       *  specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var rearged = _.rearg(function(a, b, c) {\n       *   return [a, b, c];\n       * }, 2, 0, 1);\n       *\n       * rearged('b', 'c', 'a')\n       * // => ['a', 'b', 'c']\n       */\n      var rearg = rest(function(func, indexes) {\n        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));\n      });\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the\n       * created function and arguments from `start` and beyond provided as an array.\n       *\n       * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to apply a rest parameter to.\n       * @param {number} [start=func.length-1] The start position of the rest parameter.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.rest(function(what, names) {\n       *   return what + ' ' + _.initial(names).join(', ') +\n       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n       * });\n       *\n       * say('hello', 'fred', 'barney', 'pebbles');\n       * // => 'hello fred, barney, & pebbles'\n       */\n      function rest(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n        return function() {\n          var args = arguments,\n              index = -1,\n              length = nativeMax(args.length - start, 0),\n              array = Array(length);\n  \n          while (++index < length) {\n            array[index] = args[start + index];\n          }\n          switch (start) {\n            case 0: return func.call(this, array);\n            case 1: return func.call(this, args[0], array);\n            case 2: return func.call(this, args[0], args[1], array);\n          }\n          var otherArgs = Array(start + 1);\n          index = -1;\n          while (++index < start) {\n            otherArgs[index] = args[index];\n          }\n          otherArgs[start] = array;\n          return apply(func, this, otherArgs);\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the created\n       * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n       *\n       * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to spread arguments over.\n       * @param {number} [start=0] The start position of the spread.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.spread(function(who, what) {\n       *   return who + ' says ' + what;\n       * });\n       *\n       * say(['fred', 'hello']);\n       * // => 'fred says hello'\n       *\n       * var numbers = Promise.all([\n       *   Promise.resolve(40),\n       *   Promise.resolve(36)\n       * ]);\n       *\n       * numbers.then(_.spread(function(x, y) {\n       *   return x + y;\n       * }));\n       * // => a Promise of 76\n       */\n      function spread(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n        return rest(function(args) {\n          var array = args[start],\n              otherArgs = args.slice(0, start);\n  \n          if (array) {\n            arrayPush(otherArgs, array);\n          }\n          return apply(func, this, otherArgs);\n        });\n      }\n  \n      /**\n       * Creates a throttled function that only invokes `func` at most once per\n       * every `wait` milliseconds. The throttled function comes with a `cancel`\n       * method to cancel delayed `func` invocations and a `flush` method to\n       * immediately invoke them. Provide an options object to indicate whether\n       * `func` should be invoked on the leading and/or trailing edge of the `wait`\n       * timeout. The `func` is invoked with the last arguments provided to the\n       * throttled function. Subsequent calls to the throttled function return the\n       * result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the throttled function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.throttle` and `_.debounce`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to throttle.\n       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=true] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new throttled function.\n       * @example\n       *\n       * // Avoid excessively updating the position while scrolling.\n       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n       *\n       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n       * jQuery(element).on('click', throttled);\n       *\n       * // Cancel the trailing throttled invocation.\n       * jQuery(window).on('popstate', throttled.cancel);\n       */\n      function throttle(func, wait, options) {\n        var leading = true,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        if (isObject(options)) {\n          leading = 'leading' in options ? !!options.leading : leading;\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n        return debounce(func, wait, {\n          'leading': leading,\n          'maxWait': wait,\n          'trailing': trailing\n        });\n      }\n  \n      /**\n       * Creates a function that accepts up to one argument, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.unary(parseInt));\n       * // => [6, 8, 10]\n       */\n      function unary(func) {\n        return ary(func, 1);\n      }\n  \n      /**\n       * Creates a function that provides `value` to the wrapper function as its\n       * first argument. Any additional arguments provided to the function are\n       * appended to those provided to the wrapper function. The wrapper is invoked\n       * with the `this` binding of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {*} value The value to wrap.\n       * @param {Function} [wrapper=identity] The wrapper function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var p = _.wrap(_.escape, function(func, text) {\n       *   return '<p>' + func(text) + '</p>';\n       * });\n       *\n       * p('fred, barney, & pebbles');\n       * // => '<p>fred, barney, &amp; pebbles</p>'\n       */\n      function wrap(value, wrapper) {\n        wrapper = wrapper == null ? identity : wrapper;\n        return partial(wrapper, value);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Casts `value` as an array if it's not one.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast array.\n       * @example\n       *\n       * _.castArray(1);\n       * // => [1]\n       *\n       * _.castArray({ 'a': 1 });\n       * // => [{ 'a': 1 }]\n       *\n       * _.castArray('abc');\n       * // => ['abc']\n       *\n       * _.castArray(null);\n       * // => [null]\n       *\n       * _.castArray(undefined);\n       * // => [undefined]\n       *\n       * _.castArray();\n       * // => []\n       *\n       * var array = [1, 2, 3];\n       * console.log(_.castArray(array) === array);\n       * // => true\n       */\n      function castArray() {\n        if (!arguments.length) {\n          return [];\n        }\n        var value = arguments[0];\n        return isArray(value) ? value : [value];\n      }\n  \n      /**\n       * Creates a shallow clone of `value`.\n       *\n       * **Note:** This method is loosely based on the\n       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n       * and supports cloning arrays, array buffers, booleans, date objects, maps,\n       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n       * arrays. The own enumerable properties of `arguments` objects are cloned\n       * as plain objects. An empty object is returned for uncloneable values such\n       * as error objects, functions, DOM nodes, and WeakMaps.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var shallow = _.clone(objects);\n       * console.log(shallow[0] === objects[0]);\n       * // => true\n       */\n      function clone(value) {\n        return baseClone(value);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it accepts `customizer` which\n       * is invoked to produce the cloned value. If `customizer` returns `undefined`\n       * cloning is handled by the method instead. The `customizer` is invoked with\n       * up to four arguments; (value [, index|key, object, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(false);\n       *   }\n       * }\n       *\n       * var el = _.cloneWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 0\n       */\n      function cloneWith(value, customizer) {\n        return baseClone(value, false, customizer);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var deep = _.cloneDeep(objects);\n       * console.log(deep[0] === objects[0]);\n       * // => false\n       */\n      function cloneDeep(value) {\n        return baseClone(value, true);\n      }\n  \n      /**\n       * This method is like `_.cloneWith` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(true);\n       *   }\n       * }\n       *\n       * var el = _.cloneDeepWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 20\n       */\n      function cloneDeepWith(value, customizer) {\n        return baseClone(value, true, customizer);\n      }\n  \n      /**\n       * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * comparison between two values to determine if they are equivalent.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.eq(object, object);\n       * // => true\n       *\n       * _.eq(object, other);\n       * // => false\n       *\n       * _.eq('a', 'a');\n       * // => true\n       *\n       * _.eq('a', Object('a'));\n       * // => false\n       *\n       * _.eq(NaN, NaN);\n       * // => true\n       */\n      function eq(value, other) {\n        return value === other || (value !== value && other !== other);\n      }\n  \n      /**\n       * Checks if `value` is greater than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n       * @example\n       *\n       * _.gt(3, 1);\n       * // => true\n       *\n       * _.gt(3, 3);\n       * // => false\n       *\n       * _.gt(1, 3);\n       * // => false\n       */\n      function gt(value, other) {\n        return value > other;\n      }\n  \n      /**\n       * Checks if `value` is greater than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.gte(3, 1);\n       * // => true\n       *\n       * _.gte(3, 3);\n       * // => true\n       *\n       * _.gte(1, 3);\n       * // => false\n       */\n      function gte(value, other) {\n        return value >= other;\n      }\n  \n      /**\n       * Checks if `value` is likely an `arguments` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArguments(function() { return arguments; }());\n       * // => true\n       *\n       * _.isArguments([1, 2, 3]);\n       * // => false\n       */\n      function isArguments(value) {\n        // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n          (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as an `Array` object.\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArray([1, 2, 3]);\n       * // => true\n       *\n       * _.isArray(document.body.children);\n       * // => false\n       *\n       * _.isArray('abc');\n       * // => false\n       *\n       * _.isArray(_.noop);\n       * // => false\n       */\n      var isArray = Array.isArray;\n  \n      /**\n       * Checks if `value` is classified as an `ArrayBuffer` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArrayBuffer(new ArrayBuffer(2));\n       * // => true\n       *\n       * _.isArrayBuffer(new Array(2));\n       * // => false\n       */\n      function isArrayBuffer(value) {\n        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;\n      }\n  \n      /**\n       * Checks if `value` is array-like. A value is considered array-like if it's\n       * not a function and has a `value.length` that's an integer greater than or\n       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n       * @example\n       *\n       * _.isArrayLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLike(document.body.children);\n       * // => true\n       *\n       * _.isArrayLike('abc');\n       * // => true\n       *\n       * _.isArrayLike(_.noop);\n       * // => false\n       */\n      function isArrayLike(value) {\n        return value != null &&\n          !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));\n      }\n  \n      /**\n       * This method is like `_.isArrayLike` except that it also checks if `value`\n       * is an object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.\n       * @example\n       *\n       * _.isArrayLikeObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLikeObject(document.body.children);\n       * // => true\n       *\n       * _.isArrayLikeObject('abc');\n       * // => false\n       *\n       * _.isArrayLikeObject(_.noop);\n       * // => false\n       */\n      function isArrayLikeObject(value) {\n        return isObjectLike(value) && isArrayLike(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a boolean primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isBoolean(false);\n       * // => true\n       *\n       * _.isBoolean(null);\n       * // => false\n       */\n      function isBoolean(value) {\n        return value === true || value === false ||\n          (isObjectLike(value) && objectToString.call(value) == boolTag);\n      }\n  \n      /**\n       * Checks if `value` is a buffer.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n       * @example\n       *\n       * _.isBuffer(new Buffer(2));\n       * // => true\n       *\n       * _.isBuffer(new Uint8Array(2));\n       * // => false\n       */\n      var isBuffer = !Buffer ? constant(false) : function(value) {\n        return value instanceof Buffer;\n      };\n  \n      /**\n       * Checks if `value` is classified as a `Date` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isDate(new Date);\n       * // => true\n       *\n       * _.isDate('Mon April 23 2012');\n       * // => false\n       */\n      function isDate(value) {\n        return isObjectLike(value) && objectToString.call(value) == dateTag;\n      }\n  \n      /**\n       * Checks if `value` is likely a DOM element.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n       * @example\n       *\n       * _.isElement(document.body);\n       * // => true\n       *\n       * _.isElement('<body>');\n       * // => false\n       */\n      function isElement(value) {\n        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n      }\n  \n      /**\n       * Checks if `value` is empty. A value is considered empty unless it's an\n       * `arguments` object, array, string, or jQuery-like collection with a length\n       * greater than `0` or an object with own enumerable properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Array|Object|string} value The value to inspect.\n       * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n       * @example\n       *\n       * _.isEmpty(null);\n       * // => true\n       *\n       * _.isEmpty(true);\n       * // => true\n       *\n       * _.isEmpty(1);\n       * // => true\n       *\n       * _.isEmpty([1, 2, 3]);\n       * // => false\n       *\n       * _.isEmpty({ 'a': 1 });\n       * // => false\n       */\n      function isEmpty(value) {\n        if (isArrayLike(value) &&\n            (isArray(value) || isString(value) ||\n              isFunction(value.splice) || isArguments(value))) {\n          return !value.length;\n        }\n        for (var key in value) {\n          if (hasOwnProperty.call(value, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * Performs a deep comparison between two values to determine if they are\n       * equivalent.\n       *\n       * **Note:** This method supports comparing arrays, array buffers, booleans,\n       * date objects, error objects, maps, numbers, `Object` objects, regexes,\n       * sets, strings, symbols, and typed arrays. `Object` objects are compared\n       * by their own, not inherited, enumerable properties. Functions and DOM\n       * nodes are **not** supported.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.isEqual(object, other);\n       * // => true\n       *\n       * object === other;\n       * // => false\n       */\n      function isEqual(value, other) {\n        return baseIsEqual(value, other);\n      }\n  \n      /**\n       * This method is like `_.isEqual` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with up to\n       * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, othValue) {\n       *   if (isGreeting(objValue) && isGreeting(othValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var array = ['hello', 'goodbye'];\n       * var other = ['hi', 'goodbye'];\n       *\n       * _.isEqualWith(array, other, customizer);\n       * // => true\n       */\n      function isEqualWith(value, other, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        var result = customizer ? customizer(value, other) : undefined;\n        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n      }\n  \n      /**\n       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n       * `SyntaxError`, `TypeError`, or `URIError` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n       * @example\n       *\n       * _.isError(new Error);\n       * // => true\n       *\n       * _.isError(Error);\n       * // => false\n       */\n      function isError(value) {\n        if (!isObjectLike(value)) {\n          return false;\n        }\n        var Ctor = value.constructor;\n        return (objectToString.call(value) == errorTag) ||\n          (typeof Ctor == 'function' && objectToString.call(Ctor.prototype) == errorTag);\n      }\n  \n      /**\n       * Checks if `value` is a finite primitive number.\n       *\n       * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n       * @example\n       *\n       * _.isFinite(3);\n       * // => true\n       *\n       * _.isFinite(Number.MAX_VALUE);\n       * // => true\n       *\n       * _.isFinite(3.14);\n       * // => true\n       *\n       * _.isFinite(Infinity);\n       * // => false\n       */\n      function isFinite(value) {\n        return typeof value == 'number' && nativeIsFinite(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Function` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isFunction(_);\n       * // => true\n       *\n       * _.isFunction(/abc/);\n       * // => false\n       */\n      function isFunction(value) {\n        // The use of `Object#toString` avoids issues with the `typeof` operator\n        // in Safari 8 which returns 'object' for typed array constructors, and\n        // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n        var tag = isObject(value) ? objectToString.call(value) : '';\n        return tag == funcTag || tag == genTag;\n      }\n  \n      /**\n       * Checks if `value` is an integer.\n       *\n       * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n       * @example\n       *\n       * _.isInteger(3);\n       * // => true\n       *\n       * _.isInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isInteger(Infinity);\n       * // => false\n       *\n       * _.isInteger('3');\n       * // => false\n       */\n      function isInteger(value) {\n        return typeof value == 'number' && value == toInteger(value);\n      }\n  \n      /**\n       * Checks if `value` is a valid array-like length.\n       *\n       * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n       * @example\n       *\n       * _.isLength(3);\n       * // => true\n       *\n       * _.isLength(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isLength(Infinity);\n       * // => false\n       *\n       * _.isLength('3');\n       * // => false\n       */\n      function isLength(value) {\n        return typeof value == 'number' &&\n          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n       * @example\n       *\n       * _.isObject({});\n       * // => true\n       *\n       * _.isObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isObject(_.noop);\n       * // => true\n       *\n       * _.isObject(null);\n       * // => false\n       */\n      function isObject(value) {\n        var type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n      }\n  \n      /**\n       * Checks if `value` is object-like. A value is object-like if it's not `null`\n       * and has a `typeof` result of \"object\".\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n       * @example\n       *\n       * _.isObjectLike({});\n       * // => true\n       *\n       * _.isObjectLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isObjectLike(_.noop);\n       * // => false\n       *\n       * _.isObjectLike(null);\n       * // => false\n       */\n      function isObjectLike(value) {\n        return !!value && typeof value == 'object';\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Map` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isMap(new Map);\n       * // => true\n       *\n       * _.isMap(new WeakMap);\n       * // => false\n       */\n      function isMap(value) {\n        return isObjectLike(value) && getTag(value) == mapTag;\n      }\n  \n      /**\n       * Performs a partial deep comparison between `object` and `source` to\n       * determine if `object` contains equivalent property values. This method is\n       * equivalent to a `_.matches` function when `source` is partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred', 'age': 40 };\n       *\n       * _.isMatch(object, { 'age': 40 });\n       * // => true\n       *\n       * _.isMatch(object, { 'age': 36 });\n       * // => false\n       */\n      function isMatch(object, source) {\n        return object === source || baseIsMatch(object, source, getMatchData(source));\n      }\n  \n      /**\n       * This method is like `_.isMatch` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with five\n       * arguments: (objValue, srcValue, index|key, object, source).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var object = { 'greeting': 'hello' };\n       * var source = { 'greeting': 'hi' };\n       *\n       * _.isMatchWith(object, source, customizer);\n       * // => true\n       */\n      function isMatchWith(object, source, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return baseIsMatch(object, source, getMatchData(source), customizer);\n      }\n  \n      /**\n       * Checks if `value` is `NaN`.\n       *\n       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n       * which returns `true` for `undefined` and other non-numeric values.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n       * @example\n       *\n       * _.isNaN(NaN);\n       * // => true\n       *\n       * _.isNaN(new Number(NaN));\n       * // => true\n       *\n       * isNaN(undefined);\n       * // => true\n       *\n       * _.isNaN(undefined);\n       * // => false\n       */\n      function isNaN(value) {\n        // An `NaN` primitive is the only value that is not equal to itself.\n        // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.\n        return isNumber(value) && value != +value;\n      }\n  \n      /**\n       * Checks if `value` is a native function.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n       * @example\n       *\n       * _.isNative(Array.prototype.push);\n       * // => true\n       *\n       * _.isNative(_);\n       * // => false\n       */\n      function isNative(value) {\n        if (value == null) {\n          return false;\n        }\n        if (isFunction(value)) {\n          return reIsNative.test(funcToString.call(value));\n        }\n        return isObjectLike(value) &&\n          (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);\n      }\n  \n      /**\n       * Checks if `value` is `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n       * @example\n       *\n       * _.isNull(null);\n       * // => true\n       *\n       * _.isNull(void 0);\n       * // => false\n       */\n      function isNull(value) {\n        return value === null;\n      }\n  \n      /**\n       * Checks if `value` is `null` or `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n       * @example\n       *\n       * _.isNil(null);\n       * // => true\n       *\n       * _.isNil(void 0);\n       * // => true\n       *\n       * _.isNil(NaN);\n       * // => false\n       */\n      function isNil(value) {\n        return value == null;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Number` primitive or object.\n       *\n       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n       * as numbers, use the `_.isFinite` method.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isNumber(3);\n       * // => true\n       *\n       * _.isNumber(Number.MIN_VALUE);\n       * // => true\n       *\n       * _.isNumber(Infinity);\n       * // => true\n       *\n       * _.isNumber('3');\n       * // => false\n       */\n      function isNumber(value) {\n        return typeof value == 'number' ||\n          (isObjectLike(value) && objectToString.call(value) == numberTag);\n      }\n  \n      /**\n       * Checks if `value` is a plain object, that is, an object created by the\n       * `Object` constructor or one with a `[[Prototype]]` of `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       * }\n       *\n       * _.isPlainObject(new Foo);\n       * // => false\n       *\n       * _.isPlainObject([1, 2, 3]);\n       * // => false\n       *\n       * _.isPlainObject({ 'x': 0, 'y': 0 });\n       * // => true\n       *\n       * _.isPlainObject(Object.create(null));\n       * // => true\n       */\n      function isPlainObject(value) {\n        if (!isObjectLike(value) ||\n            objectToString.call(value) != objectTag || isHostObject(value)) {\n          return false;\n        }\n        var proto = objectProto;\n        if (typeof value.constructor == 'function') {\n          proto = getPrototypeOf(value);\n        }\n        if (proto === null) {\n          return true;\n        }\n        var Ctor = proto.constructor;\n        return (typeof Ctor == 'function' &&\n          Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `RegExp` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isRegExp(/abc/);\n       * // => true\n       *\n       * _.isRegExp('/abc/');\n       * // => false\n       */\n      function isRegExp(value) {\n        return isObject(value) && objectToString.call(value) == regexpTag;\n      }\n  \n      /**\n       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n       * double precision number which isn't the result of a rounded unsafe integer.\n       *\n       * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n       * @example\n       *\n       * _.isSafeInteger(3);\n       * // => true\n       *\n       * _.isSafeInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isSafeInteger(Infinity);\n       * // => false\n       *\n       * _.isSafeInteger('3');\n       * // => false\n       */\n      function isSafeInteger(value) {\n        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Set` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSet(new Set);\n       * // => true\n       *\n       * _.isSet(new WeakSet);\n       * // => false\n       */\n      function isSet(value) {\n        return isObjectLike(value) && getTag(value) == setTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `String` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isString('abc');\n       * // => true\n       *\n       * _.isString(1);\n       * // => false\n       */\n      function isString(value) {\n        return typeof value == 'string' ||\n          (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Symbol` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSymbol(Symbol.iterator);\n       * // => true\n       *\n       * _.isSymbol('abc');\n       * // => false\n       */\n      function isSymbol(value) {\n        return typeof value == 'symbol' ||\n          (isObjectLike(value) && objectToString.call(value) == symbolTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a typed array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isTypedArray(new Uint8Array);\n       * // => true\n       *\n       * _.isTypedArray([]);\n       * // => false\n       */\n      function isTypedArray(value) {\n        return isObjectLike(value) &&\n          isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n      }\n  \n      /**\n       * Checks if `value` is `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n       * @example\n       *\n       * _.isUndefined(void 0);\n       * // => true\n       *\n       * _.isUndefined(null);\n       * // => false\n       */\n      function isUndefined(value) {\n        return value === undefined;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakMap` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakMap(new WeakMap);\n       * // => true\n       *\n       * _.isWeakMap(new Map);\n       * // => false\n       */\n      function isWeakMap(value) {\n        return isObjectLike(value) && getTag(value) == weakMapTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakSet` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakSet(new WeakSet);\n       * // => true\n       *\n       * _.isWeakSet(new Set);\n       * // => false\n       */\n      function isWeakSet(value) {\n        return isObjectLike(value) && objectToString.call(value) == weakSetTag;\n      }\n  \n      /**\n       * Checks if `value` is less than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n       * @example\n       *\n       * _.lt(1, 3);\n       * // => true\n       *\n       * _.lt(3, 3);\n       * // => false\n       *\n       * _.lt(3, 1);\n       * // => false\n       */\n      function lt(value, other) {\n        return value < other;\n      }\n  \n      /**\n       * Checks if `value` is less than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.lte(1, 3);\n       * // => true\n       *\n       * _.lte(3, 3);\n       * // => true\n       *\n       * _.lte(3, 1);\n       * // => false\n       */\n      function lte(value, other) {\n        return value <= other;\n      }\n  \n      /**\n       * Converts `value` to an array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the converted array.\n       * @example\n       *\n       * _.toArray({ 'a': 1, 'b': 2 });\n       * // => [1, 2]\n       *\n       * _.toArray('abc');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toArray(1);\n       * // => []\n       *\n       * _.toArray(null);\n       * // => []\n       */\n      function toArray(value) {\n        if (!value) {\n          return [];\n        }\n        if (isArrayLike(value)) {\n          return isString(value) ? stringToArray(value) : copyArray(value);\n        }\n        if (iteratorSymbol && value[iteratorSymbol]) {\n          return iteratorToArray(value[iteratorSymbol]());\n        }\n        var tag = getTag(value),\n            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n  \n        return func(value);\n      }\n  \n      /**\n       * Converts `value` to an integer.\n       *\n       * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toInteger(3);\n       * // => 3\n       *\n       * _.toInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toInteger(Infinity);\n       * // => 1.7976931348623157e+308\n       *\n       * _.toInteger('3');\n       * // => 3\n       */\n      function toInteger(value) {\n        if (!value) {\n          return value === 0 ? value : 0;\n        }\n        value = toNumber(value);\n        if (value === INFINITY || value === -INFINITY) {\n          var sign = (value < 0 ? -1 : 1);\n          return sign * MAX_INTEGER;\n        }\n        var remainder = value % 1;\n        return value === value ? (remainder ? value - remainder : value) : 0;\n      }\n  \n      /**\n       * Converts `value` to an integer suitable for use as the length of an\n       * array-like object.\n       *\n       * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toLength(3);\n       * // => 3\n       *\n       * _.toLength(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toLength(Infinity);\n       * // => 4294967295\n       *\n       * _.toLength('3');\n       * // => 3\n       */\n      function toLength(value) {\n        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n      }\n  \n      /**\n       * Converts `value` to a number.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {number} Returns the number.\n       * @example\n       *\n       * _.toNumber(3);\n       * // => 3\n       *\n       * _.toNumber(Number.MIN_VALUE);\n       * // => 5e-324\n       *\n       * _.toNumber(Infinity);\n       * // => Infinity\n       *\n       * _.toNumber('3');\n       * // => 3\n       */\n      function toNumber(value) {\n        if (isObject(value)) {\n          var other = isFunction(value.valueOf) ? value.valueOf() : value;\n          value = isObject(other) ? (other + '') : other;\n        }\n        if (typeof value != 'string') {\n          return value === 0 ? value : +value;\n        }\n        value = value.replace(reTrim, '');\n        var isBinary = reIsBinary.test(value);\n        return (isBinary || reIsOctal.test(value))\n          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n          : (reIsBadHex.test(value) ? NAN : +value);\n      }\n  \n      /**\n       * Converts `value` to a plain object flattening inherited enumerable\n       * properties of `value` to own properties of the plain object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Object} Returns the converted plain object.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.assign({ 'a': 1 }, new Foo);\n       * // => { 'a': 1, 'b': 2 }\n       *\n       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n       * // => { 'a': 1, 'b': 2, 'c': 3 }\n       */\n      function toPlainObject(value) {\n        return copyObject(value, keysIn(value));\n      }\n  \n      /**\n       * Converts `value` to a safe integer. A safe integer can be compared and\n       * represented correctly.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toSafeInteger(3);\n       * // => 3\n       *\n       * _.toSafeInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toSafeInteger(Infinity);\n       * // => 9007199254740991\n       *\n       * _.toSafeInteger('3');\n       * // => 3\n       */\n      function toSafeInteger(value) {\n        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      }\n  \n      /**\n       * Converts `value` to a string if it's not one. An empty string is returned\n       * for `null` and `undefined` values. The sign of `-0` is preserved.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {string} Returns the string.\n       * @example\n       *\n       * _.toString(null);\n       * // => ''\n       *\n       * _.toString(-0);\n       * // => '-0'\n       *\n       * _.toString([1, 2, 3]);\n       * // => '1,2,3'\n       */\n      function toString(value) {\n        // Exit early for strings to avoid a performance hit in some environments.\n        if (typeof value == 'string') {\n          return value;\n        }\n        if (value == null) {\n          return '';\n        }\n        if (isSymbol(value)) {\n          return Symbol ? symbolToString.call(value) : '';\n        }\n        var result = (value + '');\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Assigns own enumerable properties of source objects to the destination\n       * object. Source objects are applied from left to right. Subsequent sources\n       * overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object` and is loosely based on\n       * [`Object.assign`](https://mdn.io/Object/assign).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.c = 3;\n       * }\n       *\n       * function Bar() {\n       *   this.e = 5;\n       * }\n       *\n       * Foo.prototype.d = 4;\n       * Bar.prototype.f = 6;\n       *\n       * _.assign({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'c': 3, 'e': 5 }\n       */\n      var assign = createAssigner(function(object, source) {\n        copyObject(source, keys(source), object);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it iterates over own and\n       * inherited source properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extend\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * function Bar() {\n       *   this.d = 4;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       * Bar.prototype.e = 5;\n       *\n       * _.assignIn({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n       */\n      var assignIn = createAssigner(function(object, source) {\n        copyObject(source, keysIn(source), object);\n      });\n  \n      /**\n       * This method is like `_.assignIn` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extendWith\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignInWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keysIn(source), object, customizer);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keys(source), object, customizer);\n      });\n  \n      /**\n       * Creates an array of values corresponding to `paths` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of picked elements.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _.at(object, ['a[0].b.c', 'a[1]']);\n       * // => [3, 4]\n       *\n       * _.at(['a', 'b', 'c'], 0, 2);\n       * // => ['a', 'c']\n       */\n      var at = rest(function(object, paths) {\n        return baseAt(object, baseFlatten(paths, 1));\n      });\n  \n      /**\n       * Creates an object that inherits from the `prototype` object. If a `properties`\n       * object is given its own enumerable properties are assigned to the created object.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} prototype The object to inherit from.\n       * @param {Object} [properties] The properties to assign to the object.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * function Shape() {\n       *   this.x = 0;\n       *   this.y = 0;\n       * }\n       *\n       * function Circle() {\n       *   Shape.call(this);\n       * }\n       *\n       * Circle.prototype = _.create(Shape.prototype, {\n       *   'constructor': Circle\n       * });\n       *\n       * var circle = new Circle;\n       * circle instanceof Circle;\n       * // => true\n       *\n       * circle instanceof Shape;\n       * // => true\n       */\n      function create(prototype, properties) {\n        var result = baseCreate(prototype);\n        return properties ? baseAssign(result, properties) : result;\n      }\n  \n      /**\n       * Assigns own and inherited enumerable properties of source objects to the\n       * destination object for all destination properties that resolve to `undefined`.\n       * Source objects are applied from left to right. Once a property is set,\n       * additional values of the same property are ignored.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n       * // => { 'user': 'barney', 'age': 36 }\n       */\n      var defaults = rest(function(args) {\n        args.push(undefined, assignInDefaults);\n        return apply(assignInWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.defaults` except that it recursively assigns\n       * default properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n       * // => { 'user': { 'name': 'barney', 'age': 36 } }\n       *\n       */\n      var defaultsDeep = rest(function(args) {\n        args.push(undefined, mergeDefaults);\n        return apply(mergeWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.find` except that it returns the key of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findKey(users, function(o) { return o.age < 40; });\n       * // => 'barney' (iteration order is not guaranteed)\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findKey(users, { 'age': 1, 'active': true });\n       * // => 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findKey(users, 'active');\n       * // => 'barney'\n       */\n      function findKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);\n      }\n  \n      /**\n       * This method is like `_.findKey` except that it iterates over elements of\n       * a collection in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findLastKey(users, function(o) { return o.age < 40; });\n       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastKey(users, { 'age': 36, 'active': true });\n       * // => 'barney'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastKey(users, 'active');\n       * // => 'pebbles'\n       */\n      function findLastKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);\n      }\n  \n      /**\n       * Iterates over own and inherited enumerable properties of an object invoking\n       * `iteratee` for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forIn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)\n       */\n      function forIn(object, iteratee) {\n        return object == null\n          ? object\n          : baseFor(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * This method is like `_.forIn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forInRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'\n       */\n      function forInRight(object, iteratee) {\n        return object == null\n          ? object\n          : baseForRight(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * Iterates over own enumerable properties of an object invoking `iteratee`\n       * for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by\n       * explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forOwn(object, iteratee) {\n        return object && baseForOwn(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forOwn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwnRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'\n       */\n      function forOwnRight(object, iteratee) {\n        return object && baseForOwnRight(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an array of function property names from own enumerable properties\n       * of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functions(new Foo);\n       * // => ['a', 'b']\n       */\n      function functions(object) {\n        return object == null ? [] : baseFunctions(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of function property names from own and inherited\n       * enumerable properties of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functionsIn(new Foo);\n       * // => ['a', 'b', 'c']\n       */\n      function functionsIn(object) {\n        return object == null ? [] : baseFunctions(object, keysIn(object));\n      }\n  \n      /**\n       * Gets the value at `path` of `object`. If the resolved value is\n       * `undefined` the `defaultValue` is used in its place.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.get(object, 'a[0].b.c');\n       * // => 3\n       *\n       * _.get(object, ['a', '0', 'b', 'c']);\n       * // => 3\n       *\n       * _.get(object, 'a.b.c', 'default');\n       * // => 'default'\n       */\n      function get(object, path, defaultValue) {\n        var result = object == null ? undefined : baseGet(object, path);\n        return result === undefined ? defaultValue : result;\n      }\n  \n      /**\n       * Checks if `path` is a direct property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = { 'a': { 'b': { 'c': 3 } } };\n       * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.has(object, 'a');\n       * // => true\n       *\n       * _.has(object, 'a.b.c');\n       * // => true\n       *\n       * _.has(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.has(other, 'a');\n       * // => false\n       */\n      function has(object, path) {\n        return hasPath(object, path, baseHas);\n      }\n  \n      /**\n       * Checks if `path` is a direct or inherited property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.hasIn(object, 'a');\n       * // => true\n       *\n       * _.hasIn(object, 'a.b.c');\n       * // => true\n       *\n       * _.hasIn(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.hasIn(object, 'b');\n       * // => false\n       */\n      function hasIn(object, path) {\n        return hasPath(object, path, baseHasIn);\n      }\n  \n      /**\n       * Creates an object composed of the inverted keys and values of `object`.\n       * If `object` contains duplicate values, subsequent values overwrite property\n       * assignments of previous values.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invert(object);\n       * // => { '1': 'c', '2': 'b' }\n       */\n      var invert = createInverter(function(result, value, key) {\n        result[value] = key;\n      }, constant(identity));\n  \n      /**\n       * This method is like `_.invert` except that the inverted object is generated\n       * from the results of running each element of `object` through `iteratee`.\n       * The corresponding inverted value of each inverted key is an array of keys\n       * responsible for generating the inverted value. The iteratee is invoked\n       * with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invertBy(object);\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       *\n       * _.invertBy(object, function(value) {\n       *   return 'group' + value;\n       * });\n       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n       */\n      var invertBy = createInverter(function(result, value, key) {\n        if (hasOwnProperty.call(result, value)) {\n          result[value].push(key);\n        } else {\n          result[value] = [key];\n        }\n      }, getIteratee);\n  \n      /**\n       * Invokes the method at `path` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n       *\n       * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n       * // => [2, 3]\n       */\n      var invoke = rest(baseInvoke);\n  \n      /**\n       * Creates an array of the own enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects. See the\n       * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n       * for more details.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keys(new Foo);\n       * // => ['a', 'b'] (iteration order is not guaranteed)\n       *\n       * _.keys('hi');\n       * // => ['0', '1']\n       */\n      function keys(object) {\n        var isProto = isPrototype(object);\n        if (!(isProto || isArrayLike(object))) {\n          return baseKeys(object);\n        }\n        var indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        for (var key in object) {\n          if (baseHas(object, key) &&\n              !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(isProto && key == 'constructor')) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keysIn(new Foo);\n       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n       */\n      function keysIn(object) {\n        var index = -1,\n            isProto = isPrototype(object),\n            props = baseKeysIn(object),\n            propsLength = props.length,\n            indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        while (++index < propsLength) {\n          var key = props[index];\n          if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The opposite of `_.mapValues`; this method creates an object with the\n       * same values as `object` and keys generated by running each own enumerable\n       * property of `object` through `iteratee`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   return key + value;\n       * });\n       * // => { 'a1': 1, 'b2': 2 }\n       */\n      function mapKeys(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[iteratee(value, key, object)] = value;\n        });\n        return result;\n      }\n  \n      /**\n       * Creates an object with the same keys as `object` and values generated by\n       * running each own enumerable property of `object` through `iteratee`. The\n       * iteratee function is invoked with three arguments: (value, key, object).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * var users = {\n       *   'fred':    { 'user': 'fred',    'age': 40 },\n       *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n       * };\n       *\n       * _.mapValues(users, function(o) { return o.age; });\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.mapValues(users, 'age');\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       */\n      function mapValues(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[key] = iteratee(value, key, object);\n        });\n        return result;\n      }\n  \n      /**\n       * Recursively merges own and inherited enumerable properties of source objects\n       * into the destination object. Source properties that resolve to `undefined`\n       * are skipped if a destination value exists. Array and plain object properties\n       * are merged recursively. Other objects and value types are overridden by\n       * assignment. Source objects are applied from left to right. Subsequent\n       * sources overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var users = {\n       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n       * };\n       *\n       * var ages = {\n       *   'data': [{ 'age': 36 }, { 'age': 40 }]\n       * };\n       *\n       * _.merge(users, ages);\n       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n       */\n      var merge = createAssigner(function(object, source, srcIndex) {\n        baseMerge(object, source, srcIndex);\n      });\n  \n      /**\n       * This method is like `_.merge` except that it accepts `customizer` which\n       * is invoked to produce the merged values of the destination and source\n       * properties. If `customizer` returns `undefined` merging is handled by the\n       * method instead. The `customizer` is invoked with seven arguments:\n       * (objValue, srcValue, key, object, source, stack).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} customizer The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (_.isArray(objValue)) {\n       *     return objValue.concat(srcValue);\n       *   }\n       * }\n       *\n       * var object = {\n       *   'fruits': ['apple'],\n       *   'vegetables': ['beet']\n       * };\n       *\n       * var other = {\n       *   'fruits': ['banana'],\n       *   'vegetables': ['carrot']\n       * };\n       *\n       * _.mergeWith(object, other, customizer);\n       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n       */\n      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n        baseMerge(object, source, srcIndex, customizer);\n      });\n  \n      /**\n       * The opposite of `_.pick`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that are not omitted.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to omit, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omit(object, ['a', 'c']);\n       * // => { 'b': '2' }\n       */\n      var omit = rest(function(object, props) {\n        if (object == null) {\n          return {};\n        }\n        props = arrayMap(baseFlatten(props, 1), String);\n        return basePick(object, baseDifference(keysIn(object), props));\n      });\n  \n      /**\n       * The opposite of `_.pickBy`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that `predicate`\n       * doesn't return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omitBy(object, _.isNumber);\n       * // => { 'b': '2' }\n       */\n      function omitBy(object, predicate) {\n        predicate = getIteratee(predicate, 2);\n        return basePickBy(object, function(value, key) {\n          return !predicate(value, key);\n        });\n      }\n  \n      /**\n       * Creates an object composed of the picked `object` properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to pick, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pick(object, ['a', 'c']);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      var pick = rest(function(object, props) {\n        return object == null ? {} : basePick(object, baseFlatten(props, 1));\n      });\n  \n      /**\n       * Creates an object composed of the `object` properties `predicate` returns\n       * truthy for. The predicate is invoked with two arguments: (value, key).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pickBy(object, _.isNumber);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      function pickBy(object, predicate) {\n        return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));\n      }\n  \n      /**\n       * This method is like `_.get` except that if the resolved value is a function\n       * it's invoked with the `this` binding of its parent object and its result\n       * is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to resolve.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n       *\n       * _.result(object, 'a[0].b.c1');\n       * // => 3\n       *\n       * _.result(object, 'a[0].b.c2');\n       * // => 4\n       *\n       * _.result(object, 'a[0].b.c3', 'default');\n       * // => 'default'\n       *\n       * _.result(object, 'a[0].b.c3', _.constant('default'));\n       * // => 'default'\n       */\n      function result(object, path, defaultValue) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          var result = get(object, path);\n          object = parent(object, path);\n        } else {\n          result = object == null ? undefined : object[path];\n        }\n        if (result === undefined) {\n          result = defaultValue;\n        }\n        return isFunction(result) ? result.call(object) : result;\n      }\n  \n      /**\n       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist\n       * it's created. Arrays are created for missing index properties while objects\n       * are created for all other missing properties. Use `_.setWith` to customize\n       * `path` creation.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.set(object, 'a[0].b.c', 4);\n       * console.log(object.a[0].b.c);\n       * // => 4\n       *\n       * _.set(object, 'x[0].y.z', 5);\n       * console.log(object.x[0].y.z);\n       * // => 5\n       */\n      function set(object, path, value) {\n        return object == null ? object : baseSet(object, path, value);\n      }\n  \n      /**\n       * This method is like `_.set` except that it accepts `customizer` which is\n       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n       * path creation is handled by the method instead. The `customizer` is invoked\n       * with three arguments: (nsValue, key, nsObject).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);\n       * // => { '0': { '1': { '2': 3 }, 'length': 2 } }\n       */\n      function setWith(object, path, value, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return object == null ? object : baseSet(object, path, value, customizer);\n      }\n  \n      /**\n       * Creates an array of own enumerable key-value pairs for `object` which\n       * can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairs(new Foo);\n       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n       */\n      function toPairs(object) {\n        return baseToPairs(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of own and inherited enumerable key-value pairs for\n       * `object` which can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairsIn(new Foo);\n       * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)\n       */\n      function toPairsIn(object) {\n        return baseToPairs(object, keysIn(object));\n      }\n  \n      /**\n       * An alternative to `_.reduce`; this method transforms `object` to a new\n       * `accumulator` object which is the result of running each of its own enumerable\n       * properties through `iteratee`, with each invocation potentially mutating\n       * the `accumulator` object. The iteratee is invoked with four arguments:\n       * (accumulator, value, key, object). Iteratee functions may exit iteration\n       * early by explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Array|Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The custom accumulator value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.transform([2, 3, 4], function(result, n) {\n       *   result.push(n *= n);\n       *   return n % 2 == 0;\n       * }, []);\n       * // => [4, 9]\n       *\n       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       */\n      function transform(object, iteratee, accumulator) {\n        var isArr = isArray(object) || isTypedArray(object);\n        iteratee = getIteratee(iteratee, 4);\n  \n        if (accumulator == null) {\n          if (isArr || isObject(object)) {\n            var Ctor = object.constructor;\n            if (isArr) {\n              accumulator = isArray(object) ? new Ctor : [];\n            } else {\n              accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n            }\n          } else {\n            accumulator = {};\n          }\n        }\n        (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n          return iteratee(accumulator, value, index, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * Removes the property at `path` of `object`.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       *\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       */\n      function unset(object, path) {\n        return object == null ? true : baseUnset(object, path);\n      }\n  \n      /**\n       * Creates an array of the own enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.values(new Foo);\n       * // => [1, 2] (iteration order is not guaranteed)\n       *\n       * _.values('hi');\n       * // => ['h', 'i']\n       */\n      function values(object) {\n        return object ? baseValues(object, keys(object)) : [];\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.valuesIn(new Foo);\n       * // => [1, 2, 3] (iteration order is not guaranteed)\n       */\n      function valuesIn(object) {\n        return object == null ? [] : baseValues(object, keysIn(object));\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Clamps `number` within the inclusive `lower` and `upper` bounds.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       * @example\n       *\n       * _.clamp(-10, -5, 5);\n       * // => -5\n       *\n       * _.clamp(10, -5, 5);\n       * // => 5\n       */\n      function clamp(number, lower, upper) {\n        if (upper === undefined) {\n          upper = lower;\n          lower = undefined;\n        }\n        if (upper !== undefined) {\n          upper = toNumber(upper);\n          upper = upper === upper ? upper : 0;\n        }\n        if (lower !== undefined) {\n          lower = toNumber(lower);\n          lower = lower === lower ? lower : 0;\n        }\n        return baseClamp(toNumber(number), lower, upper);\n      }\n  \n      /**\n       * Checks if `n` is between `start` and up to but not including, `end`. If\n       * `end` is not specified it's set to `start` with `start` then set to `0`.\n       * If `start` is greater than `end` the params are swapped to support\n       * negative ranges.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to check.\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       * @example\n       *\n       * _.inRange(3, 2, 4);\n       * // => true\n       *\n       * _.inRange(4, 8);\n       * // => true\n       *\n       * _.inRange(4, 2);\n       * // => false\n       *\n       * _.inRange(2, 2);\n       * // => false\n       *\n       * _.inRange(1.2, 2);\n       * // => true\n       *\n       * _.inRange(5.2, 4);\n       * // => false\n       *\n       * _.inRange(-3, -2, -6);\n       * // => true\n       */\n      function inRange(number, start, end) {\n        start = toNumber(start) || 0;\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toNumber(end) || 0;\n        }\n        number = toNumber(number);\n        return baseInRange(number, start, end);\n      }\n  \n      /**\n       * Produces a random number between the inclusive `lower` and `upper` bounds.\n       * If only one argument is provided a number between `0` and the given number\n       * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,\n       * a floating-point number is returned instead of an integer.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} [lower=0] The lower bound.\n       * @param {number} [upper=1] The upper bound.\n       * @param {boolean} [floating] Specify returning a floating-point number.\n       * @returns {number} Returns the random number.\n       * @example\n       *\n       * _.random(0, 5);\n       * // => an integer between 0 and 5\n       *\n       * _.random(5);\n       * // => also an integer between 0 and 5\n       *\n       * _.random(5, true);\n       * // => a floating-point number between 0 and 5\n       *\n       * _.random(1.2, 5.2);\n       * // => a floating-point number between 1.2 and 5.2\n       */\n      function random(lower, upper, floating) {\n        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n          upper = floating = undefined;\n        }\n        if (floating === undefined) {\n          if (typeof upper == 'boolean') {\n            floating = upper;\n            upper = undefined;\n          }\n          else if (typeof lower == 'boolean') {\n            floating = lower;\n            lower = undefined;\n          }\n        }\n        if (lower === undefined && upper === undefined) {\n          lower = 0;\n          upper = 1;\n        }\n        else {\n          lower = toNumber(lower) || 0;\n          if (upper === undefined) {\n            upper = lower;\n            lower = 0;\n          } else {\n            upper = toNumber(upper) || 0;\n          }\n        }\n        if (lower > upper) {\n          var temp = lower;\n          lower = upper;\n          upper = temp;\n        }\n        if (floating || lower % 1 || upper % 1) {\n          var rand = nativeRandom();\n          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n        }\n        return baseRandom(lower, upper);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the camel cased string.\n       * @example\n       *\n       * _.camelCase('Foo Bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('--foo-bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('__foo_bar__');\n       * // => 'fooBar'\n       */\n      var camelCase = createCompounder(function(result, word, index) {\n        word = word.toLowerCase();\n        return result + (index ? capitalize(word) : word);\n      });\n  \n      /**\n       * Converts the first character of `string` to upper case and the remaining\n       * to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to capitalize.\n       * @returns {string} Returns the capitalized string.\n       * @example\n       *\n       * _.capitalize('FRED');\n       * // => 'Fred'\n       */\n      function capitalize(string) {\n        return upperFirst(toString(string).toLowerCase());\n      }\n  \n      /**\n       * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n       * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to deburr.\n       * @returns {string} Returns the deburred string.\n       * @example\n       *\n       * _.deburr('déjà vu');\n       * // => 'deja vu'\n       */\n      function deburr(string) {\n        string = toString(string);\n        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n      }\n  \n      /**\n       * Checks if `string` ends with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=string.length] The position to search from.\n       * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n       * @example\n       *\n       * _.endsWith('abc', 'c');\n       * // => true\n       *\n       * _.endsWith('abc', 'b');\n       * // => false\n       *\n       * _.endsWith('abc', 'b', 2);\n       * // => true\n       */\n      function endsWith(string, target, position) {\n        string = toString(string);\n        target = typeof target == 'string' ? target : (target + '');\n  \n        var length = string.length;\n        position = position === undefined\n          ? length\n          : baseClamp(toInteger(position), 0, length);\n  \n        position -= target.length;\n        return position >= 0 && string.indexOf(target, position) == position;\n      }\n  \n      /**\n       * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n       * their corresponding HTML entities.\n       *\n       * **Note:** No other characters are escaped. To escape additional\n       * characters use a third-party library like [_he_](https://mths.be/he).\n       *\n       * Though the \">\" character is escaped for symmetry, characters like\n       * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n       * unless they're part of a tag or unquoted attribute value.\n       * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n       * (under \"semi-related fun fact\") for more details.\n       *\n       * Backticks are escaped because in IE < 9, they can break out of\n       * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n       * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n       * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n       * for more details.\n       *\n       * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n       * to reduce XSS vectors.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escape('fred, barney, & pebbles');\n       * // => 'fred, barney, &amp; pebbles'\n       */\n      function escape(string) {\n        string = toString(string);\n        return (string && reHasUnescapedHtml.test(string))\n          ? string.replace(reUnescapedHtml, escapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n       * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escapeRegExp('[lodash](https://lodash.com/)');\n       * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n       */\n      function escapeRegExp(string) {\n        string = toString(string);\n        return (string && reHasRegExpChar.test(string))\n          ? string.replace(reRegExpChar, '\\\\$&')\n          : string;\n      }\n  \n      /**\n       * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the kebab cased string.\n       * @example\n       *\n       * _.kebabCase('Foo Bar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('fooBar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('__foo_bar__');\n       * // => 'foo-bar'\n       */\n      var kebabCase = createCompounder(function(result, word, index) {\n        return result + (index ? '-' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts `string`, as space separated words, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.lowerCase('--Foo-Bar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('fooBar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('__FOO_BAR__');\n       * // => 'foo bar'\n       */\n      var lowerCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts the first character of `string` to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.lowerFirst('Fred');\n       * // => 'fred'\n       *\n       * _.lowerFirst('FRED');\n       * // => 'fRED'\n       */\n      var lowerFirst = createCaseFirst('toLowerCase');\n  \n      /**\n       * Converts the first character of `string` to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.upperFirst('fred');\n       * // => 'Fred'\n       *\n       * _.upperFirst('FRED');\n       * // => 'FRED'\n       */\n      var upperFirst = createCaseFirst('toUpperCase');\n  \n      /**\n       * Pads `string` on the left and right sides if it's shorter than `length`.\n       * Padding characters are truncated if they can't be evenly divided by `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.pad('abc', 8);\n       * // => '  abc   '\n       *\n       * _.pad('abc', 8, '_-');\n       * // => '_-abc_-_'\n       *\n       * _.pad('abc', 3);\n       * // => 'abc'\n       */\n      function pad(string, length, chars) {\n        string = toString(string);\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return string;\n        }\n        var mid = (length - strLength) / 2,\n            leftLength = nativeFloor(mid),\n            rightLength = nativeCeil(mid);\n  \n        return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);\n      }\n  \n      /**\n       * Pads `string` on the right side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padEnd('abc', 6);\n       * // => 'abc   '\n       *\n       * _.padEnd('abc', 6, '_-');\n       * // => 'abc_-_'\n       *\n       * _.padEnd('abc', 3);\n       * // => 'abc'\n       */\n      function padEnd(string, length, chars) {\n        string = toString(string);\n        return string + createPadding(string, length, chars);\n      }\n  \n      /**\n       * Pads `string` on the left side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padStart('abc', 6);\n       * // => '   abc'\n       *\n       * _.padStart('abc', 6, '_-');\n       * // => '_-_abc'\n       *\n       * _.padStart('abc', 3);\n       * // => 'abc'\n       */\n      function padStart(string, length, chars) {\n        string = toString(string);\n        return createPadding(string, length, chars) + string;\n      }\n  \n      /**\n       * Converts `string` to an integer of the specified radix. If `radix` is\n       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n       * in which case a `radix` of `16` is used.\n       *\n       * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)\n       * of `parseInt`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} string The string to convert.\n       * @param {number} [radix=10] The radix to interpret `value` by.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.parseInt('08');\n       * // => 8\n       *\n       * _.map(['6', '08', '10'], _.parseInt);\n       * // => [6, 8, 10]\n       */\n      function parseInt(string, radix, guard) {\n        // Chrome fails to trim leading <BOM> whitespace characters.\n        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n        if (guard || radix == null) {\n          radix = 0;\n        } else if (radix) {\n          radix = +radix;\n        }\n        string = toString(string).replace(reTrim, '');\n        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n      }\n  \n      /**\n       * Repeats the given string `n` times.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to repeat.\n       * @param {number} [n=0] The number of times to repeat the string.\n       * @returns {string} Returns the repeated string.\n       * @example\n       *\n       * _.repeat('*', 3);\n       * // => '***'\n       *\n       * _.repeat('abc', 2);\n       * // => 'abcabc'\n       *\n       * _.repeat('abc', 0);\n       * // => ''\n       */\n      function repeat(string, n) {\n        string = toString(string);\n        n = toInteger(n);\n  \n        var result = '';\n        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n          return result;\n        }\n        // Leverage the exponentiation by squaring algorithm for a faster repeat.\n        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n        do {\n          if (n % 2) {\n            result += string;\n          }\n          n = nativeFloor(n / 2);\n          string += string;\n        } while (n);\n  \n        return result;\n      }\n  \n      /**\n       * Replaces matches for `pattern` in `string` with `replacement`.\n       *\n       * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to modify.\n       * @param {RegExp|string} pattern The pattern to replace.\n       * @param {Function|string} replacement The match replacement.\n       * @returns {string} Returns the modified string.\n       * @example\n       *\n       * _.replace('Hi Fred', 'Fred', 'Barney');\n       * // => 'Hi Barney'\n       */\n      function replace() {\n        var args = arguments,\n            string = toString(args[0]);\n  \n        return args.length < 3 ? string : string.replace(args[1], args[2]);\n      }\n  \n      /**\n       * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the snake cased string.\n       * @example\n       *\n       * _.snakeCase('Foo Bar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('fooBar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('--foo-bar');\n       * // => 'foo_bar'\n       */\n      var snakeCase = createCompounder(function(result, word, index) {\n        return result + (index ? '_' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Splits `string` by `separator`.\n       *\n       * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to split.\n       * @param {RegExp|string} separator The separator pattern to split by.\n       * @param {number} [limit] The length to truncate results to.\n       * @returns {Array} Returns the new array of string segments.\n       * @example\n       *\n       * _.split('a-b-c', '-', 2);\n       * // => ['a', 'b']\n       */\n      function split(string, separator, limit) {\n        return toString(string).split(separator, limit);\n      }\n  \n      /**\n       * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the start cased string.\n       * @example\n       *\n       * _.startCase('--foo-bar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('fooBar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('__foo_bar__');\n       * // => 'Foo Bar'\n       */\n      var startCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + capitalize(word);\n      });\n  \n      /**\n       * Checks if `string` starts with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=0] The position to search from.\n       * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n       * @example\n       *\n       * _.startsWith('abc', 'a');\n       * // => true\n       *\n       * _.startsWith('abc', 'b');\n       * // => false\n       *\n       * _.startsWith('abc', 'b', 1);\n       * // => true\n       */\n      function startsWith(string, target, position) {\n        string = toString(string);\n        position = baseClamp(toInteger(position), 0, string.length);\n        return string.lastIndexOf(target, position) == position;\n      }\n  \n      /**\n       * Creates a compiled template function that can interpolate data properties\n       * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n       * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n       * properties may be accessed as free variables in the template. If a setting\n       * object is given it takes precedence over `_.templateSettings` values.\n       *\n       * **Note:** In the development build `_.template` utilizes\n       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n       * for easier debugging.\n       *\n       * For more information on precompiling templates see\n       * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n       *\n       * For more information on Chrome extension sandboxes see\n       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The template string.\n       * @param {Object} [options] The options object.\n       * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n       * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n       * @param {Object} [options.imports] An object to import into the template as free variables.\n       * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n       * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n       * @param {string} [options.variable] The data object variable name.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the compiled template function.\n       * @example\n       *\n       * // Use the \"interpolate\" delimiter to create a compiled template.\n       * var compiled = _.template('hello <%= user %>!');\n       * compiled({ 'user': 'fred' });\n       * // => 'hello fred!'\n       *\n       * // Use the HTML \"escape\" delimiter to escape data property values.\n       * var compiled = _.template('<b><%- value %></b>');\n       * compiled({ 'value': '<script>' });\n       * // => '<b>&lt;script&gt;</b>'\n       *\n       * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the internal `print` function in \"evaluate\" delimiters.\n       * var compiled = _.template('<% print(\"hello \" + user); %>!');\n       * compiled({ 'user': 'barney' });\n       * // => 'hello barney!'\n       *\n       * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n       * var compiled = _.template('hello ${ user }!');\n       * compiled({ 'user': 'pebbles' });\n       * // => 'hello pebbles!'\n       *\n       * // Use custom template delimiters.\n       * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n       * var compiled = _.template('hello {{ user }}!');\n       * compiled({ 'user': 'mustache' });\n       * // => 'hello mustache!'\n       *\n       * // Use backslashes to treat delimiters as plain text.\n       * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n       * compiled({ 'value': 'ignored' });\n       * // => '<%- value %>'\n       *\n       * // Use the `imports` option to import `jQuery` as `jq`.\n       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n       * compiled(data);\n       * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n       *\n       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n       * compiled.source;\n       * // => function(data) {\n       * //   var __t, __p = '';\n       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n       * //   return __p;\n       * // }\n       *\n       * // Use the `source` property to inline compiled templates for meaningful\n       * // line numbers in error messages and stack traces.\n       * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n       *   var JST = {\\\n       *     \"main\": ' + _.template(mainText).source + '\\\n       *   };\\\n       * ');\n       */\n      function template(string, options, guard) {\n        // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n        // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n        var settings = lodash.templateSettings;\n  \n        if (guard && isIterateeCall(string, options, guard)) {\n          options = undefined;\n        }\n        string = toString(string);\n        options = assignInWith({}, options, settings, assignInDefaults);\n  \n        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n            importsKeys = keys(imports),\n            importsValues = baseValues(imports, importsKeys);\n  \n        var isEscaping,\n            isEvaluating,\n            index = 0,\n            interpolate = options.interpolate || reNoMatch,\n            source = \"__p += '\";\n  \n        // Compile the regexp to match each delimiter.\n        var reDelimiters = RegExp(\n          (options.escape || reNoMatch).source + '|' +\n          interpolate.source + '|' +\n          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n          (options.evaluate || reNoMatch).source + '|$'\n        , 'g');\n  \n        // Use a sourceURL for easier debugging.\n        var sourceURL = '//# sourceURL=' +\n          ('sourceURL' in options\n            ? options.sourceURL\n            : ('lodash.templateSources[' + (++templateCounter) + ']')\n          ) + '\\n';\n  \n        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n          interpolateValue || (interpolateValue = esTemplateValue);\n  \n          // Escape characters that can't be included in string literals.\n          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n  \n          // Replace delimiters with snippets.\n          if (escapeValue) {\n            isEscaping = true;\n            source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n          }\n          if (evaluateValue) {\n            isEvaluating = true;\n            source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n          }\n          if (interpolateValue) {\n            source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n          }\n          index = offset + match.length;\n  \n          // The JS engine embedded in Adobe products needs `match` returned in\n          // order to produce the correct `offset` value.\n          return match;\n        });\n  \n        source += \"';\\n\";\n  \n        // If `variable` is not specified wrap a with-statement around the generated\n        // code to add the data object to the top of the scope chain.\n        var variable = options.variable;\n        if (!variable) {\n          source = 'with (obj) {\\n' + source + '\\n}\\n';\n        }\n        // Cleanup code by stripping empty strings.\n        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n          .replace(reEmptyStringMiddle, '$1')\n          .replace(reEmptyStringTrailing, '$1;');\n  \n        // Frame code as the function body.\n        source = 'function(' + (variable || 'obj') + ') {\\n' +\n          (variable\n            ? ''\n            : 'obj || (obj = {});\\n'\n          ) +\n          \"var __t, __p = ''\" +\n          (isEscaping\n             ? ', __e = _.escape'\n             : ''\n          ) +\n          (isEvaluating\n            ? ', __j = Array.prototype.join;\\n' +\n              \"function print() { __p += __j.call(arguments, '') }\\n\"\n            : ';\\n'\n          ) +\n          source +\n          'return __p\\n}';\n  \n        var result = attempt(function() {\n          return Function(importsKeys, sourceURL + 'return ' + source)\n            .apply(undefined, importsValues);\n        });\n  \n        // Provide the compiled function's source by its `toString` method or\n        // the `source` property as a convenience for inlining compiled templates.\n        result.source = source;\n        if (isError(result)) {\n          throw result;\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `string`, as a whole, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.toLower('--Foo-Bar');\n       * // => '--foo-bar'\n       *\n       * _.toLower('fooBar');\n       * // => 'foobar'\n       *\n       * _.toLower('__FOO_BAR__');\n       * // => '__foo_bar__'\n       */\n      function toLower(value) {\n        return toString(value).toLowerCase();\n      }\n  \n      /**\n       * Converts `string`, as a whole, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.toUpper('--foo-bar');\n       * // => '--FOO-BAR'\n       *\n       * _.toUpper('fooBar');\n       * // => 'FOOBAR'\n       *\n       * _.toUpper('__foo_bar__');\n       * // => '__FOO_BAR__'\n       */\n      function toUpper(value) {\n        return toString(value).toUpperCase();\n      }\n  \n      /**\n       * Removes leading and trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trim('  abc  ');\n       * // => 'abc'\n       *\n       * _.trim('-_-abc-_-', '_-');\n       * // => 'abc'\n       *\n       * _.map(['  foo  ', '  bar  '], _.trim);\n       * // => ['foo', 'bar']\n       */\n      function trim(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrim, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string),\n            chrSymbols = stringToArray(chars);\n  \n        return strSymbols\n          .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimEnd('  abc  ');\n       * // => '  abc'\n       *\n       * _.trimEnd('-_-abc-_-', '_-');\n       * // => '-_-abc'\n       */\n      function trimEnd(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimEnd, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes leading whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimStart('  abc  ');\n       * // => 'abc  '\n       *\n       * _.trimStart('-_-abc-_-', '_-');\n       * // => 'abc-_-'\n       */\n      function trimStart(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimStart, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(charsStartIndex(strSymbols, stringToArray(chars)))\n          .join('');\n      }\n  \n      /**\n       * Truncates `string` if it's longer than the given maximum string length.\n       * The last characters of the truncated string are replaced with the omission\n       * string which defaults to \"...\".\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to truncate.\n       * @param {Object} [options=({})] The options object.\n       * @param {number} [options.length=30] The maximum string length.\n       * @param {string} [options.omission='...'] The string to indicate text is omitted.\n       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n       * @returns {string} Returns the truncated string.\n       * @example\n       *\n       * _.truncate('hi-diddly-ho there, neighborino');\n       * // => 'hi-diddly-ho there, neighbo...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': ' '\n       * });\n       * // => 'hi-diddly-ho there,...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': /,? +/\n       * });\n       * // => 'hi-diddly-ho there...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'omission': ' [...]'\n       * });\n       * // => 'hi-diddly-ho there, neig [...]'\n       */\n      function truncate(string, options) {\n        var length = DEFAULT_TRUNC_LENGTH,\n            omission = DEFAULT_TRUNC_OMISSION;\n  \n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? toInteger(options.length) : length;\n          omission = 'omission' in options ? toString(options.omission) : omission;\n        }\n        string = toString(string);\n  \n        var strLength = string.length;\n        if (reHasComplexSymbol.test(string)) {\n          var strSymbols = stringToArray(string);\n          strLength = strSymbols.length;\n        }\n        if (length >= strLength) {\n          return string;\n        }\n        var end = length - stringSize(omission);\n        if (end < 1) {\n          return omission;\n        }\n        var result = strSymbols\n          ? strSymbols.slice(0, end).join('')\n          : string.slice(0, end);\n  \n        if (separator === undefined) {\n          return result + omission;\n        }\n        if (strSymbols) {\n          end += (result.length - end);\n        }\n        if (isRegExp(separator)) {\n          if (string.slice(end).search(separator)) {\n            var match,\n                substring = result;\n  \n            if (!separator.global) {\n              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n            }\n            separator.lastIndex = 0;\n            while ((match = separator.exec(substring))) {\n              var newEnd = match.index;\n            }\n            result = result.slice(0, newEnd === undefined ? end : newEnd);\n          }\n        } else if (string.indexOf(separator, end) != end) {\n          var index = result.lastIndexOf(separator);\n          if (index > -1) {\n            result = result.slice(0, index);\n          }\n        }\n        return result + omission;\n      }\n  \n      /**\n       * The inverse of `_.escape`; this method converts the HTML entities\n       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n       * corresponding characters.\n       *\n       * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n       * entities use a third-party library like [_he_](https://mths.be/he).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to unescape.\n       * @returns {string} Returns the unescaped string.\n       * @example\n       *\n       * _.unescape('fred, barney, &amp; pebbles');\n       * // => 'fred, barney, & pebbles'\n       */\n      function unescape(string) {\n        string = toString(string);\n        return (string && reHasEscapedHtml.test(string))\n          ? string.replace(reEscapedHtml, unescapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Converts `string`, as space separated words, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.upperCase('--foo-bar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('fooBar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('__foo_bar__');\n       * // => 'FOO BAR'\n       */\n      var upperCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toUpperCase();\n      });\n  \n      /**\n       * Splits `string` into an array of its words.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to inspect.\n       * @param {RegExp|string} [pattern] The pattern to match words.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the words of `string`.\n       * @example\n       *\n       * _.words('fred, barney, & pebbles');\n       * // => ['fred', 'barney', 'pebbles']\n       *\n       * _.words('fred, barney, & pebbles', /[^, ]+/g);\n       * // => ['fred', 'barney', '&', 'pebbles']\n       */\n      function words(string, pattern, guard) {\n        string = toString(string);\n        pattern = guard ? undefined : pattern;\n  \n        if (pattern === undefined) {\n          pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;\n        }\n        return string.match(pattern) || [];\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Attempts to invoke `func`, returning either the result or the caught error\n       * object. Any additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function} func The function to attempt.\n       * @returns {*} Returns the `func` result or error object.\n       * @example\n       *\n       * // Avoid throwing errors for invalid selectors.\n       * var elements = _.attempt(function(selector) {\n       *   return document.querySelectorAll(selector);\n       * }, '>_>');\n       *\n       * if (_.isError(elements)) {\n       *   elements = [];\n       * }\n       */\n      var attempt = rest(function(func, args) {\n        try {\n          return apply(func, undefined, args);\n        } catch (e) {\n          return isError(e) ? e : new Error(e);\n        }\n      });\n  \n      /**\n       * Binds methods of an object to the object itself, overwriting the existing\n       * method.\n       *\n       * **Note:** This method doesn't set the \"length\" property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to bind and assign the bound methods to.\n       * @param {...(string|string[])} methodNames The object method names to bind,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var view = {\n       *   'label': 'docs',\n       *   'onClick': function() {\n       *     console.log('clicked ' + this.label);\n       *   }\n       * };\n       *\n       * _.bindAll(view, 'onClick');\n       * jQuery(element).on('click', view.onClick);\n       * // => logs 'clicked docs' when clicked\n       */\n      var bindAll = rest(function(object, methodNames) {\n        arrayEach(baseFlatten(methodNames, 1), function(key) {\n          object[key] = bind(object[key], object);\n        });\n        return object;\n      });\n  \n      /**\n       * Creates a function that iterates over `pairs` invoking the corresponding\n       * function of the first predicate to return truthy. The predicate-function\n       * pairs are invoked with the `this` binding and arguments of the created\n       * function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array} pairs The predicate-function pairs.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.cond([\n       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n       *   [_.constant(true),                _.constant('no match')]\n       * ]);\n       *\n       * func({ 'a': 1, 'b': 2 });\n       * // => 'matches A'\n       *\n       * func({ 'a': 0, 'b': 1 });\n       * // => 'matches B'\n       *\n       * func({ 'a': '1', 'b': '2' });\n       * // => 'no match'\n       */\n      function cond(pairs) {\n        var length = pairs ? pairs.length : 0,\n            toIteratee = getIteratee();\n  \n        pairs = !length ? [] : arrayMap(pairs, function(pair) {\n          if (typeof pair[1] != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          return [toIteratee(pair[0]), pair[1]];\n        });\n  \n        return rest(function(args) {\n          var index = -1;\n          while (++index < length) {\n            var pair = pairs[index];\n            if (apply(pair[0], this, args)) {\n              return apply(pair[1], this, args);\n            }\n          }\n        });\n      }\n  \n      /**\n       * Creates a function that invokes the predicate properties of `source` with\n       * the corresponding property values of a given object, returning `true` if\n       * all predicates return truthy, else `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function conforms(source) {\n        return baseConforms(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that returns `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to return from the new function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var getter = _.constant(object);\n       *\n       * getter() === object;\n       * // => true\n       */\n      function constant(value) {\n        return function() {\n          return value;\n        };\n      }\n  \n      /**\n       * Creates a function that returns the result of invoking the given functions\n       * with the `this` binding of the created function, where each successive\n       * invocation is supplied the return value of the previous.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flow(_.add, square);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flow = createFlow();\n  \n      /**\n       * This method is like `_.flow` except that it creates a function that\n       * invokes the given functions from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flowRight(square, _.add);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flowRight = createFlow(true);\n  \n      /**\n       * This method returns the first argument given to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value Any value.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.identity(object) === object;\n       * // => true\n       */\n      function identity(value) {\n        return value;\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the arguments of the created\n       * function. If `func` is a property name the created callback returns the\n       * property value for a given element. If `func` is an object the created\n       * callback returns `true` for elements that contain the equivalent object\n       * properties, otherwise it returns `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} [func=_.identity] The value to convert to a callback.\n       * @returns {Function} Returns the callback.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // Create custom iteratee shorthands.\n       * _.iteratee = _.wrap(_.iteratee, function(callback, func) {\n       *   var p = /^(\\S+)\\s*([<>])\\s*(\\S+)$/.exec(func);\n       *   return !p ? callback(func) : function(object) {\n       *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);\n       *   };\n       * });\n       *\n       * _.filter(users, 'age > 36');\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function iteratee(func) {\n        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between a given\n       * object and `source`, returning `true` if the given object has equivalent\n       * property values, else `false`. The created function is equivalent to\n       * `_.isMatch` with a `source` partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n       */\n      function matches(source) {\n        return baseMatches(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between the\n       * value at `path` of a given object to `srcValue`, returning `true` if the\n       * object value is equivalent, else `false`.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * _.find(users, _.matchesProperty('user', 'fred'));\n       * // => { 'user': 'fred' }\n       */\n      function matchesProperty(path, srcValue) {\n        return baseMatchesProperty(path, baseClone(srcValue, true));\n      }\n  \n      /**\n       * Creates a function that invokes the method at `path` of a given object.\n       * Any additional arguments are provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': _.constant(2) } } },\n       *   { 'a': { 'b': { 'c': _.constant(1) } } }\n       * ];\n       *\n       * _.map(objects, _.method('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      var method = rest(function(path, args) {\n        return function(object) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * The opposite of `_.method`; this method creates a function that invokes\n       * the method at a given path of `object`. Any additional arguments are\n       * provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = _.times(3, _.constant),\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n       * // => [2, 0]\n       */\n      var methodOf = rest(function(object, args) {\n        return function(path) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * Adds all own enumerable function properties of a source object to the\n       * destination object. If `object` is a function then methods are added to\n       * its prototype as well.\n       *\n       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n       * avoid conflicts caused by modifying the original.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function|Object} [object=lodash] The destination object.\n       * @param {Object} source The object of functions to add.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.chain=true] Specify whether the functions added\n       *  are chainable.\n       * @returns {Function|Object} Returns `object`.\n       * @example\n       *\n       * function vowels(string) {\n       *   return _.filter(string, function(v) {\n       *     return /[aeiou]/i.test(v);\n       *   });\n       * }\n       *\n       * _.mixin({ 'vowels': vowels });\n       * _.vowels('fred');\n       * // => ['e']\n       *\n       * _('fred').vowels().value();\n       * // => ['e']\n       *\n       * _.mixin({ 'vowels': vowels }, { 'chain': false });\n       * _('fred').vowels();\n       * // => ['e']\n       */\n      function mixin(object, source, options) {\n        var props = keys(source),\n            methodNames = baseFunctions(source, props);\n  \n        if (options == null &&\n            !(isObject(source) && (methodNames.length || !props.length))) {\n          options = source;\n          source = object;\n          object = this;\n          methodNames = baseFunctions(source, keys(source));\n        }\n        var chain = (isObject(options) && 'chain' in options) ? options.chain : true,\n            isFunc = isFunction(object);\n  \n        arrayEach(methodNames, function(methodName) {\n          var func = source[methodName];\n          object[methodName] = func;\n          if (isFunc) {\n            object.prototype[methodName] = function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = copyArray(this.__actions__);\n  \n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }\n        });\n  \n        return object;\n      }\n  \n      /**\n       * Reverts the `_` variable to its previous value and returns a reference to\n       * the `lodash` function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @returns {Function} Returns the `lodash` function.\n       * @example\n       *\n       * var lodash = _.noConflict();\n       */\n      function noConflict() {\n        if (root._ === this) {\n          root._ = oldDash;\n        }\n        return this;\n      }\n  \n      /**\n       * A no-operation function that returns `undefined` regardless of the\n       * arguments it receives.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.noop(object) === undefined;\n       * // => true\n       */\n      function noop() {\n        // No operation performed.\n      }\n  \n      /**\n       * Creates a function that returns its nth argument.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [n=0] The index of the argument to return.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.nthArg(1);\n       *\n       * func('a', 'b', 'c');\n       * // => 'b'\n       */\n      function nthArg(n) {\n        n = toInteger(n);\n        return function() {\n          return arguments[n];\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `iteratees` with the arguments provided\n       * to the created function and returns their results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} iteratees The iteratees to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.over(Math.max, Math.min);\n       *\n       * func(1, 2, 3, 4);\n       * // => [4, 1]\n       */\n      var over = createOver(arrayMap);\n  \n      /**\n       * Creates a function that checks if **all** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overEvery(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => false\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overEvery = createOver(arrayEvery);\n  \n      /**\n       * Creates a function that checks if **any** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overSome(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => true\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overSome = createOver(arraySome);\n  \n      /**\n       * Creates a function that returns the value at `path` of a given object.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': 2 } } },\n       *   { 'a': { 'b': { 'c': 1 } } }\n       * ];\n       *\n       * _.map(objects, _.property('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      function property(path) {\n        return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n      }\n  \n      /**\n       * The opposite of `_.property`; this method creates a function that returns\n       * the value at a given path of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = [0, 1, 2],\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n       * // => [2, 0]\n       */\n      function propertyOf(object) {\n        return function(path) {\n          return object == null ? undefined : baseGet(object, path);\n        };\n      }\n  \n      /**\n       * Creates an array of numbers (positive and/or negative) progressing from\n       * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n       * `start` is specified without an `end` or `step`. If `end` is not specified\n       * it's set to `start` with `start` then set to `0`.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.range(4);\n       * // => [0, 1, 2, 3]\n       *\n       * _.range(-4);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 5);\n       * // => [1, 2, 3, 4]\n       *\n       * _.range(0, 20, 5);\n       * // => [0, 5, 10, 15]\n       *\n       * _.range(0, -4, -1);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.range(0);\n       * // => []\n       */\n      var range = createRange();\n  \n      /**\n       * This method is like `_.range` except that it populates values in\n       * descending order.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.rangeRight(4);\n       * // => [3, 2, 1, 0]\n       *\n       * _.rangeRight(-4);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 5);\n       * // => [4, 3, 2, 1]\n       *\n       * _.rangeRight(0, 20, 5);\n       * // => [15, 10, 5, 0]\n       *\n       * _.rangeRight(0, -4, -1);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.rangeRight(0);\n       * // => []\n       */\n      var rangeRight = createRange(true);\n  \n      /**\n       * Invokes the iteratee function `n` times, returning an array of the results\n       * of each invocation. The iteratee is invoked with one argument; (index).\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} n The number of times to invoke `iteratee`.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.times(3, String);\n       * // => ['0', '1', '2']\n       *\n       *  _.times(4, _.constant(true));\n       * // => [true, true, true, true]\n       */\n      function times(n, iteratee) {\n        n = toInteger(n);\n        if (n < 1 || n > MAX_SAFE_INTEGER) {\n          return [];\n        }\n        var index = MAX_ARRAY_LENGTH,\n            length = nativeMin(n, MAX_ARRAY_LENGTH);\n  \n        iteratee = baseCastFunction(iteratee);\n        n -= MAX_ARRAY_LENGTH;\n  \n        var result = baseTimes(length, iteratee);\n        while (++index < n) {\n          iteratee(index);\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `value` to a property path array.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the new property path array.\n       * @example\n       *\n       * _.toPath('a.b.c');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toPath('a[0].b.c');\n       * // => ['a', '0', 'b', 'c']\n       *\n       * var path = ['a', 'b', 'c'],\n       *     newPath = _.toPath(path);\n       *\n       * console.log(newPath);\n       * // => ['a', 'b', 'c']\n       *\n       * console.log(path === newPath);\n       * // => false\n       */\n      function toPath(value) {\n        return isArray(value) ? arrayMap(value, String) : stringToPath(value);\n      }\n  \n      /**\n       * Generates a unique ID. If `prefix` is given the ID is appended to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {string} [prefix=''] The value to prefix the ID with.\n       * @returns {string} Returns the unique ID.\n       * @example\n       *\n       * _.uniqueId('contact_');\n       * // => 'contact_104'\n       *\n       * _.uniqueId();\n       * // => '105'\n       */\n      function uniqueId(prefix) {\n        var id = ++idCounter;\n        return toString(prefix) + id;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Adds two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} augend The first number in an addition.\n       * @param {number} addend The second number in an addition.\n       * @returns {number} Returns the total.\n       * @example\n       *\n       * _.add(6, 4);\n       * // => 10\n       */\n      function add(augend, addend) {\n        var result;\n        if (augend === undefined && addend === undefined) {\n          return 0;\n        }\n        if (augend !== undefined) {\n          result = augend;\n        }\n        if (addend !== undefined) {\n          result = result === undefined ? addend : (result + addend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes `number` rounded up to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round up.\n       * @param {number} [precision=0] The precision to round up to.\n       * @returns {number} Returns the rounded up number.\n       * @example\n       *\n       * _.ceil(4.006);\n       * // => 5\n       *\n       * _.ceil(6.004, 2);\n       * // => 6.01\n       *\n       * _.ceil(6040, -2);\n       * // => 6100\n       */\n      var ceil = createRound('ceil');\n  \n      /**\n       * Computes `number` rounded down to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round down.\n       * @param {number} [precision=0] The precision to round down to.\n       * @returns {number} Returns the rounded down number.\n       * @example\n       *\n       * _.floor(4.006);\n       * // => 4\n       *\n       * _.floor(0.046, 2);\n       * // => 0.04\n       *\n       * _.floor(4060, -2);\n       * // => 4000\n       */\n      var floor = createRound('floor');\n  \n      /**\n       * Computes the maximum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * _.max([4, 2, 8, 6]);\n       * // => 8\n       *\n       * _.max([]);\n       * // => undefined\n       */\n      function max(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, gt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.max` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.maxBy(objects, function(o) { return o.n; });\n       * // => { 'n': 2 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.maxBy(objects, 'n');\n       * // => { 'n': 2 }\n       */\n      function maxBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), gt)\n          : undefined;\n      }\n  \n      /**\n       * Computes the mean of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the mean.\n       * @example\n       *\n       * _.mean([4, 2, 8, 6]);\n       * // => 5\n       */\n      function mean(array) {\n        return sum(array) / (array ? array.length : 0);\n      }\n  \n      /**\n       * Computes the minimum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * _.min([4, 2, 8, 6]);\n       * // => 2\n       *\n       * _.min([]);\n       * // => undefined\n       */\n      function min(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, lt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.min` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.minBy(objects, function(o) { return o.n; });\n       * // => { 'n': 1 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.minBy(objects, 'n');\n       * // => { 'n': 1 }\n       */\n      function minBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), lt)\n          : undefined;\n      }\n  \n      /**\n       * Computes `number` rounded to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round.\n       * @param {number} [precision=0] The precision to round to.\n       * @returns {number} Returns the rounded number.\n       * @example\n       *\n       * _.round(4.006);\n       * // => 4\n       *\n       * _.round(4.006, 2);\n       * // => 4.01\n       *\n       * _.round(4060, -2);\n       * // => 4100\n       */\n      var round = createRound('round');\n  \n      /**\n       * Subtract two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} minuend The first number in a subtraction.\n       * @param {number} subtrahend The second number in a subtraction.\n       * @returns {number} Returns the difference.\n       * @example\n       *\n       * _.subtract(6, 4);\n       * // => 2\n       */\n      function subtract(minuend, subtrahend) {\n        var result;\n        if (minuend === undefined && subtrahend === undefined) {\n          return 0;\n        }\n        if (minuend !== undefined) {\n          result = minuend;\n        }\n        if (subtrahend !== undefined) {\n          result = result === undefined ? subtrahend : (result - subtrahend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes the sum of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * _.sum([4, 2, 8, 6]);\n       * // => 20\n       */\n      function sum(array) {\n        return (array && array.length)\n          ? baseSum(array, identity)\n          : 0;\n      }\n  \n      /**\n       * This method is like `_.sum` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the value to be summed.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n       *\n       * _.sumBy(objects, function(o) { return o.n; });\n       * // => 20\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sumBy(objects, 'n');\n       * // => 20\n       */\n      function sumBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSum(array, getIteratee(iteratee))\n          : 0;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Ensure wrappers are instances of `baseLodash`.\n      lodash.prototype = baseLodash.prototype;\n  \n      LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n      LodashWrapper.prototype.constructor = LodashWrapper;\n  \n      LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n      LazyWrapper.prototype.constructor = LazyWrapper;\n  \n      // Avoid inheriting from `Object.prototype` when possible.\n      Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;\n  \n      // Add functions to the `MapCache`.\n      MapCache.prototype.clear = mapClear;\n      MapCache.prototype['delete'] = mapDelete;\n      MapCache.prototype.get = mapGet;\n      MapCache.prototype.has = mapHas;\n      MapCache.prototype.set = mapSet;\n  \n      // Add functions to the `SetCache`.\n      SetCache.prototype.push = cachePush;\n  \n      // Add functions to the `Stack` cache.\n      Stack.prototype.clear = stackClear;\n      Stack.prototype['delete'] = stackDelete;\n      Stack.prototype.get = stackGet;\n      Stack.prototype.has = stackHas;\n      Stack.prototype.set = stackSet;\n  \n      // Assign cache to `_.memoize`.\n      memoize.Cache = MapCache;\n  \n      // Add functions that return wrapped values when chaining.\n      lodash.after = after;\n      lodash.ary = ary;\n      lodash.assign = assign;\n      lodash.assignIn = assignIn;\n      lodash.assignInWith = assignInWith;\n      lodash.assignWith = assignWith;\n      lodash.at = at;\n      lodash.before = before;\n      lodash.bind = bind;\n      lodash.bindAll = bindAll;\n      lodash.bindKey = bindKey;\n      lodash.castArray = castArray;\n      lodash.chain = chain;\n      lodash.chunk = chunk;\n      lodash.compact = compact;\n      lodash.concat = concat;\n      lodash.cond = cond;\n      lodash.conforms = conforms;\n      lodash.constant = constant;\n      lodash.countBy = countBy;\n      lodash.create = create;\n      lodash.curry = curry;\n      lodash.curryRight = curryRight;\n      lodash.debounce = debounce;\n      lodash.defaults = defaults;\n      lodash.defaultsDeep = defaultsDeep;\n      lodash.defer = defer;\n      lodash.delay = delay;\n      lodash.difference = difference;\n      lodash.differenceBy = differenceBy;\n      lodash.differenceWith = differenceWith;\n      lodash.drop = drop;\n      lodash.dropRight = dropRight;\n      lodash.dropRightWhile = dropRightWhile;\n      lodash.dropWhile = dropWhile;\n      lodash.fill = fill;\n      lodash.filter = filter;\n      lodash.flatMap = flatMap;\n      lodash.flatten = flatten;\n      lodash.flattenDeep = flattenDeep;\n      lodash.flattenDepth = flattenDepth;\n      lodash.flip = flip;\n      lodash.flow = flow;\n      lodash.flowRight = flowRight;\n      lodash.fromPairs = fromPairs;\n      lodash.functions = functions;\n      lodash.functionsIn = functionsIn;\n      lodash.groupBy = groupBy;\n      lodash.initial = initial;\n      lodash.intersection = intersection;\n      lodash.intersectionBy = intersectionBy;\n      lodash.intersectionWith = intersectionWith;\n      lodash.invert = invert;\n      lodash.invertBy = invertBy;\n      lodash.invokeMap = invokeMap;\n      lodash.iteratee = iteratee;\n      lodash.keyBy = keyBy;\n      lodash.keys = keys;\n      lodash.keysIn = keysIn;\n      lodash.map = map;\n      lodash.mapKeys = mapKeys;\n      lodash.mapValues = mapValues;\n      lodash.matches = matches;\n      lodash.matchesProperty = matchesProperty;\n      lodash.memoize = memoize;\n      lodash.merge = merge;\n      lodash.mergeWith = mergeWith;\n      lodash.method = method;\n      lodash.methodOf = methodOf;\n      lodash.mixin = mixin;\n      lodash.negate = negate;\n      lodash.nthArg = nthArg;\n      lodash.omit = omit;\n      lodash.omitBy = omitBy;\n      lodash.once = once;\n      lodash.orderBy = orderBy;\n      lodash.over = over;\n      lodash.overArgs = overArgs;\n      lodash.overEvery = overEvery;\n      lodash.overSome = overSome;\n      lodash.partial = partial;\n      lodash.partialRight = partialRight;\n      lodash.partition = partition;\n      lodash.pick = pick;\n      lodash.pickBy = pickBy;\n      lodash.property = property;\n      lodash.propertyOf = propertyOf;\n      lodash.pull = pull;\n      lodash.pullAll = pullAll;\n      lodash.pullAllBy = pullAllBy;\n      lodash.pullAt = pullAt;\n      lodash.range = range;\n      lodash.rangeRight = rangeRight;\n      lodash.rearg = rearg;\n      lodash.reject = reject;\n      lodash.remove = remove;\n      lodash.rest = rest;\n      lodash.reverse = reverse;\n      lodash.sampleSize = sampleSize;\n      lodash.set = set;\n      lodash.setWith = setWith;\n      lodash.shuffle = shuffle;\n      lodash.slice = slice;\n      lodash.sortBy = sortBy;\n      lodash.sortedUniq = sortedUniq;\n      lodash.sortedUniqBy = sortedUniqBy;\n      lodash.split = split;\n      lodash.spread = spread;\n      lodash.tail = tail;\n      lodash.take = take;\n      lodash.takeRight = takeRight;\n      lodash.takeRightWhile = takeRightWhile;\n      lodash.takeWhile = takeWhile;\n      lodash.tap = tap;\n      lodash.throttle = throttle;\n      lodash.thru = thru;\n      lodash.toArray = toArray;\n      lodash.toPairs = toPairs;\n      lodash.toPairsIn = toPairsIn;\n      lodash.toPath = toPath;\n      lodash.toPlainObject = toPlainObject;\n      lodash.transform = transform;\n      lodash.unary = unary;\n      lodash.union = union;\n      lodash.unionBy = unionBy;\n      lodash.unionWith = unionWith;\n      lodash.uniq = uniq;\n      lodash.uniqBy = uniqBy;\n      lodash.uniqWith = uniqWith;\n      lodash.unset = unset;\n      lodash.unzip = unzip;\n      lodash.unzipWith = unzipWith;\n      lodash.values = values;\n      lodash.valuesIn = valuesIn;\n      lodash.without = without;\n      lodash.words = words;\n      lodash.wrap = wrap;\n      lodash.xor = xor;\n      lodash.xorBy = xorBy;\n      lodash.xorWith = xorWith;\n      lodash.zip = zip;\n      lodash.zipObject = zipObject;\n      lodash.zipObjectDeep = zipObjectDeep;\n      lodash.zipWith = zipWith;\n  \n      // Add aliases.\n      lodash.extend = assignIn;\n      lodash.extendWith = assignInWith;\n  \n      // Add functions to `lodash.prototype`.\n      mixin(lodash, lodash);\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Add functions that return unwrapped values when chaining.\n      lodash.add = add;\n      lodash.attempt = attempt;\n      lodash.camelCase = camelCase;\n      lodash.capitalize = capitalize;\n      lodash.ceil = ceil;\n      lodash.clamp = clamp;\n      lodash.clone = clone;\n      lodash.cloneDeep = cloneDeep;\n      lodash.cloneDeepWith = cloneDeepWith;\n      lodash.cloneWith = cloneWith;\n      lodash.deburr = deburr;\n      lodash.endsWith = endsWith;\n      lodash.eq = eq;\n      lodash.escape = escape;\n      lodash.escapeRegExp = escapeRegExp;\n      lodash.every = every;\n      lodash.find = find;\n      lodash.findIndex = findIndex;\n      lodash.findKey = findKey;\n      lodash.findLast = findLast;\n      lodash.findLastIndex = findLastIndex;\n      lodash.findLastKey = findLastKey;\n      lodash.floor = floor;\n      lodash.forEach = forEach;\n      lodash.forEachRight = forEachRight;\n      lodash.forIn = forIn;\n      lodash.forInRight = forInRight;\n      lodash.forOwn = forOwn;\n      lodash.forOwnRight = forOwnRight;\n      lodash.get = get;\n      lodash.gt = gt;\n      lodash.gte = gte;\n      lodash.has = has;\n      lodash.hasIn = hasIn;\n      lodash.head = head;\n      lodash.identity = identity;\n      lodash.includes = includes;\n      lodash.indexOf = indexOf;\n      lodash.inRange = inRange;\n      lodash.invoke = invoke;\n      lodash.isArguments = isArguments;\n      lodash.isArray = isArray;\n      lodash.isArrayBuffer = isArrayBuffer;\n      lodash.isArrayLike = isArrayLike;\n      lodash.isArrayLikeObject = isArrayLikeObject;\n      lodash.isBoolean = isBoolean;\n      lodash.isBuffer = isBuffer;\n      lodash.isDate = isDate;\n      lodash.isElement = isElement;\n      lodash.isEmpty = isEmpty;\n      lodash.isEqual = isEqual;\n      lodash.isEqualWith = isEqualWith;\n      lodash.isError = isError;\n      lodash.isFinite = isFinite;\n      lodash.isFunction = isFunction;\n      lodash.isInteger = isInteger;\n      lodash.isLength = isLength;\n      lodash.isMap = isMap;\n      lodash.isMatch = isMatch;\n      lodash.isMatchWith = isMatchWith;\n      lodash.isNaN = isNaN;\n      lodash.isNative = isNative;\n      lodash.isNil = isNil;\n      lodash.isNull = isNull;\n      lodash.isNumber = isNumber;\n      lodash.isObject = isObject;\n      lodash.isObjectLike = isObjectLike;\n      lodash.isPlainObject = isPlainObject;\n      lodash.isRegExp = isRegExp;\n      lodash.isSafeInteger = isSafeInteger;\n      lodash.isSet = isSet;\n      lodash.isString = isString;\n      lodash.isSymbol = isSymbol;\n      lodash.isTypedArray = isTypedArray;\n      lodash.isUndefined = isUndefined;\n      lodash.isWeakMap = isWeakMap;\n      lodash.isWeakSet = isWeakSet;\n      lodash.join = join;\n      lodash.kebabCase = kebabCase;\n      lodash.last = last;\n      lodash.lastIndexOf = lastIndexOf;\n      lodash.lowerCase = lowerCase;\n      lodash.lowerFirst = lowerFirst;\n      lodash.lt = lt;\n      lodash.lte = lte;\n      lodash.max = max;\n      lodash.maxBy = maxBy;\n      lodash.mean = mean;\n      lodash.min = min;\n      lodash.minBy = minBy;\n      lodash.noConflict = noConflict;\n      lodash.noop = noop;\n      lodash.now = now;\n      lodash.pad = pad;\n      lodash.padEnd = padEnd;\n      lodash.padStart = padStart;\n      lodash.parseInt = parseInt;\n      lodash.random = random;\n      lodash.reduce = reduce;\n      lodash.reduceRight = reduceRight;\n      lodash.repeat = repeat;\n      lodash.replace = replace;\n      lodash.result = result;\n      lodash.round = round;\n      lodash.runInContext = runInContext;\n      lodash.sample = sample;\n      lodash.size = size;\n      lodash.snakeCase = snakeCase;\n      lodash.some = some;\n      lodash.sortedIndex = sortedIndex;\n      lodash.sortedIndexBy = sortedIndexBy;\n      lodash.sortedIndexOf = sortedIndexOf;\n      lodash.sortedLastIndex = sortedLastIndex;\n      lodash.sortedLastIndexBy = sortedLastIndexBy;\n      lodash.sortedLastIndexOf = sortedLastIndexOf;\n      lodash.startCase = startCase;\n      lodash.startsWith = startsWith;\n      lodash.subtract = subtract;\n      lodash.sum = sum;\n      lodash.sumBy = sumBy;\n      lodash.template = template;\n      lodash.times = times;\n      lodash.toInteger = toInteger;\n      lodash.toLength = toLength;\n      lodash.toLower = toLower;\n      lodash.toNumber = toNumber;\n      lodash.toSafeInteger = toSafeInteger;\n      lodash.toString = toString;\n      lodash.toUpper = toUpper;\n      lodash.trim = trim;\n      lodash.trimEnd = trimEnd;\n      lodash.trimStart = trimStart;\n      lodash.truncate = truncate;\n      lodash.unescape = unescape;\n      lodash.uniqueId = uniqueId;\n      lodash.upperCase = upperCase;\n      lodash.upperFirst = upperFirst;\n  \n      // Add aliases.\n      lodash.each = forEach;\n      lodash.eachRight = forEachRight;\n      lodash.first = head;\n  \n      mixin(lodash, (function() {\n        var source = {};\n        baseForOwn(lodash, function(func, methodName) {\n          if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n            source[methodName] = func;\n          }\n        });\n        return source;\n      }()), { 'chain': false });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf _\n       * @type {string}\n       */\n      lodash.VERSION = VERSION;\n  \n      // Assign default placeholders.\n      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n        lodash[methodName].placeholder = lodash;\n      });\n  \n      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n      arrayEach(['drop', 'take'], function(methodName, index) {\n        LazyWrapper.prototype[methodName] = function(n) {\n          var filtered = this.__filtered__;\n          if (filtered && !index) {\n            return new LazyWrapper(this);\n          }\n          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n  \n          var result = this.clone();\n          if (filtered) {\n            result.__takeCount__ = nativeMin(n, result.__takeCount__);\n          } else {\n            result.__views__.push({\n              'size': nativeMin(n, MAX_ARRAY_LENGTH),\n              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n            });\n          }\n          return result;\n        };\n  \n        LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n          return this.reverse()[methodName](n).reverse();\n        };\n      });\n  \n      // Add `LazyWrapper` methods that accept an `iteratee` value.\n      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n        var type = index + 1,\n            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n  \n        LazyWrapper.prototype[methodName] = function(iteratee) {\n          var result = this.clone();\n          result.__iteratees__.push({\n            'iteratee': getIteratee(iteratee, 3),\n            'type': type\n          });\n          result.__filtered__ = result.__filtered__ || isFilter;\n          return result;\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.head` and `_.last`.\n      arrayEach(['head', 'last'], function(methodName, index) {\n        var takeName = 'take' + (index ? 'Right' : '');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this[takeName](1).value()[0];\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n      arrayEach(['initial', 'tail'], function(methodName, index) {\n        var dropName = 'drop' + (index ? '' : 'Right');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n        };\n      });\n  \n      LazyWrapper.prototype.compact = function() {\n        return this.filter(identity);\n      };\n  \n      LazyWrapper.prototype.find = function(predicate) {\n        return this.filter(predicate).head();\n      };\n  \n      LazyWrapper.prototype.findLast = function(predicate) {\n        return this.reverse().find(predicate);\n      };\n  \n      LazyWrapper.prototype.invokeMap = rest(function(path, args) {\n        if (typeof path == 'function') {\n          return new LazyWrapper(this);\n        }\n        return this.map(function(value) {\n          return baseInvoke(value, path, args);\n        });\n      });\n  \n      LazyWrapper.prototype.reject = function(predicate) {\n        predicate = getIteratee(predicate, 3);\n        return this.filter(function(value) {\n          return !predicate(value);\n        });\n      };\n  \n      LazyWrapper.prototype.slice = function(start, end) {\n        start = toInteger(start);\n  \n        var result = this;\n        if (result.__filtered__ && (start > 0 || end < 0)) {\n          return new LazyWrapper(result);\n        }\n        if (start < 0) {\n          result = result.takeRight(-start);\n        } else if (start) {\n          result = result.drop(start);\n        }\n        if (end !== undefined) {\n          end = toInteger(end);\n          result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n        }\n        return result;\n      };\n  \n      LazyWrapper.prototype.takeRightWhile = function(predicate) {\n        return this.reverse().takeWhile(predicate).reverse();\n      };\n  \n      LazyWrapper.prototype.toArray = function() {\n        return this.take(MAX_ARRAY_LENGTH);\n      };\n  \n      // Add `LazyWrapper` methods to `lodash.prototype`.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n            isTaker = /^(?:head|last)$/.test(methodName),\n            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n            retUnwrapped = isTaker || /^find/.test(methodName);\n  \n        if (!lodashFunc) {\n          return;\n        }\n        lodash.prototype[methodName] = function() {\n          var value = this.__wrapped__,\n              args = isTaker ? [1] : arguments,\n              isLazy = value instanceof LazyWrapper,\n              iteratee = args[0],\n              useLazy = isLazy || isArray(value);\n  \n          var interceptor = function(value) {\n            var result = lodashFunc.apply(lodash, arrayPush([value], args));\n            return (isTaker && chainAll) ? result[0] : result;\n          };\n  \n          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n            // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n            isLazy = useLazy = false;\n          }\n          var chainAll = this.__chain__,\n              isHybrid = !!this.__actions__.length,\n              isUnwrapped = retUnwrapped && !chainAll,\n              onlyLazy = isLazy && !isHybrid;\n  \n          if (!retUnwrapped && useLazy) {\n            value = onlyLazy ? value : new LazyWrapper(this);\n            var result = func.apply(value, args);\n            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n            return new LodashWrapper(result, chainAll);\n          }\n          if (isUnwrapped && onlyLazy) {\n            return func.apply(this, args);\n          }\n          result = this.thru(interceptor);\n          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n        };\n      });\n  \n      // Add `Array` and `String` methods to `lodash.prototype`.\n      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n        var func = arrayProto[methodName],\n            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n            retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n  \n        lodash.prototype[methodName] = function() {\n          var args = arguments;\n          if (retUnwrapped && !this.__chain__) {\n            return func.apply(this.value(), args);\n          }\n          return this[chainName](function(value) {\n            return func.apply(value, args);\n          });\n        };\n      });\n  \n      // Map minified function names to their real names.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var lodashFunc = lodash[methodName];\n        if (lodashFunc) {\n          var key = (lodashFunc.name + ''),\n              names = realNames[key] || (realNames[key] = []);\n  \n          names.push({ 'name': methodName, 'func': lodashFunc });\n        }\n      });\n  \n      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{\n        'name': 'wrapper',\n        'func': undefined\n      }];\n  \n      // Add functions to the lazy wrapper.\n      LazyWrapper.prototype.clone = lazyClone;\n      LazyWrapper.prototype.reverse = lazyReverse;\n      LazyWrapper.prototype.value = lazyValue;\n  \n      // Add chaining functions to the `lodash` wrapper.\n      lodash.prototype.at = wrapperAt;\n      lodash.prototype.chain = wrapperChain;\n      lodash.prototype.commit = wrapperCommit;\n      lodash.prototype.flatMap = wrapperFlatMap;\n      lodash.prototype.next = wrapperNext;\n      lodash.prototype.plant = wrapperPlant;\n      lodash.prototype.reverse = wrapperReverse;\n      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n  \n      if (iteratorSymbol) {\n        lodash.prototype[iteratorSymbol] = wrapperToIterator;\n      }\n      return lodash;\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    // Export lodash.\n    var _ = runInContext();\n  \n    // Expose lodash on the free variable `window` or `self` when available. This\n    // prevents errors in cases where lodash is loaded by a script tag in the presence\n    // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.\n    (freeWindow || freeSelf || {})._ = _;\n  \n    // Some AMD build optimizers like r.js check for condition patterns like the following:\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      // Define as an anonymous module so, through path mapping, it can be\n      // referenced as the \"underscore\" module.\n      define(function() {\n        return _;\n      });\n    }\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    else if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = _)._ = _;\n      }\n      // Export for CommonJS support.\n      freeExports._ = _;\n    }\n    else {\n      // Export to the global object.\n      root._ = _;\n    }\n  }.call(this));","source":"demo/js/lodash.js","raw":"/**\n * @license\n * lodash 4.5.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash -o ./dist/lodash.js`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n    /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n    var undefined;\n  \n    /** Used as the semantic version number. */\n    var VERSION = '4.5.0';\n  \n    /** Used to compose bitmasks for wrapper metadata. */\n    var BIND_FLAG = 1,\n        BIND_KEY_FLAG = 2,\n        CURRY_BOUND_FLAG = 4,\n        CURRY_FLAG = 8,\n        CURRY_RIGHT_FLAG = 16,\n        PARTIAL_FLAG = 32,\n        PARTIAL_RIGHT_FLAG = 64,\n        ARY_FLAG = 128,\n        REARG_FLAG = 256,\n        FLIP_FLAG = 512;\n  \n    /** Used to compose bitmasks for comparison styles. */\n    var UNORDERED_COMPARE_FLAG = 1,\n        PARTIAL_COMPARE_FLAG = 2;\n  \n    /** Used as default options for `_.truncate`. */\n    var DEFAULT_TRUNC_LENGTH = 30,\n        DEFAULT_TRUNC_OMISSION = '...';\n  \n    /** Used to detect hot functions by number of calls within a span of milliseconds. */\n    var HOT_COUNT = 150,\n        HOT_SPAN = 16;\n  \n    /** Used as the size to enable large array optimizations. */\n    var LARGE_ARRAY_SIZE = 200;\n  \n    /** Used to indicate the type of lazy iteratees. */\n    var LAZY_FILTER_FLAG = 1,\n        LAZY_MAP_FLAG = 2,\n        LAZY_WHILE_FLAG = 3;\n  \n    /** Used as the `TypeError` message for \"Functions\" methods. */\n    var FUNC_ERROR_TEXT = 'Expected a function';\n  \n    /** Used to stand-in for `undefined` hash values. */\n    var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  \n    /** Used as references for various `Number` constants. */\n    var INFINITY = 1 / 0,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_INTEGER = 1.7976931348623157e+308,\n        NAN = 0 / 0;\n  \n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n  \n    /** Used as the internal argument placeholder. */\n    var PLACEHOLDER = '__lodash_placeholder__';\n  \n    /** `Object#toString` result references. */\n    var argsTag = '[object Arguments]',\n        arrayTag = '[object Array]',\n        boolTag = '[object Boolean]',\n        dateTag = '[object Date]',\n        errorTag = '[object Error]',\n        funcTag = '[object Function]',\n        genTag = '[object GeneratorFunction]',\n        mapTag = '[object Map]',\n        numberTag = '[object Number]',\n        objectTag = '[object Object]',\n        regexpTag = '[object RegExp]',\n        setTag = '[object Set]',\n        stringTag = '[object String]',\n        symbolTag = '[object Symbol]',\n        weakMapTag = '[object WeakMap]',\n        weakSetTag = '[object WeakSet]';\n  \n    var arrayBufferTag = '[object ArrayBuffer]',\n        float32Tag = '[object Float32Array]',\n        float64Tag = '[object Float64Array]',\n        int8Tag = '[object Int8Array]',\n        int16Tag = '[object Int16Array]',\n        int32Tag = '[object Int32Array]',\n        uint8Tag = '[object Uint8Array]',\n        uint8ClampedTag = '[object Uint8ClampedArray]',\n        uint16Tag = '[object Uint16Array]',\n        uint32Tag = '[object Uint32Array]';\n  \n    /** Used to match empty string literals in compiled template source. */\n    var reEmptyStringLeading = /\\b__p \\+= '';/g,\n        reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n        reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n  \n    /** Used to match HTML entities and HTML characters. */\n    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n        reUnescapedHtml = /[&<>\"'`]/g,\n        reHasEscapedHtml = RegExp(reEscapedHtml.source),\n        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n  \n    /** Used to match template delimiters. */\n    var reEscape = /<%-([\\s\\S]+?)%>/g,\n        reEvaluate = /<%([\\s\\S]+?)%>/g,\n        reInterpolate = /<%=([\\s\\S]+?)%>/g;\n  \n    /** Used to match property names within property paths. */\n    var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        reIsPlainProp = /^\\w*$/,\n        rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n  \n    /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n        reHasRegExpChar = RegExp(reRegExpChar.source);\n  \n    /** Used to match leading and trailing whitespace. */\n    var reTrim = /^\\s+|\\s+$/g,\n        reTrimStart = /^\\s+/,\n        reTrimEnd = /\\s+$/;\n  \n    /** Used to match backslashes in property paths. */\n    var reEscapeChar = /\\\\(\\\\)?/g;\n  \n    /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n    var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n  \n    /** Used to match `RegExp` flags from their coerced string values. */\n    var reFlags = /\\w*$/;\n  \n    /** Used to detect hexadecimal string values. */\n    var reHasHexPrefix = /^0x/i;\n  \n    /** Used to detect bad signed hexadecimal string values. */\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  \n    /** Used to detect binary string values. */\n    var reIsBinary = /^0b[01]+$/i;\n  \n    /** Used to detect host constructors (Safari > 5). */\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  \n    /** Used to detect octal string values. */\n    var reIsOctal = /^0o[0-7]+$/i;\n  \n    /** Used to detect unsigned integer values. */\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  \n    /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n    var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n  \n    /** Used to ensure capturing order of template delimiters. */\n    var reNoMatch = /($^)/;\n  \n    /** Used to match unescaped characters in compiled string literals. */\n    var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n  \n    /** Used to compose unicode character classes. */\n    var rsAstralRange = '\\\\ud800-\\\\udfff',\n        rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n        rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n        rsDingbatRange = '\\\\u2700-\\\\u27bf',\n        rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n        rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n        rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n        rsQuoteRange = '\\\\u2018\\\\u2019\\\\u201c\\\\u201d',\n        rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n        rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n        rsVarRange = '\\\\ufe0e\\\\ufe0f',\n        rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;\n  \n    /** Used to compose unicode capture groups. */\n    var rsAstral = '[' + rsAstralRange + ']',\n        rsBreak = '[' + rsBreakRange + ']',\n        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n        rsDigits = '\\\\d+',\n        rsDingbat = '[' + rsDingbatRange + ']',\n        rsLower = '[' + rsLowerRange + ']',\n        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n        rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n        rsNonAstral = '[^' + rsAstralRange + ']',\n        rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n        rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n        rsUpper = '[' + rsUpperRange + ']',\n        rsZWJ = '\\\\u200d';\n  \n    /** Used to compose unicode regexes. */\n    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n        reOptMod = rsModifier + '?',\n        rsOptVar = '[' + rsVarRange + ']?',\n        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n        rsSeq = rsOptVar + reOptMod + rsOptJoin,\n        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  \n    /**\n     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n     */\n    var reComboMark = RegExp(rsCombo, 'g');\n  \n    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  \n    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n  \n    /** Used to match non-compound words composed of alphanumeric characters. */\n    var reBasicWord = /[a-zA-Z0-9]+/g;\n  \n    /** Used to match complex or compound words. */\n    var reComplexWord = RegExp([\n      rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n      rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n      rsUpper + '?' + rsLowerMisc + '+',\n      rsUpper + '+',\n      rsDigits,\n      rsEmoji\n    ].join('|'), 'g');\n  \n    /** Used to detect strings that need a more robust regexp to match words. */\n    var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n  \n    /** Used to assign default `context` object properties. */\n    var contextProps = [\n      'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n      'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',\n      'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n    ];\n  \n    /** Used to make template sourceURLs easier to identify. */\n    var templateCounter = -1;\n  \n    /** Used to identify `toStringTag` values of typed arrays. */\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n    typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n    typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n    typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n    typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n    typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n    typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  \n    /** Used to identify `toStringTag` values supported by `_.clone`. */\n    var cloneableTags = {};\n    cloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n    cloneableTags[dateTag] = cloneableTags[float32Tag] =\n    cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n    cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n    cloneableTags[mapTag] = cloneableTags[numberTag] =\n    cloneableTags[objectTag] = cloneableTags[regexpTag] =\n    cloneableTags[setTag] = cloneableTags[stringTag] =\n    cloneableTags[symbolTag] = cloneableTags[uint8Tag] =\n    cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =\n    cloneableTags[uint32Tag] = true;\n    cloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n  \n    /** Used to map latin-1 supplementary letters to basic latin letters. */\n    var deburredLetters = {\n      '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n      '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n      '\\xc7': 'C',  '\\xe7': 'c',\n      '\\xd0': 'D',  '\\xf0': 'd',\n      '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n      '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n      '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n      '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n      '\\xd1': 'N',  '\\xf1': 'n',\n      '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n      '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n      '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n      '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n      '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n      '\\xc6': 'Ae', '\\xe6': 'ae',\n      '\\xde': 'Th', '\\xfe': 'th',\n      '\\xdf': 'ss'\n    };\n  \n    /** Used to map characters to HTML entities. */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '`': '&#96;'\n    };\n  \n    /** Used to map HTML entities to characters. */\n    var htmlUnescapes = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#96;': '`'\n    };\n  \n    /** Used to determine if values are of the language type `Object`. */\n    var objectTypes = {\n      'function': true,\n      'object': true\n    };\n  \n    /** Used to escape characters for inclusion in compiled string literals. */\n    var stringEscapes = {\n      '\\\\': '\\\\',\n      \"'\": \"'\",\n      '\\n': 'n',\n      '\\r': 'r',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    /** Built-in method references without a dependency on `root`. */\n    var freeParseFloat = parseFloat,\n        freeParseInt = parseInt;\n  \n    /** Detect free variable `exports`. */\n    var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n      ? exports\n      : undefined;\n  \n    /** Detect free variable `module`. */\n    var freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n      ? module\n      : undefined;\n  \n    /** Detect the popular CommonJS extension `module.exports`. */\n    var moduleExports = (freeModule && freeModule.exports === freeExports)\n      ? freeExports\n      : undefined;\n  \n    /** Detect free variable `global` from Node.js. */\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n  \n    /** Detect free variable `self`. */\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  \n    /** Detect free variable `window`. */\n    var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  \n    /** Detect `this` as the global object. */\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  \n    /**\n     * Used as a reference to the global object.\n     *\n     * The `this` value is used if it's the global object to avoid Greasemonkey's\n     * restricted `window` object, otherwise the `window` object is used.\n     */\n    var root = freeGlobal ||\n      ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n        freeSelf || thisGlobal || Function('return this')();\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Adds the key-value `pair` to `map`.\n     *\n     * @private\n     * @param {Object} map The map to modify.\n     * @param {Array} pair The key-value pair to add.\n     * @returns {Object} Returns `map`.\n     */\n    function addMapEntry(map, pair) {\n      map.set(pair[0], pair[1]);\n      return map;\n    }\n  \n    /**\n     * Adds `value` to `set`.\n     *\n     * @private\n     * @param {Object} set The set to modify.\n     * @param {*} value The value to add.\n     * @returns {Object} Returns `set`.\n     */\n    function addSetEntry(set, value) {\n      set.add(value);\n      return set;\n    }\n  \n    /**\n     * A faster alternative to `Function#apply`, this function invokes `func`\n     * with the `this` binding of `thisArg` and the arguments of `args`.\n     *\n     * @private\n     * @param {Function} func The function to invoke.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} args The arguments to invoke `func` with.\n     * @returns {*} Returns the result of `func`.\n     */\n    function apply(func, thisArg, args) {\n      var length = args.length;\n      switch (length) {\n        case 0: return func.call(thisArg);\n        case 1: return func.call(thisArg, args[0]);\n        case 2: return func.call(thisArg, args[0], args[1]);\n        case 3: return func.call(thisArg, args[0], args[1], args[2]);\n      }\n      return func.apply(thisArg, args);\n    }\n  \n    /**\n     * A specialized version of `baseAggregator` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function arrayAggregator(array, setter, iteratee, accumulator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index];\n        setter(accumulator, value, iteratee(value), array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * Creates a new array concatenating `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The first array to concatenate.\n     * @param {Array} other The second array to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n  \n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.forEach` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n  \n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.every` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    /**\n     * A specialized version of `_.filter` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.includes` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludes(array, value) {\n      return !!array.length && baseIndexOf(array, value, 0) > -1;\n    }\n  \n    /**\n     * A specialized version of `_.includesWith` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @param {Function} comparator The comparator invoked per element.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludesWith(array, value, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (comparator(value, array[index])) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * A specialized version of `_.map` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n  \n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n  \n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n  \n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.reduce` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initAccum) {\n      var index = -1,\n          length = array.length;\n  \n      if (initAccum && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n      var length = array.length;\n      if (initAccum && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.some` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n  \n        if (current != null && (computed === undefined\n              ? current === current\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of methods like `_.find` and `_.findKey`, without\n     * support for iteratee shorthands, which iterates over `collection` using\n     * `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseFindIndex(array, predicate, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} fromIndex The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseIndexOf(array, value, fromIndex) {\n      if (value !== value) {\n        return indexOfNaN(array, fromIndex);\n      }\n      var index = fromIndex - 1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight`, without support\n     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initAccum\n          ? (initAccum = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n  \n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n  \n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n  \n    /**\n     * The base implementation of `_.sum` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(array, iteratee) {\n      var result,\n          index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var current = iteratee(array[index]);\n        if (current !== undefined) {\n          result = result === undefined ? current : (result + current);\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.times` without support for iteratee shorthands\n     * or max array length checks.\n     *\n     * @private\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     */\n    function baseTimes(n, iteratee) {\n      var index = -1,\n          result = Array(n);\n  \n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n     * of key-value pairs for `object` corresponding to the property names of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the new array of key-value pairs.\n     */\n    function baseToPairs(object, props) {\n      return arrayMap(props, function(key) {\n        return [key, object[key]];\n      });\n    }\n  \n    /**\n     * The base implementation of `_.unary` without support for storing wrapper metadata.\n     *\n     * @private\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new function.\n     */\n    function baseUnary(func) {\n      return function(value) {\n        return func(value);\n      };\n    }\n  \n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      return arrayMap(props, function(key) {\n        return object[key];\n      });\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the first unmatched string symbol.\n     */\n    function charsStartIndex(strSymbols, chrSymbols) {\n      var index = -1,\n          length = strSymbols.length;\n  \n      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the last unmatched string symbol.\n     */\n    function charsEndIndex(strSymbols, chrSymbols) {\n      var index = strSymbols.length;\n  \n      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Checks if `value` is a global object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n     */\n    function checkGlobal(value) {\n      return (value && value.Object === Object) ? value : null;\n    }\n  \n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsNull = value === null,\n            valIsUndef = value === undefined,\n            valIsReflexive = value === value;\n  \n        var othIsNull = other === null,\n            othIsUndef = other === undefined,\n            othIsReflexive = other === other;\n  \n        if ((value > other && !othIsNull) || !valIsReflexive ||\n            (valIsNull && !othIsUndef && othIsReflexive) ||\n            (valIsUndef && othIsReflexive)) {\n          return 1;\n        }\n        if ((value < other && !valIsNull) || !othIsReflexive ||\n            (othIsNull && !valIsUndef && valIsReflexive) ||\n            (othIsUndef && valIsReflexive)) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n  \n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n  \n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n  \n    /**\n     * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n     *\n     * @private\n     * @param {string} letter The matched letter to deburr.\n     * @returns {string} Returns the deburred letter.\n     */\n    function deburrLetter(letter) {\n      return deburredLetters[letter];\n    }\n  \n    /**\n     * Used by `_.escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(chr) {\n      return htmlEscapes[chr];\n    }\n  \n    /**\n     * Used by `_.template` to escape characters for inclusion in compiled string literals.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeStringChar(chr) {\n      return '\\\\' + stringEscapes[chr];\n    }\n  \n    /**\n     * Gets the index at which the first occurrence of `NaN` is found in `array`.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {number} fromIndex The index to search from.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n     */\n    function indexOfNaN(array, fromIndex, fromRight) {\n      var length = array.length,\n          index = fromIndex + (fromRight ? 0 : -1);\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        var other = array[index];\n        if (other !== other) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * Checks if `value` is a host object in IE < 9.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n     */\n    function isHostObject(value) {\n      // Many host objects are `Object` objects that can coerce to strings\n      // despite having improperly defined `toString` methods.\n      var result = false;\n      if (value != null && typeof value.toString != 'function') {\n        try {\n          result = !!(value + '');\n        } catch (e) {}\n      }\n      return result;\n    }\n  \n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n  \n    /**\n     * Converts `iterator` to an array.\n     *\n     * @private\n     * @param {Object} iterator The iterator to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function iteratorToArray(iterator) {\n      var data,\n          result = [];\n  \n      while (!(data = iterator.next()).done) {\n        result.push(data.value);\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `map` to an array.\n     *\n     * @private\n     * @param {Object} map The map to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function mapToArray(map) {\n      var index = -1,\n          result = Array(map.size);\n  \n      map.forEach(function(value, key) {\n        result[++index] = [key, value];\n      });\n      return result;\n    }\n  \n    /**\n     * Replaces all `placeholder` elements in `array` with an internal placeholder\n     * and returns an array of their indexes.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {*} placeholder The placeholder to replace.\n     * @returns {Array} Returns the new array of placeholder indexes.\n     */\n    function replaceHolders(array, placeholder) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        if (array[index] === placeholder) {\n          array[index] = PLACEHOLDER;\n          result[++resIndex] = index;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `set` to an array.\n     *\n     * @private\n     * @param {Object} set The set to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function setToArray(set) {\n      var index = -1,\n          result = Array(set.size);\n  \n      set.forEach(function(value) {\n        result[++index] = value;\n      });\n      return result;\n    }\n  \n    /**\n     * Gets the number of symbols in `string`.\n     *\n     * @private\n     * @param {string} string The string to inspect.\n     * @returns {number} Returns the string size.\n     */\n    function stringSize(string) {\n      if (!(string && reHasComplexSymbol.test(string))) {\n        return string.length;\n      }\n      var result = reComplexSymbol.lastIndex = 0;\n      while (reComplexSymbol.test(string)) {\n        result++;\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `string` to an array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function stringToArray(string) {\n      return string.match(reComplexSymbol);\n    }\n  \n    /**\n     * Used by `_.unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} chr The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(chr) {\n      return htmlUnescapes[chr];\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Create a new pristine `lodash` function using the `context` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Util\n     * @param {Object} [context=root] The context object.\n     * @returns {Function} Returns a new `lodash` function.\n     * @example\n     *\n     * _.mixin({ 'foo': _.constant('foo') });\n     *\n     * var lodash = _.runInContext();\n     * lodash.mixin({ 'bar': lodash.constant('bar') });\n     *\n     * _.isFunction(_.foo);\n     * // => true\n     * _.isFunction(_.bar);\n     * // => false\n     *\n     * lodash.isFunction(lodash.foo);\n     * // => false\n     * lodash.isFunction(lodash.bar);\n     * // => true\n     *\n     * // Use `context` to mock `Date#getTime` use in `_.now`.\n     * var mock = _.runInContext({\n     *   'Date': function() {\n     *     return { 'getTime': getTimeMock };\n     *   }\n     * });\n     *\n     * // Create a suped-up `defer` in Node.js.\n     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n     */\n    function runInContext(context) {\n      context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;\n  \n      /** Built-in constructor references. */\n      var Date = context.Date,\n          Error = context.Error,\n          Math = context.Math,\n          RegExp = context.RegExp,\n          TypeError = context.TypeError;\n  \n      /** Used for built-in method references. */\n      var arrayProto = context.Array.prototype,\n          objectProto = context.Object.prototype;\n  \n      /** Used to resolve the decompiled source of functions. */\n      var funcToString = context.Function.prototype.toString;\n  \n      /** Used to check objects for own properties. */\n      var hasOwnProperty = objectProto.hasOwnProperty;\n  \n      /** Used to generate unique IDs. */\n      var idCounter = 0;\n  \n      /** Used to infer the `Object` constructor. */\n      var objectCtorString = funcToString.call(Object);\n  \n      /**\n       * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n       * of values.\n       */\n      var objectToString = objectProto.toString;\n  \n      /** Used to restore the original `_` reference in `_.noConflict`. */\n      var oldDash = root._;\n  \n      /** Used to detect if a method is native. */\n      var reIsNative = RegExp('^' +\n        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n      );\n  \n      /** Built-in value references. */\n      var Buffer = moduleExports ? context.Buffer : undefined,\n          Reflect = context.Reflect,\n          Symbol = context.Symbol,\n          Uint8Array = context.Uint8Array,\n          clearTimeout = context.clearTimeout,\n          enumerate = Reflect ? Reflect.enumerate : undefined,\n          getPrototypeOf = Object.getPrototypeOf,\n          getOwnPropertySymbols = Object.getOwnPropertySymbols,\n          iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,\n          objectCreate = Object.create,\n          propertyIsEnumerable = objectProto.propertyIsEnumerable,\n          setTimeout = context.setTimeout,\n          splice = arrayProto.splice;\n  \n      /* Built-in method references for those with the same name as other `lodash` methods. */\n      var nativeCeil = Math.ceil,\n          nativeFloor = Math.floor,\n          nativeIsFinite = context.isFinite,\n          nativeJoin = arrayProto.join,\n          nativeKeys = Object.keys,\n          nativeMax = Math.max,\n          nativeMin = Math.min,\n          nativeParseInt = context.parseInt,\n          nativeRandom = Math.random,\n          nativeReverse = arrayProto.reverse;\n  \n      /* Built-in method references that are verified to be native. */\n      var Map = getNative(context, 'Map'),\n          Set = getNative(context, 'Set'),\n          WeakMap = getNative(context, 'WeakMap'),\n          nativeCreate = getNative(Object, 'create');\n  \n      /** Used to store function metadata. */\n      var metaMap = WeakMap && new WeakMap;\n  \n      /** Used to detect maps, sets, and weakmaps. */\n      var mapCtorString = Map ? funcToString.call(Map) : '',\n          setCtorString = Set ? funcToString.call(Set) : '',\n          weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';\n  \n      /** Used to convert symbols to primitives and strings. */\n      var symbolProto = Symbol ? Symbol.prototype : undefined,\n          symbolValueOf = Symbol ? symbolProto.valueOf : undefined,\n          symbolToString = Symbol ? symbolProto.toString : undefined;\n  \n      /** Used to lookup unminified function names. */\n      var realNames = {};\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object which wraps `value` to enable implicit method\n       * chaining. Methods that operate on and return arrays, collections, and\n       * functions can be chained together. Methods that retrieve a single value or\n       * may return a primitive value will automatically end the chain sequence and\n       * return the unwrapped value. Otherwise, the value must be unwrapped with\n       * `_#value`.\n       *\n       * Explicit chaining, which must be unwrapped with `_#value` in all cases,\n       * may be enabled using `_.chain`.\n       *\n       * The execution of chained methods is lazy, that is, it's deferred until\n       * `_#value` is implicitly or explicitly called.\n       *\n       * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n       * fusion is an optimization to merge iteratee calls; this avoids the creation\n       * of intermediate arrays and can greatly reduce the number of iteratee executions.\n       * Sections of a chain sequence qualify for shortcut fusion if the section is\n       * applied to an array of at least two hundred elements and any iteratees\n       * accept only one argument. The heuristic for whether a section qualifies\n       * for shortcut fusion is subject to change.\n       *\n       * Chaining is supported in custom builds as long as the `_#value` method is\n       * directly or indirectly included in the build.\n       *\n       * In addition to lodash methods, wrappers have `Array` and `String` methods.\n       *\n       * The wrapper `Array` methods are:\n       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n       *\n       * The wrapper `String` methods are:\n       * `replace` and `split`\n       *\n       * The wrapper methods that support shortcut fusion are:\n       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n       *\n       * The chainable wrapper methods are:\n       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,\n       * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,\n       * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flattenDepth`,\n       * `flip`, `flow`, `flowRight`, `fromPairs`, `functions`, `functionsIn`,\n       * `groupBy`, `initial`, `intersection`, `intersectionBy`, `intersectionWith`,\n       * `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`,\n       * `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`, `memoize`,\n       * `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`, `nthArg`,\n       * `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`, `overEvery`,\n       * `overSome`, `partial`, `partialRight`, `partition`, `pick`, `pickBy`, `plant`,\n       * `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAt`, `push`,\n       * `range`, `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`,\n       * `sampleSize`, `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`,\n       * `splice`, `spread`, `tail`, `take`, `takeRight`, `takeRightWhile`,\n       * `takeWhile`, `tap`, `throttle`, `thru`, `toArray`, `toPairs`, `toPairsIn`,\n       * `toPath`, `toPlainObject`, `transform`, `unary`, `union`, `unionBy`,\n       * `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`, `unshift`, `unzip`,\n       * `unzipWith`, `values`, `valuesIn`, `without`, `wrap`, `xor`, `xorBy`,\n       * `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, and `zipWith`\n       *\n       * The wrapper methods that are **not** chainable by default are:\n       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,\n       * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n       * `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`, `forIn`,\n       * `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`,\n       * `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`,\n       * `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,\n       * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,\n       * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,\n       * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,\n       * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,\n       * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,\n       * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,\n       * `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`,\n       * `now`, `pad`, `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`,\n       * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `sample`,\n       * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`,\n       * `sortedLastIndex`, `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`,\n       * `sum`, `sumBy`, `template`, `times`, `toLower`, `toInteger`, `toLength`,\n       * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,\n       * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,\n       * `value`, and `words`\n       *\n       * @name _\n       * @constructor\n       * @category Seq\n       * @param {*} value The value to wrap in a `lodash` instance.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2, 3]);\n       *\n       * // Returns an unwrapped value.\n       * wrapped.reduce(_.add);\n       * // => 6\n       *\n       * // Returns a wrapped value.\n       * var squares = wrapped.map(square);\n       *\n       * _.isArray(squares);\n       * // => false\n       *\n       * _.isArray(squares.value());\n       * // => true\n       */\n      function lodash(value) {\n        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n          if (value instanceof LodashWrapper) {\n            return value;\n          }\n          if (hasOwnProperty.call(value, '__wrapped__')) {\n            return wrapperClone(value);\n          }\n        }\n        return new LodashWrapper(value);\n      }\n  \n      /**\n       * The function whose prototype all chaining wrappers inherit from.\n       *\n       * @private\n       */\n      function baseLodash() {\n        // No operation performed.\n      }\n  \n      /**\n       * The base constructor for creating `lodash` wrapper objects.\n       *\n       * @private\n       * @param {*} value The value to wrap.\n       * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n       */\n      function LodashWrapper(value, chainAll) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__chain__ = !!chainAll;\n        this.__index__ = 0;\n        this.__values__ = undefined;\n      }\n  \n      /**\n       * By default, the template delimiters used by lodash are like those in\n       * embedded Ruby (ERB). Change the following template settings to use\n       * alternative delimiters.\n       *\n       * @static\n       * @memberOf _\n       * @type {Object}\n       */\n      lodash.templateSettings = {\n  \n        /**\n         * Used to detect `data` property values to be HTML-escaped.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'escape': reEscape,\n  \n        /**\n         * Used to detect code to be evaluated.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'evaluate': reEvaluate,\n  \n        /**\n         * Used to detect `data` property values to inject.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'interpolate': reInterpolate,\n  \n        /**\n         * Used to reference the data object in the template text.\n         *\n         * @memberOf _.templateSettings\n         * @type {string}\n         */\n        'variable': '',\n  \n        /**\n         * Used to import variables into the compiled template.\n         *\n         * @memberOf _.templateSettings\n         * @type {Object}\n         */\n        'imports': {\n  \n          /**\n           * A reference to the `lodash` function.\n           *\n           * @memberOf _.templateSettings.imports\n           * @type {Function}\n           */\n          '_': lodash\n        }\n      };\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n       *\n       * @private\n       * @constructor\n       * @param {*} value The value to wrap.\n       */\n      function LazyWrapper(value) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__dir__ = 1;\n        this.__filtered__ = false;\n        this.__iteratees__ = [];\n        this.__takeCount__ = MAX_ARRAY_LENGTH;\n        this.__views__ = [];\n      }\n  \n      /**\n       * Creates a clone of the lazy wrapper object.\n       *\n       * @private\n       * @name clone\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the cloned `LazyWrapper` object.\n       */\n      function lazyClone() {\n        var result = new LazyWrapper(this.__wrapped__);\n        result.__actions__ = copyArray(this.__actions__);\n        result.__dir__ = this.__dir__;\n        result.__filtered__ = this.__filtered__;\n        result.__iteratees__ = copyArray(this.__iteratees__);\n        result.__takeCount__ = this.__takeCount__;\n        result.__views__ = copyArray(this.__views__);\n        return result;\n      }\n  \n      /**\n       * Reverses the direction of lazy iteration.\n       *\n       * @private\n       * @name reverse\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the new reversed `LazyWrapper` object.\n       */\n      function lazyReverse() {\n        if (this.__filtered__) {\n          var result = new LazyWrapper(this);\n          result.__dir__ = -1;\n          result.__filtered__ = true;\n        } else {\n          result = this.clone();\n          result.__dir__ *= -1;\n        }\n        return result;\n      }\n  \n      /**\n       * Extracts the unwrapped value from its lazy wrapper.\n       *\n       * @private\n       * @name value\n       * @memberOf LazyWrapper\n       * @returns {*} Returns the unwrapped value.\n       */\n      function lazyValue() {\n        var array = this.__wrapped__.value(),\n            dir = this.__dir__,\n            isArr = isArray(array),\n            isRight = dir < 0,\n            arrLength = isArr ? array.length : 0,\n            view = getView(0, arrLength, this.__views__),\n            start = view.start,\n            end = view.end,\n            length = end - start,\n            index = isRight ? end : (start - 1),\n            iteratees = this.__iteratees__,\n            iterLength = iteratees.length,\n            resIndex = 0,\n            takeCount = nativeMin(length, this.__takeCount__);\n  \n        if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n            (arrLength == length && takeCount == length)) {\n          return baseWrapperValue(array, this.__actions__);\n        }\n        var result = [];\n  \n        outer:\n        while (length-- && resIndex < takeCount) {\n          index += dir;\n  \n          var iterIndex = -1,\n              value = array[index];\n  \n          while (++iterIndex < iterLength) {\n            var data = iteratees[iterIndex],\n                iteratee = data.iteratee,\n                type = data.type,\n                computed = iteratee(value);\n  \n            if (type == LAZY_MAP_FLAG) {\n              value = computed;\n            } else if (!computed) {\n              if (type == LAZY_FILTER_FLAG) {\n                continue outer;\n              } else {\n                break outer;\n              }\n            }\n          }\n          result[resIndex++] = value;\n        }\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an hash object.\n       *\n       * @private\n       * @constructor\n       * @returns {Object} Returns the new hash object.\n       */\n      function Hash() {}\n  \n      /**\n       * Removes `key` and its value from the hash.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function hashDelete(hash, key) {\n        return hashHas(hash, key) && delete hash[key];\n      }\n  \n      /**\n       * Gets the hash value for `key`.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function hashGet(hash, key) {\n        if (nativeCreate) {\n          var result = hash[key];\n          return result === HASH_UNDEFINED ? undefined : result;\n        }\n        return hasOwnProperty.call(hash, key) ? hash[key] : undefined;\n      }\n  \n      /**\n       * Checks if a hash value for `key` exists.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function hashHas(hash, key) {\n        return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);\n      }\n  \n      /**\n       * Sets the hash `key` to `value`.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function hashSet(hash, key, value) {\n        hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a map cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function MapCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the map.\n       *\n       * @private\n       * @name clear\n       * @memberOf MapCache\n       */\n      function mapClear() {\n        this.__data__ = {\n          'hash': new Hash,\n          'map': Map ? new Map : [],\n          'string': new Hash\n        };\n      }\n  \n      /**\n       * Removes `key` and its value from the map.\n       *\n       * @private\n       * @name delete\n       * @memberOf MapCache\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function mapDelete(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashDelete(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map['delete'](key) : assocDelete(data.map, key);\n      }\n  \n      /**\n       * Gets the map value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf MapCache\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function mapGet(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashGet(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.get(key) : assocGet(data.map, key);\n      }\n  \n      /**\n       * Checks if a map value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf MapCache\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function mapHas(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashHas(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.has(key) : assocHas(data.map, key);\n      }\n  \n      /**\n       * Sets the map `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf MapCache\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the map cache object.\n       */\n      function mapSet(key, value) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n        } else if (Map) {\n          data.map.set(key, value);\n        } else {\n          assocSet(data.map, key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       *\n       * Creates a set cache object to store unique values.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function SetCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.__data__ = new MapCache;\n        while (++index < length) {\n          this.push(values[index]);\n        }\n      }\n  \n      /**\n       * Checks if `value` is in `cache`.\n       *\n       * @private\n       * @param {Object} cache The set cache to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns `true` if `value` is found, else `false`.\n       */\n      function cacheHas(cache, value) {\n        var map = cache.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          return hash[value] === HASH_UNDEFINED;\n        }\n        return map.has(value);\n      }\n  \n      /**\n       * Adds `value` to the set cache.\n       *\n       * @private\n       * @name push\n       * @memberOf SetCache\n       * @param {*} value The value to cache.\n       */\n      function cachePush(value) {\n        var map = this.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          hash[value] = HASH_UNDEFINED;\n        }\n        else {\n          map.set(value, HASH_UNDEFINED);\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a stack cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function Stack(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the stack.\n       *\n       * @private\n       * @name clear\n       * @memberOf Stack\n       */\n      function stackClear() {\n        this.__data__ = { 'array': [], 'map': null };\n      }\n  \n      /**\n       * Removes `key` and its value from the stack.\n       *\n       * @private\n       * @name delete\n       * @memberOf Stack\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function stackDelete(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocDelete(array, key) : data.map['delete'](key);\n      }\n  \n      /**\n       * Gets the stack value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf Stack\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function stackGet(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocGet(array, key) : data.map.get(key);\n      }\n  \n      /**\n       * Checks if a stack value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf Stack\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function stackHas(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocHas(array, key) : data.map.has(key);\n      }\n  \n      /**\n       * Sets the stack `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf Stack\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the stack cache object.\n       */\n      function stackSet(key, value) {\n        var data = this.__data__,\n            array = data.array;\n  \n        if (array) {\n          if (array.length < (LARGE_ARRAY_SIZE - 1)) {\n            assocSet(array, key, value);\n          } else {\n            data.array = null;\n            data.map = new MapCache(array);\n          }\n        }\n        var map = data.map;\n        if (map) {\n          map.set(key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Removes `key` and its value from the associative array.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function assocDelete(array, key) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          return false;\n        }\n        var lastIndex = array.length - 1;\n        if (index == lastIndex) {\n          array.pop();\n        } else {\n          splice.call(array, index, 1);\n        }\n        return true;\n      }\n  \n      /**\n       * Gets the associative array value for `key`.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function assocGet(array, key) {\n        var index = assocIndexOf(array, key);\n        return index < 0 ? undefined : array[index][1];\n      }\n  \n      /**\n       * Checks if an associative array value for `key` exists.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function assocHas(array, key) {\n        return assocIndexOf(array, key) > -1;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `key` is found in `array`\n       * of key-value pairs.\n       *\n       * @private\n       * @param {Array} array The array to search.\n       * @param {*} key The key to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       */\n      function assocIndexOf(array, key) {\n        var length = array.length;\n        while (length--) {\n          if (eq(array[length][0], key)) {\n            return length;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Sets the associative array `key` to `value`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function assocSet(array, key, value) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          array.push([key, value]);\n        } else {\n          array[index][1] = value;\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Used by `_.defaults` to customize its `_.assignIn` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to assign.\n       * @param {Object} object The parent object of `objValue`.\n       * @returns {*} Returns the value to assign.\n       */\n      function assignInDefaults(objValue, srcValue, key, object) {\n        if (objValue === undefined ||\n            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n          return srcValue;\n        }\n        return objValue;\n      }\n  \n      /**\n       * This function is like `assignValue` except that it doesn't assign `undefined` values.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignMergeValue(object, key, value) {\n        if ((value !== undefined && !eq(object[key], value)) ||\n            (typeof key == 'number' && value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Assigns `value` to `key` of `object` if the existing value is not equivalent\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignValue(object, key, value) {\n        var objValue = object[key];\n        if ((!eq(objValue, value) ||\n              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||\n            (value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Aggregates elements of `collection` on `accumulator` with keys transformed\n       * by `iteratee` and values set by `setter`.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform keys.\n       * @param {Object} accumulator The initial aggregated object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseAggregator(collection, setter, iteratee, accumulator) {\n        baseEach(collection, function(value, key, collection) {\n          setter(accumulator, value, iteratee(value), collection);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.assign` without support for multiple sources\n       * or `customizer` functions.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @returns {Object} Returns `object`.\n       */\n      function baseAssign(object, source) {\n        return object && copyObject(source, keys(source), object);\n      }\n  \n      /**\n       * The base implementation of `_.at` without support for individual paths.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {string[]} paths The property paths of elements to pick.\n       * @returns {Array} Returns the new array of picked elements.\n       */\n      function baseAt(object, paths) {\n        var index = -1,\n            isNil = object == null,\n            length = paths.length,\n            result = Array(length);\n  \n        while (++index < length) {\n          result[index] = isNil ? undefined : get(object, paths[index]);\n        }\n        return result;\n      }\n  \n      /**\n       * Casts `value` to an empty array if it's not an array like object.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastArrayLikeObject(value) {\n        return isArrayLikeObject(value) ? value : [];\n      }\n  \n      /**\n       * Casts `value` to `identity` if it's not a function.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastFunction(value) {\n        return typeof value == 'function' ? value : identity;\n      }\n  \n      /**\n       * Casts `value` to a path array if it's not one.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast property path array.\n       */\n      function baseCastPath(value) {\n        return isArray(value) ? value : stringToPath(value);\n      }\n  \n      /**\n       * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       */\n      function baseClamp(number, lower, upper) {\n        if (number === number) {\n          if (upper !== undefined) {\n            number = number <= upper ? number : upper;\n          }\n          if (lower !== undefined) {\n            number = number >= lower ? number : lower;\n          }\n        }\n        return number;\n      }\n  \n      /**\n       * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n       * traversed objects.\n       *\n       * @private\n       * @param {*} value The value to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @param {string} [key] The key of `value`.\n       * @param {Object} [object] The parent object of `value`.\n       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n       * @returns {*} Returns the cloned value.\n       */\n      function baseClone(value, isDeep, customizer, key, object, stack) {\n        var result;\n        if (customizer) {\n          result = object ? customizer(value, key, object, stack) : customizer(value);\n        }\n        if (result !== undefined) {\n          return result;\n        }\n        if (!isObject(value)) {\n          return value;\n        }\n        var isArr = isArray(value);\n        if (isArr) {\n          result = initCloneArray(value);\n          if (!isDeep) {\n            return copyArray(value, result);\n          }\n        } else {\n          var tag = getTag(value),\n              isFunc = tag == funcTag || tag == genTag;\n  \n          if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n          }\n          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n              return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n              return copySymbols(value, baseAssign(result, value));\n            }\n          } else {\n            if (!cloneableTags[tag]) {\n              return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n          }\n        }\n        // Check for circular references and return its corresponding clone.\n        stack || (stack = new Stack);\n        var stacked = stack.get(value);\n        if (stacked) {\n          return stacked;\n        }\n        stack.set(value, result);\n  \n        // Recursively populate clone (susceptible to call stack limits).\n        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n          assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));\n        });\n        return isArr ? result : copySymbols(value, result);\n      }\n  \n      /**\n       * The base implementation of `_.conforms` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       */\n      function baseConforms(source) {\n        var props = keys(source),\n            length = props.length;\n  \n        return function(object) {\n          if (object == null) {\n            return !length;\n          }\n          var index = length;\n          while (index--) {\n            var key = props[index],\n                predicate = source[key],\n                value = object[key];\n  \n            if ((value === undefined && !(key in Object(object))) || !predicate(value)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n  \n      /**\n       * The base implementation of `_.create` without support for assigning\n       * properties to the created object.\n       *\n       * @private\n       * @param {Object} prototype The object to inherit from.\n       * @returns {Object} Returns the new object.\n       */\n      function baseCreate(proto) {\n        return isObject(proto) ? objectCreate(proto) : {};\n      }\n  \n      /**\n       * The base implementation of `_.delay` and `_.defer` which accepts an array\n       * of `func` arguments.\n       *\n       * @private\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {Object} args The arguments to provide to `func`.\n       * @returns {number} Returns the timer id.\n       */\n      function baseDelay(func, wait, args) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return setTimeout(function() { func.apply(undefined, args); }, wait);\n      }\n  \n      /**\n       * The base implementation of methods like `_.difference` without support for\n       * excluding multiple arrays or iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Array} values The values to exclude.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       */\n      function baseDifference(array, values, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            isCommon = true,\n            length = array.length,\n            result = [],\n            valuesLength = values.length;\n  \n        if (!length) {\n          return result;\n        }\n        if (iteratee) {\n          values = arrayMap(values, baseUnary(iteratee));\n        }\n        if (comparator) {\n          includes = arrayIncludesWith;\n          isCommon = false;\n        }\n        else if (values.length >= LARGE_ARRAY_SIZE) {\n          includes = cacheHas;\n          isCommon = false;\n          values = new SetCache(values);\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var valuesIndex = valuesLength;\n            while (valuesIndex--) {\n              if (values[valuesIndex] === computed) {\n                continue outer;\n              }\n            }\n            result.push(value);\n          }\n          else if (!includes(values, computed, comparator)) {\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.forEach` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEach = createBaseEach(baseForOwn);\n  \n      /**\n       * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEachRight = createBaseEach(baseForOwnRight, true);\n  \n      /**\n       * The base implementation of `_.every` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`\n       */\n      function baseEvery(collection, predicate) {\n        var result = true;\n        baseEach(collection, function(value, index, collection) {\n          result = !!predicate(value, index, collection);\n          return result;\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.fill` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       */\n      function baseFill(array, value, start, end) {\n        var length = array.length;\n  \n        start = toInteger(start);\n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = (end === undefined || end > length) ? length : toInteger(end);\n        if (end < 0) {\n          end += length;\n        }\n        end = start > end ? 0 : toLength(end);\n        while (start < end) {\n          array[start++] = value;\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.filter` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       */\n      function baseFilter(collection, predicate) {\n        var result = [];\n        baseEach(collection, function(value, index, collection) {\n          if (predicate(value, index, collection)) {\n            result.push(value);\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.flatten` with support for restricting flattening.\n       *\n       * @private\n       * @param {Array} array The array to flatten.\n       * @param {number} depth The maximum recursion depth.\n       * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n       * @param {Array} [result=[]] The initial result value.\n       * @returns {Array} Returns the new flattened array.\n       */\n      function baseFlatten(array, depth, isStrict, result) {\n        result || (result = []);\n  \n        var index = -1,\n            length = array.length;\n  \n        while (++index < length) {\n          var value = array[index];\n          if (depth > 0 && isArrayLikeObject(value) &&\n              (isStrict || isArray(value) || isArguments(value))) {\n            if (depth > 1) {\n              // Recursively flatten arrays (susceptible to call stack limits).\n              baseFlatten(value, depth - 1, isStrict, result);\n            } else {\n              arrayPush(result, value);\n            }\n          } else if (!isStrict) {\n            result[result.length] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `baseForIn` and `baseForOwn` which iterates\n       * over `object` properties returned by `keysFunc` invoking `iteratee` for\n       * each property. Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseFor = createBaseFor();\n  \n      /**\n       * This function is like `baseFor` except that it iterates over properties\n       * in the opposite order.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseForRight = createBaseFor(true);\n  \n      /**\n       * The base implementation of `_.forIn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForIn(object, iteratee) {\n        return object == null ? object : baseFor(object, iteratee, keysIn);\n      }\n  \n      /**\n       * The base implementation of `_.forOwn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwn(object, iteratee) {\n        return object && baseFor(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwnRight(object, iteratee) {\n        return object && baseForRight(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.functions` which creates an array of\n       * `object` function property names filtered from `props`.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Array} props The property names to filter.\n       * @returns {Array} Returns the new array of filtered property names.\n       */\n      function baseFunctions(object, props) {\n        return arrayFilter(props, function(key) {\n          return isFunction(object[key]);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.get` without support for default values.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseGet(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = 0,\n            length = path.length;\n  \n        while (object != null && index < length) {\n          object = object[path[index++]];\n        }\n        return (index && index == length) ? object : undefined;\n      }\n  \n      /**\n       * The base implementation of `_.has` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHas(object, key) {\n        // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n        // that are composed entirely of index properties, return `false` for\n        // `hasOwnProperty` checks of them.\n        return hasOwnProperty.call(object, key) ||\n          (typeof object == 'object' && key in object && getPrototypeOf(object) === null);\n      }\n  \n      /**\n       * The base implementation of `_.hasIn` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHasIn(object, key) {\n        return key in Object(object);\n      }\n  \n      /**\n       * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to check.\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       */\n      function baseInRange(number, start, end) {\n        return number >= nativeMin(start, end) && number < nativeMax(start, end);\n      }\n  \n      /**\n       * The base implementation of methods like `_.intersection`, without support\n       * for iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       */\n      function baseIntersection(arrays, iteratee, comparator) {\n        var includes = comparator ? arrayIncludesWith : arrayIncludes,\n            othLength = arrays.length,\n            othIndex = othLength,\n            caches = Array(othLength),\n            result = [];\n  \n        while (othIndex--) {\n          var array = arrays[othIndex];\n          if (othIndex && iteratee) {\n            array = arrayMap(array, baseUnary(iteratee));\n          }\n          caches[othIndex] = !comparator && (iteratee || array.length >= 120)\n            ? new SetCache(othIndex && array)\n            : undefined;\n        }\n        array = arrays[0];\n  \n        var index = -1,\n            length = array.length,\n            seen = caches[0];\n  \n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (!(seen\n                ? cacheHas(seen, computed)\n                : includes(result, computed, comparator)\n              )) {\n            var othIndex = othLength;\n            while (--othIndex) {\n              var cache = caches[othIndex];\n              if (!(cache\n                    ? cacheHas(cache, computed)\n                    : includes(arrays[othIndex], computed, comparator))\n                  ) {\n                continue outer;\n              }\n            }\n            if (seen) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.invert` and `_.invertBy` which inverts\n       * `object` with values transformed by `iteratee` and set by `setter`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform values.\n       * @param {Object} accumulator The initial inverted object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseInverter(object, setter, iteratee, accumulator) {\n        baseForOwn(object, function(value, key, object) {\n          setter(accumulator, iteratee(value), key, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.invoke` without support for individual\n       * method arguments.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {Array} args The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       */\n      function baseInvoke(object, path, args) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          path = last(path);\n        }\n        var func = object == null ? object : object[path];\n        return func == null ? undefined : apply(func, object, args);\n      }\n  \n      /**\n       * The base implementation of `_.isEqual` which supports partial comparisons\n       * and tracks traversed objects.\n       *\n       * @private\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {boolean} [bitmask] The bitmask of comparison flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - Unordered comparison\n       *     2 - Partial comparison\n       * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       */\n      function baseIsEqual(value, other, customizer, bitmask, stack) {\n        if (value === other) {\n          return true;\n        }\n        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n          return value !== value && other !== other;\n        }\n        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqual` for arrays and objects which performs\n       * deep comparisons and tracks traversed objects enabling objects with circular\n       * references to be compared.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n        var objIsArr = isArray(object),\n            othIsArr = isArray(other),\n            objTag = arrayTag,\n            othTag = arrayTag;\n  \n        if (!objIsArr) {\n          objTag = getTag(object);\n          if (objTag == argsTag) {\n            objTag = objectTag;\n          } else if (objTag != objectTag) {\n            objIsArr = isTypedArray(object);\n          }\n        }\n        if (!othIsArr) {\n          othTag = getTag(other);\n          if (othTag == argsTag) {\n            othTag = objectTag;\n          } else if (othTag != objectTag) {\n            othIsArr = isTypedArray(other);\n          }\n        }\n        var objIsObj = objTag == objectTag && !isHostObject(object),\n            othIsObj = othTag == objectTag && !isHostObject(other),\n            isSameTag = objTag == othTag;\n  \n        if (isSameTag && !(objIsArr || objIsObj)) {\n          return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);\n        }\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n        if (!isPartial) {\n          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n  \n          if (objIsWrapped || othIsWrapped) {\n            return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);\n          }\n        }\n        if (!isSameTag) {\n          return false;\n        }\n        stack || (stack = new Stack);\n        return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);\n      }\n  \n      /**\n       * The base implementation of `_.isMatch` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Array} matchData The property names, values, and compare flags to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       */\n      function baseIsMatch(object, source, matchData, customizer) {\n        var index = matchData.length,\n            length = index,\n            noCustomizer = !customizer;\n  \n        if (object == null) {\n          return !length;\n        }\n        object = Object(object);\n        while (index--) {\n          var data = matchData[index];\n          if ((noCustomizer && data[2])\n                ? data[1] !== object[data[0]]\n                : !(data[0] in object)\n              ) {\n            return false;\n          }\n        }\n        while (++index < length) {\n          data = matchData[index];\n          var key = data[0],\n              objValue = object[key],\n              srcValue = data[1];\n  \n          if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) {\n              return false;\n            }\n          } else {\n            var stack = new Stack,\n                result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;\n  \n            if (!(result === undefined\n                  ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                  : result\n                )) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * The base implementation of `_.iteratee`.\n       *\n       * @private\n       * @param {*} [value=_.identity] The value to convert to an iteratee.\n       * @returns {Function} Returns the iteratee.\n       */\n      function baseIteratee(value) {\n        var type = typeof value;\n        if (type == 'function') {\n          return value;\n        }\n        if (value == null) {\n          return identity;\n        }\n        if (type == 'object') {\n          return isArray(value)\n            ? baseMatchesProperty(value[0], value[1])\n            : baseMatches(value);\n        }\n        return property(value);\n      }\n  \n      /**\n       * The base implementation of `_.keys` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeys(object) {\n        return nativeKeys(Object(object));\n      }\n  \n      /**\n       * The base implementation of `_.keysIn` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeysIn(object) {\n        object = object == null ? object : Object(object);\n  \n        var result = [];\n        for (var key in object) {\n          result.push(key);\n        }\n        return result;\n      }\n  \n      // Fallback for IE < 9 with es6-shim.\n      if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n        baseKeysIn = function(object) {\n          return iteratorToArray(enumerate(object));\n        };\n      }\n  \n      /**\n       * The base implementation of `_.map` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       */\n      function baseMap(collection, iteratee) {\n        var index = -1,\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value, key, collection) {\n          result[++index] = iteratee(value, key, collection);\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.matches` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatches(source) {\n        var matchData = getMatchData(source);\n        if (matchData.length == 1 && matchData[0][2]) {\n          var key = matchData[0][0],\n              value = matchData[0][1];\n  \n          return function(object) {\n            if (object == null) {\n              return false;\n            }\n            return object[key] === value &&\n              (value !== undefined || (key in Object(object)));\n          };\n        }\n        return function(object) {\n          return object === source || baseIsMatch(object, source, matchData);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n       *\n       * @private\n       * @param {string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatchesProperty(path, srcValue) {\n        return function(object) {\n          var objValue = get(object, path);\n          return (objValue === undefined && objValue === srcValue)\n            ? hasIn(object, path)\n            : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.merge` without support for multiple sources.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} [customizer] The function to customize merged values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMerge(object, source, srcIndex, customizer, stack) {\n        if (object === source) {\n          return;\n        }\n        var props = (isArray(source) || isTypedArray(source))\n          ? undefined\n          : keysIn(source);\n  \n        arrayEach(props || source, function(srcValue, key) {\n          if (props) {\n            key = srcValue;\n            srcValue = source[key];\n          }\n          if (isObject(srcValue)) {\n            stack || (stack = new Stack);\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n          }\n          else {\n            var newValue = customizer\n              ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n              : undefined;\n  \n            if (newValue === undefined) {\n              newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n          }\n        });\n      }\n  \n      /**\n       * A specialized version of `baseMerge` for arrays and objects which performs\n       * deep merges and tracks traversed objects enabling objects with circular\n       * references to be merged.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {string} key The key of the value to merge.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} mergeFunc The function to merge values.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n        var objValue = object[key],\n            srcValue = source[key],\n            stacked = stack.get(srcValue);\n  \n        if (stacked) {\n          assignMergeValue(object, key, stacked);\n          return;\n        }\n        var newValue = customizer\n          ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n          : undefined;\n  \n        var isCommon = newValue === undefined;\n  \n        if (isCommon) {\n          newValue = srcValue;\n          if (isArray(srcValue) || isTypedArray(srcValue)) {\n            if (isArray(objValue)) {\n              newValue = objValue;\n            }\n            else if (isArrayLikeObject(objValue)) {\n              newValue = copyArray(objValue);\n            }\n            else {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n          }\n          else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            if (isArguments(objValue)) {\n              newValue = toPlainObject(objValue);\n            }\n            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n            else {\n              newValue = objValue;\n            }\n          }\n          else {\n            isCommon = false;\n          }\n        }\n        stack.set(srcValue, newValue);\n  \n        if (isCommon) {\n          // Recursively merge objects and arrays (susceptible to call stack limits).\n          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        }\n        assignMergeValue(object, key, newValue);\n      }\n  \n      /**\n       * The base implementation of `_.orderBy` without param guards.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n       * @param {string[]} orders The sort orders of `iteratees`.\n       * @returns {Array} Returns the new sorted array.\n       */\n      function baseOrderBy(collection, iteratees, orders) {\n        var index = -1,\n            toIteratee = getIteratee();\n  \n        iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {\n          return toIteratee(iteratee);\n        });\n  \n        var result = baseMap(collection, function(value, key, collection) {\n          var criteria = arrayMap(iteratees, function(iteratee) {\n            return iteratee(value);\n          });\n          return { 'criteria': criteria, 'index': ++index, 'value': value };\n        });\n  \n        return baseSortBy(result, function(object, other) {\n          return compareMultiple(object, other, orders);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.pick` without support for individual\n       * property names.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {string[]} props The property names to pick.\n       * @returns {Object} Returns the new object.\n       */\n      function basePick(object, props) {\n        object = Object(object);\n        return arrayReduce(props, function(result, key) {\n          if (key in object) {\n            result[key] = object[key];\n          }\n          return result;\n        }, {});\n      }\n  \n      /**\n       * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {Function} predicate The function invoked per property.\n       * @returns {Object} Returns the new object.\n       */\n      function basePickBy(object, predicate) {\n        var result = {};\n        baseForIn(object, function(value, key) {\n          if (predicate(value, key)) {\n            result[key] = value;\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.property` without support for deep paths.\n       *\n       * @private\n       * @param {string} key The key of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function baseProperty(key) {\n        return function(object) {\n          return object == null ? undefined : object[key];\n        };\n      }\n  \n      /**\n       * A specialized version of `baseProperty` which supports deep paths.\n       *\n       * @private\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function basePropertyDeep(path) {\n        return function(object) {\n          return baseGet(object, path);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.pullAll`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAll(array, values) {\n        return basePullAllBy(array, values);\n      }\n  \n      /**\n       * The base implementation of `_.pullAllBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAllBy(array, values, iteratee) {\n        var index = -1,\n            length = values.length,\n            seen = array;\n  \n        if (iteratee) {\n          seen = arrayMap(array, function(value) { return iteratee(value); });\n        }\n        while (++index < length) {\n          var fromIndex = 0,\n              value = values[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {\n            if (seen !== array) {\n              splice.call(seen, fromIndex, 1);\n            }\n            splice.call(array, fromIndex, 1);\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.pullAt` without support for individual\n       * indexes or capturing the removed elements.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {number[]} indexes The indexes of elements to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAt(array, indexes) {\n        var length = array ? indexes.length : 0,\n            lastIndex = length - 1;\n  \n        while (length--) {\n          var index = indexes[length];\n          if (lastIndex == length || index != previous) {\n            var previous = index;\n            if (isIndex(index)) {\n              splice.call(array, index, 1);\n            }\n            else if (!isKey(index, array)) {\n              var path = baseCastPath(index),\n                  object = parent(array, path);\n  \n              if (object != null) {\n                delete object[last(path)];\n              }\n            }\n            else {\n              delete array[index];\n            }\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.random` without support for returning\n       * floating-point numbers.\n       *\n       * @private\n       * @param {number} lower The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the random number.\n       */\n      function baseRandom(lower, upper) {\n        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n      }\n  \n      /**\n       * The base implementation of `_.range` and `_.rangeRight` which doesn't\n       * coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} step The value to increment or decrement by.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the new array of numbers.\n       */\n      function baseRange(start, end, step, fromRight) {\n        var index = -1,\n            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n            result = Array(length);\n  \n        while (length--) {\n          result[fromRight ? length : ++index] = start;\n          start += step;\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.set`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize path creation.\n       * @returns {Object} Returns `object`.\n       */\n      function baseSet(object, path, value, customizer) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = -1,\n            length = path.length,\n            lastIndex = length - 1,\n            nested = object;\n  \n        while (nested != null && ++index < length) {\n          var key = path[index];\n          if (isObject(nested)) {\n            var newValue = value;\n            if (index != lastIndex) {\n              var objValue = nested[key];\n              newValue = customizer ? customizer(objValue, key, nested) : undefined;\n              if (newValue === undefined) {\n                newValue = objValue == null\n                  ? (isIndex(path[index + 1]) ? [] : {})\n                  : objValue;\n              }\n            }\n            assignValue(nested, key, newValue);\n          }\n          nested = nested[key];\n        }\n        return object;\n      }\n  \n      /**\n       * The base implementation of `setData` without support for hot loop detection.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var baseSetData = !metaMap ? identity : function(func, data) {\n        metaMap.set(func, data);\n        return func;\n      };\n  \n      /**\n       * The base implementation of `_.slice` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseSlice(array, start, end) {\n        var index = -1,\n            length = array.length;\n  \n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = end > length ? length : end;\n        if (end < 0) {\n          end += length;\n        }\n        length = start > end ? 0 : ((end - start) >>> 0);\n        start >>>= 0;\n  \n        var result = Array(length);\n        while (++index < length) {\n          result[index] = array[index + start];\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.some` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       */\n      function baseSome(collection, predicate) {\n        var result;\n  \n        baseEach(collection, function(value, index, collection) {\n          result = predicate(value, index, collection);\n          return !result;\n        });\n        return !!result;\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n       * performs a binary search of `array` to determine the index at which `value`\n       * should be inserted into `array` in order to maintain its sort order.\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted\n       *  into `array`.\n       */\n      function baseSortedIndex(array, value, retHighest) {\n        var low = 0,\n            high = array ? array.length : low;\n  \n        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n          while (low < high) {\n            var mid = (low + high) >>> 1,\n                computed = array[mid];\n  \n            if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n              low = mid + 1;\n            } else {\n              high = mid;\n            }\n          }\n          return high;\n        }\n        return baseSortedIndexBy(array, value, identity, retHighest);\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n       * which invokes `iteratee` for `value` and each element of `array` to compute\n       * their sort ranking. The iteratee is invoked with one argument; (value).\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function} iteratee The iteratee invoked per element.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       */\n      function baseSortedIndexBy(array, value, iteratee, retHighest) {\n        value = iteratee(value);\n  \n        var low = 0,\n            high = array ? array.length : 0,\n            valIsNaN = value !== value,\n            valIsNull = value === null,\n            valIsUndef = value === undefined;\n  \n        while (low < high) {\n          var mid = nativeFloor((low + high) / 2),\n              computed = iteratee(array[mid]),\n              isDef = computed !== undefined,\n              isReflexive = computed === computed;\n  \n          if (valIsNaN) {\n            var setLow = isReflexive || retHighest;\n          } else if (valIsNull) {\n            setLow = isReflexive && isDef && (retHighest || computed != null);\n          } else if (valIsUndef) {\n            setLow = isReflexive && (retHighest || isDef);\n          } else if (computed == null) {\n            setLow = false;\n          } else {\n            setLow = retHighest ? (computed <= value) : (computed < value);\n          }\n          if (setLow) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return nativeMin(high, MAX_ARRAY_INDEX);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniq`.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniq(array) {\n        return baseSortedUniqBy(array);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniqBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniqBy(array, iteratee) {\n        var index = 0,\n            length = array.length,\n            value = array[0],\n            computed = iteratee ? iteratee(value) : value,\n            seen = computed,\n            resIndex = 0,\n            result = [value];\n  \n        while (++index < length) {\n          value = array[index],\n          computed = iteratee ? iteratee(value) : value;\n  \n          if (!eq(computed, seen)) {\n            seen = computed;\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseUniq(array, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            length = array.length,\n            isCommon = true,\n            result = [],\n            seen = result;\n  \n        if (comparator) {\n          isCommon = false;\n          includes = arrayIncludesWith;\n        }\n        else if (length >= LARGE_ARRAY_SIZE) {\n          var set = iteratee ? null : createSet(array);\n          if (set) {\n            return setToArray(set);\n          }\n          isCommon = false;\n          includes = cacheHas;\n          seen = new SetCache;\n        }\n        else {\n          seen = iteratee ? [] : result;\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var seenIndex = seen.length;\n            while (seenIndex--) {\n              if (seen[seenIndex] === computed) {\n                continue outer;\n              }\n            }\n            if (iteratee) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n          else if (!includes(seen, computed, comparator)) {\n            if (seen !== result) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.unset`.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       */\n      function baseUnset(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n        object = parent(object, path);\n        var key = last(path);\n        return (object != null && has(object, key)) ? delete object[key] : true;\n      }\n  \n      /**\n       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n       * without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {Function} predicate The function invoked per iteration.\n       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseWhile(array, predicate, isDrop, fromRight) {\n        var length = array.length,\n            index = fromRight ? length : -1;\n  \n        while ((fromRight ? index-- : ++index < length) &&\n          predicate(array[index], index, array)) {}\n  \n        return isDrop\n          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n      }\n  \n      /**\n       * The base implementation of `wrapperValue` which returns the result of\n       * performing a sequence of actions on the unwrapped `value`, where each\n       * successive action is supplied the return value of the previous.\n       *\n       * @private\n       * @param {*} value The unwrapped value.\n       * @param {Array} actions Actions to perform to resolve the unwrapped value.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseWrapperValue(value, actions) {\n        var result = value;\n        if (result instanceof LazyWrapper) {\n          result = result.value();\n        }\n        return arrayReduce(actions, function(result, action) {\n          return action.func.apply(action.thisArg, arrayPush([result], action.args));\n        }, result);\n      }\n  \n      /**\n       * The base implementation of methods like `_.xor`, without support for\n       * iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       */\n      function baseXor(arrays, iteratee, comparator) {\n        var index = -1,\n            length = arrays.length;\n  \n        while (++index < length) {\n          var result = result\n            ? arrayPush(\n                baseDifference(result, arrays[index], iteratee, comparator),\n                baseDifference(arrays[index], result, iteratee, comparator)\n              )\n            : arrays[index];\n        }\n        return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n      }\n  \n      /**\n       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n       *\n       * @private\n       * @param {Array} props The property names.\n       * @param {Array} values The property values.\n       * @param {Function} assignFunc The function to assign values.\n       * @returns {Object} Returns the new object.\n       */\n      function baseZipObject(props, values, assignFunc) {\n        var index = -1,\n            length = props.length,\n            valsLength = values.length,\n            result = {};\n  \n        while (++index < length) {\n          assignFunc(result, props[index], index < valsLength ? values[index] : undefined);\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a clone of  `buffer`.\n       *\n       * @private\n       * @param {Buffer} buffer The buffer to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Buffer} Returns the cloned buffer.\n       */\n      function cloneBuffer(buffer, isDeep) {\n        if (isDeep) {\n          return buffer.slice();\n        }\n        var Ctor = buffer.constructor,\n            result = new Ctor(buffer.length);\n  \n        buffer.copy(result);\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `arrayBuffer`.\n       *\n       * @private\n       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n       * @returns {ArrayBuffer} Returns the cloned array buffer.\n       */\n      function cloneArrayBuffer(arrayBuffer) {\n        var Ctor = arrayBuffer.constructor,\n            result = new Ctor(arrayBuffer.byteLength),\n            view = new Uint8Array(result);\n  \n        view.set(new Uint8Array(arrayBuffer));\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `map`.\n       *\n       * @private\n       * @param {Object} map The map to clone.\n       * @returns {Object} Returns the cloned map.\n       */\n      function cloneMap(map) {\n        var Ctor = map.constructor;\n        return arrayReduce(mapToArray(map), addMapEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of `regexp`.\n       *\n       * @private\n       * @param {Object} regexp The regexp to clone.\n       * @returns {Object} Returns the cloned regexp.\n       */\n      function cloneRegExp(regexp) {\n        var Ctor = regexp.constructor,\n            result = new Ctor(regexp.source, reFlags.exec(regexp));\n  \n        result.lastIndex = regexp.lastIndex;\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `set`.\n       *\n       * @private\n       * @param {Object} set The set to clone.\n       * @returns {Object} Returns the cloned set.\n       */\n      function cloneSet(set) {\n        var Ctor = set.constructor;\n        return arrayReduce(setToArray(set), addSetEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of the `symbol` object.\n       *\n       * @private\n       * @param {Object} symbol The symbol object to clone.\n       * @returns {Object} Returns the cloned symbol object.\n       */\n      function cloneSymbol(symbol) {\n        return Symbol ? Object(symbolValueOf.call(symbol)) : {};\n      }\n  \n      /**\n       * Creates a clone of `typedArray`.\n       *\n       * @private\n       * @param {Object} typedArray The typed array to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the cloned typed array.\n       */\n      function cloneTypedArray(typedArray, isDeep) {\n        var arrayBuffer = typedArray.buffer,\n            buffer = isDeep ? cloneArrayBuffer(arrayBuffer) : arrayBuffer,\n            Ctor = typedArray.constructor;\n  \n        return new Ctor(buffer, typedArray.byteOffset, typedArray.length);\n      }\n  \n      /**\n       * Creates an array that is the composition of partially applied arguments,\n       * placeholders, and provided arguments into a single array of arguments.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to prepend to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgs(args, partials, holders) {\n        var holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            leftIndex = -1,\n            leftLength = partials.length,\n            result = Array(leftLength + argsLength);\n  \n        while (++leftIndex < leftLength) {\n          result[leftIndex] = partials[leftIndex];\n        }\n        while (++argsIndex < holdersLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n        while (argsLength--) {\n          result[leftIndex++] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * This function is like `composeArgs` except that the arguments composition\n       * is tailored for `_.partialRight`.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to append to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgsRight(args, partials, holders) {\n        var holdersIndex = -1,\n            holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            rightIndex = -1,\n            rightLength = partials.length,\n            result = Array(argsLength + rightLength);\n  \n        while (++argsIndex < argsLength) {\n          result[argsIndex] = args[argsIndex];\n        }\n        var offset = argsIndex;\n        while (++rightIndex < rightLength) {\n          result[offset + rightIndex] = partials[rightIndex];\n        }\n        while (++holdersIndex < holdersLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * Copies the values of `source` to `array`.\n       *\n       * @private\n       * @param {Array} source The array to copy values from.\n       * @param {Array} [array=[]] The array to copy values to.\n       * @returns {Array} Returns `array`.\n       */\n      function copyArray(source, array) {\n        var index = -1,\n            length = source.length;\n  \n        array || (array = Array(length));\n        while (++index < length) {\n          array[index] = source[index];\n        }\n        return array;\n      }\n  \n      /**\n       * Copies properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObject(source, props, object) {\n        return copyObjectWith(source, props, object);\n      }\n  \n      /**\n       * This function is like `copyObject` except that it accepts a function to\n       * customize copied values.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @param {Function} [customizer] The function to customize copied values.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObjectWith(source, props, object, customizer) {\n        object || (object = {});\n  \n        var index = -1,\n            length = props.length;\n  \n        while (++index < length) {\n          var key = props[index];\n  \n          var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : source[key];\n  \n          assignValue(object, key, newValue);\n        }\n        return object;\n      }\n  \n      /**\n       * Copies own symbol properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy symbols from.\n       * @param {Object} [object={}] The object to copy symbols to.\n       * @returns {Object} Returns `object`.\n       */\n      function copySymbols(source, object) {\n        return copyObject(source, getSymbols(source), object);\n      }\n  \n      /**\n       * Creates a function like `_.groupBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} [initializer] The accumulator object initializer.\n       * @returns {Function} Returns the new aggregator function.\n       */\n      function createAggregator(setter, initializer) {\n        return function(collection, iteratee) {\n          var func = isArray(collection) ? arrayAggregator : baseAggregator,\n              accumulator = initializer ? initializer() : {};\n  \n          return func(collection, setter, getIteratee(iteratee), accumulator);\n        };\n      }\n  \n      /**\n       * Creates a function like `_.assign`.\n       *\n       * @private\n       * @param {Function} assigner The function to assign values.\n       * @returns {Function} Returns the new assigner function.\n       */\n      function createAssigner(assigner) {\n        return rest(function(object, sources) {\n          var index = -1,\n              length = sources.length,\n              customizer = length > 1 ? sources[length - 1] : undefined,\n              guard = length > 2 ? sources[2] : undefined;\n  \n          customizer = typeof customizer == 'function'\n            ? (length--, customizer)\n            : undefined;\n  \n          if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n          }\n          object = Object(object);\n          while (++index < length) {\n            var source = sources[index];\n            if (source) {\n              assigner(object, source, index, customizer);\n            }\n          }\n          return object;\n        });\n      }\n  \n      /**\n       * Creates a `baseEach` or `baseEachRight` function.\n       *\n       * @private\n       * @param {Function} eachFunc The function to iterate over a collection.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseEach(eachFunc, fromRight) {\n        return function(collection, iteratee) {\n          if (collection == null) {\n            return collection;\n          }\n          if (!isArrayLike(collection)) {\n            return eachFunc(collection, iteratee);\n          }\n          var length = collection.length,\n              index = fromRight ? length : -1,\n              iterable = Object(collection);\n  \n          while ((fromRight ? index-- : ++index < length)) {\n            if (iteratee(iterable[index], index, iterable) === false) {\n              break;\n            }\n          }\n          return collection;\n        };\n      }\n  \n      /**\n       * Creates a base function for methods like `_.forIn`.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseFor(fromRight) {\n        return function(object, iteratee, keysFunc) {\n          var index = -1,\n              iterable = Object(object),\n              props = keysFunc(object),\n              length = props.length;\n  \n          while (length--) {\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) {\n              break;\n            }\n          }\n          return object;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg`.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createBaseWrapper(func, bitmask, thisArg) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n          return fn.apply(isBind ? thisArg : this, arguments);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.lowerFirst`.\n       *\n       * @private\n       * @param {string} methodName The name of the `String` case method to use.\n       * @returns {Function} Returns the new function.\n       */\n      function createCaseFirst(methodName) {\n        return function(string) {\n          string = toString(string);\n  \n          var strSymbols = reHasComplexSymbol.test(string)\n            ? stringToArray(string)\n            : undefined;\n  \n          var chr = strSymbols ? strSymbols[0] : string.charAt(0),\n              trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);\n  \n          return chr[methodName]() + trailing;\n        };\n      }\n  \n      /**\n       * Creates a function like `_.camelCase`.\n       *\n       * @private\n       * @param {Function} callback The function to combine each word.\n       * @returns {Function} Returns the new compounder function.\n       */\n      function createCompounder(callback) {\n        return function(string) {\n          return arrayReduce(words(deburr(string)), callback, '');\n        };\n      }\n  \n      /**\n       * Creates a function that produces an instance of `Ctor` regardless of\n       * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n       *\n       * @private\n       * @param {Function} Ctor The constructor to wrap.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCtorWrapper(Ctor) {\n        return function() {\n          // Use a `switch` statement to work with class constructors.\n          // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n          // for more details.\n          var args = arguments;\n          switch (args.length) {\n            case 0: return new Ctor;\n            case 1: return new Ctor(args[0]);\n            case 2: return new Ctor(args[0], args[1]);\n            case 3: return new Ctor(args[0], args[1], args[2]);\n            case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n          }\n          var thisBinding = baseCreate(Ctor.prototype),\n              result = Ctor.apply(thisBinding, args);\n  \n          // Mimic the constructor's `return` behavior.\n          // See https://es5.github.io/#x13.2.2 for more details.\n          return isObject(result) ? result : thisBinding;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to enable currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {number} arity The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCurryWrapper(func, bitmask, arity) {\n        var Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,\n              placeholder = lodash.placeholder || wrapper.placeholder;\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n            ? []\n            : replaceHolders(args, placeholder);\n  \n          length -= holders.length;\n          return length < arity\n            ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)\n            : apply(fn, this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.flow` or `_.flowRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new flow function.\n       */\n      function createFlow(fromRight) {\n        return rest(function(funcs) {\n          funcs = baseFlatten(funcs, 1);\n  \n          var length = funcs.length,\n              index = length,\n              prereq = LodashWrapper.prototype.thru;\n  \n          if (fromRight) {\n            funcs.reverse();\n          }\n          while (index--) {\n            var func = funcs[index];\n            if (typeof func != 'function') {\n              throw new TypeError(FUNC_ERROR_TEXT);\n            }\n            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n              var wrapper = new LodashWrapper([], true);\n            }\n          }\n          index = wrapper ? index : length;\n          while (++index < length) {\n            func = funcs[index];\n  \n            var funcName = getFuncName(func),\n                data = funcName == 'wrapper' ? getData(func) : undefined;\n  \n            if (data && isLaziable(data[0]) &&\n                  data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                  !data[4].length && data[9] == 1\n                ) {\n              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n            } else {\n              wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n            }\n          }\n          return function() {\n            var args = arguments,\n                value = args[0];\n  \n            if (wrapper && args.length == 1 &&\n                isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n              return wrapper.plant(value).value();\n            }\n            var index = 0,\n                result = length ? funcs[index].apply(this, args) : value;\n  \n            while (++index < length) {\n              result = funcs[index].call(this, result);\n            }\n            return result;\n          };\n        });\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with optional `this`\n       * binding of `thisArg`, partial application, and currying.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n        var isAry = bitmask & ARY_FLAG,\n            isBind = bitmask & BIND_FLAG,\n            isBindKey = bitmask & BIND_KEY_FLAG,\n            isCurry = bitmask & CURRY_FLAG,\n            isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n            isFlip = bitmask & FLIP_FLAG,\n            Ctor = isBindKey ? undefined : createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length);\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          if (partials) {\n            args = composeArgs(args, partials, holders);\n          }\n          if (partialsRight) {\n            args = composeArgsRight(args, partialsRight, holdersRight);\n          }\n          if (isCurry || isCurryRight) {\n            var placeholder = lodash.placeholder || wrapper.placeholder,\n                argsHolders = replaceHolders(args, placeholder);\n  \n            length -= argsHolders.length;\n            if (length < arity) {\n              return createRecurryWrapper(\n                func, bitmask, createHybridWrapper, placeholder, thisArg, args,\n                argsHolders, argPos, ary, arity - length\n              );\n            }\n          }\n          var thisBinding = isBind ? thisArg : this,\n              fn = isBindKey ? thisBinding[func] : func;\n  \n          if (argPos) {\n            args = reorder(args, argPos);\n          } else if (isFlip && args.length > 1) {\n            args.reverse();\n          }\n          if (isAry && ary < args.length) {\n            args.length = ary;\n          }\n          if (this && this !== root && this instanceof wrapper) {\n            fn = Ctor || createCtorWrapper(fn);\n          }\n          return fn.apply(thisBinding, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.invertBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} toIteratee The function to resolve iteratees.\n       * @returns {Function} Returns the new inverter function.\n       */\n      function createInverter(setter, toIteratee) {\n        return function(object, iteratee) {\n          return baseInverter(object, setter, toIteratee(iteratee), {});\n        };\n      }\n  \n      /**\n       * Creates a function like `_.over`.\n       *\n       * @private\n       * @param {Function} arrayFunc The function to iterate over iteratees.\n       * @returns {Function} Returns the new invoker function.\n       */\n      function createOver(arrayFunc) {\n        return rest(function(iteratees) {\n          iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());\n          return rest(function(args) {\n            var thisArg = this;\n            return arrayFunc(iteratees, function(iteratee) {\n              return apply(iteratee, thisArg, args);\n            });\n          });\n        });\n      }\n  \n      /**\n       * Creates the padding for `string` based on `length`. The `chars` string\n       * is truncated if the number of characters exceeds `length`.\n       *\n       * @private\n       * @param {string} string The string to create padding for.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padding for `string`.\n       */\n      function createPadding(string, length, chars) {\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return '';\n        }\n        var padLength = length - strLength;\n        chars = chars === undefined ? ' ' : (chars + '');\n  \n        var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));\n        return reHasComplexSymbol.test(chars)\n          ? stringToArray(result).slice(0, padLength).join('')\n          : result.slice(0, padLength);\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg` and the `partials` prepended to those provided to\n       * the wrapper.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {Array} partials The arguments to prepend to those provided to the new function.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createPartialWrapper(func, bitmask, thisArg, partials) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var argsIndex = -1,\n              argsLength = arguments.length,\n              leftIndex = -1,\n              leftLength = partials.length,\n              args = Array(leftLength + argsLength),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n  \n          while (++leftIndex < leftLength) {\n            args[leftIndex] = partials[leftIndex];\n          }\n          while (argsLength--) {\n            args[leftIndex++] = arguments[++argsIndex];\n          }\n          return apply(fn, isBind ? thisArg : this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.range` or `_.rangeRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new range function.\n       */\n      function createRange(fromRight) {\n        return function(start, end, step) {\n          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n            end = step = undefined;\n          }\n          // Ensure the sign of `-0` is preserved.\n          start = toNumber(start);\n          start = start === start ? start : 0;\n          if (end === undefined) {\n            end = start;\n            start = 0;\n          } else {\n            end = toNumber(end) || 0;\n          }\n          step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);\n          return baseRange(start, end, step, fromRight);\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to continue currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {Function} wrapFunc The function to create the `func` wrapper.\n       * @param {*} placeholder The placeholder to replace.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n        var isCurry = bitmask & CURRY_FLAG,\n            newArgPos = argPos ? copyArray(argPos) : undefined,\n            newsHolders = isCurry ? holders : undefined,\n            newHoldersRight = isCurry ? undefined : holders,\n            newPartials = isCurry ? partials : undefined,\n            newPartialsRight = isCurry ? undefined : partials;\n  \n        bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n  \n        if (!(bitmask & CURRY_BOUND_FLAG)) {\n          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n        }\n        var newData = [\n          func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight,\n          newHoldersRight, newArgPos, ary, arity\n        ];\n  \n        var result = wrapFunc.apply(undefined, newData);\n        if (isLaziable(func)) {\n          setData(result, newData);\n        }\n        result.placeholder = placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a function like `_.round`.\n       *\n       * @private\n       * @param {string} methodName The name of the `Math` method to use when rounding.\n       * @returns {Function} Returns the new round function.\n       */\n      function createRound(methodName) {\n        var func = Math[methodName];\n        return function(number, precision) {\n          number = toNumber(number);\n          precision = toInteger(precision);\n          if (precision) {\n            // Shift with exponential notation to avoid floating-point issues.\n            // See [MDN](https://mdn.io/round#Examples) for more details.\n            var pair = (toString(number) + 'e').split('e'),\n                value = func(pair[0] + 'e' + (+pair[1] + precision));\n  \n            pair = (toString(value) + 'e').split('e');\n            return +(pair[0] + 'e' + (+pair[1] - precision));\n          }\n          return func(number);\n        };\n      }\n  \n      /**\n       * Creates a set of `values`.\n       *\n       * @private\n       * @param {Array} values The values to add to the set.\n       * @returns {Object} Returns the new set.\n       */\n      var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {\n        return new Set(values);\n      };\n  \n      /**\n       * Creates a function that either curries or invokes `func` with optional\n       * `this` binding and partially applied arguments.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - `_.bind`\n       *     2 - `_.bindKey`\n       *     4 - `_.curry` or `_.curryRight` of a bound function\n       *     8 - `_.curry`\n       *    16 - `_.curryRight`\n       *    32 - `_.partial`\n       *    64 - `_.partialRight`\n       *   128 - `_.rearg`\n       *   256 - `_.ary`\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to be partially applied.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n        var isBindKey = bitmask & BIND_KEY_FLAG;\n        if (!isBindKey && typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var length = partials ? partials.length : 0;\n        if (!length) {\n          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n          partials = holders = undefined;\n        }\n        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n        arity = arity === undefined ? arity : toInteger(arity);\n        length -= holders ? holders.length : 0;\n  \n        if (bitmask & PARTIAL_RIGHT_FLAG) {\n          var partialsRight = partials,\n              holdersRight = holders;\n  \n          partials = holders = undefined;\n        }\n        var data = isBindKey ? undefined : getData(func);\n  \n        var newData = [\n          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n          argPos, ary, arity\n        ];\n  \n        if (data) {\n          mergeData(newData, data);\n        }\n        func = newData[0];\n        bitmask = newData[1];\n        thisArg = newData[2];\n        partials = newData[3];\n        holders = newData[4];\n        arity = newData[9] = newData[9] == null\n          ? (isBindKey ? 0 : func.length)\n          : nativeMax(newData[9] - length, 0);\n  \n        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n        }\n        if (!bitmask || bitmask == BIND_FLAG) {\n          var result = createBaseWrapper(func, bitmask, thisArg);\n        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n          result = createCurryWrapper(func, bitmask, arity);\n        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n          result = createPartialWrapper(func, bitmask, thisArg, partials);\n        } else {\n          result = createHybridWrapper.apply(undefined, newData);\n        }\n        var setter = data ? baseSetData : setData;\n        return setter(result, newData);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for arrays with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Array} array The array to compare.\n       * @param {Array} other The other array to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `array` and `other` objects.\n       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n       */\n      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n        var index = -1,\n            isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            isUnordered = bitmask & UNORDERED_COMPARE_FLAG,\n            arrLength = array.length,\n            othLength = other.length;\n  \n        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(array);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(array, other);\n  \n        // Ignore non-index properties.\n        while (++index < arrLength) {\n          var arrValue = array[index],\n              othValue = other[index];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, arrValue, index, other, array, stack)\n              : customizer(arrValue, othValue, index, array, other, stack);\n          }\n          if (compared !== undefined) {\n            if (compared) {\n              continue;\n            }\n            result = false;\n            break;\n          }\n          // Recursively compare arrays (susceptible to call stack limits).\n          if (isUnordered) {\n            if (!arraySome(other, function(othValue) {\n                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);\n                })) {\n              result = false;\n              break;\n            }\n          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n            result = false;\n            break;\n          }\n        }\n        stack['delete'](array);\n        return result;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for comparing objects of\n       * the same `toStringTag`.\n       *\n       * **Note:** This function only supports comparing values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {string} tag The `toStringTag` of the objects to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {\n        switch (tag) {\n          case arrayBufferTag:\n            if ((object.byteLength != other.byteLength) ||\n                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n              return false;\n            }\n            return true;\n  \n          case boolTag:\n          case dateTag:\n            // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n            // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n            return +object == +other;\n  \n          case errorTag:\n            return object.name == other.name && object.message == other.message;\n  \n          case numberTag:\n            // Treat `NaN` vs. `NaN` as equal.\n            return (object != +object) ? other != +other : object == +other;\n  \n          case regexpTag:\n          case stringTag:\n            // Coerce regexes to strings and treat strings primitives and string\n            // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n            return object == (other + '');\n  \n          case mapTag:\n            var convert = mapToArray;\n  \n          case setTag:\n            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n            convert || (convert = setToArray);\n  \n            // Recursively compare objects (susceptible to call stack limits).\n            return (isPartial || object.size == other.size) &&\n              equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);\n  \n          case symbolTag:\n            return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));\n        }\n        return false;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for objects with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            objProps = keys(object),\n            objLength = objProps.length,\n            othProps = keys(other),\n            othLength = othProps.length;\n  \n        if (objLength != othLength && !isPartial) {\n          return false;\n        }\n        var index = objLength;\n        while (index--) {\n          var key = objProps[index];\n          if (!(isPartial ? key in other : baseHas(other, key))) {\n            return false;\n          }\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(object, other);\n  \n        var skipCtor = isPartial;\n        while (++index < objLength) {\n          key = objProps[index];\n          var objValue = object[key],\n              othValue = other[key];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, objValue, key, other, object, stack)\n              : customizer(objValue, othValue, key, object, other, stack);\n          }\n          // Recursively compare objects (susceptible to call stack limits).\n          if (!(compared === undefined\n                ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n                : compared\n              )) {\n            result = false;\n            break;\n          }\n          skipCtor || (skipCtor = key == 'constructor');\n        }\n        if (result && !skipCtor) {\n          var objCtor = object.constructor,\n              othCtor = other.constructor;\n  \n          // Non `Object` object instances with different constructors are not equal.\n          if (objCtor != othCtor &&\n              ('constructor' in object && 'constructor' in other) &&\n              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n                typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n            result = false;\n          }\n        }\n        stack['delete'](object);\n        return result;\n      }\n  \n      /**\n       * Gets metadata for `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {*} Returns the metadata for `func`.\n       */\n      var getData = !metaMap ? noop : function(func) {\n        return metaMap.get(func);\n      };\n  \n      /**\n       * Gets the name of `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {string} Returns the function name.\n       */\n      function getFuncName(func) {\n        var result = (func.name + ''),\n            array = realNames[result],\n            length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n  \n        while (length--) {\n          var data = array[length],\n              otherFunc = data.func;\n          if (otherFunc == null || otherFunc == func) {\n            return data.name;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the appropriate \"iteratee\" function. If the `_.iteratee` method is\n       * customized this function returns the custom method, otherwise it returns\n       * `baseIteratee`. If arguments are provided the chosen function is invoked\n       * with them and its result is returned.\n       *\n       * @private\n       * @param {*} [value] The value to convert to an iteratee.\n       * @param {number} [arity] The arity of the created iteratee.\n       * @returns {Function} Returns the chosen function or its result.\n       */\n      function getIteratee() {\n        var result = lodash.iteratee || iteratee;\n        result = result === iteratee ? baseIteratee : result;\n        return arguments.length ? result(arguments[0], arguments[1]) : result;\n      }\n  \n      /**\n       * Gets the \"length\" property value of `object`.\n       *\n       * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n       * that affects Safari on at least iOS 8.1-8.3 ARM64.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {*} Returns the \"length\" value.\n       */\n      var getLength = baseProperty('length');\n  \n      /**\n       * Gets the property names, values, and compare flags of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the match data of `object`.\n       */\n      function getMatchData(object) {\n        var result = toPairs(object),\n            length = result.length;\n  \n        while (length--) {\n          result[length][2] = isStrictComparable(result[length][1]);\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the native function at `key` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {string} key The key of the method to get.\n       * @returns {*} Returns the function if it's native, else `undefined`.\n       */\n      function getNative(object, key) {\n        var value = object == null ? undefined : object[key];\n        return isNative(value) ? value : undefined;\n      }\n  \n      /**\n       * Creates an array of the own symbol properties of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of symbols.\n       */\n      var getSymbols = getOwnPropertySymbols || function() {\n        return [];\n      };\n  \n      /**\n       * Gets the `toStringTag` of `value`.\n       *\n       * @private\n       * @param {*} value The value to query.\n       * @returns {string} Returns the `toStringTag`.\n       */\n      function getTag(value) {\n        return objectToString.call(value);\n      }\n  \n      // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.\n      if ((Map && getTag(new Map) != mapTag) ||\n          (Set && getTag(new Set) != setTag) ||\n          (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n        getTag = function(value) {\n          var result = objectToString.call(value),\n              Ctor = result == objectTag ? value.constructor : null,\n              ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';\n  \n          if (ctorString) {\n            switch (ctorString) {\n              case mapCtorString: return mapTag;\n              case setCtorString: return setTag;\n              case weakMapCtorString: return weakMapTag;\n            }\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Gets the view, applying any `transforms` to the `start` and `end` positions.\n       *\n       * @private\n       * @param {number} start The start of the view.\n       * @param {number} end The end of the view.\n       * @param {Array} transforms The transformations to apply to the view.\n       * @returns {Object} Returns an object containing the `start` and `end`\n       *  positions of the view.\n       */\n      function getView(start, end, transforms) {\n        var index = -1,\n            length = transforms.length;\n  \n        while (++index < length) {\n          var data = transforms[index],\n              size = data.size;\n  \n          switch (data.type) {\n            case 'drop':      start += size; break;\n            case 'dropRight': end -= size; break;\n            case 'take':      end = nativeMin(end, start + size); break;\n            case 'takeRight': start = nativeMax(start, end - size); break;\n          }\n        }\n        return { 'start': start, 'end': end };\n      }\n  \n      /**\n       * Checks if `path` exists on `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @param {Function} hasFunc The function to check properties.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       */\n      function hasPath(object, path, hasFunc) {\n        if (object == null) {\n          return false;\n        }\n        var result = hasFunc(object, path);\n        if (!result && !isKey(path)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          if (object != null) {\n            path = last(path);\n            result = hasFunc(object, path);\n          }\n        }\n        var length = object ? object.length : undefined;\n        return result || (\n          !!length && isLength(length) && isIndex(path, length) &&\n          (isArray(object) || isString(object) || isArguments(object))\n        );\n      }\n  \n      /**\n       * Initializes an array clone.\n       *\n       * @private\n       * @param {Array} array The array to clone.\n       * @returns {Array} Returns the initialized clone.\n       */\n      function initCloneArray(array) {\n        var length = array.length,\n            result = array.constructor(length);\n  \n        // Add properties assigned by `RegExp#exec`.\n        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n          result.index = array.index;\n          result.input = array.input;\n        }\n        return result;\n      }\n  \n      /**\n       * Initializes an object clone.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneObject(object) {\n        if (isPrototype(object)) {\n          return {};\n        }\n        var Ctor = object.constructor;\n        return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n  \n      /**\n       * Initializes an object clone based on its `toStringTag`.\n       *\n       * **Note:** This function only supports cloning values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @param {string} tag The `toStringTag` of the object to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneByTag(object, tag, isDeep) {\n        var Ctor = object.constructor;\n        switch (tag) {\n          case arrayBufferTag:\n            return cloneArrayBuffer(object);\n  \n          case boolTag:\n          case dateTag:\n            return new Ctor(+object);\n  \n          case float32Tag: case float64Tag:\n          case int8Tag: case int16Tag: case int32Tag:\n          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n  \n          case mapTag:\n            return cloneMap(object);\n  \n          case numberTag:\n          case stringTag:\n            return new Ctor(object);\n  \n          case regexpTag:\n            return cloneRegExp(object);\n  \n          case setTag:\n            return cloneSet(object);\n  \n          case symbolTag:\n            return cloneSymbol(object);\n        }\n      }\n  \n      /**\n       * Creates an array of index keys for `object` values of arrays,\n       * `arguments` objects, and strings, otherwise `null` is returned.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array|null} Returns index keys, else `null`.\n       */\n      function indexKeys(object) {\n        var length = object ? object.length : undefined;\n        if (isLength(length) &&\n            (isArray(object) || isString(object) || isArguments(object))) {\n          return baseTimes(length, String);\n        }\n        return null;\n      }\n  \n      /**\n       * Checks if the given arguments are from an iteratee call.\n       *\n       * @private\n       * @param {*} value The potential iteratee value argument.\n       * @param {*} index The potential iteratee index or key argument.\n       * @param {*} object The potential iteratee object argument.\n       * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n       */\n      function isIterateeCall(value, index, object) {\n        if (!isObject(object)) {\n          return false;\n        }\n        var type = typeof index;\n        if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)) {\n          return eq(object[index], value);\n        }\n        return false;\n      }\n  \n      /**\n       * Checks if `value` is a property name and not a property path.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @param {Object} [object] The object to query keys on.\n       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n       */\n      function isKey(value, object) {\n        if (typeof value == 'number') {\n          return true;\n        }\n        return !isArray(value) &&\n          (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n            (object != null && value in Object(object)));\n      }\n  \n      /**\n       * Checks if `value` is suitable for use as unique object key.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n       */\n      function isKeyable(value) {\n        var type = typeof value;\n        return type == 'number' || type == 'boolean' ||\n          (type == 'string' && value != '__proto__') || value == null;\n      }\n  \n      /**\n       * Checks if `func` has a lazy counterpart.\n       *\n       * @private\n       * @param {Function} func The function to check.\n       * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n       */\n      function isLaziable(func) {\n        var funcName = getFuncName(func),\n            other = lodash[funcName];\n  \n        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n          return false;\n        }\n        if (func === other) {\n          return true;\n        }\n        var data = getData(other);\n        return !!data && func === data[0];\n      }\n  \n      /**\n       * Checks if `value` is likely a prototype object.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n       */\n      function isPrototype(value) {\n        var Ctor = value && value.constructor,\n            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n  \n        return value === proto;\n      }\n  \n      /**\n       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` if suitable for strict\n       *  equality comparisons, else `false`.\n       */\n      function isStrictComparable(value) {\n        return value === value && !isObject(value);\n      }\n  \n      /**\n       * Merges the function metadata of `source` into `data`.\n       *\n       * Merging metadata reduces the number of wrappers used to invoke a function.\n       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n       * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n       * modify function arguments, making the order in which they are executed important,\n       * preventing the merging of metadata. However, we make an exception for a safe\n       * combined case where curried functions have `_.ary` and or `_.rearg` applied.\n       *\n       * @private\n       * @param {Array} data The destination metadata.\n       * @param {Array} source The source metadata.\n       * @returns {Array} Returns `data`.\n       */\n      function mergeData(data, source) {\n        var bitmask = data[1],\n            srcBitmask = source[1],\n            newBitmask = bitmask | srcBitmask,\n            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n  \n        var isCombo =\n          (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||\n          (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n          (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n  \n        // Exit early if metadata can't be merged.\n        if (!(isCommon || isCombo)) {\n          return data;\n        }\n        // Use source `thisArg` if available.\n        if (srcBitmask & BIND_FLAG) {\n          data[2] = source[2];\n          // Set when currying a bound function.\n          newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n        }\n        // Compose partial arguments.\n        var value = source[3];\n        if (value) {\n          var partials = data[3];\n          data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);\n          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);\n        }\n        // Compose partial right arguments.\n        value = source[5];\n        if (value) {\n          partials = data[5];\n          data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);\n          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);\n        }\n        // Use source `argPos` if available.\n        value = source[7];\n        if (value) {\n          data[7] = copyArray(value);\n        }\n        // Use source `ary` if it's smaller.\n        if (srcBitmask & ARY_FLAG) {\n          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n        }\n        // Use source `arity` if one is not provided.\n        if (data[9] == null) {\n          data[9] = source[9];\n        }\n        // Use source `func` and merge bitmasks.\n        data[0] = source[0];\n        data[1] = newBitmask;\n  \n        return data;\n      }\n  \n      /**\n       * Used by `_.defaultsDeep` to customize its `_.merge` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to merge.\n       * @param {Object} object The parent object of `objValue`.\n       * @param {Object} source The parent object of `srcValue`.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       * @returns {*} Returns the value to assign.\n       */\n      function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n        if (isObject(objValue) && isObject(srcValue)) {\n          stack.set(srcValue, objValue);\n          baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        }\n        return objValue;\n      }\n  \n      /**\n       * Gets the parent value at `path` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array} path The path to get the parent value of.\n       * @returns {*} Returns the parent value.\n       */\n      function parent(object, path) {\n        return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));\n      }\n  \n      /**\n       * Reorder `array` according to the specified indexes where the element at\n       * the first index is assigned as the first element, the element at\n       * the second index is assigned as the second element, and so on.\n       *\n       * @private\n       * @param {Array} array The array to reorder.\n       * @param {Array} indexes The arranged array indexes.\n       * @returns {Array} Returns `array`.\n       */\n      function reorder(array, indexes) {\n        var arrLength = array.length,\n            length = nativeMin(indexes.length, arrLength),\n            oldArray = copyArray(array);\n  \n        while (length--) {\n          var index = indexes[length];\n          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n        }\n        return array;\n      }\n  \n      /**\n       * Sets metadata for `func`.\n       *\n       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n       * period of time, it will trip its breaker and transition to an identity function\n       * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n       * for more details.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var setData = (function() {\n        var count = 0,\n            lastCalled = 0;\n  \n        return function(key, value) {\n          var stamp = now(),\n              remaining = HOT_SPAN - (stamp - lastCalled);\n  \n          lastCalled = stamp;\n          if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n              return key;\n            }\n          } else {\n            count = 0;\n          }\n          return baseSetData(key, value);\n        };\n      }());\n  \n      /**\n       * Converts `string` to a property path array.\n       *\n       * @private\n       * @param {string} string The string to convert.\n       * @returns {Array} Returns the property path array.\n       */\n      function stringToPath(string) {\n        var result = [];\n        toString(string).replace(rePropName, function(match, number, quote, string) {\n          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n        });\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `wrapper`.\n       *\n       * @private\n       * @param {Object} wrapper The wrapper to clone.\n       * @returns {Object} Returns the cloned wrapper.\n       */\n      function wrapperClone(wrapper) {\n        if (wrapper instanceof LazyWrapper) {\n          return wrapper.clone();\n        }\n        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n        result.__actions__ = copyArray(wrapper.__actions__);\n        result.__index__  = wrapper.__index__;\n        result.__values__ = wrapper.__values__;\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an array of elements split into groups the length of `size`.\n       * If `array` can't be split evenly, the final chunk will be the remaining\n       * elements.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to process.\n       * @param {number} [size=0] The length of each chunk.\n       * @returns {Array} Returns the new array containing chunks.\n       * @example\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 2);\n       * // => [['a', 'b'], ['c', 'd']]\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 3);\n       * // => [['a', 'b', 'c'], ['d']]\n       */\n      function chunk(array, size) {\n        size = nativeMax(toInteger(size), 0);\n  \n        var length = array ? array.length : 0;\n        if (!length || size < 1) {\n          return [];\n        }\n        var index = 0,\n            resIndex = -1,\n            result = Array(nativeCeil(length / size));\n  \n        while (index < length) {\n          result[++resIndex] = baseSlice(array, index, (index += size));\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array with all falsey values removed. The values `false`, `null`,\n       * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to compact.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.compact([0, 1, false, 2, '', 3]);\n       * // => [1, 2, 3]\n       */\n      function compact(array) {\n        var index = -1,\n            length = array ? array.length : 0,\n            resIndex = -1,\n            result = [];\n  \n        while (++index < length) {\n          var value = array[index];\n          if (value) {\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a new array concatenating `array` with any additional arrays\n       * and/or values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to concatenate.\n       * @param {...*} [values] The values to concatenate.\n       * @returns {Array} Returns the new concatenated array.\n       * @example\n       *\n       * var array = [1];\n       * var other = _.concat(array, 2, [3], [[4]]);\n       *\n       * console.log(other);\n       * // => [1, 2, 3, [4]]\n       *\n       * console.log(array);\n       * // => [1]\n       */\n      var concat = rest(function(array, values) {\n        if (!isArray(array)) {\n          array = array == null ? [] : [Object(array)];\n        }\n        values = baseFlatten(values, 1);\n        return arrayConcat(array, values);\n      });\n  \n      /**\n       * Creates an array of unique `array` values not included in the other\n       * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.difference([3, 2, 1], [4, 2]);\n       * // => [3, 1]\n       */\n      var difference = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `iteratee` which\n       * is invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n       * // => [3.1, 1.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var differenceBy = rest(function(array, values) {\n        var iteratee = last(values);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `comparator`\n       * which is invoked to compare elements of `array` to `values`. The comparator\n       * is invoked with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       *\n       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }]\n       */\n      var differenceWith = rest(function(array, values) {\n        var comparator = last(values);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.drop([1, 2, 3]);\n       * // => [2, 3]\n       *\n       * _.drop([1, 2, 3], 2);\n       * // => [3]\n       *\n       * _.drop([1, 2, 3], 5);\n       * // => []\n       *\n       * _.drop([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function drop(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.dropRight([1, 2, 3]);\n       * // => [1, 2]\n       *\n       * _.dropRight([1, 2, 3], 2);\n       * // => [1]\n       *\n       * _.dropRight([1, 2, 3], 5);\n       * // => []\n       *\n       * _.dropRight([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function dropRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the end.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.dropRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropRightWhile(users, ['active', false]);\n       * // => objects for ['barney']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropRightWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the beginning.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.dropWhile(users, function(o) { return !o.active; });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropWhile(users, ['active', false]);\n       * // => objects for ['pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true)\n          : [];\n      }\n  \n      /**\n       * Fills elements of `array` with `value` from `start` up to, but not\n       * including, `end`.\n       *\n       * **Note:** This method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.fill(array, 'a');\n       * console.log(array);\n       * // => ['a', 'a', 'a']\n       *\n       * _.fill(Array(3), 2);\n       * // => [2, 2, 2]\n       *\n       * _.fill([4, 6, 8, 10], '*', 1, 3);\n       * // => [4, '*', '*', 10]\n       */\n      function fill(array, value, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n          start = 0;\n          end = length;\n        }\n        return baseFill(array, value, start, end);\n      }\n  \n      /**\n       * This method is like `_.find` except that it returns the index of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.findIndex(users, function(o) { return o.user == 'barney'; });\n       * // => 0\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findIndex(users, { 'user': 'fred', 'active': false });\n       * // => 1\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findIndex(users, ['active', false]);\n       * // => 0\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findIndex(users, 'active');\n       * // => 2\n       */\n      function findIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3))\n          : -1;\n      }\n  \n      /**\n       * This method is like `_.findIndex` except that it iterates over elements\n       * of `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n       * // => 2\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n       * // => 0\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastIndex(users, ['active', false]);\n       * // => 2\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastIndex(users, 'active');\n       * // => 0\n       */\n      function findLastIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3), true)\n          : -1;\n      }\n  \n      /**\n       * Flattens `array` a single level deep.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flatten([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, [3, [4]], 5]\n       */\n      function flatten(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, 1) : [];\n      }\n  \n      /**\n       * Recursively flattens `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flattenDeep([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, 3, 4, 5]\n       */\n      function flattenDeep(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, INFINITY) : [];\n      }\n  \n      /**\n       * Recursively flatten `array` up to `depth` times.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @param {number} [depth=1] The maximum recursion depth.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * var array = [1, [2, [3, [4]], 5]];\n       *\n       * _.flattenDepth(array, 1);\n       * // => [1, 2, [3, [4]], 5]\n       *\n       * _.flattenDepth(array, 2);\n       * // => [1, 2, 3, [4], 5]\n       */\n      function flattenDepth(array, depth) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        depth = depth === undefined ? 1 : toInteger(depth);\n        return baseFlatten(array, depth);\n      }\n  \n      /**\n       * The inverse of `_.toPairs`; this method returns an object composed\n       * from key-value `pairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} pairs The key-value pairs.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.fromPairs([['fred', 30], ['barney', 40]]);\n       * // => { 'fred': 30, 'barney': 40 }\n       */\n      function fromPairs(pairs) {\n        var index = -1,\n            length = pairs ? pairs.length : 0,\n            result = {};\n  \n        while (++index < length) {\n          var pair = pairs[index];\n          result[pair[0]] = pair[1];\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @alias first\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the first element of `array`.\n       * @example\n       *\n       * _.head([1, 2, 3]);\n       * // => 1\n       *\n       * _.head([]);\n       * // => undefined\n       */\n      function head(array) {\n        return array ? array[0] : undefined;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `value` is found in `array`\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n       * from the end of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.indexOf([1, 2, 1, 2], 2);\n       * // => 1\n       *\n       * // Search from the `fromIndex`.\n       * _.indexOf([1, 2, 1, 2], 2, 2);\n       * // => 3\n       */\n      function indexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        fromIndex = toInteger(fromIndex);\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return baseIndexOf(array, value, fromIndex);\n      }\n  \n      /**\n       * Gets all but the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.initial([1, 2, 3]);\n       * // => [1, 2]\n       */\n      function initial(array) {\n        return dropRight(array, 1);\n      }\n  \n      /**\n       * Creates an array of unique values that are included in all given arrays\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersection([2, 1], [4, 2], [1, 2]);\n       * // => [2]\n       */\n      var intersection = rest(function(arrays) {\n        var mapped = arrayMap(arrays, baseCastArrayLikeObject);\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped)\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `iteratee`\n       * which is invoked for each element of each `arrays` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }]\n       */\n      var intersectionBy = rest(function(arrays) {\n        var iteratee = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (iteratee === last(mapped)) {\n          iteratee = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `comparator`\n       * which is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.intersectionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }]\n       */\n      var intersectionWith = rest(function(arrays) {\n        var comparator = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (comparator === last(mapped)) {\n          comparator = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Converts all elements in `array` into a string separated by `separator`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to convert.\n       * @param {string} [separator=','] The element separator.\n       * @returns {string} Returns the joined string.\n       * @example\n       *\n       * _.join(['a', 'b', 'c'], '~');\n       * // => 'a~b~c'\n       */\n      function join(array, separator) {\n        return array ? nativeJoin.call(array, separator) : '';\n      }\n  \n      /**\n       * Gets the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the last element of `array`.\n       * @example\n       *\n       * _.last([1, 2, 3]);\n       * // => 3\n       */\n      function last(array) {\n        var length = array ? array.length : 0;\n        return length ? array[length - 1] : undefined;\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it iterates over elements of\n       * `array` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=array.length-1] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.lastIndexOf([1, 2, 1, 2], 2);\n       * // => 3\n       *\n       * // Search from the `fromIndex`.\n       * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n       * // => 1\n       */\n      function lastIndexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        var index = length;\n        if (fromIndex !== undefined) {\n          index = toInteger(fromIndex);\n          index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;\n        }\n        if (value !== value) {\n          return indexOfNaN(array, index, true);\n        }\n        while (index--) {\n          if (array[index] === value) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Removes all given values from `array` using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * **Note:** Unlike `_.without`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...*} [values] The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pull(array, 2, 3);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      var pull = rest(pullAll);\n  \n      /**\n       * This method is like `_.pull` except that it accepts an array of values to remove.\n       *\n       * **Note:** Unlike `_.difference`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pullAll(array, [2, 3]);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      function pullAll(array, values) {\n        return (array && array.length && values && values.length)\n          ? basePullAll(array, values)\n          : array;\n      }\n  \n      /**\n       * This method is like `_.pullAll` except that it accepts `iteratee` which is\n       * invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n       *\n       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n       * console.log(array);\n       * // => [{ 'x': 2 }]\n       */\n      function pullAllBy(array, values, iteratee) {\n        return (array && array.length && values && values.length)\n          ? basePullAllBy(array, values, getIteratee(iteratee))\n          : array;\n      }\n  \n      /**\n       * Removes elements from `array` corresponding to `indexes` and returns an\n       * array of removed elements.\n       *\n       * **Note:** Unlike `_.at`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [5, 10, 15, 20];\n       * var evens = _.pullAt(array, 1, 3);\n       *\n       * console.log(array);\n       * // => [5, 15]\n       *\n       * console.log(evens);\n       * // => [10, 20]\n       */\n      var pullAt = rest(function(array, indexes) {\n        indexes = arrayMap(baseFlatten(indexes, 1), String);\n  \n        var result = baseAt(array, indexes);\n        basePullAt(array, indexes.sort(compareAscending));\n        return result;\n      });\n  \n      /**\n       * Removes all elements from `array` that `predicate` returns truthy for\n       * and returns an array of the removed elements. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * **Note:** Unlike `_.filter`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [1, 2, 3, 4];\n       * var evens = _.remove(array, function(n) {\n       *   return n % 2 == 0;\n       * });\n       *\n       * console.log(array);\n       * // => [1, 3]\n       *\n       * console.log(evens);\n       * // => [2, 4]\n       */\n      function remove(array, predicate) {\n        var result = [];\n        if (!(array && array.length)) {\n          return result;\n        }\n        var index = -1,\n            indexes = [],\n            length = array.length;\n  \n        predicate = getIteratee(predicate, 3);\n        while (++index < length) {\n          var value = array[index];\n          if (predicate(value, index, array)) {\n            result.push(value);\n            indexes.push(index);\n          }\n        }\n        basePullAt(array, indexes);\n        return result;\n      }\n  \n      /**\n       * Reverses `array` so that the first element becomes the last, the second\n       * element becomes the second to last, and so on.\n       *\n       * **Note:** This method mutates `array` and is based on\n       * [`Array#reverse`](https://mdn.io/Array/reverse).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.reverse(array);\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function reverse(array) {\n        return array ? nativeReverse.call(array) : array;\n      }\n  \n      /**\n       * Creates a slice of `array` from `start` up to, but not including, `end`.\n       *\n       * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)\n       * to ensure dense arrays are returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function slice(array, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n          start = 0;\n          end = length;\n        }\n        else {\n          start = start == null ? 0 : toInteger(start);\n          end = end === undefined ? length : toInteger(end);\n        }\n        return baseSlice(array, start, end);\n      }\n  \n      /**\n       * Uses a binary search to determine the lowest index at which `value` should\n       * be inserted into `array` in order to maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedIndex([30, 50], 40);\n       * // => 1\n       *\n       * _.sortedIndex([4, 5], 4);\n       * // => 0\n       */\n      function sortedIndex(array, value) {\n        return baseSortedIndex(array, value);\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n       *\n       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n       * // => 1\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 0\n       */\n      function sortedIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee));\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedIndexOf([1, 1, 2, 2], 2);\n       * // => 2\n       */\n      function sortedIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value);\n          if (index < length && eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it returns the highest\n       * index at which `value` should be inserted into `array` in order to\n       * maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedLastIndex([4, 5], 4);\n       * // => 1\n       */\n      function sortedLastIndex(array, value) {\n        return baseSortedIndex(array, value, true);\n      }\n  \n      /**\n       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 1\n       */\n      function sortedLastIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee), true);\n      }\n  \n      /**\n       * This method is like `_.lastIndexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedLastIndexOf([1, 1, 2, 2], 2);\n       * // => 3\n       */\n      function sortedLastIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value, true) - 1;\n          if (eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniq([1, 1, 2]);\n       * // => [1, 2]\n       */\n      function sortedUniq(array) {\n        return (array && array.length)\n          ? baseSortedUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniqBy` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n       * // => [1.1, 2.3]\n       */\n      function sortedUniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSortedUniqBy(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * Gets all but the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.tail([1, 2, 3]);\n       * // => [2, 3]\n       */\n      function tail(array) {\n        return drop(array, 1);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.take([1, 2, 3]);\n       * // => [1]\n       *\n       * _.take([1, 2, 3], 2);\n       * // => [1, 2]\n       *\n       * _.take([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.take([1, 2, 3], 0);\n       * // => []\n       */\n      function take(array, n, guard) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.takeRight([1, 2, 3]);\n       * // => [3]\n       *\n       * _.takeRight([1, 2, 3], 2);\n       * // => [2, 3]\n       *\n       * _.takeRight([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.takeRight([1, 2, 3], 0);\n       * // => []\n       */\n      function takeRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the end. Elements are\n       * taken until `predicate` returns falsey. The predicate is invoked with three\n       * arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.takeRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeRightWhile(users, ['active', false]);\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeRightWhile(users, 'active');\n       * // => []\n       */\n      function takeRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), false, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the beginning. Elements\n       * are taken until `predicate` returns falsey. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false},\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.takeWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeWhile(users, ['active', false]);\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeWhile(users, 'active');\n       * // => []\n       */\n      function takeWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3))\n          : [];\n      }\n  \n      /**\n       * Creates an array of unique values, in order, from all given arrays using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.union([2, 1], [4, 2], [1, 2]);\n       * // => [2, 1, 4]\n       */\n      var union = rest(function(arrays) {\n        return baseUniq(baseFlatten(arrays, 1, true));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1, 1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      var unionBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `comparator` which\n       * is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.unionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var unionWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);\n      });\n  \n      /**\n       * Creates a duplicate-free version of an array, using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons, in which only the first occurrence of each element\n       * is kept.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniq([2, 1, 2]);\n       * // => [2, 1]\n       */\n      function uniq(array) {\n        return (array && array.length)\n          ? baseUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n       * // => [2.1, 1.2]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      function uniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseUniq(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `comparator` which\n       * is invoked to compare elements of `array`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n       *\n       * _.uniqWith(objects, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n       */\n      function uniqWith(array, comparator) {\n        return (array && array.length)\n          ? baseUniq(array, undefined, comparator)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts an array of grouped\n       * elements and creates an array regrouping the elements to their pre-zip\n       * configuration.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       *\n       * _.unzip(zipped);\n       * // => [['fred', 'barney'], [30, 40], [true, false]]\n       */\n      function unzip(array) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var length = 0;\n        array = arrayFilter(array, function(group) {\n          if (isArrayLikeObject(group)) {\n            length = nativeMax(group.length, length);\n            return true;\n          }\n        });\n        return baseTimes(length, function(index) {\n          return arrayMap(array, baseProperty(index));\n        });\n      }\n  \n      /**\n       * This method is like `_.unzip` except that it accepts `iteratee` to specify\n       * how regrouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n       * // => [[1, 10, 100], [2, 20, 200]]\n       *\n       * _.unzipWith(zipped, _.add);\n       * // => [3, 30, 300]\n       */\n      function unzipWith(array, iteratee) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var result = unzip(array);\n        if (iteratee == null) {\n          return result;\n        }\n        return arrayMap(result, function(group) {\n          return apply(iteratee, undefined, group);\n        });\n      }\n  \n      /**\n       * Creates an array excluding all given values using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to filter.\n       * @param {...*} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.without([1, 2, 1, 3], 1, 2);\n       * // => [3]\n       */\n      var without = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, values)\n          : [];\n      });\n  \n      /**\n       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n       * of the given arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xor([2, 1], [4, 2]);\n       * // => [1, 4]\n       */\n      var xor = rest(function(arrays) {\n        return baseXor(arrayFilter(arrays, isArrayLikeObject));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var xorBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `comparator` which is\n       * invoked to compare elements of `arrays`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.xorWith(objects, others, _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var xorWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n      });\n  \n      /**\n       * Creates an array of grouped elements, the first of which contains the first\n       * elements of the given arrays, the second of which contains the second elements\n       * of the given arrays, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       */\n      var zip = rest(unzip);\n  \n      /**\n       * This method is like `_.fromPairs` except that it accepts two arrays,\n       * one of property names and one of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObject(['a', 'b'], [1, 2]);\n       * // => { 'a': 1, 'b': 2 }\n       */\n      function zipObject(props, values) {\n        return baseZipObject(props || [], values || [], assignValue);\n      }\n  \n      /**\n       * This method is like `_.zipObject` except that it supports property paths.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n       */\n      function zipObjectDeep(props, values) {\n        return baseZipObject(props || [], values || [], baseSet);\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts `iteratee` to specify\n       * how grouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n       *   return a + b + c;\n       * });\n       * // => [111, 222]\n       */\n      var zipWith = rest(function(arrays) {\n        var length = arrays.length,\n            iteratee = length > 1 ? arrays[length - 1] : undefined;\n  \n        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n        return unzipWith(arrays, iteratee);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.\n       * The result of such method chaining must be unwrapped with `_#value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to wrap.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36 },\n       *   { 'user': 'fred',    'age': 40 },\n       *   { 'user': 'pebbles', 'age': 1 }\n       * ];\n       *\n       * var youngest = _\n       *   .chain(users)\n       *   .sortBy('age')\n       *   .map(function(o) {\n       *     return o.user + ' is ' + o.age;\n       *   })\n       *   .head()\n       *   .value();\n       * // => 'pebbles is 1'\n       */\n      function chain(value) {\n        var result = lodash(value);\n        result.__chain__ = true;\n        return result;\n      }\n  \n      /**\n       * This method invokes `interceptor` and returns `value`. The interceptor\n       * is invoked with one argument; (value). The purpose of this method is to\n       * \"tap into\" a method chain in order to modify intermediate results.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * _([1, 2, 3])\n       *  .tap(function(array) {\n       *    // Mutate input array.\n       *    array.pop();\n       *  })\n       *  .reverse()\n       *  .value();\n       * // => [2, 1]\n       */\n      function tap(value, interceptor) {\n        interceptor(value);\n        return value;\n      }\n  \n      /**\n       * This method is like `_.tap` except that it returns the result of `interceptor`.\n       * The purpose of this method is to \"pass thru\" values replacing intermediate\n       * results in a method chain.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns the result of `interceptor`.\n       * @example\n       *\n       * _('  abc  ')\n       *  .chain()\n       *  .trim()\n       *  .thru(function(value) {\n       *    return [value];\n       *  })\n       *  .value();\n       * // => ['abc']\n       */\n      function thru(value, interceptor) {\n        return interceptor(value);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.at`.\n       *\n       * @name at\n       * @memberOf _\n       * @category Seq\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _(object).at(['a[0].b.c', 'a[1]']).value();\n       * // => [3, 4]\n       *\n       * _(['a', 'b', 'c']).at(0, 2).value();\n       * // => ['a', 'c']\n       */\n      var wrapperAt = rest(function(paths) {\n        paths = baseFlatten(paths, 1);\n        var length = paths.length,\n            start = length ? paths[0] : 0,\n            value = this.__wrapped__,\n            interceptor = function(object) { return baseAt(object, paths); };\n  \n        if (length > 1 || this.__actions__.length ||\n            !(value instanceof LazyWrapper) || !isIndex(start)) {\n          return this.thru(interceptor);\n        }\n        value = value.slice(start, +start + (length ? 1 : 0));\n        value.__actions__.push({\n          'func': thru,\n          'args': [interceptor],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(value, this.__chain__).thru(function(array) {\n          if (length && !array.length) {\n            array.push(undefined);\n          }\n          return array;\n        });\n      });\n  \n      /**\n       * Enables explicit method chaining on the wrapper object.\n       *\n       * @name chain\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // A sequence without explicit chaining.\n       * _(users).head();\n       * // => { 'user': 'barney', 'age': 36 }\n       *\n       * // A sequence with explicit chaining.\n       * _(users)\n       *   .chain()\n       *   .head()\n       *   .pick('user')\n       *   .value();\n       * // => { 'user': 'barney' }\n       */\n      function wrapperChain() {\n        return chain(this);\n      }\n  \n      /**\n       * Executes the chained sequence and returns the wrapped result.\n       *\n       * @name commit\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2];\n       * var wrapped = _(array).push(3);\n       *\n       * console.log(array);\n       * // => [1, 2]\n       *\n       * wrapped = wrapped.commit();\n       * console.log(array);\n       * // => [1, 2, 3]\n       *\n       * wrapped.last();\n       * // => 3\n       *\n       * console.log(array);\n       * // => [1, 2, 3]\n       */\n      function wrapperCommit() {\n        return new LodashWrapper(this.value(), this.__chain__);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.flatMap`.\n       *\n       * @name flatMap\n       * @memberOf _\n       * @category Seq\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _([1, 2]).flatMap(duplicate).value();\n       * // => [1, 1, 2, 2]\n       */\n      function wrapperFlatMap(iteratee) {\n        return this.map(iteratee).flatten();\n      }\n  \n      /**\n       * Gets the next value on a wrapped object following the\n       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n       *\n       * @name next\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the next iterator value.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 1 }\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 2 }\n       *\n       * wrapped.next();\n       * // => { 'done': true, 'value': undefined }\n       */\n      function wrapperNext() {\n        if (this.__values__ === undefined) {\n          this.__values__ = toArray(this.value());\n        }\n        var done = this.__index__ >= this.__values__.length,\n            value = done ? undefined : this.__values__[this.__index__++];\n  \n        return { 'done': done, 'value': value };\n      }\n  \n      /**\n       * Enables the wrapper to be iterable.\n       *\n       * @name Symbol.iterator\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the wrapper object.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped[Symbol.iterator]() === wrapped;\n       * // => true\n       *\n       * Array.from(wrapped);\n       * // => [1, 2]\n       */\n      function wrapperToIterator() {\n        return this;\n      }\n  \n      /**\n       * Creates a clone of the chained sequence planting `value` as the wrapped value.\n       *\n       * @name plant\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to plant.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2]).map(square);\n       * var other = wrapped.plant([3, 4]);\n       *\n       * other.value();\n       * // => [9, 16]\n       *\n       * wrapped.value();\n       * // => [1, 4]\n       */\n      function wrapperPlant(value) {\n        var result,\n            parent = this;\n  \n        while (parent instanceof baseLodash) {\n          var clone = wrapperClone(parent);\n          clone.__index__ = 0;\n          clone.__values__ = undefined;\n          if (result) {\n            previous.__wrapped__ = clone;\n          } else {\n            result = clone;\n          }\n          var previous = clone;\n          parent = parent.__wrapped__;\n        }\n        previous.__wrapped__ = value;\n        return result;\n      }\n  \n      /**\n       * This method is the wrapper version of `_.reverse`.\n       *\n       * **Note:** This method mutates the wrapped array.\n       *\n       * @name reverse\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _(array).reverse().value()\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function wrapperReverse() {\n        var value = this.__wrapped__;\n        if (value instanceof LazyWrapper) {\n          var wrapped = value;\n          if (this.__actions__.length) {\n            wrapped = new LazyWrapper(this);\n          }\n          wrapped = wrapped.reverse();\n          wrapped.__actions__.push({\n            'func': thru,\n            'args': [reverse],\n            'thisArg': undefined\n          });\n          return new LodashWrapper(wrapped, this.__chain__);\n        }\n        return this.thru(reverse);\n      }\n  \n      /**\n       * Executes the chained sequence to extract the unwrapped value.\n       *\n       * @name value\n       * @memberOf _\n       * @alias toJSON, valueOf\n       * @category Seq\n       * @returns {*} Returns the resolved unwrapped value.\n       * @example\n       *\n       * _([1, 2, 3]).value();\n       * // => [1, 2, 3]\n       */\n      function wrapperValue() {\n        return baseWrapperValue(this.__wrapped__, this.__actions__);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the number of times the key was returned by `iteratee`.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.countBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': 1, '6': 2 }\n       *\n       * _.countBy(['one', 'two', 'three'], 'length');\n       * // => { '3': 2, '5': 1 }\n       */\n      var countBy = createAggregator(function(result, value, key) {\n        hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n      });\n  \n      /**\n       * Checks if `predicate` returns truthy for **all** elements of `collection`.\n       * Iteration is stopped once `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n       * @example\n       *\n       * _.every([true, 1, null, 'yes'], Boolean);\n       * // => false\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': false },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.every(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.every(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.every(users, 'active');\n       * // => false\n       */\n      function every(collection, predicate, guard) {\n        var func = isArray(collection) ? arrayEvery : baseEvery;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning an array of all elements\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.filter(users, { 'age': 36, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.filter(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.filter(users, 'active');\n       * // => objects for ['barney']\n       */\n      function filter(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning the first element\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': true },\n       *   { 'user': 'fred',    'age': 40, 'active': false },\n       *   { 'user': 'pebbles', 'age': 1,  'active': true }\n       * ];\n       *\n       * _.find(users, function(o) { return o.age < 40; });\n       * // => object for 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.find(users, { 'age': 1, 'active': true });\n       * // => object for 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.find(users, ['active', false]);\n       * // => object for 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.find(users, 'active');\n       * // => object for 'barney'\n       */\n      function find(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEach);\n      }\n  \n      /**\n       * This method is like `_.find` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * _.findLast([1, 2, 3, 4], function(n) {\n       *   return n % 2 == 1;\n       * });\n       * // => 3\n       */\n      function findLast(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, true);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEachRight);\n      }\n  \n      /**\n       * Creates an array of flattened values by running each element in `collection`\n       * through `iteratee` and concating its result to the other mapped values.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _.flatMap([1, 2], duplicate);\n       * // => [1, 1, 2, 2]\n       */\n      function flatMap(collection, iteratee) {\n        return baseFlatten(map(collection, iteratee), 1);\n      }\n  \n      /**\n       * Iterates over elements of `collection` invoking `iteratee` for each element.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       * Iteratee functions may exit iteration early by explicitly returning `false`.\n       *\n       * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n       * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`\n       * for object iteration.\n       *\n       * @static\n       * @memberOf _\n       * @alias each\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _([1, 2]).forEach(function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `1` then `2`\n       *\n       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forEach(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEach(collection, iteratee)\n          : baseEach(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forEach` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @alias eachRight\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _.forEachRight([1, 2], function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `2` then `1`\n       */\n      function forEachRight(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEachRight(collection, iteratee)\n          : baseEachRight(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is an array of elements responsible for generating the key.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': [4.2], '6': [6.1, 6.3] }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.groupBy(['one', 'two', 'three'], 'length');\n       * // => { '3': ['one', 'two'], '5': ['three'] }\n       */\n      var groupBy = createAggregator(function(result, value, key) {\n        if (hasOwnProperty.call(result, key)) {\n          result[key].push(value);\n        } else {\n          result[key] = [value];\n        }\n      });\n  \n      /**\n       * Checks if `value` is in `collection`. If `collection` is a string it's checked\n       * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * is used for equality comparisons. If `fromIndex` is negative, it's used as\n       * the offset from the end of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object|string} collection The collection to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {boolean} Returns `true` if `value` is found, else `false`.\n       * @example\n       *\n       * _.includes([1, 2, 3], 1);\n       * // => true\n       *\n       * _.includes([1, 2, 3], 1, 2);\n       * // => false\n       *\n       * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n       * // => true\n       *\n       * _.includes('pebbles', 'eb');\n       * // => true\n       */\n      function includes(collection, value, fromIndex, guard) {\n        collection = isArrayLike(collection) ? collection : values(collection);\n        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n  \n        var length = collection.length;\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return isString(collection)\n          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n      }\n  \n      /**\n       * Invokes the method at `path` of each element in `collection`, returning\n       * an array of the results of each invoked method. Any additional arguments\n       * are provided to each invoked method. If `methodName` is a function it's\n       * invoked for, and `this` bound to, each element in `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Array|Function|string} path The path of the method to invoke or\n       *  the function invoked per iteration.\n       * @param {...*} [args] The arguments to invoke each method with.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n       * // => [[1, 5, 7], [1, 2, 3]]\n       *\n       * _.invokeMap([123, 456], String.prototype.split, '');\n       * // => [['1', '2', '3'], ['4', '5', '6']]\n       */\n      var invokeMap = rest(function(collection, path, args) {\n        var index = -1,\n            isFunc = typeof path == 'function',\n            isProp = isKey(path),\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value) {\n          var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n        });\n        return result;\n      });\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the last element responsible for generating the key. The\n       * iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * var array = [\n       *   { 'dir': 'left', 'code': 97 },\n       *   { 'dir': 'right', 'code': 100 }\n       * ];\n       *\n       * _.keyBy(array, function(o) {\n       *   return String.fromCharCode(o.code);\n       * });\n       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n       *\n       * _.keyBy(array, 'dir');\n       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n       */\n      var keyBy = createAggregator(function(result, value, key) {\n        result[key] = value;\n      });\n  \n      /**\n       * Creates an array of values by running each element in `collection` through\n       * `iteratee`. The iteratee is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n       *\n       * The guarded methods are:\n       * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,\n       * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,\n       * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,\n       * and `words`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * _.map([4, 8], square);\n       * // => [16, 64]\n       *\n       * _.map({ 'a': 4, 'b': 8 }, square);\n       * // => [16, 64] (iteration order is not guaranteed)\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.map(users, 'user');\n       * // => ['barney', 'fred']\n       */\n      function map(collection, iteratee) {\n        var func = isArray(collection) ? arrayMap : baseMap;\n        return func(collection, getIteratee(iteratee, 3));\n      }\n  \n      /**\n       * This method is like `_.sortBy` except that it allows specifying the sort\n       * orders of the iteratees to sort by. If `orders` is unspecified, all values\n       * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n       * descending or \"asc\" for ascending sort order of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.\n       * @param {string[]} [orders] The sort orders of `iteratees`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 34 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 36 }\n       * ];\n       *\n       * // Sort by `user` in ascending order and by `age` in descending order.\n       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      function orderBy(collection, iteratees, orders, guard) {\n        if (collection == null) {\n          return [];\n        }\n        if (!isArray(iteratees)) {\n          iteratees = iteratees == null ? [] : [iteratees];\n        }\n        orders = guard ? undefined : orders;\n        if (!isArray(orders)) {\n          orders = orders == null ? [] : [orders];\n        }\n        return baseOrderBy(collection, iteratees, orders);\n      }\n  \n      /**\n       * Creates an array of elements split into two groups, the first of which\n       * contains elements `predicate` returns truthy for, the second of which\n       * contains elements `predicate` returns falsey for. The predicate is\n       * invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of grouped elements.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': false },\n       *   { 'user': 'fred',    'age': 40, 'active': true },\n       *   { 'user': 'pebbles', 'age': 1,  'active': false }\n       * ];\n       *\n       * _.partition(users, function(o) { return o.active; });\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.partition(users, { 'age': 1, 'active': false });\n       * // => objects for [['pebbles'], ['barney', 'fred']]\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.partition(users, ['active', false]);\n       * // => objects for [['barney', 'pebbles'], ['fred']]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.partition(users, 'active');\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       */\n      var partition = createAggregator(function(result, value, key) {\n        result[key ? 0 : 1].push(value);\n      }, function() { return [[], []]; });\n  \n      /**\n       * Reduces `collection` to a value which is the accumulated result of running\n       * each element in `collection` through `iteratee`, where each successive\n       * invocation is supplied the return value of the previous. If `accumulator`\n       * is not given the first element of `collection` is used as the initial\n       * value. The iteratee is invoked with four arguments:\n       * (accumulator, value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.reduce`, `_.reduceRight`, and `_.transform`.\n       *\n       * The guarded methods are:\n       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n       * and `sortBy`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.reduce([1, 2], function(sum, n) {\n       *   return sum + n;\n       * }, 0);\n       * // => 3\n       *\n       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       *   return result;\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n       */\n      function reduce(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduce : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n      }\n  \n      /**\n       * This method is like `_.reduce` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * var array = [[0, 1], [2, 3], [4, 5]];\n       *\n       * _.reduceRight(array, function(flattened, other) {\n       *   return flattened.concat(other);\n       * }, []);\n       * // => [4, 5, 2, 3, 0, 1]\n       */\n      function reduceRight(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduceRight : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n      }\n  \n      /**\n       * The opposite of `_.filter`; this method returns the elements of `collection`\n       * that `predicate` does **not** return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': false },\n       *   { 'user': 'fred',   'age': 40, 'active': true }\n       * ];\n       *\n       * _.reject(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.reject(users, { 'age': 40, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.reject(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.reject(users, 'active');\n       * // => objects for ['barney']\n       */\n      function reject(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        predicate = getIteratee(predicate, 3);\n        return func(collection, function(value, index, collection) {\n          return !predicate(value, index, collection);\n        });\n      }\n  \n      /**\n       * Gets a random element from `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @returns {*} Returns the random element.\n       * @example\n       *\n       * _.sample([1, 2, 3, 4]);\n       * // => 2\n       */\n      function sample(collection) {\n        var array = isArrayLike(collection) ? collection : values(collection),\n            length = array.length;\n  \n        return length > 0 ? array[baseRandom(0, length - 1)] : undefined;\n      }\n  \n      /**\n       * Gets `n` random elements at unique keys from `collection` up to the\n       * size of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @param {number} [n=0] The number of elements to sample.\n       * @returns {Array} Returns the random elements.\n       * @example\n       *\n       * _.sampleSize([1, 2, 3], 2);\n       * // => [3, 1]\n       *\n       * _.sampleSize([1, 2, 3], 4);\n       * // => [2, 3, 1]\n       */\n      function sampleSize(collection, n) {\n        var index = -1,\n            result = toArray(collection),\n            length = result.length,\n            lastIndex = length - 1;\n  \n        n = baseClamp(toInteger(n), 0, length);\n        while (++index < n) {\n          var rand = baseRandom(index, lastIndex),\n              value = result[rand];\n  \n          result[rand] = result[index];\n          result[index] = value;\n        }\n        result.length = n;\n        return result;\n      }\n  \n      /**\n       * Creates an array of shuffled values, using a version of the\n       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to shuffle.\n       * @returns {Array} Returns the new shuffled array.\n       * @example\n       *\n       * _.shuffle([1, 2, 3, 4]);\n       * // => [4, 1, 3, 2]\n       */\n      function shuffle(collection) {\n        return sampleSize(collection, MAX_ARRAY_LENGTH);\n      }\n  \n      /**\n       * Gets the size of `collection` by returning its length for array-like\n       * values or the number of own enumerable properties for objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to inspect.\n       * @returns {number} Returns the collection size.\n       * @example\n       *\n       * _.size([1, 2, 3]);\n       * // => 3\n       *\n       * _.size({ 'a': 1, 'b': 2 });\n       * // => 2\n       *\n       * _.size('pebbles');\n       * // => 7\n       */\n      function size(collection) {\n        if (collection == null) {\n          return 0;\n        }\n        if (isArrayLike(collection)) {\n          var result = collection.length;\n          return (result && isString(collection)) ? stringSize(collection) : result;\n        }\n        return keys(collection).length;\n      }\n  \n      /**\n       * Checks if `predicate` returns truthy for **any** element of `collection`.\n       * Iteration is stopped once `predicate` returns truthy. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       * @example\n       *\n       * _.some([null, 0, 'yes', false], Boolean);\n       * // => true\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': true },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.some(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.some(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.some(users, 'active');\n       * // => true\n       */\n      function some(collection, predicate, guard) {\n        var func = isArray(collection) ? arraySome : baseSome;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Creates an array of elements, sorted in ascending order by the results of\n       * running each element in a collection through each iteratee. This method\n       * performs a stable sort, that is, it preserves the original sort order of\n       * equal elements. The iteratees are invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]\n       *  The iteratees to sort by, specified individually or in arrays.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 34 }\n       * ];\n       *\n       * _.sortBy(users, function(o) { return o.user; });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       *\n       * _.sortBy(users, ['user', 'age']);\n       * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n       *\n       * _.sortBy(users, 'user', function(o) {\n       *   return Math.floor(o.age / 10);\n       * });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      var sortBy = rest(function(collection, iteratees) {\n        if (collection == null) {\n          return [];\n        }\n        var length = iteratees.length;\n        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n          iteratees = [];\n        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n          iteratees.length = 1;\n        }\n        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Gets the timestamp of the number of milliseconds that have elapsed since\n       * the Unix epoch (1 January 1970 00:00:00 UTC).\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Date\n       * @returns {number} Returns the timestamp.\n       * @example\n       *\n       * _.defer(function(stamp) {\n       *   console.log(_.now() - stamp);\n       * }, _.now());\n       * // => logs the number of milliseconds it took for the deferred function to be invoked\n       */\n      var now = Date.now;\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The opposite of `_.before`; this method creates a function that invokes\n       * `func` once it's called `n` or more times.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls before `func` is invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var saves = ['profile', 'settings'];\n       *\n       * var done = _.after(saves.length, function() {\n       *   console.log('done saving!');\n       * });\n       *\n       * _.forEach(saves, function(type) {\n       *   asyncSave({ 'type': type, 'complete': done });\n       * });\n       * // => logs 'done saving!' after the two async saves have completed\n       */\n      function after(n, func) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n < 1) {\n            return func.apply(this, arguments);\n          }\n        };\n      }\n  \n      /**\n       * Creates a function that accepts up to `n` arguments, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @param {number} [n=func.length] The arity cap.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n       * // => [6, 8, 10]\n       */\n      function ary(func, n, guard) {\n        n = guard ? undefined : n;\n        n = (func && n == null) ? func.length : n;\n        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n      }\n  \n      /**\n       * Creates a function that invokes `func`, with the `this` binding and arguments\n       * of the created function, while it's called less than `n` times. Subsequent\n       * calls to the created function return the result of the last `func` invocation.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls at which `func` is no longer invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * jQuery(element).on('click', _.before(5, addContactToList));\n       * // => allows adding up to 4 contacts to the list\n       */\n      function before(n, func) {\n        var result;\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n > 0) {\n            result = func.apply(this, arguments);\n          }\n          if (n <= 1) {\n            func = undefined;\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of `thisArg`\n       * and prepends any additional `_.bind` arguments to those provided to the\n       * bound function.\n       *\n       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** Unlike native `Function#bind` this method doesn't set the \"length\"\n       * property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to bind.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var greet = function(greeting, punctuation) {\n       *   return greeting + ' ' + this.user + punctuation;\n       * };\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * var bound = _.bind(greet, object, 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bind(greet, object, _, '!');\n       * bound('hi');\n       * // => 'hi fred!'\n       */\n      var bind = rest(function(func, thisArg, partials) {\n        var bitmask = BIND_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bind.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(func, bitmask, thisArg, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes the method at `object[key]` and prepends\n       * any additional `_.bindKey` arguments to those provided to the bound function.\n       *\n       * This method differs from `_.bind` by allowing bound functions to reference\n       * methods that may be redefined or don't yet exist.\n       * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n       * for more details.\n       *\n       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Object} object The object to invoke the method on.\n       * @param {string} key The key of the method.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var object = {\n       *   'user': 'fred',\n       *   'greet': function(greeting, punctuation) {\n       *     return greeting + ' ' + this.user + punctuation;\n       *   }\n       * };\n       *\n       * var bound = _.bindKey(object, 'greet', 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * object.greet = function(greeting, punctuation) {\n       *   return greeting + 'ya ' + this.user + punctuation;\n       * };\n       *\n       * bound('!');\n       * // => 'hiya fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bindKey(object, 'greet', _, '!');\n       * bound('hi');\n       * // => 'hiya fred!'\n       */\n      var bindKey = rest(function(object, key, partials) {\n        var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bindKey.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(key, bitmask, object, partials, holders);\n      });\n  \n      /**\n       * Creates a function that accepts arguments of `func` and either invokes\n       * `func` returning its result, if at least `arity` number of arguments have\n       * been provided, or returns a function that accepts the remaining `func`\n       * arguments, and so on. The arity of `func` may be specified if `func.length`\n       * is not sufficient.\n       *\n       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curry(abc);\n       *\n       * curried(1)(2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(1)(_, 3)(2);\n       * // => [1, 2, 3]\n       */\n      function curry(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curry.placeholder;\n        return result;\n      }\n  \n      /**\n       * This method is like `_.curry` except that arguments are applied to `func`\n       * in the manner of `_.partialRight` instead of `_.partial`.\n       *\n       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curryRight(abc);\n       *\n       * curried(3)(2)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(2, 3)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(3)(1, _)(2);\n       * // => [1, 2, 3]\n       */\n      function curryRight(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curryRight.placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a debounced function that delays invoking `func` until after `wait`\n       * milliseconds have elapsed since the last time the debounced function was\n       * invoked. The debounced function comes with a `cancel` method to cancel\n       * delayed `func` invocations and a `flush` method to immediately invoke them.\n       * Provide an options object to indicate whether `func` should be invoked on\n       * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n       * with the last arguments provided to the debounced function. Subsequent calls\n       * to the debounced function return the result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the debounced function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.debounce` and `_.throttle`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to debounce.\n       * @param {number} [wait=0] The number of milliseconds to delay.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=false] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n       *  delayed before it's invoked.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new debounced function.\n       * @example\n       *\n       * // Avoid costly calculations while the window size is in flux.\n       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n       *\n       * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n       * jQuery(element).on('click', _.debounce(sendMail, 300, {\n       *   'leading': true,\n       *   'trailing': false\n       * }));\n       *\n       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n       * var source = new EventSource('/stream');\n       * jQuery(source).on('message', debounced);\n       *\n       * // Cancel the trailing debounced invocation.\n       * jQuery(window).on('popstate', debounced.cancel);\n       */\n      function debounce(func, wait, options) {\n        var args,\n            maxTimeoutId,\n            result,\n            stamp,\n            thisArg,\n            timeoutId,\n            trailingCall,\n            lastCalled = 0,\n            leading = false,\n            maxWait = false,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        wait = toNumber(wait) || 0;\n        if (isObject(options)) {\n          leading = !!options.leading;\n          maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n  \n        function cancel() {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          lastCalled = 0;\n          args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;\n        }\n  \n        function complete(isCalled, id) {\n          if (id) {\n            clearTimeout(id);\n          }\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = undefined;\n            }\n          }\n        }\n  \n        function delayed() {\n          var remaining = wait - (now() - stamp);\n          if (remaining <= 0 || remaining > wait) {\n            complete(trailingCall, maxTimeoutId);\n          } else {\n            timeoutId = setTimeout(delayed, remaining);\n          }\n        }\n  \n        function flush() {\n          if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {\n            result = func.apply(thisArg, args);\n          }\n          cancel();\n          return result;\n        }\n  \n        function maxDelayed() {\n          complete(trailing, timeoutId);\n        }\n  \n        function debounced() {\n          args = arguments;\n          stamp = now();\n          thisArg = this;\n          trailingCall = trailing && (timeoutId || !leading);\n  \n          if (maxWait === false) {\n            var leadingCall = leading && !timeoutId;\n          } else {\n            if (!lastCalled && !maxTimeoutId && !leading) {\n              lastCalled = stamp;\n            }\n            var remaining = maxWait - (stamp - lastCalled);\n  \n            var isCalled = (remaining <= 0 || remaining > maxWait) &&\n              (leading || maxTimeoutId);\n  \n            if (isCalled) {\n              if (maxTimeoutId) {\n                maxTimeoutId = clearTimeout(maxTimeoutId);\n              }\n              lastCalled = stamp;\n              result = func.apply(thisArg, args);\n            }\n            else if (!maxTimeoutId) {\n              maxTimeoutId = setTimeout(maxDelayed, remaining);\n            }\n          }\n          if (isCalled && timeoutId) {\n            timeoutId = clearTimeout(timeoutId);\n          }\n          else if (!timeoutId && wait !== maxWait) {\n            timeoutId = setTimeout(delayed, wait);\n          }\n          if (leadingCall) {\n            isCalled = true;\n            result = func.apply(thisArg, args);\n          }\n          if (isCalled && !timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n          return result;\n        }\n        debounced.cancel = cancel;\n        debounced.flush = flush;\n        return debounced;\n      }\n  \n      /**\n       * Defers invoking the `func` until the current call stack has cleared. Any\n       * additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to defer.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.defer(function(text) {\n       *   console.log(text);\n       * }, 'deferred');\n       * // => logs 'deferred' after one or more milliseconds\n       */\n      var defer = rest(function(func, args) {\n        return baseDelay(func, 1, args);\n      });\n  \n      /**\n       * Invokes `func` after `wait` milliseconds. Any additional arguments are\n       * provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.delay(function(text) {\n       *   console.log(text);\n       * }, 1000, 'later');\n       * // => logs 'later' after one second\n       */\n      var delay = rest(function(func, wait, args) {\n        return baseDelay(func, toNumber(wait) || 0, args);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments reversed.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to flip arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var flipped = _.flip(function() {\n       *   return _.toArray(arguments);\n       * });\n       *\n       * flipped('a', 'b', 'c', 'd');\n       * // => ['d', 'c', 'b', 'a']\n       */\n      function flip(func) {\n        return createWrapper(func, FLIP_FLAG);\n      }\n  \n      /**\n       * Creates a function that memoizes the result of `func`. If `resolver` is\n       * provided it determines the cache key for storing the result based on the\n       * arguments provided to the memoized function. By default, the first argument\n       * provided to the memoized function is used as the map cache key. The `func`\n       * is invoked with the `this` binding of the memoized function.\n       *\n       * **Note:** The cache is exposed as the `cache` property on the memoized\n       * function. Its creation may be customized by replacing the `_.memoize.Cache`\n       * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n       * method interface of `delete`, `get`, `has`, and `set`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to have its output memoized.\n       * @param {Function} [resolver] The function to resolve the cache key.\n       * @returns {Function} Returns the new memoizing function.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2 };\n       * var other = { 'c': 3, 'd': 4 };\n       *\n       * var values = _.memoize(_.values);\n       * values(object);\n       * // => [1, 2]\n       *\n       * values(other);\n       * // => [3, 4]\n       *\n       * object.a = 2;\n       * values(object);\n       * // => [1, 2]\n       *\n       * // Modify the result cache.\n       * values.cache.set(object, ['a', 'b']);\n       * values(object);\n       * // => ['a', 'b']\n       *\n       * // Replace `_.memoize.Cache`.\n       * _.memoize.Cache = WeakMap;\n       */\n      function memoize(func, resolver) {\n        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var memoized = function() {\n          var args = arguments,\n              key = resolver ? resolver.apply(this, args) : args[0],\n              cache = memoized.cache;\n  \n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n          var result = func.apply(this, args);\n          memoized.cache = cache.set(key, result);\n          return result;\n        };\n        memoized.cache = new memoize.Cache;\n        return memoized;\n      }\n  \n      /**\n       * Creates a function that negates the result of the predicate `func`. The\n       * `func` predicate is invoked with the `this` binding and arguments of the\n       * created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} predicate The predicate to negate.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function isEven(n) {\n       *   return n % 2 == 0;\n       * }\n       *\n       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n       * // => [1, 3, 5]\n       */\n      function negate(predicate) {\n        if (typeof predicate != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return function() {\n          return !predicate.apply(this, arguments);\n        };\n      }\n  \n      /**\n       * Creates a function that is restricted to invoking `func` once. Repeat calls\n       * to the function return the value of the first invocation. The `func` is\n       * invoked with the `this` binding and arguments of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var initialize = _.once(createApplication);\n       * initialize();\n       * initialize();\n       * // `initialize` invokes `createApplication` once\n       */\n      function once(func) {\n        return before(2, func);\n      }\n  \n      /**\n       * Creates a function that invokes `func` with arguments transformed by\n       * corresponding `transforms`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to wrap.\n       * @param {...(Function|Function[])} [transforms] The functions to transform\n       * arguments, specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function doubled(n) {\n       *   return n * 2;\n       * }\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var func = _.overArgs(function(x, y) {\n       *   return [x, y];\n       * }, square, doubled);\n       *\n       * func(9, 3);\n       * // => [81, 6]\n       *\n       * func(10, 5);\n       * // => [100, 10]\n       */\n      var overArgs = rest(function(func, transforms) {\n        transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());\n  \n        var funcsLength = transforms.length;\n        return rest(function(args) {\n          var index = -1,\n              length = nativeMin(args.length, funcsLength);\n  \n          while (++index < length) {\n            args[index] = transforms[index].call(this, args[index]);\n          }\n          return apply(func, this, args);\n        });\n      });\n  \n      /**\n       * Creates a function that invokes `func` with `partial` arguments prepended\n       * to those provided to the new function. This method is like `_.bind` except\n       * it does **not** alter the `this` binding.\n       *\n       * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var sayHelloTo = _.partial(greet, 'hello');\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       *\n       * // Partially applied with placeholders.\n       * var greetFred = _.partial(greet, _, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       */\n      var partial = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partial.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * This method is like `_.partial` except that partially applied arguments\n       * are appended to those provided to the new function.\n       *\n       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var greetFred = _.partialRight(greet, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       *\n       * // Partially applied with placeholders.\n       * var sayHelloTo = _.partialRight(greet, 'hello', _);\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       */\n      var partialRight = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partialRight.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments arranged according\n       * to the specified indexes where the argument value at the first index is\n       * provided as the first argument, the argument value at the second index is\n       * provided as the second argument, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to rearrange arguments for.\n       * @param {...(number|number[])} indexes The arranged argument indexes,\n       *  specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var rearged = _.rearg(function(a, b, c) {\n       *   return [a, b, c];\n       * }, 2, 0, 1);\n       *\n       * rearged('b', 'c', 'a')\n       * // => ['a', 'b', 'c']\n       */\n      var rearg = rest(function(func, indexes) {\n        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));\n      });\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the\n       * created function and arguments from `start` and beyond provided as an array.\n       *\n       * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to apply a rest parameter to.\n       * @param {number} [start=func.length-1] The start position of the rest parameter.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.rest(function(what, names) {\n       *   return what + ' ' + _.initial(names).join(', ') +\n       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n       * });\n       *\n       * say('hello', 'fred', 'barney', 'pebbles');\n       * // => 'hello fred, barney, & pebbles'\n       */\n      function rest(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n        return function() {\n          var args = arguments,\n              index = -1,\n              length = nativeMax(args.length - start, 0),\n              array = Array(length);\n  \n          while (++index < length) {\n            array[index] = args[start + index];\n          }\n          switch (start) {\n            case 0: return func.call(this, array);\n            case 1: return func.call(this, args[0], array);\n            case 2: return func.call(this, args[0], args[1], array);\n          }\n          var otherArgs = Array(start + 1);\n          index = -1;\n          while (++index < start) {\n            otherArgs[index] = args[index];\n          }\n          otherArgs[start] = array;\n          return apply(func, this, otherArgs);\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the created\n       * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n       *\n       * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to spread arguments over.\n       * @param {number} [start=0] The start position of the spread.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.spread(function(who, what) {\n       *   return who + ' says ' + what;\n       * });\n       *\n       * say(['fred', 'hello']);\n       * // => 'fred says hello'\n       *\n       * var numbers = Promise.all([\n       *   Promise.resolve(40),\n       *   Promise.resolve(36)\n       * ]);\n       *\n       * numbers.then(_.spread(function(x, y) {\n       *   return x + y;\n       * }));\n       * // => a Promise of 76\n       */\n      function spread(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n        return rest(function(args) {\n          var array = args[start],\n              otherArgs = args.slice(0, start);\n  \n          if (array) {\n            arrayPush(otherArgs, array);\n          }\n          return apply(func, this, otherArgs);\n        });\n      }\n  \n      /**\n       * Creates a throttled function that only invokes `func` at most once per\n       * every `wait` milliseconds. The throttled function comes with a `cancel`\n       * method to cancel delayed `func` invocations and a `flush` method to\n       * immediately invoke them. Provide an options object to indicate whether\n       * `func` should be invoked on the leading and/or trailing edge of the `wait`\n       * timeout. The `func` is invoked with the last arguments provided to the\n       * throttled function. Subsequent calls to the throttled function return the\n       * result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the throttled function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.throttle` and `_.debounce`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to throttle.\n       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=true] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new throttled function.\n       * @example\n       *\n       * // Avoid excessively updating the position while scrolling.\n       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n       *\n       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n       * jQuery(element).on('click', throttled);\n       *\n       * // Cancel the trailing throttled invocation.\n       * jQuery(window).on('popstate', throttled.cancel);\n       */\n      function throttle(func, wait, options) {\n        var leading = true,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        if (isObject(options)) {\n          leading = 'leading' in options ? !!options.leading : leading;\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n        return debounce(func, wait, {\n          'leading': leading,\n          'maxWait': wait,\n          'trailing': trailing\n        });\n      }\n  \n      /**\n       * Creates a function that accepts up to one argument, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.unary(parseInt));\n       * // => [6, 8, 10]\n       */\n      function unary(func) {\n        return ary(func, 1);\n      }\n  \n      /**\n       * Creates a function that provides `value` to the wrapper function as its\n       * first argument. Any additional arguments provided to the function are\n       * appended to those provided to the wrapper function. The wrapper is invoked\n       * with the `this` binding of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {*} value The value to wrap.\n       * @param {Function} [wrapper=identity] The wrapper function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var p = _.wrap(_.escape, function(func, text) {\n       *   return '<p>' + func(text) + '</p>';\n       * });\n       *\n       * p('fred, barney, & pebbles');\n       * // => '<p>fred, barney, &amp; pebbles</p>'\n       */\n      function wrap(value, wrapper) {\n        wrapper = wrapper == null ? identity : wrapper;\n        return partial(wrapper, value);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Casts `value` as an array if it's not one.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast array.\n       * @example\n       *\n       * _.castArray(1);\n       * // => [1]\n       *\n       * _.castArray({ 'a': 1 });\n       * // => [{ 'a': 1 }]\n       *\n       * _.castArray('abc');\n       * // => ['abc']\n       *\n       * _.castArray(null);\n       * // => [null]\n       *\n       * _.castArray(undefined);\n       * // => [undefined]\n       *\n       * _.castArray();\n       * // => []\n       *\n       * var array = [1, 2, 3];\n       * console.log(_.castArray(array) === array);\n       * // => true\n       */\n      function castArray() {\n        if (!arguments.length) {\n          return [];\n        }\n        var value = arguments[0];\n        return isArray(value) ? value : [value];\n      }\n  \n      /**\n       * Creates a shallow clone of `value`.\n       *\n       * **Note:** This method is loosely based on the\n       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n       * and supports cloning arrays, array buffers, booleans, date objects, maps,\n       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n       * arrays. The own enumerable properties of `arguments` objects are cloned\n       * as plain objects. An empty object is returned for uncloneable values such\n       * as error objects, functions, DOM nodes, and WeakMaps.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var shallow = _.clone(objects);\n       * console.log(shallow[0] === objects[0]);\n       * // => true\n       */\n      function clone(value) {\n        return baseClone(value);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it accepts `customizer` which\n       * is invoked to produce the cloned value. If `customizer` returns `undefined`\n       * cloning is handled by the method instead. The `customizer` is invoked with\n       * up to four arguments; (value [, index|key, object, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(false);\n       *   }\n       * }\n       *\n       * var el = _.cloneWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 0\n       */\n      function cloneWith(value, customizer) {\n        return baseClone(value, false, customizer);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var deep = _.cloneDeep(objects);\n       * console.log(deep[0] === objects[0]);\n       * // => false\n       */\n      function cloneDeep(value) {\n        return baseClone(value, true);\n      }\n  \n      /**\n       * This method is like `_.cloneWith` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(true);\n       *   }\n       * }\n       *\n       * var el = _.cloneDeepWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 20\n       */\n      function cloneDeepWith(value, customizer) {\n        return baseClone(value, true, customizer);\n      }\n  \n      /**\n       * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * comparison between two values to determine if they are equivalent.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.eq(object, object);\n       * // => true\n       *\n       * _.eq(object, other);\n       * // => false\n       *\n       * _.eq('a', 'a');\n       * // => true\n       *\n       * _.eq('a', Object('a'));\n       * // => false\n       *\n       * _.eq(NaN, NaN);\n       * // => true\n       */\n      function eq(value, other) {\n        return value === other || (value !== value && other !== other);\n      }\n  \n      /**\n       * Checks if `value` is greater than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n       * @example\n       *\n       * _.gt(3, 1);\n       * // => true\n       *\n       * _.gt(3, 3);\n       * // => false\n       *\n       * _.gt(1, 3);\n       * // => false\n       */\n      function gt(value, other) {\n        return value > other;\n      }\n  \n      /**\n       * Checks if `value` is greater than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.gte(3, 1);\n       * // => true\n       *\n       * _.gte(3, 3);\n       * // => true\n       *\n       * _.gte(1, 3);\n       * // => false\n       */\n      function gte(value, other) {\n        return value >= other;\n      }\n  \n      /**\n       * Checks if `value` is likely an `arguments` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArguments(function() { return arguments; }());\n       * // => true\n       *\n       * _.isArguments([1, 2, 3]);\n       * // => false\n       */\n      function isArguments(value) {\n        // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n          (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as an `Array` object.\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArray([1, 2, 3]);\n       * // => true\n       *\n       * _.isArray(document.body.children);\n       * // => false\n       *\n       * _.isArray('abc');\n       * // => false\n       *\n       * _.isArray(_.noop);\n       * // => false\n       */\n      var isArray = Array.isArray;\n  \n      /**\n       * Checks if `value` is classified as an `ArrayBuffer` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArrayBuffer(new ArrayBuffer(2));\n       * // => true\n       *\n       * _.isArrayBuffer(new Array(2));\n       * // => false\n       */\n      function isArrayBuffer(value) {\n        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;\n      }\n  \n      /**\n       * Checks if `value` is array-like. A value is considered array-like if it's\n       * not a function and has a `value.length` that's an integer greater than or\n       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n       * @example\n       *\n       * _.isArrayLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLike(document.body.children);\n       * // => true\n       *\n       * _.isArrayLike('abc');\n       * // => true\n       *\n       * _.isArrayLike(_.noop);\n       * // => false\n       */\n      function isArrayLike(value) {\n        return value != null &&\n          !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));\n      }\n  \n      /**\n       * This method is like `_.isArrayLike` except that it also checks if `value`\n       * is an object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.\n       * @example\n       *\n       * _.isArrayLikeObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLikeObject(document.body.children);\n       * // => true\n       *\n       * _.isArrayLikeObject('abc');\n       * // => false\n       *\n       * _.isArrayLikeObject(_.noop);\n       * // => false\n       */\n      function isArrayLikeObject(value) {\n        return isObjectLike(value) && isArrayLike(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a boolean primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isBoolean(false);\n       * // => true\n       *\n       * _.isBoolean(null);\n       * // => false\n       */\n      function isBoolean(value) {\n        return value === true || value === false ||\n          (isObjectLike(value) && objectToString.call(value) == boolTag);\n      }\n  \n      /**\n       * Checks if `value` is a buffer.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n       * @example\n       *\n       * _.isBuffer(new Buffer(2));\n       * // => true\n       *\n       * _.isBuffer(new Uint8Array(2));\n       * // => false\n       */\n      var isBuffer = !Buffer ? constant(false) : function(value) {\n        return value instanceof Buffer;\n      };\n  \n      /**\n       * Checks if `value` is classified as a `Date` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isDate(new Date);\n       * // => true\n       *\n       * _.isDate('Mon April 23 2012');\n       * // => false\n       */\n      function isDate(value) {\n        return isObjectLike(value) && objectToString.call(value) == dateTag;\n      }\n  \n      /**\n       * Checks if `value` is likely a DOM element.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n       * @example\n       *\n       * _.isElement(document.body);\n       * // => true\n       *\n       * _.isElement('<body>');\n       * // => false\n       */\n      function isElement(value) {\n        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n      }\n  \n      /**\n       * Checks if `value` is empty. A value is considered empty unless it's an\n       * `arguments` object, array, string, or jQuery-like collection with a length\n       * greater than `0` or an object with own enumerable properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Array|Object|string} value The value to inspect.\n       * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n       * @example\n       *\n       * _.isEmpty(null);\n       * // => true\n       *\n       * _.isEmpty(true);\n       * // => true\n       *\n       * _.isEmpty(1);\n       * // => true\n       *\n       * _.isEmpty([1, 2, 3]);\n       * // => false\n       *\n       * _.isEmpty({ 'a': 1 });\n       * // => false\n       */\n      function isEmpty(value) {\n        if (isArrayLike(value) &&\n            (isArray(value) || isString(value) ||\n              isFunction(value.splice) || isArguments(value))) {\n          return !value.length;\n        }\n        for (var key in value) {\n          if (hasOwnProperty.call(value, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * Performs a deep comparison between two values to determine if they are\n       * equivalent.\n       *\n       * **Note:** This method supports comparing arrays, array buffers, booleans,\n       * date objects, error objects, maps, numbers, `Object` objects, regexes,\n       * sets, strings, symbols, and typed arrays. `Object` objects are compared\n       * by their own, not inherited, enumerable properties. Functions and DOM\n       * nodes are **not** supported.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.isEqual(object, other);\n       * // => true\n       *\n       * object === other;\n       * // => false\n       */\n      function isEqual(value, other) {\n        return baseIsEqual(value, other);\n      }\n  \n      /**\n       * This method is like `_.isEqual` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with up to\n       * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, othValue) {\n       *   if (isGreeting(objValue) && isGreeting(othValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var array = ['hello', 'goodbye'];\n       * var other = ['hi', 'goodbye'];\n       *\n       * _.isEqualWith(array, other, customizer);\n       * // => true\n       */\n      function isEqualWith(value, other, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        var result = customizer ? customizer(value, other) : undefined;\n        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n      }\n  \n      /**\n       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n       * `SyntaxError`, `TypeError`, or `URIError` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n       * @example\n       *\n       * _.isError(new Error);\n       * // => true\n       *\n       * _.isError(Error);\n       * // => false\n       */\n      function isError(value) {\n        if (!isObjectLike(value)) {\n          return false;\n        }\n        var Ctor = value.constructor;\n        return (objectToString.call(value) == errorTag) ||\n          (typeof Ctor == 'function' && objectToString.call(Ctor.prototype) == errorTag);\n      }\n  \n      /**\n       * Checks if `value` is a finite primitive number.\n       *\n       * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n       * @example\n       *\n       * _.isFinite(3);\n       * // => true\n       *\n       * _.isFinite(Number.MAX_VALUE);\n       * // => true\n       *\n       * _.isFinite(3.14);\n       * // => true\n       *\n       * _.isFinite(Infinity);\n       * // => false\n       */\n      function isFinite(value) {\n        return typeof value == 'number' && nativeIsFinite(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Function` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isFunction(_);\n       * // => true\n       *\n       * _.isFunction(/abc/);\n       * // => false\n       */\n      function isFunction(value) {\n        // The use of `Object#toString` avoids issues with the `typeof` operator\n        // in Safari 8 which returns 'object' for typed array constructors, and\n        // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n        var tag = isObject(value) ? objectToString.call(value) : '';\n        return tag == funcTag || tag == genTag;\n      }\n  \n      /**\n       * Checks if `value` is an integer.\n       *\n       * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n       * @example\n       *\n       * _.isInteger(3);\n       * // => true\n       *\n       * _.isInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isInteger(Infinity);\n       * // => false\n       *\n       * _.isInteger('3');\n       * // => false\n       */\n      function isInteger(value) {\n        return typeof value == 'number' && value == toInteger(value);\n      }\n  \n      /**\n       * Checks if `value` is a valid array-like length.\n       *\n       * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n       * @example\n       *\n       * _.isLength(3);\n       * // => true\n       *\n       * _.isLength(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isLength(Infinity);\n       * // => false\n       *\n       * _.isLength('3');\n       * // => false\n       */\n      function isLength(value) {\n        return typeof value == 'number' &&\n          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n       * @example\n       *\n       * _.isObject({});\n       * // => true\n       *\n       * _.isObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isObject(_.noop);\n       * // => true\n       *\n       * _.isObject(null);\n       * // => false\n       */\n      function isObject(value) {\n        var type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n      }\n  \n      /**\n       * Checks if `value` is object-like. A value is object-like if it's not `null`\n       * and has a `typeof` result of \"object\".\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n       * @example\n       *\n       * _.isObjectLike({});\n       * // => true\n       *\n       * _.isObjectLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isObjectLike(_.noop);\n       * // => false\n       *\n       * _.isObjectLike(null);\n       * // => false\n       */\n      function isObjectLike(value) {\n        return !!value && typeof value == 'object';\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Map` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isMap(new Map);\n       * // => true\n       *\n       * _.isMap(new WeakMap);\n       * // => false\n       */\n      function isMap(value) {\n        return isObjectLike(value) && getTag(value) == mapTag;\n      }\n  \n      /**\n       * Performs a partial deep comparison between `object` and `source` to\n       * determine if `object` contains equivalent property values. This method is\n       * equivalent to a `_.matches` function when `source` is partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred', 'age': 40 };\n       *\n       * _.isMatch(object, { 'age': 40 });\n       * // => true\n       *\n       * _.isMatch(object, { 'age': 36 });\n       * // => false\n       */\n      function isMatch(object, source) {\n        return object === source || baseIsMatch(object, source, getMatchData(source));\n      }\n  \n      /**\n       * This method is like `_.isMatch` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with five\n       * arguments: (objValue, srcValue, index|key, object, source).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var object = { 'greeting': 'hello' };\n       * var source = { 'greeting': 'hi' };\n       *\n       * _.isMatchWith(object, source, customizer);\n       * // => true\n       */\n      function isMatchWith(object, source, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return baseIsMatch(object, source, getMatchData(source), customizer);\n      }\n  \n      /**\n       * Checks if `value` is `NaN`.\n       *\n       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n       * which returns `true` for `undefined` and other non-numeric values.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n       * @example\n       *\n       * _.isNaN(NaN);\n       * // => true\n       *\n       * _.isNaN(new Number(NaN));\n       * // => true\n       *\n       * isNaN(undefined);\n       * // => true\n       *\n       * _.isNaN(undefined);\n       * // => false\n       */\n      function isNaN(value) {\n        // An `NaN` primitive is the only value that is not equal to itself.\n        // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.\n        return isNumber(value) && value != +value;\n      }\n  \n      /**\n       * Checks if `value` is a native function.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n       * @example\n       *\n       * _.isNative(Array.prototype.push);\n       * // => true\n       *\n       * _.isNative(_);\n       * // => false\n       */\n      function isNative(value) {\n        if (value == null) {\n          return false;\n        }\n        if (isFunction(value)) {\n          return reIsNative.test(funcToString.call(value));\n        }\n        return isObjectLike(value) &&\n          (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);\n      }\n  \n      /**\n       * Checks if `value` is `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n       * @example\n       *\n       * _.isNull(null);\n       * // => true\n       *\n       * _.isNull(void 0);\n       * // => false\n       */\n      function isNull(value) {\n        return value === null;\n      }\n  \n      /**\n       * Checks if `value` is `null` or `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n       * @example\n       *\n       * _.isNil(null);\n       * // => true\n       *\n       * _.isNil(void 0);\n       * // => true\n       *\n       * _.isNil(NaN);\n       * // => false\n       */\n      function isNil(value) {\n        return value == null;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Number` primitive or object.\n       *\n       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n       * as numbers, use the `_.isFinite` method.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isNumber(3);\n       * // => true\n       *\n       * _.isNumber(Number.MIN_VALUE);\n       * // => true\n       *\n       * _.isNumber(Infinity);\n       * // => true\n       *\n       * _.isNumber('3');\n       * // => false\n       */\n      function isNumber(value) {\n        return typeof value == 'number' ||\n          (isObjectLike(value) && objectToString.call(value) == numberTag);\n      }\n  \n      /**\n       * Checks if `value` is a plain object, that is, an object created by the\n       * `Object` constructor or one with a `[[Prototype]]` of `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       * }\n       *\n       * _.isPlainObject(new Foo);\n       * // => false\n       *\n       * _.isPlainObject([1, 2, 3]);\n       * // => false\n       *\n       * _.isPlainObject({ 'x': 0, 'y': 0 });\n       * // => true\n       *\n       * _.isPlainObject(Object.create(null));\n       * // => true\n       */\n      function isPlainObject(value) {\n        if (!isObjectLike(value) ||\n            objectToString.call(value) != objectTag || isHostObject(value)) {\n          return false;\n        }\n        var proto = objectProto;\n        if (typeof value.constructor == 'function') {\n          proto = getPrototypeOf(value);\n        }\n        if (proto === null) {\n          return true;\n        }\n        var Ctor = proto.constructor;\n        return (typeof Ctor == 'function' &&\n          Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `RegExp` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isRegExp(/abc/);\n       * // => true\n       *\n       * _.isRegExp('/abc/');\n       * // => false\n       */\n      function isRegExp(value) {\n        return isObject(value) && objectToString.call(value) == regexpTag;\n      }\n  \n      /**\n       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n       * double precision number which isn't the result of a rounded unsafe integer.\n       *\n       * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n       * @example\n       *\n       * _.isSafeInteger(3);\n       * // => true\n       *\n       * _.isSafeInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isSafeInteger(Infinity);\n       * // => false\n       *\n       * _.isSafeInteger('3');\n       * // => false\n       */\n      function isSafeInteger(value) {\n        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Set` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSet(new Set);\n       * // => true\n       *\n       * _.isSet(new WeakSet);\n       * // => false\n       */\n      function isSet(value) {\n        return isObjectLike(value) && getTag(value) == setTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `String` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isString('abc');\n       * // => true\n       *\n       * _.isString(1);\n       * // => false\n       */\n      function isString(value) {\n        return typeof value == 'string' ||\n          (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Symbol` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSymbol(Symbol.iterator);\n       * // => true\n       *\n       * _.isSymbol('abc');\n       * // => false\n       */\n      function isSymbol(value) {\n        return typeof value == 'symbol' ||\n          (isObjectLike(value) && objectToString.call(value) == symbolTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a typed array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isTypedArray(new Uint8Array);\n       * // => true\n       *\n       * _.isTypedArray([]);\n       * // => false\n       */\n      function isTypedArray(value) {\n        return isObjectLike(value) &&\n          isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n      }\n  \n      /**\n       * Checks if `value` is `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n       * @example\n       *\n       * _.isUndefined(void 0);\n       * // => true\n       *\n       * _.isUndefined(null);\n       * // => false\n       */\n      function isUndefined(value) {\n        return value === undefined;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakMap` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakMap(new WeakMap);\n       * // => true\n       *\n       * _.isWeakMap(new Map);\n       * // => false\n       */\n      function isWeakMap(value) {\n        return isObjectLike(value) && getTag(value) == weakMapTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakSet` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakSet(new WeakSet);\n       * // => true\n       *\n       * _.isWeakSet(new Set);\n       * // => false\n       */\n      function isWeakSet(value) {\n        return isObjectLike(value) && objectToString.call(value) == weakSetTag;\n      }\n  \n      /**\n       * Checks if `value` is less than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n       * @example\n       *\n       * _.lt(1, 3);\n       * // => true\n       *\n       * _.lt(3, 3);\n       * // => false\n       *\n       * _.lt(3, 1);\n       * // => false\n       */\n      function lt(value, other) {\n        return value < other;\n      }\n  \n      /**\n       * Checks if `value` is less than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.lte(1, 3);\n       * // => true\n       *\n       * _.lte(3, 3);\n       * // => true\n       *\n       * _.lte(3, 1);\n       * // => false\n       */\n      function lte(value, other) {\n        return value <= other;\n      }\n  \n      /**\n       * Converts `value` to an array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the converted array.\n       * @example\n       *\n       * _.toArray({ 'a': 1, 'b': 2 });\n       * // => [1, 2]\n       *\n       * _.toArray('abc');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toArray(1);\n       * // => []\n       *\n       * _.toArray(null);\n       * // => []\n       */\n      function toArray(value) {\n        if (!value) {\n          return [];\n        }\n        if (isArrayLike(value)) {\n          return isString(value) ? stringToArray(value) : copyArray(value);\n        }\n        if (iteratorSymbol && value[iteratorSymbol]) {\n          return iteratorToArray(value[iteratorSymbol]());\n        }\n        var tag = getTag(value),\n            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n  \n        return func(value);\n      }\n  \n      /**\n       * Converts `value` to an integer.\n       *\n       * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toInteger(3);\n       * // => 3\n       *\n       * _.toInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toInteger(Infinity);\n       * // => 1.7976931348623157e+308\n       *\n       * _.toInteger('3');\n       * // => 3\n       */\n      function toInteger(value) {\n        if (!value) {\n          return value === 0 ? value : 0;\n        }\n        value = toNumber(value);\n        if (value === INFINITY || value === -INFINITY) {\n          var sign = (value < 0 ? -1 : 1);\n          return sign * MAX_INTEGER;\n        }\n        var remainder = value % 1;\n        return value === value ? (remainder ? value - remainder : value) : 0;\n      }\n  \n      /**\n       * Converts `value` to an integer suitable for use as the length of an\n       * array-like object.\n       *\n       * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toLength(3);\n       * // => 3\n       *\n       * _.toLength(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toLength(Infinity);\n       * // => 4294967295\n       *\n       * _.toLength('3');\n       * // => 3\n       */\n      function toLength(value) {\n        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n      }\n  \n      /**\n       * Converts `value` to a number.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {number} Returns the number.\n       * @example\n       *\n       * _.toNumber(3);\n       * // => 3\n       *\n       * _.toNumber(Number.MIN_VALUE);\n       * // => 5e-324\n       *\n       * _.toNumber(Infinity);\n       * // => Infinity\n       *\n       * _.toNumber('3');\n       * // => 3\n       */\n      function toNumber(value) {\n        if (isObject(value)) {\n          var other = isFunction(value.valueOf) ? value.valueOf() : value;\n          value = isObject(other) ? (other + '') : other;\n        }\n        if (typeof value != 'string') {\n          return value === 0 ? value : +value;\n        }\n        value = value.replace(reTrim, '');\n        var isBinary = reIsBinary.test(value);\n        return (isBinary || reIsOctal.test(value))\n          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n          : (reIsBadHex.test(value) ? NAN : +value);\n      }\n  \n      /**\n       * Converts `value` to a plain object flattening inherited enumerable\n       * properties of `value` to own properties of the plain object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Object} Returns the converted plain object.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.assign({ 'a': 1 }, new Foo);\n       * // => { 'a': 1, 'b': 2 }\n       *\n       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n       * // => { 'a': 1, 'b': 2, 'c': 3 }\n       */\n      function toPlainObject(value) {\n        return copyObject(value, keysIn(value));\n      }\n  \n      /**\n       * Converts `value` to a safe integer. A safe integer can be compared and\n       * represented correctly.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toSafeInteger(3);\n       * // => 3\n       *\n       * _.toSafeInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toSafeInteger(Infinity);\n       * // => 9007199254740991\n       *\n       * _.toSafeInteger('3');\n       * // => 3\n       */\n      function toSafeInteger(value) {\n        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      }\n  \n      /**\n       * Converts `value` to a string if it's not one. An empty string is returned\n       * for `null` and `undefined` values. The sign of `-0` is preserved.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {string} Returns the string.\n       * @example\n       *\n       * _.toString(null);\n       * // => ''\n       *\n       * _.toString(-0);\n       * // => '-0'\n       *\n       * _.toString([1, 2, 3]);\n       * // => '1,2,3'\n       */\n      function toString(value) {\n        // Exit early for strings to avoid a performance hit in some environments.\n        if (typeof value == 'string') {\n          return value;\n        }\n        if (value == null) {\n          return '';\n        }\n        if (isSymbol(value)) {\n          return Symbol ? symbolToString.call(value) : '';\n        }\n        var result = (value + '');\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Assigns own enumerable properties of source objects to the destination\n       * object. Source objects are applied from left to right. Subsequent sources\n       * overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object` and is loosely based on\n       * [`Object.assign`](https://mdn.io/Object/assign).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.c = 3;\n       * }\n       *\n       * function Bar() {\n       *   this.e = 5;\n       * }\n       *\n       * Foo.prototype.d = 4;\n       * Bar.prototype.f = 6;\n       *\n       * _.assign({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'c': 3, 'e': 5 }\n       */\n      var assign = createAssigner(function(object, source) {\n        copyObject(source, keys(source), object);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it iterates over own and\n       * inherited source properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extend\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * function Bar() {\n       *   this.d = 4;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       * Bar.prototype.e = 5;\n       *\n       * _.assignIn({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n       */\n      var assignIn = createAssigner(function(object, source) {\n        copyObject(source, keysIn(source), object);\n      });\n  \n      /**\n       * This method is like `_.assignIn` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extendWith\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignInWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keysIn(source), object, customizer);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keys(source), object, customizer);\n      });\n  \n      /**\n       * Creates an array of values corresponding to `paths` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of picked elements.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _.at(object, ['a[0].b.c', 'a[1]']);\n       * // => [3, 4]\n       *\n       * _.at(['a', 'b', 'c'], 0, 2);\n       * // => ['a', 'c']\n       */\n      var at = rest(function(object, paths) {\n        return baseAt(object, baseFlatten(paths, 1));\n      });\n  \n      /**\n       * Creates an object that inherits from the `prototype` object. If a `properties`\n       * object is given its own enumerable properties are assigned to the created object.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} prototype The object to inherit from.\n       * @param {Object} [properties] The properties to assign to the object.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * function Shape() {\n       *   this.x = 0;\n       *   this.y = 0;\n       * }\n       *\n       * function Circle() {\n       *   Shape.call(this);\n       * }\n       *\n       * Circle.prototype = _.create(Shape.prototype, {\n       *   'constructor': Circle\n       * });\n       *\n       * var circle = new Circle;\n       * circle instanceof Circle;\n       * // => true\n       *\n       * circle instanceof Shape;\n       * // => true\n       */\n      function create(prototype, properties) {\n        var result = baseCreate(prototype);\n        return properties ? baseAssign(result, properties) : result;\n      }\n  \n      /**\n       * Assigns own and inherited enumerable properties of source objects to the\n       * destination object for all destination properties that resolve to `undefined`.\n       * Source objects are applied from left to right. Once a property is set,\n       * additional values of the same property are ignored.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n       * // => { 'user': 'barney', 'age': 36 }\n       */\n      var defaults = rest(function(args) {\n        args.push(undefined, assignInDefaults);\n        return apply(assignInWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.defaults` except that it recursively assigns\n       * default properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n       * // => { 'user': { 'name': 'barney', 'age': 36 } }\n       *\n       */\n      var defaultsDeep = rest(function(args) {\n        args.push(undefined, mergeDefaults);\n        return apply(mergeWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.find` except that it returns the key of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findKey(users, function(o) { return o.age < 40; });\n       * // => 'barney' (iteration order is not guaranteed)\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findKey(users, { 'age': 1, 'active': true });\n       * // => 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findKey(users, 'active');\n       * // => 'barney'\n       */\n      function findKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);\n      }\n  \n      /**\n       * This method is like `_.findKey` except that it iterates over elements of\n       * a collection in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findLastKey(users, function(o) { return o.age < 40; });\n       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastKey(users, { 'age': 36, 'active': true });\n       * // => 'barney'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastKey(users, 'active');\n       * // => 'pebbles'\n       */\n      function findLastKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);\n      }\n  \n      /**\n       * Iterates over own and inherited enumerable properties of an object invoking\n       * `iteratee` for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forIn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)\n       */\n      function forIn(object, iteratee) {\n        return object == null\n          ? object\n          : baseFor(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * This method is like `_.forIn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forInRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'\n       */\n      function forInRight(object, iteratee) {\n        return object == null\n          ? object\n          : baseForRight(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * Iterates over own enumerable properties of an object invoking `iteratee`\n       * for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by\n       * explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forOwn(object, iteratee) {\n        return object && baseForOwn(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forOwn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwnRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'\n       */\n      function forOwnRight(object, iteratee) {\n        return object && baseForOwnRight(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an array of function property names from own enumerable properties\n       * of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functions(new Foo);\n       * // => ['a', 'b']\n       */\n      function functions(object) {\n        return object == null ? [] : baseFunctions(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of function property names from own and inherited\n       * enumerable properties of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functionsIn(new Foo);\n       * // => ['a', 'b', 'c']\n       */\n      function functionsIn(object) {\n        return object == null ? [] : baseFunctions(object, keysIn(object));\n      }\n  \n      /**\n       * Gets the value at `path` of `object`. If the resolved value is\n       * `undefined` the `defaultValue` is used in its place.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.get(object, 'a[0].b.c');\n       * // => 3\n       *\n       * _.get(object, ['a', '0', 'b', 'c']);\n       * // => 3\n       *\n       * _.get(object, 'a.b.c', 'default');\n       * // => 'default'\n       */\n      function get(object, path, defaultValue) {\n        var result = object == null ? undefined : baseGet(object, path);\n        return result === undefined ? defaultValue : result;\n      }\n  \n      /**\n       * Checks if `path` is a direct property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = { 'a': { 'b': { 'c': 3 } } };\n       * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.has(object, 'a');\n       * // => true\n       *\n       * _.has(object, 'a.b.c');\n       * // => true\n       *\n       * _.has(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.has(other, 'a');\n       * // => false\n       */\n      function has(object, path) {\n        return hasPath(object, path, baseHas);\n      }\n  \n      /**\n       * Checks if `path` is a direct or inherited property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.hasIn(object, 'a');\n       * // => true\n       *\n       * _.hasIn(object, 'a.b.c');\n       * // => true\n       *\n       * _.hasIn(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.hasIn(object, 'b');\n       * // => false\n       */\n      function hasIn(object, path) {\n        return hasPath(object, path, baseHasIn);\n      }\n  \n      /**\n       * Creates an object composed of the inverted keys and values of `object`.\n       * If `object` contains duplicate values, subsequent values overwrite property\n       * assignments of previous values.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invert(object);\n       * // => { '1': 'c', '2': 'b' }\n       */\n      var invert = createInverter(function(result, value, key) {\n        result[value] = key;\n      }, constant(identity));\n  \n      /**\n       * This method is like `_.invert` except that the inverted object is generated\n       * from the results of running each element of `object` through `iteratee`.\n       * The corresponding inverted value of each inverted key is an array of keys\n       * responsible for generating the inverted value. The iteratee is invoked\n       * with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invertBy(object);\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       *\n       * _.invertBy(object, function(value) {\n       *   return 'group' + value;\n       * });\n       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n       */\n      var invertBy = createInverter(function(result, value, key) {\n        if (hasOwnProperty.call(result, value)) {\n          result[value].push(key);\n        } else {\n          result[value] = [key];\n        }\n      }, getIteratee);\n  \n      /**\n       * Invokes the method at `path` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n       *\n       * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n       * // => [2, 3]\n       */\n      var invoke = rest(baseInvoke);\n  \n      /**\n       * Creates an array of the own enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects. See the\n       * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n       * for more details.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keys(new Foo);\n       * // => ['a', 'b'] (iteration order is not guaranteed)\n       *\n       * _.keys('hi');\n       * // => ['0', '1']\n       */\n      function keys(object) {\n        var isProto = isPrototype(object);\n        if (!(isProto || isArrayLike(object))) {\n          return baseKeys(object);\n        }\n        var indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        for (var key in object) {\n          if (baseHas(object, key) &&\n              !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(isProto && key == 'constructor')) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keysIn(new Foo);\n       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n       */\n      function keysIn(object) {\n        var index = -1,\n            isProto = isPrototype(object),\n            props = baseKeysIn(object),\n            propsLength = props.length,\n            indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        while (++index < propsLength) {\n          var key = props[index];\n          if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The opposite of `_.mapValues`; this method creates an object with the\n       * same values as `object` and keys generated by running each own enumerable\n       * property of `object` through `iteratee`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   return key + value;\n       * });\n       * // => { 'a1': 1, 'b2': 2 }\n       */\n      function mapKeys(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[iteratee(value, key, object)] = value;\n        });\n        return result;\n      }\n  \n      /**\n       * Creates an object with the same keys as `object` and values generated by\n       * running each own enumerable property of `object` through `iteratee`. The\n       * iteratee function is invoked with three arguments: (value, key, object).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * var users = {\n       *   'fred':    { 'user': 'fred',    'age': 40 },\n       *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n       * };\n       *\n       * _.mapValues(users, function(o) { return o.age; });\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.mapValues(users, 'age');\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       */\n      function mapValues(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[key] = iteratee(value, key, object);\n        });\n        return result;\n      }\n  \n      /**\n       * Recursively merges own and inherited enumerable properties of source objects\n       * into the destination object. Source properties that resolve to `undefined`\n       * are skipped if a destination value exists. Array and plain object properties\n       * are merged recursively. Other objects and value types are overridden by\n       * assignment. Source objects are applied from left to right. Subsequent\n       * sources overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var users = {\n       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n       * };\n       *\n       * var ages = {\n       *   'data': [{ 'age': 36 }, { 'age': 40 }]\n       * };\n       *\n       * _.merge(users, ages);\n       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n       */\n      var merge = createAssigner(function(object, source, srcIndex) {\n        baseMerge(object, source, srcIndex);\n      });\n  \n      /**\n       * This method is like `_.merge` except that it accepts `customizer` which\n       * is invoked to produce the merged values of the destination and source\n       * properties. If `customizer` returns `undefined` merging is handled by the\n       * method instead. The `customizer` is invoked with seven arguments:\n       * (objValue, srcValue, key, object, source, stack).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} customizer The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (_.isArray(objValue)) {\n       *     return objValue.concat(srcValue);\n       *   }\n       * }\n       *\n       * var object = {\n       *   'fruits': ['apple'],\n       *   'vegetables': ['beet']\n       * };\n       *\n       * var other = {\n       *   'fruits': ['banana'],\n       *   'vegetables': ['carrot']\n       * };\n       *\n       * _.mergeWith(object, other, customizer);\n       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n       */\n      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n        baseMerge(object, source, srcIndex, customizer);\n      });\n  \n      /**\n       * The opposite of `_.pick`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that are not omitted.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to omit, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omit(object, ['a', 'c']);\n       * // => { 'b': '2' }\n       */\n      var omit = rest(function(object, props) {\n        if (object == null) {\n          return {};\n        }\n        props = arrayMap(baseFlatten(props, 1), String);\n        return basePick(object, baseDifference(keysIn(object), props));\n      });\n  \n      /**\n       * The opposite of `_.pickBy`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that `predicate`\n       * doesn't return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omitBy(object, _.isNumber);\n       * // => { 'b': '2' }\n       */\n      function omitBy(object, predicate) {\n        predicate = getIteratee(predicate, 2);\n        return basePickBy(object, function(value, key) {\n          return !predicate(value, key);\n        });\n      }\n  \n      /**\n       * Creates an object composed of the picked `object` properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to pick, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pick(object, ['a', 'c']);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      var pick = rest(function(object, props) {\n        return object == null ? {} : basePick(object, baseFlatten(props, 1));\n      });\n  \n      /**\n       * Creates an object composed of the `object` properties `predicate` returns\n       * truthy for. The predicate is invoked with two arguments: (value, key).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pickBy(object, _.isNumber);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      function pickBy(object, predicate) {\n        return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));\n      }\n  \n      /**\n       * This method is like `_.get` except that if the resolved value is a function\n       * it's invoked with the `this` binding of its parent object and its result\n       * is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to resolve.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n       *\n       * _.result(object, 'a[0].b.c1');\n       * // => 3\n       *\n       * _.result(object, 'a[0].b.c2');\n       * // => 4\n       *\n       * _.result(object, 'a[0].b.c3', 'default');\n       * // => 'default'\n       *\n       * _.result(object, 'a[0].b.c3', _.constant('default'));\n       * // => 'default'\n       */\n      function result(object, path, defaultValue) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          var result = get(object, path);\n          object = parent(object, path);\n        } else {\n          result = object == null ? undefined : object[path];\n        }\n        if (result === undefined) {\n          result = defaultValue;\n        }\n        return isFunction(result) ? result.call(object) : result;\n      }\n  \n      /**\n       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist\n       * it's created. Arrays are created for missing index properties while objects\n       * are created for all other missing properties. Use `_.setWith` to customize\n       * `path` creation.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.set(object, 'a[0].b.c', 4);\n       * console.log(object.a[0].b.c);\n       * // => 4\n       *\n       * _.set(object, 'x[0].y.z', 5);\n       * console.log(object.x[0].y.z);\n       * // => 5\n       */\n      function set(object, path, value) {\n        return object == null ? object : baseSet(object, path, value);\n      }\n  \n      /**\n       * This method is like `_.set` except that it accepts `customizer` which is\n       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n       * path creation is handled by the method instead. The `customizer` is invoked\n       * with three arguments: (nsValue, key, nsObject).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);\n       * // => { '0': { '1': { '2': 3 }, 'length': 2 } }\n       */\n      function setWith(object, path, value, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return object == null ? object : baseSet(object, path, value, customizer);\n      }\n  \n      /**\n       * Creates an array of own enumerable key-value pairs for `object` which\n       * can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairs(new Foo);\n       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n       */\n      function toPairs(object) {\n        return baseToPairs(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of own and inherited enumerable key-value pairs for\n       * `object` which can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairsIn(new Foo);\n       * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)\n       */\n      function toPairsIn(object) {\n        return baseToPairs(object, keysIn(object));\n      }\n  \n      /**\n       * An alternative to `_.reduce`; this method transforms `object` to a new\n       * `accumulator` object which is the result of running each of its own enumerable\n       * properties through `iteratee`, with each invocation potentially mutating\n       * the `accumulator` object. The iteratee is invoked with four arguments:\n       * (accumulator, value, key, object). Iteratee functions may exit iteration\n       * early by explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Array|Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The custom accumulator value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.transform([2, 3, 4], function(result, n) {\n       *   result.push(n *= n);\n       *   return n % 2 == 0;\n       * }, []);\n       * // => [4, 9]\n       *\n       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       */\n      function transform(object, iteratee, accumulator) {\n        var isArr = isArray(object) || isTypedArray(object);\n        iteratee = getIteratee(iteratee, 4);\n  \n        if (accumulator == null) {\n          if (isArr || isObject(object)) {\n            var Ctor = object.constructor;\n            if (isArr) {\n              accumulator = isArray(object) ? new Ctor : [];\n            } else {\n              accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n            }\n          } else {\n            accumulator = {};\n          }\n        }\n        (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n          return iteratee(accumulator, value, index, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * Removes the property at `path` of `object`.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       *\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       */\n      function unset(object, path) {\n        return object == null ? true : baseUnset(object, path);\n      }\n  \n      /**\n       * Creates an array of the own enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.values(new Foo);\n       * // => [1, 2] (iteration order is not guaranteed)\n       *\n       * _.values('hi');\n       * // => ['h', 'i']\n       */\n      function values(object) {\n        return object ? baseValues(object, keys(object)) : [];\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.valuesIn(new Foo);\n       * // => [1, 2, 3] (iteration order is not guaranteed)\n       */\n      function valuesIn(object) {\n        return object == null ? [] : baseValues(object, keysIn(object));\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Clamps `number` within the inclusive `lower` and `upper` bounds.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       * @example\n       *\n       * _.clamp(-10, -5, 5);\n       * // => -5\n       *\n       * _.clamp(10, -5, 5);\n       * // => 5\n       */\n      function clamp(number, lower, upper) {\n        if (upper === undefined) {\n          upper = lower;\n          lower = undefined;\n        }\n        if (upper !== undefined) {\n          upper = toNumber(upper);\n          upper = upper === upper ? upper : 0;\n        }\n        if (lower !== undefined) {\n          lower = toNumber(lower);\n          lower = lower === lower ? lower : 0;\n        }\n        return baseClamp(toNumber(number), lower, upper);\n      }\n  \n      /**\n       * Checks if `n` is between `start` and up to but not including, `end`. If\n       * `end` is not specified it's set to `start` with `start` then set to `0`.\n       * If `start` is greater than `end` the params are swapped to support\n       * negative ranges.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to check.\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       * @example\n       *\n       * _.inRange(3, 2, 4);\n       * // => true\n       *\n       * _.inRange(4, 8);\n       * // => true\n       *\n       * _.inRange(4, 2);\n       * // => false\n       *\n       * _.inRange(2, 2);\n       * // => false\n       *\n       * _.inRange(1.2, 2);\n       * // => true\n       *\n       * _.inRange(5.2, 4);\n       * // => false\n       *\n       * _.inRange(-3, -2, -6);\n       * // => true\n       */\n      function inRange(number, start, end) {\n        start = toNumber(start) || 0;\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toNumber(end) || 0;\n        }\n        number = toNumber(number);\n        return baseInRange(number, start, end);\n      }\n  \n      /**\n       * Produces a random number between the inclusive `lower` and `upper` bounds.\n       * If only one argument is provided a number between `0` and the given number\n       * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,\n       * a floating-point number is returned instead of an integer.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} [lower=0] The lower bound.\n       * @param {number} [upper=1] The upper bound.\n       * @param {boolean} [floating] Specify returning a floating-point number.\n       * @returns {number} Returns the random number.\n       * @example\n       *\n       * _.random(0, 5);\n       * // => an integer between 0 and 5\n       *\n       * _.random(5);\n       * // => also an integer between 0 and 5\n       *\n       * _.random(5, true);\n       * // => a floating-point number between 0 and 5\n       *\n       * _.random(1.2, 5.2);\n       * // => a floating-point number between 1.2 and 5.2\n       */\n      function random(lower, upper, floating) {\n        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n          upper = floating = undefined;\n        }\n        if (floating === undefined) {\n          if (typeof upper == 'boolean') {\n            floating = upper;\n            upper = undefined;\n          }\n          else if (typeof lower == 'boolean') {\n            floating = lower;\n            lower = undefined;\n          }\n        }\n        if (lower === undefined && upper === undefined) {\n          lower = 0;\n          upper = 1;\n        }\n        else {\n          lower = toNumber(lower) || 0;\n          if (upper === undefined) {\n            upper = lower;\n            lower = 0;\n          } else {\n            upper = toNumber(upper) || 0;\n          }\n        }\n        if (lower > upper) {\n          var temp = lower;\n          lower = upper;\n          upper = temp;\n        }\n        if (floating || lower % 1 || upper % 1) {\n          var rand = nativeRandom();\n          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n        }\n        return baseRandom(lower, upper);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the camel cased string.\n       * @example\n       *\n       * _.camelCase('Foo Bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('--foo-bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('__foo_bar__');\n       * // => 'fooBar'\n       */\n      var camelCase = createCompounder(function(result, word, index) {\n        word = word.toLowerCase();\n        return result + (index ? capitalize(word) : word);\n      });\n  \n      /**\n       * Converts the first character of `string` to upper case and the remaining\n       * to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to capitalize.\n       * @returns {string} Returns the capitalized string.\n       * @example\n       *\n       * _.capitalize('FRED');\n       * // => 'Fred'\n       */\n      function capitalize(string) {\n        return upperFirst(toString(string).toLowerCase());\n      }\n  \n      /**\n       * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n       * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to deburr.\n       * @returns {string} Returns the deburred string.\n       * @example\n       *\n       * _.deburr('déjà vu');\n       * // => 'deja vu'\n       */\n      function deburr(string) {\n        string = toString(string);\n        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n      }\n  \n      /**\n       * Checks if `string` ends with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=string.length] The position to search from.\n       * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n       * @example\n       *\n       * _.endsWith('abc', 'c');\n       * // => true\n       *\n       * _.endsWith('abc', 'b');\n       * // => false\n       *\n       * _.endsWith('abc', 'b', 2);\n       * // => true\n       */\n      function endsWith(string, target, position) {\n        string = toString(string);\n        target = typeof target == 'string' ? target : (target + '');\n  \n        var length = string.length;\n        position = position === undefined\n          ? length\n          : baseClamp(toInteger(position), 0, length);\n  \n        position -= target.length;\n        return position >= 0 && string.indexOf(target, position) == position;\n      }\n  \n      /**\n       * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n       * their corresponding HTML entities.\n       *\n       * **Note:** No other characters are escaped. To escape additional\n       * characters use a third-party library like [_he_](https://mths.be/he).\n       *\n       * Though the \">\" character is escaped for symmetry, characters like\n       * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n       * unless they're part of a tag or unquoted attribute value.\n       * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n       * (under \"semi-related fun fact\") for more details.\n       *\n       * Backticks are escaped because in IE < 9, they can break out of\n       * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n       * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n       * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n       * for more details.\n       *\n       * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n       * to reduce XSS vectors.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escape('fred, barney, & pebbles');\n       * // => 'fred, barney, &amp; pebbles'\n       */\n      function escape(string) {\n        string = toString(string);\n        return (string && reHasUnescapedHtml.test(string))\n          ? string.replace(reUnescapedHtml, escapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n       * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escapeRegExp('[lodash](https://lodash.com/)');\n       * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n       */\n      function escapeRegExp(string) {\n        string = toString(string);\n        return (string && reHasRegExpChar.test(string))\n          ? string.replace(reRegExpChar, '\\\\$&')\n          : string;\n      }\n  \n      /**\n       * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the kebab cased string.\n       * @example\n       *\n       * _.kebabCase('Foo Bar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('fooBar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('__foo_bar__');\n       * // => 'foo-bar'\n       */\n      var kebabCase = createCompounder(function(result, word, index) {\n        return result + (index ? '-' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts `string`, as space separated words, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.lowerCase('--Foo-Bar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('fooBar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('__FOO_BAR__');\n       * // => 'foo bar'\n       */\n      var lowerCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts the first character of `string` to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.lowerFirst('Fred');\n       * // => 'fred'\n       *\n       * _.lowerFirst('FRED');\n       * // => 'fRED'\n       */\n      var lowerFirst = createCaseFirst('toLowerCase');\n  \n      /**\n       * Converts the first character of `string` to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.upperFirst('fred');\n       * // => 'Fred'\n       *\n       * _.upperFirst('FRED');\n       * // => 'FRED'\n       */\n      var upperFirst = createCaseFirst('toUpperCase');\n  \n      /**\n       * Pads `string` on the left and right sides if it's shorter than `length`.\n       * Padding characters are truncated if they can't be evenly divided by `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.pad('abc', 8);\n       * // => '  abc   '\n       *\n       * _.pad('abc', 8, '_-');\n       * // => '_-abc_-_'\n       *\n       * _.pad('abc', 3);\n       * // => 'abc'\n       */\n      function pad(string, length, chars) {\n        string = toString(string);\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return string;\n        }\n        var mid = (length - strLength) / 2,\n            leftLength = nativeFloor(mid),\n            rightLength = nativeCeil(mid);\n  \n        return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);\n      }\n  \n      /**\n       * Pads `string` on the right side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padEnd('abc', 6);\n       * // => 'abc   '\n       *\n       * _.padEnd('abc', 6, '_-');\n       * // => 'abc_-_'\n       *\n       * _.padEnd('abc', 3);\n       * // => 'abc'\n       */\n      function padEnd(string, length, chars) {\n        string = toString(string);\n        return string + createPadding(string, length, chars);\n      }\n  \n      /**\n       * Pads `string` on the left side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padStart('abc', 6);\n       * // => '   abc'\n       *\n       * _.padStart('abc', 6, '_-');\n       * // => '_-_abc'\n       *\n       * _.padStart('abc', 3);\n       * // => 'abc'\n       */\n      function padStart(string, length, chars) {\n        string = toString(string);\n        return createPadding(string, length, chars) + string;\n      }\n  \n      /**\n       * Converts `string` to an integer of the specified radix. If `radix` is\n       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n       * in which case a `radix` of `16` is used.\n       *\n       * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)\n       * of `parseInt`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} string The string to convert.\n       * @param {number} [radix=10] The radix to interpret `value` by.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.parseInt('08');\n       * // => 8\n       *\n       * _.map(['6', '08', '10'], _.parseInt);\n       * // => [6, 8, 10]\n       */\n      function parseInt(string, radix, guard) {\n        // Chrome fails to trim leading <BOM> whitespace characters.\n        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n        if (guard || radix == null) {\n          radix = 0;\n        } else if (radix) {\n          radix = +radix;\n        }\n        string = toString(string).replace(reTrim, '');\n        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n      }\n  \n      /**\n       * Repeats the given string `n` times.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to repeat.\n       * @param {number} [n=0] The number of times to repeat the string.\n       * @returns {string} Returns the repeated string.\n       * @example\n       *\n       * _.repeat('*', 3);\n       * // => '***'\n       *\n       * _.repeat('abc', 2);\n       * // => 'abcabc'\n       *\n       * _.repeat('abc', 0);\n       * // => ''\n       */\n      function repeat(string, n) {\n        string = toString(string);\n        n = toInteger(n);\n  \n        var result = '';\n        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n          return result;\n        }\n        // Leverage the exponentiation by squaring algorithm for a faster repeat.\n        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n        do {\n          if (n % 2) {\n            result += string;\n          }\n          n = nativeFloor(n / 2);\n          string += string;\n        } while (n);\n  \n        return result;\n      }\n  \n      /**\n       * Replaces matches for `pattern` in `string` with `replacement`.\n       *\n       * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to modify.\n       * @param {RegExp|string} pattern The pattern to replace.\n       * @param {Function|string} replacement The match replacement.\n       * @returns {string} Returns the modified string.\n       * @example\n       *\n       * _.replace('Hi Fred', 'Fred', 'Barney');\n       * // => 'Hi Barney'\n       */\n      function replace() {\n        var args = arguments,\n            string = toString(args[0]);\n  \n        return args.length < 3 ? string : string.replace(args[1], args[2]);\n      }\n  \n      /**\n       * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the snake cased string.\n       * @example\n       *\n       * _.snakeCase('Foo Bar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('fooBar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('--foo-bar');\n       * // => 'foo_bar'\n       */\n      var snakeCase = createCompounder(function(result, word, index) {\n        return result + (index ? '_' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Splits `string` by `separator`.\n       *\n       * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to split.\n       * @param {RegExp|string} separator The separator pattern to split by.\n       * @param {number} [limit] The length to truncate results to.\n       * @returns {Array} Returns the new array of string segments.\n       * @example\n       *\n       * _.split('a-b-c', '-', 2);\n       * // => ['a', 'b']\n       */\n      function split(string, separator, limit) {\n        return toString(string).split(separator, limit);\n      }\n  \n      /**\n       * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the start cased string.\n       * @example\n       *\n       * _.startCase('--foo-bar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('fooBar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('__foo_bar__');\n       * // => 'Foo Bar'\n       */\n      var startCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + capitalize(word);\n      });\n  \n      /**\n       * Checks if `string` starts with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=0] The position to search from.\n       * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n       * @example\n       *\n       * _.startsWith('abc', 'a');\n       * // => true\n       *\n       * _.startsWith('abc', 'b');\n       * // => false\n       *\n       * _.startsWith('abc', 'b', 1);\n       * // => true\n       */\n      function startsWith(string, target, position) {\n        string = toString(string);\n        position = baseClamp(toInteger(position), 0, string.length);\n        return string.lastIndexOf(target, position) == position;\n      }\n  \n      /**\n       * Creates a compiled template function that can interpolate data properties\n       * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n       * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n       * properties may be accessed as free variables in the template. If a setting\n       * object is given it takes precedence over `_.templateSettings` values.\n       *\n       * **Note:** In the development build `_.template` utilizes\n       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n       * for easier debugging.\n       *\n       * For more information on precompiling templates see\n       * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n       *\n       * For more information on Chrome extension sandboxes see\n       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The template string.\n       * @param {Object} [options] The options object.\n       * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n       * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n       * @param {Object} [options.imports] An object to import into the template as free variables.\n       * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n       * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n       * @param {string} [options.variable] The data object variable name.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the compiled template function.\n       * @example\n       *\n       * // Use the \"interpolate\" delimiter to create a compiled template.\n       * var compiled = _.template('hello <%= user %>!');\n       * compiled({ 'user': 'fred' });\n       * // => 'hello fred!'\n       *\n       * // Use the HTML \"escape\" delimiter to escape data property values.\n       * var compiled = _.template('<b><%- value %></b>');\n       * compiled({ 'value': '<script>' });\n       * // => '<b>&lt;script&gt;</b>'\n       *\n       * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the internal `print` function in \"evaluate\" delimiters.\n       * var compiled = _.template('<% print(\"hello \" + user); %>!');\n       * compiled({ 'user': 'barney' });\n       * // => 'hello barney!'\n       *\n       * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n       * var compiled = _.template('hello ${ user }!');\n       * compiled({ 'user': 'pebbles' });\n       * // => 'hello pebbles!'\n       *\n       * // Use custom template delimiters.\n       * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n       * var compiled = _.template('hello {{ user }}!');\n       * compiled({ 'user': 'mustache' });\n       * // => 'hello mustache!'\n       *\n       * // Use backslashes to treat delimiters as plain text.\n       * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n       * compiled({ 'value': 'ignored' });\n       * // => '<%- value %>'\n       *\n       * // Use the `imports` option to import `jQuery` as `jq`.\n       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n       * compiled(data);\n       * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n       *\n       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n       * compiled.source;\n       * // => function(data) {\n       * //   var __t, __p = '';\n       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n       * //   return __p;\n       * // }\n       *\n       * // Use the `source` property to inline compiled templates for meaningful\n       * // line numbers in error messages and stack traces.\n       * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n       *   var JST = {\\\n       *     \"main\": ' + _.template(mainText).source + '\\\n       *   };\\\n       * ');\n       */\n      function template(string, options, guard) {\n        // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n        // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n        var settings = lodash.templateSettings;\n  \n        if (guard && isIterateeCall(string, options, guard)) {\n          options = undefined;\n        }\n        string = toString(string);\n        options = assignInWith({}, options, settings, assignInDefaults);\n  \n        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n            importsKeys = keys(imports),\n            importsValues = baseValues(imports, importsKeys);\n  \n        var isEscaping,\n            isEvaluating,\n            index = 0,\n            interpolate = options.interpolate || reNoMatch,\n            source = \"__p += '\";\n  \n        // Compile the regexp to match each delimiter.\n        var reDelimiters = RegExp(\n          (options.escape || reNoMatch).source + '|' +\n          interpolate.source + '|' +\n          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n          (options.evaluate || reNoMatch).source + '|$'\n        , 'g');\n  \n        // Use a sourceURL for easier debugging.\n        var sourceURL = '//# sourceURL=' +\n          ('sourceURL' in options\n            ? options.sourceURL\n            : ('lodash.templateSources[' + (++templateCounter) + ']')\n          ) + '\\n';\n  \n        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n          interpolateValue || (interpolateValue = esTemplateValue);\n  \n          // Escape characters that can't be included in string literals.\n          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n  \n          // Replace delimiters with snippets.\n          if (escapeValue) {\n            isEscaping = true;\n            source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n          }\n          if (evaluateValue) {\n            isEvaluating = true;\n            source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n          }\n          if (interpolateValue) {\n            source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n          }\n          index = offset + match.length;\n  \n          // The JS engine embedded in Adobe products needs `match` returned in\n          // order to produce the correct `offset` value.\n          return match;\n        });\n  \n        source += \"';\\n\";\n  \n        // If `variable` is not specified wrap a with-statement around the generated\n        // code to add the data object to the top of the scope chain.\n        var variable = options.variable;\n        if (!variable) {\n          source = 'with (obj) {\\n' + source + '\\n}\\n';\n        }\n        // Cleanup code by stripping empty strings.\n        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n          .replace(reEmptyStringMiddle, '$1')\n          .replace(reEmptyStringTrailing, '$1;');\n  \n        // Frame code as the function body.\n        source = 'function(' + (variable || 'obj') + ') {\\n' +\n          (variable\n            ? ''\n            : 'obj || (obj = {});\\n'\n          ) +\n          \"var __t, __p = ''\" +\n          (isEscaping\n             ? ', __e = _.escape'\n             : ''\n          ) +\n          (isEvaluating\n            ? ', __j = Array.prototype.join;\\n' +\n              \"function print() { __p += __j.call(arguments, '') }\\n\"\n            : ';\\n'\n          ) +\n          source +\n          'return __p\\n}';\n  \n        var result = attempt(function() {\n          return Function(importsKeys, sourceURL + 'return ' + source)\n            .apply(undefined, importsValues);\n        });\n  \n        // Provide the compiled function's source by its `toString` method or\n        // the `source` property as a convenience for inlining compiled templates.\n        result.source = source;\n        if (isError(result)) {\n          throw result;\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `string`, as a whole, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.toLower('--Foo-Bar');\n       * // => '--foo-bar'\n       *\n       * _.toLower('fooBar');\n       * // => 'foobar'\n       *\n       * _.toLower('__FOO_BAR__');\n       * // => '__foo_bar__'\n       */\n      function toLower(value) {\n        return toString(value).toLowerCase();\n      }\n  \n      /**\n       * Converts `string`, as a whole, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.toUpper('--foo-bar');\n       * // => '--FOO-BAR'\n       *\n       * _.toUpper('fooBar');\n       * // => 'FOOBAR'\n       *\n       * _.toUpper('__foo_bar__');\n       * // => '__FOO_BAR__'\n       */\n      function toUpper(value) {\n        return toString(value).toUpperCase();\n      }\n  \n      /**\n       * Removes leading and trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trim('  abc  ');\n       * // => 'abc'\n       *\n       * _.trim('-_-abc-_-', '_-');\n       * // => 'abc'\n       *\n       * _.map(['  foo  ', '  bar  '], _.trim);\n       * // => ['foo', 'bar']\n       */\n      function trim(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrim, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string),\n            chrSymbols = stringToArray(chars);\n  \n        return strSymbols\n          .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimEnd('  abc  ');\n       * // => '  abc'\n       *\n       * _.trimEnd('-_-abc-_-', '_-');\n       * // => '-_-abc'\n       */\n      function trimEnd(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimEnd, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes leading whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimStart('  abc  ');\n       * // => 'abc  '\n       *\n       * _.trimStart('-_-abc-_-', '_-');\n       * // => 'abc-_-'\n       */\n      function trimStart(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimStart, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(charsStartIndex(strSymbols, stringToArray(chars)))\n          .join('');\n      }\n  \n      /**\n       * Truncates `string` if it's longer than the given maximum string length.\n       * The last characters of the truncated string are replaced with the omission\n       * string which defaults to \"...\".\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to truncate.\n       * @param {Object} [options=({})] The options object.\n       * @param {number} [options.length=30] The maximum string length.\n       * @param {string} [options.omission='...'] The string to indicate text is omitted.\n       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n       * @returns {string} Returns the truncated string.\n       * @example\n       *\n       * _.truncate('hi-diddly-ho there, neighborino');\n       * // => 'hi-diddly-ho there, neighbo...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': ' '\n       * });\n       * // => 'hi-diddly-ho there,...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': /,? +/\n       * });\n       * // => 'hi-diddly-ho there...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'omission': ' [...]'\n       * });\n       * // => 'hi-diddly-ho there, neig [...]'\n       */\n      function truncate(string, options) {\n        var length = DEFAULT_TRUNC_LENGTH,\n            omission = DEFAULT_TRUNC_OMISSION;\n  \n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? toInteger(options.length) : length;\n          omission = 'omission' in options ? toString(options.omission) : omission;\n        }\n        string = toString(string);\n  \n        var strLength = string.length;\n        if (reHasComplexSymbol.test(string)) {\n          var strSymbols = stringToArray(string);\n          strLength = strSymbols.length;\n        }\n        if (length >= strLength) {\n          return string;\n        }\n        var end = length - stringSize(omission);\n        if (end < 1) {\n          return omission;\n        }\n        var result = strSymbols\n          ? strSymbols.slice(0, end).join('')\n          : string.slice(0, end);\n  \n        if (separator === undefined) {\n          return result + omission;\n        }\n        if (strSymbols) {\n          end += (result.length - end);\n        }\n        if (isRegExp(separator)) {\n          if (string.slice(end).search(separator)) {\n            var match,\n                substring = result;\n  \n            if (!separator.global) {\n              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n            }\n            separator.lastIndex = 0;\n            while ((match = separator.exec(substring))) {\n              var newEnd = match.index;\n            }\n            result = result.slice(0, newEnd === undefined ? end : newEnd);\n          }\n        } else if (string.indexOf(separator, end) != end) {\n          var index = result.lastIndexOf(separator);\n          if (index > -1) {\n            result = result.slice(0, index);\n          }\n        }\n        return result + omission;\n      }\n  \n      /**\n       * The inverse of `_.escape`; this method converts the HTML entities\n       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n       * corresponding characters.\n       *\n       * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n       * entities use a third-party library like [_he_](https://mths.be/he).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to unescape.\n       * @returns {string} Returns the unescaped string.\n       * @example\n       *\n       * _.unescape('fred, barney, &amp; pebbles');\n       * // => 'fred, barney, & pebbles'\n       */\n      function unescape(string) {\n        string = toString(string);\n        return (string && reHasEscapedHtml.test(string))\n          ? string.replace(reEscapedHtml, unescapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Converts `string`, as space separated words, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.upperCase('--foo-bar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('fooBar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('__foo_bar__');\n       * // => 'FOO BAR'\n       */\n      var upperCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toUpperCase();\n      });\n  \n      /**\n       * Splits `string` into an array of its words.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to inspect.\n       * @param {RegExp|string} [pattern] The pattern to match words.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the words of `string`.\n       * @example\n       *\n       * _.words('fred, barney, & pebbles');\n       * // => ['fred', 'barney', 'pebbles']\n       *\n       * _.words('fred, barney, & pebbles', /[^, ]+/g);\n       * // => ['fred', 'barney', '&', 'pebbles']\n       */\n      function words(string, pattern, guard) {\n        string = toString(string);\n        pattern = guard ? undefined : pattern;\n  \n        if (pattern === undefined) {\n          pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;\n        }\n        return string.match(pattern) || [];\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Attempts to invoke `func`, returning either the result or the caught error\n       * object. Any additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function} func The function to attempt.\n       * @returns {*} Returns the `func` result or error object.\n       * @example\n       *\n       * // Avoid throwing errors for invalid selectors.\n       * var elements = _.attempt(function(selector) {\n       *   return document.querySelectorAll(selector);\n       * }, '>_>');\n       *\n       * if (_.isError(elements)) {\n       *   elements = [];\n       * }\n       */\n      var attempt = rest(function(func, args) {\n        try {\n          return apply(func, undefined, args);\n        } catch (e) {\n          return isError(e) ? e : new Error(e);\n        }\n      });\n  \n      /**\n       * Binds methods of an object to the object itself, overwriting the existing\n       * method.\n       *\n       * **Note:** This method doesn't set the \"length\" property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to bind and assign the bound methods to.\n       * @param {...(string|string[])} methodNames The object method names to bind,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var view = {\n       *   'label': 'docs',\n       *   'onClick': function() {\n       *     console.log('clicked ' + this.label);\n       *   }\n       * };\n       *\n       * _.bindAll(view, 'onClick');\n       * jQuery(element).on('click', view.onClick);\n       * // => logs 'clicked docs' when clicked\n       */\n      var bindAll = rest(function(object, methodNames) {\n        arrayEach(baseFlatten(methodNames, 1), function(key) {\n          object[key] = bind(object[key], object);\n        });\n        return object;\n      });\n  \n      /**\n       * Creates a function that iterates over `pairs` invoking the corresponding\n       * function of the first predicate to return truthy. The predicate-function\n       * pairs are invoked with the `this` binding and arguments of the created\n       * function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array} pairs The predicate-function pairs.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.cond([\n       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n       *   [_.constant(true),                _.constant('no match')]\n       * ]);\n       *\n       * func({ 'a': 1, 'b': 2 });\n       * // => 'matches A'\n       *\n       * func({ 'a': 0, 'b': 1 });\n       * // => 'matches B'\n       *\n       * func({ 'a': '1', 'b': '2' });\n       * // => 'no match'\n       */\n      function cond(pairs) {\n        var length = pairs ? pairs.length : 0,\n            toIteratee = getIteratee();\n  \n        pairs = !length ? [] : arrayMap(pairs, function(pair) {\n          if (typeof pair[1] != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          return [toIteratee(pair[0]), pair[1]];\n        });\n  \n        return rest(function(args) {\n          var index = -1;\n          while (++index < length) {\n            var pair = pairs[index];\n            if (apply(pair[0], this, args)) {\n              return apply(pair[1], this, args);\n            }\n          }\n        });\n      }\n  \n      /**\n       * Creates a function that invokes the predicate properties of `source` with\n       * the corresponding property values of a given object, returning `true` if\n       * all predicates return truthy, else `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function conforms(source) {\n        return baseConforms(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that returns `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to return from the new function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var getter = _.constant(object);\n       *\n       * getter() === object;\n       * // => true\n       */\n      function constant(value) {\n        return function() {\n          return value;\n        };\n      }\n  \n      /**\n       * Creates a function that returns the result of invoking the given functions\n       * with the `this` binding of the created function, where each successive\n       * invocation is supplied the return value of the previous.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flow(_.add, square);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flow = createFlow();\n  \n      /**\n       * This method is like `_.flow` except that it creates a function that\n       * invokes the given functions from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flowRight(square, _.add);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flowRight = createFlow(true);\n  \n      /**\n       * This method returns the first argument given to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value Any value.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.identity(object) === object;\n       * // => true\n       */\n      function identity(value) {\n        return value;\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the arguments of the created\n       * function. If `func` is a property name the created callback returns the\n       * property value for a given element. If `func` is an object the created\n       * callback returns `true` for elements that contain the equivalent object\n       * properties, otherwise it returns `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} [func=_.identity] The value to convert to a callback.\n       * @returns {Function} Returns the callback.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // Create custom iteratee shorthands.\n       * _.iteratee = _.wrap(_.iteratee, function(callback, func) {\n       *   var p = /^(\\S+)\\s*([<>])\\s*(\\S+)$/.exec(func);\n       *   return !p ? callback(func) : function(object) {\n       *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);\n       *   };\n       * });\n       *\n       * _.filter(users, 'age > 36');\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function iteratee(func) {\n        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between a given\n       * object and `source`, returning `true` if the given object has equivalent\n       * property values, else `false`. The created function is equivalent to\n       * `_.isMatch` with a `source` partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n       */\n      function matches(source) {\n        return baseMatches(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between the\n       * value at `path` of a given object to `srcValue`, returning `true` if the\n       * object value is equivalent, else `false`.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * _.find(users, _.matchesProperty('user', 'fred'));\n       * // => { 'user': 'fred' }\n       */\n      function matchesProperty(path, srcValue) {\n        return baseMatchesProperty(path, baseClone(srcValue, true));\n      }\n  \n      /**\n       * Creates a function that invokes the method at `path` of a given object.\n       * Any additional arguments are provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': _.constant(2) } } },\n       *   { 'a': { 'b': { 'c': _.constant(1) } } }\n       * ];\n       *\n       * _.map(objects, _.method('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      var method = rest(function(path, args) {\n        return function(object) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * The opposite of `_.method`; this method creates a function that invokes\n       * the method at a given path of `object`. Any additional arguments are\n       * provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = _.times(3, _.constant),\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n       * // => [2, 0]\n       */\n      var methodOf = rest(function(object, args) {\n        return function(path) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * Adds all own enumerable function properties of a source object to the\n       * destination object. If `object` is a function then methods are added to\n       * its prototype as well.\n       *\n       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n       * avoid conflicts caused by modifying the original.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function|Object} [object=lodash] The destination object.\n       * @param {Object} source The object of functions to add.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.chain=true] Specify whether the functions added\n       *  are chainable.\n       * @returns {Function|Object} Returns `object`.\n       * @example\n       *\n       * function vowels(string) {\n       *   return _.filter(string, function(v) {\n       *     return /[aeiou]/i.test(v);\n       *   });\n       * }\n       *\n       * _.mixin({ 'vowels': vowels });\n       * _.vowels('fred');\n       * // => ['e']\n       *\n       * _('fred').vowels().value();\n       * // => ['e']\n       *\n       * _.mixin({ 'vowels': vowels }, { 'chain': false });\n       * _('fred').vowels();\n       * // => ['e']\n       */\n      function mixin(object, source, options) {\n        var props = keys(source),\n            methodNames = baseFunctions(source, props);\n  \n        if (options == null &&\n            !(isObject(source) && (methodNames.length || !props.length))) {\n          options = source;\n          source = object;\n          object = this;\n          methodNames = baseFunctions(source, keys(source));\n        }\n        var chain = (isObject(options) && 'chain' in options) ? options.chain : true,\n            isFunc = isFunction(object);\n  \n        arrayEach(methodNames, function(methodName) {\n          var func = source[methodName];\n          object[methodName] = func;\n          if (isFunc) {\n            object.prototype[methodName] = function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = copyArray(this.__actions__);\n  \n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }\n        });\n  \n        return object;\n      }\n  \n      /**\n       * Reverts the `_` variable to its previous value and returns a reference to\n       * the `lodash` function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @returns {Function} Returns the `lodash` function.\n       * @example\n       *\n       * var lodash = _.noConflict();\n       */\n      function noConflict() {\n        if (root._ === this) {\n          root._ = oldDash;\n        }\n        return this;\n      }\n  \n      /**\n       * A no-operation function that returns `undefined` regardless of the\n       * arguments it receives.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.noop(object) === undefined;\n       * // => true\n       */\n      function noop() {\n        // No operation performed.\n      }\n  \n      /**\n       * Creates a function that returns its nth argument.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [n=0] The index of the argument to return.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.nthArg(1);\n       *\n       * func('a', 'b', 'c');\n       * // => 'b'\n       */\n      function nthArg(n) {\n        n = toInteger(n);\n        return function() {\n          return arguments[n];\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `iteratees` with the arguments provided\n       * to the created function and returns their results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} iteratees The iteratees to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.over(Math.max, Math.min);\n       *\n       * func(1, 2, 3, 4);\n       * // => [4, 1]\n       */\n      var over = createOver(arrayMap);\n  \n      /**\n       * Creates a function that checks if **all** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overEvery(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => false\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overEvery = createOver(arrayEvery);\n  \n      /**\n       * Creates a function that checks if **any** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overSome(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => true\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overSome = createOver(arraySome);\n  \n      /**\n       * Creates a function that returns the value at `path` of a given object.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': 2 } } },\n       *   { 'a': { 'b': { 'c': 1 } } }\n       * ];\n       *\n       * _.map(objects, _.property('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      function property(path) {\n        return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n      }\n  \n      /**\n       * The opposite of `_.property`; this method creates a function that returns\n       * the value at a given path of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = [0, 1, 2],\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n       * // => [2, 0]\n       */\n      function propertyOf(object) {\n        return function(path) {\n          return object == null ? undefined : baseGet(object, path);\n        };\n      }\n  \n      /**\n       * Creates an array of numbers (positive and/or negative) progressing from\n       * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n       * `start` is specified without an `end` or `step`. If `end` is not specified\n       * it's set to `start` with `start` then set to `0`.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.range(4);\n       * // => [0, 1, 2, 3]\n       *\n       * _.range(-4);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 5);\n       * // => [1, 2, 3, 4]\n       *\n       * _.range(0, 20, 5);\n       * // => [0, 5, 10, 15]\n       *\n       * _.range(0, -4, -1);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.range(0);\n       * // => []\n       */\n      var range = createRange();\n  \n      /**\n       * This method is like `_.range` except that it populates values in\n       * descending order.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.rangeRight(4);\n       * // => [3, 2, 1, 0]\n       *\n       * _.rangeRight(-4);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 5);\n       * // => [4, 3, 2, 1]\n       *\n       * _.rangeRight(0, 20, 5);\n       * // => [15, 10, 5, 0]\n       *\n       * _.rangeRight(0, -4, -1);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.rangeRight(0);\n       * // => []\n       */\n      var rangeRight = createRange(true);\n  \n      /**\n       * Invokes the iteratee function `n` times, returning an array of the results\n       * of each invocation. The iteratee is invoked with one argument; (index).\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} n The number of times to invoke `iteratee`.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.times(3, String);\n       * // => ['0', '1', '2']\n       *\n       *  _.times(4, _.constant(true));\n       * // => [true, true, true, true]\n       */\n      function times(n, iteratee) {\n        n = toInteger(n);\n        if (n < 1 || n > MAX_SAFE_INTEGER) {\n          return [];\n        }\n        var index = MAX_ARRAY_LENGTH,\n            length = nativeMin(n, MAX_ARRAY_LENGTH);\n  \n        iteratee = baseCastFunction(iteratee);\n        n -= MAX_ARRAY_LENGTH;\n  \n        var result = baseTimes(length, iteratee);\n        while (++index < n) {\n          iteratee(index);\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `value` to a property path array.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the new property path array.\n       * @example\n       *\n       * _.toPath('a.b.c');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toPath('a[0].b.c');\n       * // => ['a', '0', 'b', 'c']\n       *\n       * var path = ['a', 'b', 'c'],\n       *     newPath = _.toPath(path);\n       *\n       * console.log(newPath);\n       * // => ['a', 'b', 'c']\n       *\n       * console.log(path === newPath);\n       * // => false\n       */\n      function toPath(value) {\n        return isArray(value) ? arrayMap(value, String) : stringToPath(value);\n      }\n  \n      /**\n       * Generates a unique ID. If `prefix` is given the ID is appended to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {string} [prefix=''] The value to prefix the ID with.\n       * @returns {string} Returns the unique ID.\n       * @example\n       *\n       * _.uniqueId('contact_');\n       * // => 'contact_104'\n       *\n       * _.uniqueId();\n       * // => '105'\n       */\n      function uniqueId(prefix) {\n        var id = ++idCounter;\n        return toString(prefix) + id;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Adds two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} augend The first number in an addition.\n       * @param {number} addend The second number in an addition.\n       * @returns {number} Returns the total.\n       * @example\n       *\n       * _.add(6, 4);\n       * // => 10\n       */\n      function add(augend, addend) {\n        var result;\n        if (augend === undefined && addend === undefined) {\n          return 0;\n        }\n        if (augend !== undefined) {\n          result = augend;\n        }\n        if (addend !== undefined) {\n          result = result === undefined ? addend : (result + addend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes `number` rounded up to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round up.\n       * @param {number} [precision=0] The precision to round up to.\n       * @returns {number} Returns the rounded up number.\n       * @example\n       *\n       * _.ceil(4.006);\n       * // => 5\n       *\n       * _.ceil(6.004, 2);\n       * // => 6.01\n       *\n       * _.ceil(6040, -2);\n       * // => 6100\n       */\n      var ceil = createRound('ceil');\n  \n      /**\n       * Computes `number` rounded down to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round down.\n       * @param {number} [precision=0] The precision to round down to.\n       * @returns {number} Returns the rounded down number.\n       * @example\n       *\n       * _.floor(4.006);\n       * // => 4\n       *\n       * _.floor(0.046, 2);\n       * // => 0.04\n       *\n       * _.floor(4060, -2);\n       * // => 4000\n       */\n      var floor = createRound('floor');\n  \n      /**\n       * Computes the maximum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * _.max([4, 2, 8, 6]);\n       * // => 8\n       *\n       * _.max([]);\n       * // => undefined\n       */\n      function max(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, gt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.max` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.maxBy(objects, function(o) { return o.n; });\n       * // => { 'n': 2 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.maxBy(objects, 'n');\n       * // => { 'n': 2 }\n       */\n      function maxBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), gt)\n          : undefined;\n      }\n  \n      /**\n       * Computes the mean of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the mean.\n       * @example\n       *\n       * _.mean([4, 2, 8, 6]);\n       * // => 5\n       */\n      function mean(array) {\n        return sum(array) / (array ? array.length : 0);\n      }\n  \n      /**\n       * Computes the minimum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * _.min([4, 2, 8, 6]);\n       * // => 2\n       *\n       * _.min([]);\n       * // => undefined\n       */\n      function min(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, lt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.min` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.minBy(objects, function(o) { return o.n; });\n       * // => { 'n': 1 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.minBy(objects, 'n');\n       * // => { 'n': 1 }\n       */\n      function minBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), lt)\n          : undefined;\n      }\n  \n      /**\n       * Computes `number` rounded to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round.\n       * @param {number} [precision=0] The precision to round to.\n       * @returns {number} Returns the rounded number.\n       * @example\n       *\n       * _.round(4.006);\n       * // => 4\n       *\n       * _.round(4.006, 2);\n       * // => 4.01\n       *\n       * _.round(4060, -2);\n       * // => 4100\n       */\n      var round = createRound('round');\n  \n      /**\n       * Subtract two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} minuend The first number in a subtraction.\n       * @param {number} subtrahend The second number in a subtraction.\n       * @returns {number} Returns the difference.\n       * @example\n       *\n       * _.subtract(6, 4);\n       * // => 2\n       */\n      function subtract(minuend, subtrahend) {\n        var result;\n        if (minuend === undefined && subtrahend === undefined) {\n          return 0;\n        }\n        if (minuend !== undefined) {\n          result = minuend;\n        }\n        if (subtrahend !== undefined) {\n          result = result === undefined ? subtrahend : (result - subtrahend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes the sum of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * _.sum([4, 2, 8, 6]);\n       * // => 20\n       */\n      function sum(array) {\n        return (array && array.length)\n          ? baseSum(array, identity)\n          : 0;\n      }\n  \n      /**\n       * This method is like `_.sum` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the value to be summed.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n       *\n       * _.sumBy(objects, function(o) { return o.n; });\n       * // => 20\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sumBy(objects, 'n');\n       * // => 20\n       */\n      function sumBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSum(array, getIteratee(iteratee))\n          : 0;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Ensure wrappers are instances of `baseLodash`.\n      lodash.prototype = baseLodash.prototype;\n  \n      LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n      LodashWrapper.prototype.constructor = LodashWrapper;\n  \n      LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n      LazyWrapper.prototype.constructor = LazyWrapper;\n  \n      // Avoid inheriting from `Object.prototype` when possible.\n      Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;\n  \n      // Add functions to the `MapCache`.\n      MapCache.prototype.clear = mapClear;\n      MapCache.prototype['delete'] = mapDelete;\n      MapCache.prototype.get = mapGet;\n      MapCache.prototype.has = mapHas;\n      MapCache.prototype.set = mapSet;\n  \n      // Add functions to the `SetCache`.\n      SetCache.prototype.push = cachePush;\n  \n      // Add functions to the `Stack` cache.\n      Stack.prototype.clear = stackClear;\n      Stack.prototype['delete'] = stackDelete;\n      Stack.prototype.get = stackGet;\n      Stack.prototype.has = stackHas;\n      Stack.prototype.set = stackSet;\n  \n      // Assign cache to `_.memoize`.\n      memoize.Cache = MapCache;\n  \n      // Add functions that return wrapped values when chaining.\n      lodash.after = after;\n      lodash.ary = ary;\n      lodash.assign = assign;\n      lodash.assignIn = assignIn;\n      lodash.assignInWith = assignInWith;\n      lodash.assignWith = assignWith;\n      lodash.at = at;\n      lodash.before = before;\n      lodash.bind = bind;\n      lodash.bindAll = bindAll;\n      lodash.bindKey = bindKey;\n      lodash.castArray = castArray;\n      lodash.chain = chain;\n      lodash.chunk = chunk;\n      lodash.compact = compact;\n      lodash.concat = concat;\n      lodash.cond = cond;\n      lodash.conforms = conforms;\n      lodash.constant = constant;\n      lodash.countBy = countBy;\n      lodash.create = create;\n      lodash.curry = curry;\n      lodash.curryRight = curryRight;\n      lodash.debounce = debounce;\n      lodash.defaults = defaults;\n      lodash.defaultsDeep = defaultsDeep;\n      lodash.defer = defer;\n      lodash.delay = delay;\n      lodash.difference = difference;\n      lodash.differenceBy = differenceBy;\n      lodash.differenceWith = differenceWith;\n      lodash.drop = drop;\n      lodash.dropRight = dropRight;\n      lodash.dropRightWhile = dropRightWhile;\n      lodash.dropWhile = dropWhile;\n      lodash.fill = fill;\n      lodash.filter = filter;\n      lodash.flatMap = flatMap;\n      lodash.flatten = flatten;\n      lodash.flattenDeep = flattenDeep;\n      lodash.flattenDepth = flattenDepth;\n      lodash.flip = flip;\n      lodash.flow = flow;\n      lodash.flowRight = flowRight;\n      lodash.fromPairs = fromPairs;\n      lodash.functions = functions;\n      lodash.functionsIn = functionsIn;\n      lodash.groupBy = groupBy;\n      lodash.initial = initial;\n      lodash.intersection = intersection;\n      lodash.intersectionBy = intersectionBy;\n      lodash.intersectionWith = intersectionWith;\n      lodash.invert = invert;\n      lodash.invertBy = invertBy;\n      lodash.invokeMap = invokeMap;\n      lodash.iteratee = iteratee;\n      lodash.keyBy = keyBy;\n      lodash.keys = keys;\n      lodash.keysIn = keysIn;\n      lodash.map = map;\n      lodash.mapKeys = mapKeys;\n      lodash.mapValues = mapValues;\n      lodash.matches = matches;\n      lodash.matchesProperty = matchesProperty;\n      lodash.memoize = memoize;\n      lodash.merge = merge;\n      lodash.mergeWith = mergeWith;\n      lodash.method = method;\n      lodash.methodOf = methodOf;\n      lodash.mixin = mixin;\n      lodash.negate = negate;\n      lodash.nthArg = nthArg;\n      lodash.omit = omit;\n      lodash.omitBy = omitBy;\n      lodash.once = once;\n      lodash.orderBy = orderBy;\n      lodash.over = over;\n      lodash.overArgs = overArgs;\n      lodash.overEvery = overEvery;\n      lodash.overSome = overSome;\n      lodash.partial = partial;\n      lodash.partialRight = partialRight;\n      lodash.partition = partition;\n      lodash.pick = pick;\n      lodash.pickBy = pickBy;\n      lodash.property = property;\n      lodash.propertyOf = propertyOf;\n      lodash.pull = pull;\n      lodash.pullAll = pullAll;\n      lodash.pullAllBy = pullAllBy;\n      lodash.pullAt = pullAt;\n      lodash.range = range;\n      lodash.rangeRight = rangeRight;\n      lodash.rearg = rearg;\n      lodash.reject = reject;\n      lodash.remove = remove;\n      lodash.rest = rest;\n      lodash.reverse = reverse;\n      lodash.sampleSize = sampleSize;\n      lodash.set = set;\n      lodash.setWith = setWith;\n      lodash.shuffle = shuffle;\n      lodash.slice = slice;\n      lodash.sortBy = sortBy;\n      lodash.sortedUniq = sortedUniq;\n      lodash.sortedUniqBy = sortedUniqBy;\n      lodash.split = split;\n      lodash.spread = spread;\n      lodash.tail = tail;\n      lodash.take = take;\n      lodash.takeRight = takeRight;\n      lodash.takeRightWhile = takeRightWhile;\n      lodash.takeWhile = takeWhile;\n      lodash.tap = tap;\n      lodash.throttle = throttle;\n      lodash.thru = thru;\n      lodash.toArray = toArray;\n      lodash.toPairs = toPairs;\n      lodash.toPairsIn = toPairsIn;\n      lodash.toPath = toPath;\n      lodash.toPlainObject = toPlainObject;\n      lodash.transform = transform;\n      lodash.unary = unary;\n      lodash.union = union;\n      lodash.unionBy = unionBy;\n      lodash.unionWith = unionWith;\n      lodash.uniq = uniq;\n      lodash.uniqBy = uniqBy;\n      lodash.uniqWith = uniqWith;\n      lodash.unset = unset;\n      lodash.unzip = unzip;\n      lodash.unzipWith = unzipWith;\n      lodash.values = values;\n      lodash.valuesIn = valuesIn;\n      lodash.without = without;\n      lodash.words = words;\n      lodash.wrap = wrap;\n      lodash.xor = xor;\n      lodash.xorBy = xorBy;\n      lodash.xorWith = xorWith;\n      lodash.zip = zip;\n      lodash.zipObject = zipObject;\n      lodash.zipObjectDeep = zipObjectDeep;\n      lodash.zipWith = zipWith;\n  \n      // Add aliases.\n      lodash.extend = assignIn;\n      lodash.extendWith = assignInWith;\n  \n      // Add functions to `lodash.prototype`.\n      mixin(lodash, lodash);\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Add functions that return unwrapped values when chaining.\n      lodash.add = add;\n      lodash.attempt = attempt;\n      lodash.camelCase = camelCase;\n      lodash.capitalize = capitalize;\n      lodash.ceil = ceil;\n      lodash.clamp = clamp;\n      lodash.clone = clone;\n      lodash.cloneDeep = cloneDeep;\n      lodash.cloneDeepWith = cloneDeepWith;\n      lodash.cloneWith = cloneWith;\n      lodash.deburr = deburr;\n      lodash.endsWith = endsWith;\n      lodash.eq = eq;\n      lodash.escape = escape;\n      lodash.escapeRegExp = escapeRegExp;\n      lodash.every = every;\n      lodash.find = find;\n      lodash.findIndex = findIndex;\n      lodash.findKey = findKey;\n      lodash.findLast = findLast;\n      lodash.findLastIndex = findLastIndex;\n      lodash.findLastKey = findLastKey;\n      lodash.floor = floor;\n      lodash.forEach = forEach;\n      lodash.forEachRight = forEachRight;\n      lodash.forIn = forIn;\n      lodash.forInRight = forInRight;\n      lodash.forOwn = forOwn;\n      lodash.forOwnRight = forOwnRight;\n      lodash.get = get;\n      lodash.gt = gt;\n      lodash.gte = gte;\n      lodash.has = has;\n      lodash.hasIn = hasIn;\n      lodash.head = head;\n      lodash.identity = identity;\n      lodash.includes = includes;\n      lodash.indexOf = indexOf;\n      lodash.inRange = inRange;\n      lodash.invoke = invoke;\n      lodash.isArguments = isArguments;\n      lodash.isArray = isArray;\n      lodash.isArrayBuffer = isArrayBuffer;\n      lodash.isArrayLike = isArrayLike;\n      lodash.isArrayLikeObject = isArrayLikeObject;\n      lodash.isBoolean = isBoolean;\n      lodash.isBuffer = isBuffer;\n      lodash.isDate = isDate;\n      lodash.isElement = isElement;\n      lodash.isEmpty = isEmpty;\n      lodash.isEqual = isEqual;\n      lodash.isEqualWith = isEqualWith;\n      lodash.isError = isError;\n      lodash.isFinite = isFinite;\n      lodash.isFunction = isFunction;\n      lodash.isInteger = isInteger;\n      lodash.isLength = isLength;\n      lodash.isMap = isMap;\n      lodash.isMatch = isMatch;\n      lodash.isMatchWith = isMatchWith;\n      lodash.isNaN = isNaN;\n      lodash.isNative = isNative;\n      lodash.isNil = isNil;\n      lodash.isNull = isNull;\n      lodash.isNumber = isNumber;\n      lodash.isObject = isObject;\n      lodash.isObjectLike = isObjectLike;\n      lodash.isPlainObject = isPlainObject;\n      lodash.isRegExp = isRegExp;\n      lodash.isSafeInteger = isSafeInteger;\n      lodash.isSet = isSet;\n      lodash.isString = isString;\n      lodash.isSymbol = isSymbol;\n      lodash.isTypedArray = isTypedArray;\n      lodash.isUndefined = isUndefined;\n      lodash.isWeakMap = isWeakMap;\n      lodash.isWeakSet = isWeakSet;\n      lodash.join = join;\n      lodash.kebabCase = kebabCase;\n      lodash.last = last;\n      lodash.lastIndexOf = lastIndexOf;\n      lodash.lowerCase = lowerCase;\n      lodash.lowerFirst = lowerFirst;\n      lodash.lt = lt;\n      lodash.lte = lte;\n      lodash.max = max;\n      lodash.maxBy = maxBy;\n      lodash.mean = mean;\n      lodash.min = min;\n      lodash.minBy = minBy;\n      lodash.noConflict = noConflict;\n      lodash.noop = noop;\n      lodash.now = now;\n      lodash.pad = pad;\n      lodash.padEnd = padEnd;\n      lodash.padStart = padStart;\n      lodash.parseInt = parseInt;\n      lodash.random = random;\n      lodash.reduce = reduce;\n      lodash.reduceRight = reduceRight;\n      lodash.repeat = repeat;\n      lodash.replace = replace;\n      lodash.result = result;\n      lodash.round = round;\n      lodash.runInContext = runInContext;\n      lodash.sample = sample;\n      lodash.size = size;\n      lodash.snakeCase = snakeCase;\n      lodash.some = some;\n      lodash.sortedIndex = sortedIndex;\n      lodash.sortedIndexBy = sortedIndexBy;\n      lodash.sortedIndexOf = sortedIndexOf;\n      lodash.sortedLastIndex = sortedLastIndex;\n      lodash.sortedLastIndexBy = sortedLastIndexBy;\n      lodash.sortedLastIndexOf = sortedLastIndexOf;\n      lodash.startCase = startCase;\n      lodash.startsWith = startsWith;\n      lodash.subtract = subtract;\n      lodash.sum = sum;\n      lodash.sumBy = sumBy;\n      lodash.template = template;\n      lodash.times = times;\n      lodash.toInteger = toInteger;\n      lodash.toLength = toLength;\n      lodash.toLower = toLower;\n      lodash.toNumber = toNumber;\n      lodash.toSafeInteger = toSafeInteger;\n      lodash.toString = toString;\n      lodash.toUpper = toUpper;\n      lodash.trim = trim;\n      lodash.trimEnd = trimEnd;\n      lodash.trimStart = trimStart;\n      lodash.truncate = truncate;\n      lodash.unescape = unescape;\n      lodash.uniqueId = uniqueId;\n      lodash.upperCase = upperCase;\n      lodash.upperFirst = upperFirst;\n  \n      // Add aliases.\n      lodash.each = forEach;\n      lodash.eachRight = forEachRight;\n      lodash.first = head;\n  \n      mixin(lodash, (function() {\n        var source = {};\n        baseForOwn(lodash, function(func, methodName) {\n          if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n            source[methodName] = func;\n          }\n        });\n        return source;\n      }()), { 'chain': false });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf _\n       * @type {string}\n       */\n      lodash.VERSION = VERSION;\n  \n      // Assign default placeholders.\n      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n        lodash[methodName].placeholder = lodash;\n      });\n  \n      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n      arrayEach(['drop', 'take'], function(methodName, index) {\n        LazyWrapper.prototype[methodName] = function(n) {\n          var filtered = this.__filtered__;\n          if (filtered && !index) {\n            return new LazyWrapper(this);\n          }\n          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n  \n          var result = this.clone();\n          if (filtered) {\n            result.__takeCount__ = nativeMin(n, result.__takeCount__);\n          } else {\n            result.__views__.push({\n              'size': nativeMin(n, MAX_ARRAY_LENGTH),\n              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n            });\n          }\n          return result;\n        };\n  \n        LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n          return this.reverse()[methodName](n).reverse();\n        };\n      });\n  \n      // Add `LazyWrapper` methods that accept an `iteratee` value.\n      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n        var type = index + 1,\n            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n  \n        LazyWrapper.prototype[methodName] = function(iteratee) {\n          var result = this.clone();\n          result.__iteratees__.push({\n            'iteratee': getIteratee(iteratee, 3),\n            'type': type\n          });\n          result.__filtered__ = result.__filtered__ || isFilter;\n          return result;\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.head` and `_.last`.\n      arrayEach(['head', 'last'], function(methodName, index) {\n        var takeName = 'take' + (index ? 'Right' : '');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this[takeName](1).value()[0];\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n      arrayEach(['initial', 'tail'], function(methodName, index) {\n        var dropName = 'drop' + (index ? '' : 'Right');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n        };\n      });\n  \n      LazyWrapper.prototype.compact = function() {\n        return this.filter(identity);\n      };\n  \n      LazyWrapper.prototype.find = function(predicate) {\n        return this.filter(predicate).head();\n      };\n  \n      LazyWrapper.prototype.findLast = function(predicate) {\n        return this.reverse().find(predicate);\n      };\n  \n      LazyWrapper.prototype.invokeMap = rest(function(path, args) {\n        if (typeof path == 'function') {\n          return new LazyWrapper(this);\n        }\n        return this.map(function(value) {\n          return baseInvoke(value, path, args);\n        });\n      });\n  \n      LazyWrapper.prototype.reject = function(predicate) {\n        predicate = getIteratee(predicate, 3);\n        return this.filter(function(value) {\n          return !predicate(value);\n        });\n      };\n  \n      LazyWrapper.prototype.slice = function(start, end) {\n        start = toInteger(start);\n  \n        var result = this;\n        if (result.__filtered__ && (start > 0 || end < 0)) {\n          return new LazyWrapper(result);\n        }\n        if (start < 0) {\n          result = result.takeRight(-start);\n        } else if (start) {\n          result = result.drop(start);\n        }\n        if (end !== undefined) {\n          end = toInteger(end);\n          result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n        }\n        return result;\n      };\n  \n      LazyWrapper.prototype.takeRightWhile = function(predicate) {\n        return this.reverse().takeWhile(predicate).reverse();\n      };\n  \n      LazyWrapper.prototype.toArray = function() {\n        return this.take(MAX_ARRAY_LENGTH);\n      };\n  \n      // Add `LazyWrapper` methods to `lodash.prototype`.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n            isTaker = /^(?:head|last)$/.test(methodName),\n            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n            retUnwrapped = isTaker || /^find/.test(methodName);\n  \n        if (!lodashFunc) {\n          return;\n        }\n        lodash.prototype[methodName] = function() {\n          var value = this.__wrapped__,\n              args = isTaker ? [1] : arguments,\n              isLazy = value instanceof LazyWrapper,\n              iteratee = args[0],\n              useLazy = isLazy || isArray(value);\n  \n          var interceptor = function(value) {\n            var result = lodashFunc.apply(lodash, arrayPush([value], args));\n            return (isTaker && chainAll) ? result[0] : result;\n          };\n  \n          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n            // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n            isLazy = useLazy = false;\n          }\n          var chainAll = this.__chain__,\n              isHybrid = !!this.__actions__.length,\n              isUnwrapped = retUnwrapped && !chainAll,\n              onlyLazy = isLazy && !isHybrid;\n  \n          if (!retUnwrapped && useLazy) {\n            value = onlyLazy ? value : new LazyWrapper(this);\n            var result = func.apply(value, args);\n            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n            return new LodashWrapper(result, chainAll);\n          }\n          if (isUnwrapped && onlyLazy) {\n            return func.apply(this, args);\n          }\n          result = this.thru(interceptor);\n          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n        };\n      });\n  \n      // Add `Array` and `String` methods to `lodash.prototype`.\n      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n        var func = arrayProto[methodName],\n            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n            retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n  \n        lodash.prototype[methodName] = function() {\n          var args = arguments;\n          if (retUnwrapped && !this.__chain__) {\n            return func.apply(this.value(), args);\n          }\n          return this[chainName](function(value) {\n            return func.apply(value, args);\n          });\n        };\n      });\n  \n      // Map minified function names to their real names.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var lodashFunc = lodash[methodName];\n        if (lodashFunc) {\n          var key = (lodashFunc.name + ''),\n              names = realNames[key] || (realNames[key] = []);\n  \n          names.push({ 'name': methodName, 'func': lodashFunc });\n        }\n      });\n  \n      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{\n        'name': 'wrapper',\n        'func': undefined\n      }];\n  \n      // Add functions to the lazy wrapper.\n      LazyWrapper.prototype.clone = lazyClone;\n      LazyWrapper.prototype.reverse = lazyReverse;\n      LazyWrapper.prototype.value = lazyValue;\n  \n      // Add chaining functions to the `lodash` wrapper.\n      lodash.prototype.at = wrapperAt;\n      lodash.prototype.chain = wrapperChain;\n      lodash.prototype.commit = wrapperCommit;\n      lodash.prototype.flatMap = wrapperFlatMap;\n      lodash.prototype.next = wrapperNext;\n      lodash.prototype.plant = wrapperPlant;\n      lodash.prototype.reverse = wrapperReverse;\n      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n  \n      if (iteratorSymbol) {\n        lodash.prototype[iteratorSymbol] = wrapperToIterator;\n      }\n      return lodash;\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    // Export lodash.\n    var _ = runInContext();\n  \n    // Expose lodash on the free variable `window` or `self` when available. This\n    // prevents errors in cases where lodash is loaded by a script tag in the presence\n    // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.\n    (freeWindow || freeSelf || {})._ = _;\n  \n    // Some AMD build optimizers like r.js check for condition patterns like the following:\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      // Define as an anonymous module so, through path mapping, it can be\n      // referenced as the \"underscore\" module.\n      define(function() {\n        return _;\n      });\n    }\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    else if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = _)._ = _;\n      }\n      // Export for CommonJS support.\n      freeExports._ = _;\n    }\n    else {\n      // Export to the global object.\n      root._ = _;\n    }\n  }.call(this));","date":"2019-07-16T02:31:25.431Z","updated":"2019-07-16T02:31:25.431Z","path":"demo/js/lodash.js","layout":"false","title":"","comments":1,"_id":"cjzcl76b2003idkhsxdxev9ke","content":"/**\n * @license\n * lodash 4.5.0 (Custom Build) <https: lodash.com=\"\">\n * Build: `lodash -o ./dist/lodash.js`\n * Copyright 2012-2016 The Dojo Foundation <http: dojofoundation.org=\"\">\n * Based on Underscore.js 1.8.3 <http: underscorejs.org=\"\" license=\"\">\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https: lodash.com=\"\" license=\"\">\n */\n;(function() {\n\n    /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n    var undefined;\n  \n    /** Used as the semantic version number. */\n    var VERSION = '4.5.0';\n  \n    /** Used to compose bitmasks for wrapper metadata. */\n    var BIND_FLAG = 1,\n        BIND_KEY_FLAG = 2,\n        CURRY_BOUND_FLAG = 4,\n        CURRY_FLAG = 8,\n        CURRY_RIGHT_FLAG = 16,\n        PARTIAL_FLAG = 32,\n        PARTIAL_RIGHT_FLAG = 64,\n        ARY_FLAG = 128,\n        REARG_FLAG = 256,\n        FLIP_FLAG = 512;\n  \n    /** Used to compose bitmasks for comparison styles. */\n    var UNORDERED_COMPARE_FLAG = 1,\n        PARTIAL_COMPARE_FLAG = 2;\n  \n    /** Used as default options for `_.truncate`. */\n    var DEFAULT_TRUNC_LENGTH = 30,\n        DEFAULT_TRUNC_OMISSION = '...';\n  \n    /** Used to detect hot functions by number of calls within a span of milliseconds. */\n    var HOT_COUNT = 150,\n        HOT_SPAN = 16;\n  \n    /** Used as the size to enable large array optimizations. */\n    var LARGE_ARRAY_SIZE = 200;\n  \n    /** Used to indicate the type of lazy iteratees. */\n    var LAZY_FILTER_FLAG = 1,\n        LAZY_MAP_FLAG = 2,\n        LAZY_WHILE_FLAG = 3;\n  \n    /** Used as the `TypeError` message for \"Functions\" methods. */\n    var FUNC_ERROR_TEXT = 'Expected a function';\n  \n    /** Used to stand-in for `undefined` hash values. */\n    var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  \n    /** Used as references for various `Number` constants. */\n    var INFINITY = 1 / 0,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_INTEGER = 1.7976931348623157e+308,\n        NAN = 0 / 0;\n  \n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n  \n    /** Used as the internal argument placeholder. */\n    var PLACEHOLDER = '__lodash_placeholder__';\n  \n    /** `Object#toString` result references. */\n    var argsTag = '[object Arguments]',\n        arrayTag = '[object Array]',\n        boolTag = '[object Boolean]',\n        dateTag = '[object Date]',\n        errorTag = '[object Error]',\n        funcTag = '[object Function]',\n        genTag = '[object GeneratorFunction]',\n        mapTag = '[object Map]',\n        numberTag = '[object Number]',\n        objectTag = '[object Object]',\n        regexpTag = '[object RegExp]',\n        setTag = '[object Set]',\n        stringTag = '[object String]',\n        symbolTag = '[object Symbol]',\n        weakMapTag = '[object WeakMap]',\n        weakSetTag = '[object WeakSet]';\n  \n    var arrayBufferTag = '[object ArrayBuffer]',\n        float32Tag = '[object Float32Array]',\n        float64Tag = '[object Float64Array]',\n        int8Tag = '[object Int8Array]',\n        int16Tag = '[object Int16Array]',\n        int32Tag = '[object Int32Array]',\n        uint8Tag = '[object Uint8Array]',\n        uint8ClampedTag = '[object Uint8ClampedArray]',\n        uint16Tag = '[object Uint16Array]',\n        uint32Tag = '[object Uint32Array]';\n  \n    /** Used to match empty string literals in compiled template source. */\n    var reEmptyStringLeading = /\\b__p \\+= '';/g,\n        reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n        reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n  \n    /** Used to match HTML entities and HTML characters. */\n    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n        reUnescapedHtml = /[&<>\"'`]/g,\n        reHasEscapedHtml = RegExp(reEscapedHtml.source),\n        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n  \n    /** Used to match template delimiters. */\n    var reEscape = /<%-([\\s\\s]+?)%>/g,\n        reEvaluate = /<%([\\s\\s]+?)%>/g,\n        reInterpolate = /<%=([\\s\\s]+?)%>/g;\n  \n    /** Used to match property names within property paths. */\n    var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        reIsPlainProp = /^\\w*$/,\n        rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n  \n    /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n        reHasRegExpChar = RegExp(reRegExpChar.source);\n  \n    /** Used to match leading and trailing whitespace. */\n    var reTrim = /^\\s+|\\s+$/g,\n        reTrimStart = /^\\s+/,\n        reTrimEnd = /\\s+$/;\n  \n    /** Used to match backslashes in property paths. */\n    var reEscapeChar = /\\\\(\\\\)?/g;\n  \n    /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n    var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n  \n    /** Used to match `RegExp` flags from their coerced string values. */\n    var reFlags = /\\w*$/;\n  \n    /** Used to detect hexadecimal string values. */\n    var reHasHexPrefix = /^0x/i;\n  \n    /** Used to detect bad signed hexadecimal string values. */\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  \n    /** Used to detect binary string values. */\n    var reIsBinary = /^0b[01]+$/i;\n  \n    /** Used to detect host constructors (Safari > 5). */\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  \n    /** Used to detect octal string values. */\n    var reIsOctal = /^0o[0-7]+$/i;\n  \n    /** Used to detect unsigned integer values. */\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  \n    /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n    var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n  \n    /** Used to ensure capturing order of template delimiters. */\n    var reNoMatch = /($^)/;\n  \n    /** Used to match unescaped characters in compiled string literals. */\n    var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n  \n    /** Used to compose unicode character classes. */\n    var rsAstralRange = '\\\\ud800-\\\\udfff',\n        rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n        rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n        rsDingbatRange = '\\\\u2700-\\\\u27bf',\n        rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n        rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n        rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n        rsQuoteRange = '\\\\u2018\\\\u2019\\\\u201c\\\\u201d',\n        rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n        rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n        rsVarRange = '\\\\ufe0e\\\\ufe0f',\n        rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;\n  \n    /** Used to compose unicode capture groups. */\n    var rsAstral = '[' + rsAstralRange + ']',\n        rsBreak = '[' + rsBreakRange + ']',\n        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n        rsDigits = '\\\\d+',\n        rsDingbat = '[' + rsDingbatRange + ']',\n        rsLower = '[' + rsLowerRange + ']',\n        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n        rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n        rsNonAstral = '[^' + rsAstralRange + ']',\n        rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n        rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n        rsUpper = '[' + rsUpperRange + ']',\n        rsZWJ = '\\\\u200d';\n  \n    /** Used to compose unicode regexes. */\n    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n        reOptMod = rsModifier + '?',\n        rsOptVar = '[' + rsVarRange + ']?',\n        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n        rsSeq = rsOptVar + reOptMod + rsOptJoin,\n        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  \n    /**\n     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n     */\n    var reComboMark = RegExp(rsCombo, 'g');\n  \n    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  \n    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n  \n    /** Used to match non-compound words composed of alphanumeric characters. */\n    var reBasicWord = /[a-zA-Z0-9]+/g;\n  \n    /** Used to match complex or compound words. */\n    var reComplexWord = RegExp([\n      rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n      rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n      rsUpper + '?' + rsLowerMisc + '+',\n      rsUpper + '+',\n      rsDigits,\n      rsEmoji\n    ].join('|'), 'g');\n  \n    /** Used to detect strings that need a more robust regexp to match words. */\n    var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n  \n    /** Used to assign default `context` object properties. */\n    var contextProps = [\n      'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n      'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',\n      'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n    ];\n  \n    /** Used to make template sourceURLs easier to identify. */\n    var templateCounter = -1;\n  \n    /** Used to identify `toStringTag` values of typed arrays. */\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n    typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n    typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n    typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n    typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n    typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n    typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  \n    /** Used to identify `toStringTag` values supported by `_.clone`. */\n    var cloneableTags = {};\n    cloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n    cloneableTags[dateTag] = cloneableTags[float32Tag] =\n    cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n    cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n    cloneableTags[mapTag] = cloneableTags[numberTag] =\n    cloneableTags[objectTag] = cloneableTags[regexpTag] =\n    cloneableTags[setTag] = cloneableTags[stringTag] =\n    cloneableTags[symbolTag] = cloneableTags[uint8Tag] =\n    cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =\n    cloneableTags[uint32Tag] = true;\n    cloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n  \n    /** Used to map latin-1 supplementary letters to basic latin letters. */\n    var deburredLetters = {\n      '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n      '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n      '\\xc7': 'C',  '\\xe7': 'c',\n      '\\xd0': 'D',  '\\xf0': 'd',\n      '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n      '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n      '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n      '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n      '\\xd1': 'N',  '\\xf1': 'n',\n      '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n      '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n      '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n      '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n      '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n      '\\xc6': 'Ae', '\\xe6': 'ae',\n      '\\xde': 'Th', '\\xfe': 'th',\n      '\\xdf': 'ss'\n    };\n  \n    /** Used to map characters to HTML entities. */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',=\"\" '=\"\">': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '`': '&#96;'\n    };\n  \n    /** Used to map HTML entities to characters. */\n    var htmlUnescapes = {\n      '&amp;': '&',\n      '&lt;': '<', '&gt;':=\"\" '=\"\">',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#96;': '`'\n    };\n  \n    /** Used to determine if values are of the language type `Object`. */\n    var objectTypes = {\n      'function': true,\n      'object': true\n    };\n  \n    /** Used to escape characters for inclusion in compiled string literals. */\n    var stringEscapes = {\n      '\\\\': '\\\\',\n      \"'\": \"'\",\n      '\\n': 'n',\n      '\\r': 'r',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    /** Built-in method references without a dependency on `root`. */\n    var freeParseFloat = parseFloat,\n        freeParseInt = parseInt;\n  \n    /** Detect free variable `exports`. */\n    var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n      ? exports\n      : undefined;\n  \n    /** Detect free variable `module`. */\n    var freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n      ? module\n      : undefined;\n  \n    /** Detect the popular CommonJS extension `module.exports`. */\n    var moduleExports = (freeModule && freeModule.exports === freeExports)\n      ? freeExports\n      : undefined;\n  \n    /** Detect free variable `global` from Node.js. */\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n  \n    /** Detect free variable `self`. */\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  \n    /** Detect free variable `window`. */\n    var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  \n    /** Detect `this` as the global object. */\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  \n    /**\n     * Used as a reference to the global object.\n     *\n     * The `this` value is used if it's the global object to avoid Greasemonkey's\n     * restricted `window` object, otherwise the `window` object is used.\n     */\n    var root = freeGlobal ||\n      ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n        freeSelf || thisGlobal || Function('return this')();\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Adds the key-value `pair` to `map`.\n     *\n     * @private\n     * @param {Object} map The map to modify.\n     * @param {Array} pair The key-value pair to add.\n     * @returns {Object} Returns `map`.\n     */\n    function addMapEntry(map, pair) {\n      map.set(pair[0], pair[1]);\n      return map;\n    }\n  \n    /**\n     * Adds `value` to `set`.\n     *\n     * @private\n     * @param {Object} set The set to modify.\n     * @param {*} value The value to add.\n     * @returns {Object} Returns `set`.\n     */\n    function addSetEntry(set, value) {\n      set.add(value);\n      return set;\n    }\n  \n    /**\n     * A faster alternative to `Function#apply`, this function invokes `func`\n     * with the `this` binding of `thisArg` and the arguments of `args`.\n     *\n     * @private\n     * @param {Function} func The function to invoke.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} args The arguments to invoke `func` with.\n     * @returns {*} Returns the result of `func`.\n     */\n    function apply(func, thisArg, args) {\n      var length = args.length;\n      switch (length) {\n        case 0: return func.call(thisArg);\n        case 1: return func.call(thisArg, args[0]);\n        case 2: return func.call(thisArg, args[0], args[1]);\n        case 3: return func.call(thisArg, args[0], args[1], args[2]);\n      }\n      return func.apply(thisArg, args);\n    }\n  \n    /**\n     * A specialized version of `baseAggregator` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function arrayAggregator(array, setter, iteratee, accumulator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index];\n        setter(accumulator, value, iteratee(value), array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * Creates a new array concatenating `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The first array to concatenate.\n     * @param {Array} other The second array to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n  \n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.forEach` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n  \n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.every` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    /**\n     * A specialized version of `_.filter` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.includes` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludes(array, value) {\n      return !!array.length && baseIndexOf(array, value, 0) > -1;\n    }\n  \n    /**\n     * A specialized version of `_.includesWith` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @param {Function} comparator The comparator invoked per element.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludesWith(array, value, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (comparator(value, array[index])) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * A specialized version of `_.map` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n  \n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n  \n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n  \n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.reduce` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initAccum) {\n      var index = -1,\n          length = array.length;\n  \n      if (initAccum && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n      var length = array.length;\n      if (initAccum && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.some` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n  \n        if (current != null && (computed === undefined\n              ? current === current\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of methods like `_.find` and `_.findKey`, without\n     * support for iteratee shorthands, which iterates over `collection` using\n     * `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseFindIndex(array, predicate, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} fromIndex The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseIndexOf(array, value, fromIndex) {\n      if (value !== value) {\n        return indexOfNaN(array, fromIndex);\n      }\n      var index = fromIndex - 1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight`, without support\n     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initAccum\n          ? (initAccum = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n  \n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n  \n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n  \n    /**\n     * The base implementation of `_.sum` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(array, iteratee) {\n      var result,\n          index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var current = iteratee(array[index]);\n        if (current !== undefined) {\n          result = result === undefined ? current : (result + current);\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.times` without support for iteratee shorthands\n     * or max array length checks.\n     *\n     * @private\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     */\n    function baseTimes(n, iteratee) {\n      var index = -1,\n          result = Array(n);\n  \n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n     * of key-value pairs for `object` corresponding to the property names of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the new array of key-value pairs.\n     */\n    function baseToPairs(object, props) {\n      return arrayMap(props, function(key) {\n        return [key, object[key]];\n      });\n    }\n  \n    /**\n     * The base implementation of `_.unary` without support for storing wrapper metadata.\n     *\n     * @private\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new function.\n     */\n    function baseUnary(func) {\n      return function(value) {\n        return func(value);\n      };\n    }\n  \n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      return arrayMap(props, function(key) {\n        return object[key];\n      });\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the first unmatched string symbol.\n     */\n    function charsStartIndex(strSymbols, chrSymbols) {\n      var index = -1,\n          length = strSymbols.length;\n  \n      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the last unmatched string symbol.\n     */\n    function charsEndIndex(strSymbols, chrSymbols) {\n      var index = strSymbols.length;\n  \n      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Checks if `value` is a global object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n     */\n    function checkGlobal(value) {\n      return (value && value.Object === Object) ? value : null;\n    }\n  \n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsNull = value === null,\n            valIsUndef = value === undefined,\n            valIsReflexive = value === value;\n  \n        var othIsNull = other === null,\n            othIsUndef = other === undefined,\n            othIsReflexive = other === other;\n  \n        if ((value > other && !othIsNull) || !valIsReflexive ||\n            (valIsNull && !othIsUndef && othIsReflexive) ||\n            (valIsUndef && othIsReflexive)) {\n          return 1;\n        }\n        if ((value < other && !valIsNull) || !othIsReflexive ||\n            (othIsNull && !valIsUndef && valIsReflexive) ||\n            (othIsUndef && valIsReflexive)) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n  \n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n  \n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n  \n    /**\n     * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n     *\n     * @private\n     * @param {string} letter The matched letter to deburr.\n     * @returns {string} Returns the deburred letter.\n     */\n    function deburrLetter(letter) {\n      return deburredLetters[letter];\n    }\n  \n    /**\n     * Used by `_.escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(chr) {\n      return htmlEscapes[chr];\n    }\n  \n    /**\n     * Used by `_.template` to escape characters for inclusion in compiled string literals.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeStringChar(chr) {\n      return '\\\\' + stringEscapes[chr];\n    }\n  \n    /**\n     * Gets the index at which the first occurrence of `NaN` is found in `array`.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {number} fromIndex The index to search from.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n     */\n    function indexOfNaN(array, fromIndex, fromRight) {\n      var length = array.length,\n          index = fromIndex + (fromRight ? 0 : -1);\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        var other = array[index];\n        if (other !== other) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * Checks if `value` is a host object in IE < 9.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n     */\n    function isHostObject(value) {\n      // Many host objects are `Object` objects that can coerce to strings\n      // despite having improperly defined `toString` methods.\n      var result = false;\n      if (value != null && typeof value.toString != 'function') {\n        try {\n          result = !!(value + '');\n        } catch (e) {}\n      }\n      return result;\n    }\n  \n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n  \n    /**\n     * Converts `iterator` to an array.\n     *\n     * @private\n     * @param {Object} iterator The iterator to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function iteratorToArray(iterator) {\n      var data,\n          result = [];\n  \n      while (!(data = iterator.next()).done) {\n        result.push(data.value);\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `map` to an array.\n     *\n     * @private\n     * @param {Object} map The map to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function mapToArray(map) {\n      var index = -1,\n          result = Array(map.size);\n  \n      map.forEach(function(value, key) {\n        result[++index] = [key, value];\n      });\n      return result;\n    }\n  \n    /**\n     * Replaces all `placeholder` elements in `array` with an internal placeholder\n     * and returns an array of their indexes.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {*} placeholder The placeholder to replace.\n     * @returns {Array} Returns the new array of placeholder indexes.\n     */\n    function replaceHolders(array, placeholder) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        if (array[index] === placeholder) {\n          array[index] = PLACEHOLDER;\n          result[++resIndex] = index;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `set` to an array.\n     *\n     * @private\n     * @param {Object} set The set to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function setToArray(set) {\n      var index = -1,\n          result = Array(set.size);\n  \n      set.forEach(function(value) {\n        result[++index] = value;\n      });\n      return result;\n    }\n  \n    /**\n     * Gets the number of symbols in `string`.\n     *\n     * @private\n     * @param {string} string The string to inspect.\n     * @returns {number} Returns the string size.\n     */\n    function stringSize(string) {\n      if (!(string && reHasComplexSymbol.test(string))) {\n        return string.length;\n      }\n      var result = reComplexSymbol.lastIndex = 0;\n      while (reComplexSymbol.test(string)) {\n        result++;\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `string` to an array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function stringToArray(string) {\n      return string.match(reComplexSymbol);\n    }\n  \n    /**\n     * Used by `_.unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} chr The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(chr) {\n      return htmlUnescapes[chr];\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Create a new pristine `lodash` function using the `context` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Util\n     * @param {Object} [context=root] The context object.\n     * @returns {Function} Returns a new `lodash` function.\n     * @example\n     *\n     * _.mixin({ 'foo': _.constant('foo') });\n     *\n     * var lodash = _.runInContext();\n     * lodash.mixin({ 'bar': lodash.constant('bar') });\n     *\n     * _.isFunction(_.foo);\n     * // => true\n     * _.isFunction(_.bar);\n     * // => false\n     *\n     * lodash.isFunction(lodash.foo);\n     * // => false\n     * lodash.isFunction(lodash.bar);\n     * // => true\n     *\n     * // Use `context` to mock `Date#getTime` use in `_.now`.\n     * var mock = _.runInContext({\n     *   'Date': function() {\n     *     return { 'getTime': getTimeMock };\n     *   }\n     * });\n     *\n     * // Create a suped-up `defer` in Node.js.\n     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n     */\n    function runInContext(context) {\n      context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;\n  \n      /** Built-in constructor references. */\n      var Date = context.Date,\n          Error = context.Error,\n          Math = context.Math,\n          RegExp = context.RegExp,\n          TypeError = context.TypeError;\n  \n      /** Used for built-in method references. */\n      var arrayProto = context.Array.prototype,\n          objectProto = context.Object.prototype;\n  \n      /** Used to resolve the decompiled source of functions. */\n      var funcToString = context.Function.prototype.toString;\n  \n      /** Used to check objects for own properties. */\n      var hasOwnProperty = objectProto.hasOwnProperty;\n  \n      /** Used to generate unique IDs. */\n      var idCounter = 0;\n  \n      /** Used to infer the `Object` constructor. */\n      var objectCtorString = funcToString.call(Object);\n  \n      /**\n       * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n       * of values.\n       */\n      var objectToString = objectProto.toString;\n  \n      /** Used to restore the original `_` reference in `_.noConflict`. */\n      var oldDash = root._;\n  \n      /** Used to detect if a method is native. */\n      var reIsNative = RegExp('^' +\n        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n      );\n  \n      /** Built-in value references. */\n      var Buffer = moduleExports ? context.Buffer : undefined,\n          Reflect = context.Reflect,\n          Symbol = context.Symbol,\n          Uint8Array = context.Uint8Array,\n          clearTimeout = context.clearTimeout,\n          enumerate = Reflect ? Reflect.enumerate : undefined,\n          getPrototypeOf = Object.getPrototypeOf,\n          getOwnPropertySymbols = Object.getOwnPropertySymbols,\n          iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,\n          objectCreate = Object.create,\n          propertyIsEnumerable = objectProto.propertyIsEnumerable,\n          setTimeout = context.setTimeout,\n          splice = arrayProto.splice;\n  \n      /* Built-in method references for those with the same name as other `lodash` methods. */\n      var nativeCeil = Math.ceil,\n          nativeFloor = Math.floor,\n          nativeIsFinite = context.isFinite,\n          nativeJoin = arrayProto.join,\n          nativeKeys = Object.keys,\n          nativeMax = Math.max,\n          nativeMin = Math.min,\n          nativeParseInt = context.parseInt,\n          nativeRandom = Math.random,\n          nativeReverse = arrayProto.reverse;\n  \n      /* Built-in method references that are verified to be native. */\n      var Map = getNative(context, 'Map'),\n          Set = getNative(context, 'Set'),\n          WeakMap = getNative(context, 'WeakMap'),\n          nativeCreate = getNative(Object, 'create');\n  \n      /** Used to store function metadata. */\n      var metaMap = WeakMap && new WeakMap;\n  \n      /** Used to detect maps, sets, and weakmaps. */\n      var mapCtorString = Map ? funcToString.call(Map) : '',\n          setCtorString = Set ? funcToString.call(Set) : '',\n          weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';\n  \n      /** Used to convert symbols to primitives and strings. */\n      var symbolProto = Symbol ? Symbol.prototype : undefined,\n          symbolValueOf = Symbol ? symbolProto.valueOf : undefined,\n          symbolToString = Symbol ? symbolProto.toString : undefined;\n  \n      /** Used to lookup unminified function names. */\n      var realNames = {};\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object which wraps `value` to enable implicit method\n       * chaining. Methods that operate on and return arrays, collections, and\n       * functions can be chained together. Methods that retrieve a single value or\n       * may return a primitive value will automatically end the chain sequence and\n       * return the unwrapped value. Otherwise, the value must be unwrapped with\n       * `_#value`.\n       *\n       * Explicit chaining, which must be unwrapped with `_#value` in all cases,\n       * may be enabled using `_.chain`.\n       *\n       * The execution of chained methods is lazy, that is, it's deferred until\n       * `_#value` is implicitly or explicitly called.\n       *\n       * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n       * fusion is an optimization to merge iteratee calls; this avoids the creation\n       * of intermediate arrays and can greatly reduce the number of iteratee executions.\n       * Sections of a chain sequence qualify for shortcut fusion if the section is\n       * applied to an array of at least two hundred elements and any iteratees\n       * accept only one argument. The heuristic for whether a section qualifies\n       * for shortcut fusion is subject to change.\n       *\n       * Chaining is supported in custom builds as long as the `_#value` method is\n       * directly or indirectly included in the build.\n       *\n       * In addition to lodash methods, wrappers have `Array` and `String` methods.\n       *\n       * The wrapper `Array` methods are:\n       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n       *\n       * The wrapper `String` methods are:\n       * `replace` and `split`\n       *\n       * The wrapper methods that support shortcut fusion are:\n       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n       *\n       * The chainable wrapper methods are:\n       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,\n       * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,\n       * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flattenDepth`,\n       * `flip`, `flow`, `flowRight`, `fromPairs`, `functions`, `functionsIn`,\n       * `groupBy`, `initial`, `intersection`, `intersectionBy`, `intersectionWith`,\n       * `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`,\n       * `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`, `memoize`,\n       * `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`, `nthArg`,\n       * `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`, `overEvery`,\n       * `overSome`, `partial`, `partialRight`, `partition`, `pick`, `pickBy`, `plant`,\n       * `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAt`, `push`,\n       * `range`, `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`,\n       * `sampleSize`, `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`,\n       * `splice`, `spread`, `tail`, `take`, `takeRight`, `takeRightWhile`,\n       * `takeWhile`, `tap`, `throttle`, `thru`, `toArray`, `toPairs`, `toPairsIn`,\n       * `toPath`, `toPlainObject`, `transform`, `unary`, `union`, `unionBy`,\n       * `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`, `unshift`, `unzip`,\n       * `unzipWith`, `values`, `valuesIn`, `without`, `wrap`, `xor`, `xorBy`,\n       * `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, and `zipWith`\n       *\n       * The wrapper methods that are **not** chainable by default are:\n       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,\n       * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n       * `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`, `forIn`,\n       * `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`,\n       * `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`,\n       * `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,\n       * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,\n       * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,\n       * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,\n       * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,\n       * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,\n       * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,\n       * `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`,\n       * `now`, `pad`, `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`,\n       * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `sample`,\n       * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`,\n       * `sortedLastIndex`, `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`,\n       * `sum`, `sumBy`, `template`, `times`, `toLower`, `toInteger`, `toLength`,\n       * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,\n       * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,\n       * `value`, and `words`\n       *\n       * @name _\n       * @constructor\n       * @category Seq\n       * @param {*} value The value to wrap in a `lodash` instance.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2, 3]);\n       *\n       * // Returns an unwrapped value.\n       * wrapped.reduce(_.add);\n       * // => 6\n       *\n       * // Returns a wrapped value.\n       * var squares = wrapped.map(square);\n       *\n       * _.isArray(squares);\n       * // => false\n       *\n       * _.isArray(squares.value());\n       * // => true\n       */\n      function lodash(value) {\n        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n          if (value instanceof LodashWrapper) {\n            return value;\n          }\n          if (hasOwnProperty.call(value, '__wrapped__')) {\n            return wrapperClone(value);\n          }\n        }\n        return new LodashWrapper(value);\n      }\n  \n      /**\n       * The function whose prototype all chaining wrappers inherit from.\n       *\n       * @private\n       */\n      function baseLodash() {\n        // No operation performed.\n      }\n  \n      /**\n       * The base constructor for creating `lodash` wrapper objects.\n       *\n       * @private\n       * @param {*} value The value to wrap.\n       * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n       */\n      function LodashWrapper(value, chainAll) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__chain__ = !!chainAll;\n        this.__index__ = 0;\n        this.__values__ = undefined;\n      }\n  \n      /**\n       * By default, the template delimiters used by lodash are like those in\n       * embedded Ruby (ERB). Change the following template settings to use\n       * alternative delimiters.\n       *\n       * @static\n       * @memberOf _\n       * @type {Object}\n       */\n      lodash.templateSettings = {\n  \n        /**\n         * Used to detect `data` property values to be HTML-escaped.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'escape': reEscape,\n  \n        /**\n         * Used to detect code to be evaluated.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'evaluate': reEvaluate,\n  \n        /**\n         * Used to detect `data` property values to inject.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'interpolate': reInterpolate,\n  \n        /**\n         * Used to reference the data object in the template text.\n         *\n         * @memberOf _.templateSettings\n         * @type {string}\n         */\n        'variable': '',\n  \n        /**\n         * Used to import variables into the compiled template.\n         *\n         * @memberOf _.templateSettings\n         * @type {Object}\n         */\n        'imports': {\n  \n          /**\n           * A reference to the `lodash` function.\n           *\n           * @memberOf _.templateSettings.imports\n           * @type {Function}\n           */\n          '_': lodash\n        }\n      };\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n       *\n       * @private\n       * @constructor\n       * @param {*} value The value to wrap.\n       */\n      function LazyWrapper(value) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__dir__ = 1;\n        this.__filtered__ = false;\n        this.__iteratees__ = [];\n        this.__takeCount__ = MAX_ARRAY_LENGTH;\n        this.__views__ = [];\n      }\n  \n      /**\n       * Creates a clone of the lazy wrapper object.\n       *\n       * @private\n       * @name clone\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the cloned `LazyWrapper` object.\n       */\n      function lazyClone() {\n        var result = new LazyWrapper(this.__wrapped__);\n        result.__actions__ = copyArray(this.__actions__);\n        result.__dir__ = this.__dir__;\n        result.__filtered__ = this.__filtered__;\n        result.__iteratees__ = copyArray(this.__iteratees__);\n        result.__takeCount__ = this.__takeCount__;\n        result.__views__ = copyArray(this.__views__);\n        return result;\n      }\n  \n      /**\n       * Reverses the direction of lazy iteration.\n       *\n       * @private\n       * @name reverse\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the new reversed `LazyWrapper` object.\n       */\n      function lazyReverse() {\n        if (this.__filtered__) {\n          var result = new LazyWrapper(this);\n          result.__dir__ = -1;\n          result.__filtered__ = true;\n        } else {\n          result = this.clone();\n          result.__dir__ *= -1;\n        }\n        return result;\n      }\n  \n      /**\n       * Extracts the unwrapped value from its lazy wrapper.\n       *\n       * @private\n       * @name value\n       * @memberOf LazyWrapper\n       * @returns {*} Returns the unwrapped value.\n       */\n      function lazyValue() {\n        var array = this.__wrapped__.value(),\n            dir = this.__dir__,\n            isArr = isArray(array),\n            isRight = dir < 0,\n            arrLength = isArr ? array.length : 0,\n            view = getView(0, arrLength, this.__views__),\n            start = view.start,\n            end = view.end,\n            length = end - start,\n            index = isRight ? end : (start - 1),\n            iteratees = this.__iteratees__,\n            iterLength = iteratees.length,\n            resIndex = 0,\n            takeCount = nativeMin(length, this.__takeCount__);\n  \n        if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n            (arrLength == length && takeCount == length)) {\n          return baseWrapperValue(array, this.__actions__);\n        }\n        var result = [];\n  \n        outer:\n        while (length-- && resIndex < takeCount) {\n          index += dir;\n  \n          var iterIndex = -1,\n              value = array[index];\n  \n          while (++iterIndex < iterLength) {\n            var data = iteratees[iterIndex],\n                iteratee = data.iteratee,\n                type = data.type,\n                computed = iteratee(value);\n  \n            if (type == LAZY_MAP_FLAG) {\n              value = computed;\n            } else if (!computed) {\n              if (type == LAZY_FILTER_FLAG) {\n                continue outer;\n              } else {\n                break outer;\n              }\n            }\n          }\n          result[resIndex++] = value;\n        }\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an hash object.\n       *\n       * @private\n       * @constructor\n       * @returns {Object} Returns the new hash object.\n       */\n      function Hash() {}\n  \n      /**\n       * Removes `key` and its value from the hash.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function hashDelete(hash, key) {\n        return hashHas(hash, key) && delete hash[key];\n      }\n  \n      /**\n       * Gets the hash value for `key`.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function hashGet(hash, key) {\n        if (nativeCreate) {\n          var result = hash[key];\n          return result === HASH_UNDEFINED ? undefined : result;\n        }\n        return hasOwnProperty.call(hash, key) ? hash[key] : undefined;\n      }\n  \n      /**\n       * Checks if a hash value for `key` exists.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function hashHas(hash, key) {\n        return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);\n      }\n  \n      /**\n       * Sets the hash `key` to `value`.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function hashSet(hash, key, value) {\n        hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a map cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function MapCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the map.\n       *\n       * @private\n       * @name clear\n       * @memberOf MapCache\n       */\n      function mapClear() {\n        this.__data__ = {\n          'hash': new Hash,\n          'map': Map ? new Map : [],\n          'string': new Hash\n        };\n      }\n  \n      /**\n       * Removes `key` and its value from the map.\n       *\n       * @private\n       * @name delete\n       * @memberOf MapCache\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function mapDelete(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashDelete(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map['delete'](key) : assocDelete(data.map, key);\n      }\n  \n      /**\n       * Gets the map value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf MapCache\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function mapGet(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashGet(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.get(key) : assocGet(data.map, key);\n      }\n  \n      /**\n       * Checks if a map value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf MapCache\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function mapHas(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashHas(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.has(key) : assocHas(data.map, key);\n      }\n  \n      /**\n       * Sets the map `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf MapCache\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the map cache object.\n       */\n      function mapSet(key, value) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n        } else if (Map) {\n          data.map.set(key, value);\n        } else {\n          assocSet(data.map, key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       *\n       * Creates a set cache object to store unique values.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function SetCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.__data__ = new MapCache;\n        while (++index < length) {\n          this.push(values[index]);\n        }\n      }\n  \n      /**\n       * Checks if `value` is in `cache`.\n       *\n       * @private\n       * @param {Object} cache The set cache to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns `true` if `value` is found, else `false`.\n       */\n      function cacheHas(cache, value) {\n        var map = cache.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          return hash[value] === HASH_UNDEFINED;\n        }\n        return map.has(value);\n      }\n  \n      /**\n       * Adds `value` to the set cache.\n       *\n       * @private\n       * @name push\n       * @memberOf SetCache\n       * @param {*} value The value to cache.\n       */\n      function cachePush(value) {\n        var map = this.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          hash[value] = HASH_UNDEFINED;\n        }\n        else {\n          map.set(value, HASH_UNDEFINED);\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a stack cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function Stack(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the stack.\n       *\n       * @private\n       * @name clear\n       * @memberOf Stack\n       */\n      function stackClear() {\n        this.__data__ = { 'array': [], 'map': null };\n      }\n  \n      /**\n       * Removes `key` and its value from the stack.\n       *\n       * @private\n       * @name delete\n       * @memberOf Stack\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function stackDelete(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocDelete(array, key) : data.map['delete'](key);\n      }\n  \n      /**\n       * Gets the stack value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf Stack\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function stackGet(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocGet(array, key) : data.map.get(key);\n      }\n  \n      /**\n       * Checks if a stack value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf Stack\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function stackHas(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocHas(array, key) : data.map.has(key);\n      }\n  \n      /**\n       * Sets the stack `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf Stack\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the stack cache object.\n       */\n      function stackSet(key, value) {\n        var data = this.__data__,\n            array = data.array;\n  \n        if (array) {\n          if (array.length < (LARGE_ARRAY_SIZE - 1)) {\n            assocSet(array, key, value);\n          } else {\n            data.array = null;\n            data.map = new MapCache(array);\n          }\n        }\n        var map = data.map;\n        if (map) {\n          map.set(key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Removes `key` and its value from the associative array.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function assocDelete(array, key) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          return false;\n        }\n        var lastIndex = array.length - 1;\n        if (index == lastIndex) {\n          array.pop();\n        } else {\n          splice.call(array, index, 1);\n        }\n        return true;\n      }\n  \n      /**\n       * Gets the associative array value for `key`.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function assocGet(array, key) {\n        var index = assocIndexOf(array, key);\n        return index < 0 ? undefined : array[index][1];\n      }\n  \n      /**\n       * Checks if an associative array value for `key` exists.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function assocHas(array, key) {\n        return assocIndexOf(array, key) > -1;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `key` is found in `array`\n       * of key-value pairs.\n       *\n       * @private\n       * @param {Array} array The array to search.\n       * @param {*} key The key to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       */\n      function assocIndexOf(array, key) {\n        var length = array.length;\n        while (length--) {\n          if (eq(array[length][0], key)) {\n            return length;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Sets the associative array `key` to `value`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function assocSet(array, key, value) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          array.push([key, value]);\n        } else {\n          array[index][1] = value;\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Used by `_.defaults` to customize its `_.assignIn` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to assign.\n       * @param {Object} object The parent object of `objValue`.\n       * @returns {*} Returns the value to assign.\n       */\n      function assignInDefaults(objValue, srcValue, key, object) {\n        if (objValue === undefined ||\n            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n          return srcValue;\n        }\n        return objValue;\n      }\n  \n      /**\n       * This function is like `assignValue` except that it doesn't assign `undefined` values.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignMergeValue(object, key, value) {\n        if ((value !== undefined && !eq(object[key], value)) ||\n            (typeof key == 'number' && value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Assigns `value` to `key` of `object` if the existing value is not equivalent\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignValue(object, key, value) {\n        var objValue = object[key];\n        if ((!eq(objValue, value) ||\n              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||\n            (value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Aggregates elements of `collection` on `accumulator` with keys transformed\n       * by `iteratee` and values set by `setter`.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform keys.\n       * @param {Object} accumulator The initial aggregated object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseAggregator(collection, setter, iteratee, accumulator) {\n        baseEach(collection, function(value, key, collection) {\n          setter(accumulator, value, iteratee(value), collection);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.assign` without support for multiple sources\n       * or `customizer` functions.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @returns {Object} Returns `object`.\n       */\n      function baseAssign(object, source) {\n        return object && copyObject(source, keys(source), object);\n      }\n  \n      /**\n       * The base implementation of `_.at` without support for individual paths.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {string[]} paths The property paths of elements to pick.\n       * @returns {Array} Returns the new array of picked elements.\n       */\n      function baseAt(object, paths) {\n        var index = -1,\n            isNil = object == null,\n            length = paths.length,\n            result = Array(length);\n  \n        while (++index < length) {\n          result[index] = isNil ? undefined : get(object, paths[index]);\n        }\n        return result;\n      }\n  \n      /**\n       * Casts `value` to an empty array if it's not an array like object.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastArrayLikeObject(value) {\n        return isArrayLikeObject(value) ? value : [];\n      }\n  \n      /**\n       * Casts `value` to `identity` if it's not a function.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastFunction(value) {\n        return typeof value == 'function' ? value : identity;\n      }\n  \n      /**\n       * Casts `value` to a path array if it's not one.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast property path array.\n       */\n      function baseCastPath(value) {\n        return isArray(value) ? value : stringToPath(value);\n      }\n  \n      /**\n       * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       */\n      function baseClamp(number, lower, upper) {\n        if (number === number) {\n          if (upper !== undefined) {\n            number = number <= upper=\"\" ?=\"\" number=\"\" :=\"\" upper;=\"\" }=\"\" if=\"\" (lower=\"\" !=\"=\" undefined)=\"\" {=\"\">= lower ? number : lower;\n          }\n        }\n        return number;\n      }\n  \n      /**\n       * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n       * traversed objects.\n       *\n       * @private\n       * @param {*} value The value to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @param {string} [key] The key of `value`.\n       * @param {Object} [object] The parent object of `value`.\n       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n       * @returns {*} Returns the cloned value.\n       */\n      function baseClone(value, isDeep, customizer, key, object, stack) {\n        var result;\n        if (customizer) {\n          result = object ? customizer(value, key, object, stack) : customizer(value);\n        }\n        if (result !== undefined) {\n          return result;\n        }\n        if (!isObject(value)) {\n          return value;\n        }\n        var isArr = isArray(value);\n        if (isArr) {\n          result = initCloneArray(value);\n          if (!isDeep) {\n            return copyArray(value, result);\n          }\n        } else {\n          var tag = getTag(value),\n              isFunc = tag == funcTag || tag == genTag;\n  \n          if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n          }\n          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n              return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n              return copySymbols(value, baseAssign(result, value));\n            }\n          } else {\n            if (!cloneableTags[tag]) {\n              return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n          }\n        }\n        // Check for circular references and return its corresponding clone.\n        stack || (stack = new Stack);\n        var stacked = stack.get(value);\n        if (stacked) {\n          return stacked;\n        }\n        stack.set(value, result);\n  \n        // Recursively populate clone (susceptible to call stack limits).\n        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n          assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));\n        });\n        return isArr ? result : copySymbols(value, result);\n      }\n  \n      /**\n       * The base implementation of `_.conforms` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       */\n      function baseConforms(source) {\n        var props = keys(source),\n            length = props.length;\n  \n        return function(object) {\n          if (object == null) {\n            return !length;\n          }\n          var index = length;\n          while (index--) {\n            var key = props[index],\n                predicate = source[key],\n                value = object[key];\n  \n            if ((value === undefined && !(key in Object(object))) || !predicate(value)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n  \n      /**\n       * The base implementation of `_.create` without support for assigning\n       * properties to the created object.\n       *\n       * @private\n       * @param {Object} prototype The object to inherit from.\n       * @returns {Object} Returns the new object.\n       */\n      function baseCreate(proto) {\n        return isObject(proto) ? objectCreate(proto) : {};\n      }\n  \n      /**\n       * The base implementation of `_.delay` and `_.defer` which accepts an array\n       * of `func` arguments.\n       *\n       * @private\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {Object} args The arguments to provide to `func`.\n       * @returns {number} Returns the timer id.\n       */\n      function baseDelay(func, wait, args) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return setTimeout(function() { func.apply(undefined, args); }, wait);\n      }\n  \n      /**\n       * The base implementation of methods like `_.difference` without support for\n       * excluding multiple arrays or iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Array} values The values to exclude.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       */\n      function baseDifference(array, values, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            isCommon = true,\n            length = array.length,\n            result = [],\n            valuesLength = values.length;\n  \n        if (!length) {\n          return result;\n        }\n        if (iteratee) {\n          values = arrayMap(values, baseUnary(iteratee));\n        }\n        if (comparator) {\n          includes = arrayIncludesWith;\n          isCommon = false;\n        }\n        else if (values.length >= LARGE_ARRAY_SIZE) {\n          includes = cacheHas;\n          isCommon = false;\n          values = new SetCache(values);\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var valuesIndex = valuesLength;\n            while (valuesIndex--) {\n              if (values[valuesIndex] === computed) {\n                continue outer;\n              }\n            }\n            result.push(value);\n          }\n          else if (!includes(values, computed, comparator)) {\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.forEach` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEach = createBaseEach(baseForOwn);\n  \n      /**\n       * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEachRight = createBaseEach(baseForOwnRight, true);\n  \n      /**\n       * The base implementation of `_.every` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`\n       */\n      function baseEvery(collection, predicate) {\n        var result = true;\n        baseEach(collection, function(value, index, collection) {\n          result = !!predicate(value, index, collection);\n          return result;\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.fill` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       */\n      function baseFill(array, value, start, end) {\n        var length = array.length;\n  \n        start = toInteger(start);\n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = (end === undefined || end > length) ? length : toInteger(end);\n        if (end < 0) {\n          end += length;\n        }\n        end = start > end ? 0 : toLength(end);\n        while (start < end) {\n          array[start++] = value;\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.filter` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       */\n      function baseFilter(collection, predicate) {\n        var result = [];\n        baseEach(collection, function(value, index, collection) {\n          if (predicate(value, index, collection)) {\n            result.push(value);\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.flatten` with support for restricting flattening.\n       *\n       * @private\n       * @param {Array} array The array to flatten.\n       * @param {number} depth The maximum recursion depth.\n       * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n       * @param {Array} [result=[]] The initial result value.\n       * @returns {Array} Returns the new flattened array.\n       */\n      function baseFlatten(array, depth, isStrict, result) {\n        result || (result = []);\n  \n        var index = -1,\n            length = array.length;\n  \n        while (++index < length) {\n          var value = array[index];\n          if (depth > 0 && isArrayLikeObject(value) &&\n              (isStrict || isArray(value) || isArguments(value))) {\n            if (depth > 1) {\n              // Recursively flatten arrays (susceptible to call stack limits).\n              baseFlatten(value, depth - 1, isStrict, result);\n            } else {\n              arrayPush(result, value);\n            }\n          } else if (!isStrict) {\n            result[result.length] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `baseForIn` and `baseForOwn` which iterates\n       * over `object` properties returned by `keysFunc` invoking `iteratee` for\n       * each property. Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseFor = createBaseFor();\n  \n      /**\n       * This function is like `baseFor` except that it iterates over properties\n       * in the opposite order.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseForRight = createBaseFor(true);\n  \n      /**\n       * The base implementation of `_.forIn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForIn(object, iteratee) {\n        return object == null ? object : baseFor(object, iteratee, keysIn);\n      }\n  \n      /**\n       * The base implementation of `_.forOwn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwn(object, iteratee) {\n        return object && baseFor(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwnRight(object, iteratee) {\n        return object && baseForRight(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.functions` which creates an array of\n       * `object` function property names filtered from `props`.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Array} props The property names to filter.\n       * @returns {Array} Returns the new array of filtered property names.\n       */\n      function baseFunctions(object, props) {\n        return arrayFilter(props, function(key) {\n          return isFunction(object[key]);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.get` without support for default values.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseGet(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = 0,\n            length = path.length;\n  \n        while (object != null && index < length) {\n          object = object[path[index++]];\n        }\n        return (index && index == length) ? object : undefined;\n      }\n  \n      /**\n       * The base implementation of `_.has` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHas(object, key) {\n        // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n        // that are composed entirely of index properties, return `false` for\n        // `hasOwnProperty` checks of them.\n        return hasOwnProperty.call(object, key) ||\n          (typeof object == 'object' && key in object && getPrototypeOf(object) === null);\n      }\n  \n      /**\n       * The base implementation of `_.hasIn` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHasIn(object, key) {\n        return key in Object(object);\n      }\n  \n      /**\n       * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to check.\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       */\n      function baseInRange(number, start, end) {\n        return number >= nativeMin(start, end) && number < nativeMax(start, end);\n      }\n  \n      /**\n       * The base implementation of methods like `_.intersection`, without support\n       * for iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       */\n      function baseIntersection(arrays, iteratee, comparator) {\n        var includes = comparator ? arrayIncludesWith : arrayIncludes,\n            othLength = arrays.length,\n            othIndex = othLength,\n            caches = Array(othLength),\n            result = [];\n  \n        while (othIndex--) {\n          var array = arrays[othIndex];\n          if (othIndex && iteratee) {\n            array = arrayMap(array, baseUnary(iteratee));\n          }\n          caches[othIndex] = !comparator && (iteratee || array.length >= 120)\n            ? new SetCache(othIndex && array)\n            : undefined;\n        }\n        array = arrays[0];\n  \n        var index = -1,\n            length = array.length,\n            seen = caches[0];\n  \n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (!(seen\n                ? cacheHas(seen, computed)\n                : includes(result, computed, comparator)\n              )) {\n            var othIndex = othLength;\n            while (--othIndex) {\n              var cache = caches[othIndex];\n              if (!(cache\n                    ? cacheHas(cache, computed)\n                    : includes(arrays[othIndex], computed, comparator))\n                  ) {\n                continue outer;\n              }\n            }\n            if (seen) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.invert` and `_.invertBy` which inverts\n       * `object` with values transformed by `iteratee` and set by `setter`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform values.\n       * @param {Object} accumulator The initial inverted object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseInverter(object, setter, iteratee, accumulator) {\n        baseForOwn(object, function(value, key, object) {\n          setter(accumulator, iteratee(value), key, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.invoke` without support for individual\n       * method arguments.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {Array} args The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       */\n      function baseInvoke(object, path, args) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          path = last(path);\n        }\n        var func = object == null ? object : object[path];\n        return func == null ? undefined : apply(func, object, args);\n      }\n  \n      /**\n       * The base implementation of `_.isEqual` which supports partial comparisons\n       * and tracks traversed objects.\n       *\n       * @private\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {boolean} [bitmask] The bitmask of comparison flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - Unordered comparison\n       *     2 - Partial comparison\n       * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       */\n      function baseIsEqual(value, other, customizer, bitmask, stack) {\n        if (value === other) {\n          return true;\n        }\n        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n          return value !== value && other !== other;\n        }\n        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqual` for arrays and objects which performs\n       * deep comparisons and tracks traversed objects enabling objects with circular\n       * references to be compared.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n        var objIsArr = isArray(object),\n            othIsArr = isArray(other),\n            objTag = arrayTag,\n            othTag = arrayTag;\n  \n        if (!objIsArr) {\n          objTag = getTag(object);\n          if (objTag == argsTag) {\n            objTag = objectTag;\n          } else if (objTag != objectTag) {\n            objIsArr = isTypedArray(object);\n          }\n        }\n        if (!othIsArr) {\n          othTag = getTag(other);\n          if (othTag == argsTag) {\n            othTag = objectTag;\n          } else if (othTag != objectTag) {\n            othIsArr = isTypedArray(other);\n          }\n        }\n        var objIsObj = objTag == objectTag && !isHostObject(object),\n            othIsObj = othTag == objectTag && !isHostObject(other),\n            isSameTag = objTag == othTag;\n  \n        if (isSameTag && !(objIsArr || objIsObj)) {\n          return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);\n        }\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n        if (!isPartial) {\n          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n  \n          if (objIsWrapped || othIsWrapped) {\n            return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);\n          }\n        }\n        if (!isSameTag) {\n          return false;\n        }\n        stack || (stack = new Stack);\n        return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);\n      }\n  \n      /**\n       * The base implementation of `_.isMatch` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Array} matchData The property names, values, and compare flags to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       */\n      function baseIsMatch(object, source, matchData, customizer) {\n        var index = matchData.length,\n            length = index,\n            noCustomizer = !customizer;\n  \n        if (object == null) {\n          return !length;\n        }\n        object = Object(object);\n        while (index--) {\n          var data = matchData[index];\n          if ((noCustomizer && data[2])\n                ? data[1] !== object[data[0]]\n                : !(data[0] in object)\n              ) {\n            return false;\n          }\n        }\n        while (++index < length) {\n          data = matchData[index];\n          var key = data[0],\n              objValue = object[key],\n              srcValue = data[1];\n  \n          if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) {\n              return false;\n            }\n          } else {\n            var stack = new Stack,\n                result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;\n  \n            if (!(result === undefined\n                  ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                  : result\n                )) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * The base implementation of `_.iteratee`.\n       *\n       * @private\n       * @param {*} [value=_.identity] The value to convert to an iteratee.\n       * @returns {Function} Returns the iteratee.\n       */\n      function baseIteratee(value) {\n        var type = typeof value;\n        if (type == 'function') {\n          return value;\n        }\n        if (value == null) {\n          return identity;\n        }\n        if (type == 'object') {\n          return isArray(value)\n            ? baseMatchesProperty(value[0], value[1])\n            : baseMatches(value);\n        }\n        return property(value);\n      }\n  \n      /**\n       * The base implementation of `_.keys` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeys(object) {\n        return nativeKeys(Object(object));\n      }\n  \n      /**\n       * The base implementation of `_.keysIn` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeysIn(object) {\n        object = object == null ? object : Object(object);\n  \n        var result = [];\n        for (var key in object) {\n          result.push(key);\n        }\n        return result;\n      }\n  \n      // Fallback for IE < 9 with es6-shim.\n      if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n        baseKeysIn = function(object) {\n          return iteratorToArray(enumerate(object));\n        };\n      }\n  \n      /**\n       * The base implementation of `_.map` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       */\n      function baseMap(collection, iteratee) {\n        var index = -1,\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value, key, collection) {\n          result[++index] = iteratee(value, key, collection);\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.matches` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatches(source) {\n        var matchData = getMatchData(source);\n        if (matchData.length == 1 && matchData[0][2]) {\n          var key = matchData[0][0],\n              value = matchData[0][1];\n  \n          return function(object) {\n            if (object == null) {\n              return false;\n            }\n            return object[key] === value &&\n              (value !== undefined || (key in Object(object)));\n          };\n        }\n        return function(object) {\n          return object === source || baseIsMatch(object, source, matchData);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n       *\n       * @private\n       * @param {string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatchesProperty(path, srcValue) {\n        return function(object) {\n          var objValue = get(object, path);\n          return (objValue === undefined && objValue === srcValue)\n            ? hasIn(object, path)\n            : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.merge` without support for multiple sources.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} [customizer] The function to customize merged values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMerge(object, source, srcIndex, customizer, stack) {\n        if (object === source) {\n          return;\n        }\n        var props = (isArray(source) || isTypedArray(source))\n          ? undefined\n          : keysIn(source);\n  \n        arrayEach(props || source, function(srcValue, key) {\n          if (props) {\n            key = srcValue;\n            srcValue = source[key];\n          }\n          if (isObject(srcValue)) {\n            stack || (stack = new Stack);\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n          }\n          else {\n            var newValue = customizer\n              ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n              : undefined;\n  \n            if (newValue === undefined) {\n              newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n          }\n        });\n      }\n  \n      /**\n       * A specialized version of `baseMerge` for arrays and objects which performs\n       * deep merges and tracks traversed objects enabling objects with circular\n       * references to be merged.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {string} key The key of the value to merge.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} mergeFunc The function to merge values.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n        var objValue = object[key],\n            srcValue = source[key],\n            stacked = stack.get(srcValue);\n  \n        if (stacked) {\n          assignMergeValue(object, key, stacked);\n          return;\n        }\n        var newValue = customizer\n          ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n          : undefined;\n  \n        var isCommon = newValue === undefined;\n  \n        if (isCommon) {\n          newValue = srcValue;\n          if (isArray(srcValue) || isTypedArray(srcValue)) {\n            if (isArray(objValue)) {\n              newValue = objValue;\n            }\n            else if (isArrayLikeObject(objValue)) {\n              newValue = copyArray(objValue);\n            }\n            else {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n          }\n          else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            if (isArguments(objValue)) {\n              newValue = toPlainObject(objValue);\n            }\n            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n            else {\n              newValue = objValue;\n            }\n          }\n          else {\n            isCommon = false;\n          }\n        }\n        stack.set(srcValue, newValue);\n  \n        if (isCommon) {\n          // Recursively merge objects and arrays (susceptible to call stack limits).\n          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        }\n        assignMergeValue(object, key, newValue);\n      }\n  \n      /**\n       * The base implementation of `_.orderBy` without param guards.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n       * @param {string[]} orders The sort orders of `iteratees`.\n       * @returns {Array} Returns the new sorted array.\n       */\n      function baseOrderBy(collection, iteratees, orders) {\n        var index = -1,\n            toIteratee = getIteratee();\n  \n        iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {\n          return toIteratee(iteratee);\n        });\n  \n        var result = baseMap(collection, function(value, key, collection) {\n          var criteria = arrayMap(iteratees, function(iteratee) {\n            return iteratee(value);\n          });\n          return { 'criteria': criteria, 'index': ++index, 'value': value };\n        });\n  \n        return baseSortBy(result, function(object, other) {\n          return compareMultiple(object, other, orders);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.pick` without support for individual\n       * property names.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {string[]} props The property names to pick.\n       * @returns {Object} Returns the new object.\n       */\n      function basePick(object, props) {\n        object = Object(object);\n        return arrayReduce(props, function(result, key) {\n          if (key in object) {\n            result[key] = object[key];\n          }\n          return result;\n        }, {});\n      }\n  \n      /**\n       * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {Function} predicate The function invoked per property.\n       * @returns {Object} Returns the new object.\n       */\n      function basePickBy(object, predicate) {\n        var result = {};\n        baseForIn(object, function(value, key) {\n          if (predicate(value, key)) {\n            result[key] = value;\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.property` without support for deep paths.\n       *\n       * @private\n       * @param {string} key The key of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function baseProperty(key) {\n        return function(object) {\n          return object == null ? undefined : object[key];\n        };\n      }\n  \n      /**\n       * A specialized version of `baseProperty` which supports deep paths.\n       *\n       * @private\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function basePropertyDeep(path) {\n        return function(object) {\n          return baseGet(object, path);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.pullAll`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAll(array, values) {\n        return basePullAllBy(array, values);\n      }\n  \n      /**\n       * The base implementation of `_.pullAllBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAllBy(array, values, iteratee) {\n        var index = -1,\n            length = values.length,\n            seen = array;\n  \n        if (iteratee) {\n          seen = arrayMap(array, function(value) { return iteratee(value); });\n        }\n        while (++index < length) {\n          var fromIndex = 0,\n              value = values[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {\n            if (seen !== array) {\n              splice.call(seen, fromIndex, 1);\n            }\n            splice.call(array, fromIndex, 1);\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.pullAt` without support for individual\n       * indexes or capturing the removed elements.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {number[]} indexes The indexes of elements to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAt(array, indexes) {\n        var length = array ? indexes.length : 0,\n            lastIndex = length - 1;\n  \n        while (length--) {\n          var index = indexes[length];\n          if (lastIndex == length || index != previous) {\n            var previous = index;\n            if (isIndex(index)) {\n              splice.call(array, index, 1);\n            }\n            else if (!isKey(index, array)) {\n              var path = baseCastPath(index),\n                  object = parent(array, path);\n  \n              if (object != null) {\n                delete object[last(path)];\n              }\n            }\n            else {\n              delete array[index];\n            }\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.random` without support for returning\n       * floating-point numbers.\n       *\n       * @private\n       * @param {number} lower The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the random number.\n       */\n      function baseRandom(lower, upper) {\n        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n      }\n  \n      /**\n       * The base implementation of `_.range` and `_.rangeRight` which doesn't\n       * coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} step The value to increment or decrement by.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the new array of numbers.\n       */\n      function baseRange(start, end, step, fromRight) {\n        var index = -1,\n            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n            result = Array(length);\n  \n        while (length--) {\n          result[fromRight ? length : ++index] = start;\n          start += step;\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.set`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize path creation.\n       * @returns {Object} Returns `object`.\n       */\n      function baseSet(object, path, value, customizer) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = -1,\n            length = path.length,\n            lastIndex = length - 1,\n            nested = object;\n  \n        while (nested != null && ++index < length) {\n          var key = path[index];\n          if (isObject(nested)) {\n            var newValue = value;\n            if (index != lastIndex) {\n              var objValue = nested[key];\n              newValue = customizer ? customizer(objValue, key, nested) : undefined;\n              if (newValue === undefined) {\n                newValue = objValue == null\n                  ? (isIndex(path[index + 1]) ? [] : {})\n                  : objValue;\n              }\n            }\n            assignValue(nested, key, newValue);\n          }\n          nested = nested[key];\n        }\n        return object;\n      }\n  \n      /**\n       * The base implementation of `setData` without support for hot loop detection.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var baseSetData = !metaMap ? identity : function(func, data) {\n        metaMap.set(func, data);\n        return func;\n      };\n  \n      /**\n       * The base implementation of `_.slice` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseSlice(array, start, end) {\n        var index = -1,\n            length = array.length;\n  \n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = end > length ? length : end;\n        if (end < 0) {\n          end += length;\n        }\n        length = start > end ? 0 : ((end - start) >>> 0);\n        start >>>= 0;\n  \n        var result = Array(length);\n        while (++index < length) {\n          result[index] = array[index + start];\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.some` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       */\n      function baseSome(collection, predicate) {\n        var result;\n  \n        baseEach(collection, function(value, index, collection) {\n          result = predicate(value, index, collection);\n          return !result;\n        });\n        return !!result;\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n       * performs a binary search of `array` to determine the index at which `value`\n       * should be inserted into `array` in order to maintain its sort order.\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted\n       *  into `array`.\n       */\n      function baseSortedIndex(array, value, retHighest) {\n        var low = 0,\n            high = array ? array.length : low;\n  \n        if (typeof value == 'number' && value === value && high <= half_max_array_length)=\"\" {=\"\" while=\"\" (low=\"\" <=\"\" high)=\"\" var=\"\" mid=\"(low\" +=\"\">>> 1,\n                computed = array[mid];\n  \n            if ((retHighest ? (computed <= value)=\"\" :=\"\" (computed=\"\" <=\"\" value))=\"\" &&=\"\" computed=\"\" !=\"=\" null)=\"\" {=\"\" low=\"mid\" +=\"\" 1;=\"\" }=\"\" else=\"\" high=\"mid;\" return=\"\" high;=\"\" basesortedindexby(array,=\"\" value,=\"\" identity,=\"\" rethighest);=\"\" **=\"\" *=\"\" the=\"\" base=\"\" implementation=\"\" of=\"\" `_.sortedindexby`=\"\" and=\"\" `_.sortedlastindexby`=\"\" which=\"\" invokes=\"\" `iteratee`=\"\" for=\"\" `value`=\"\" each=\"\" element=\"\" `array`=\"\" to=\"\" compute=\"\" their=\"\" sort=\"\" ranking.=\"\" iteratee=\"\" is=\"\" invoked=\"\" with=\"\" one=\"\" argument;=\"\" (value).=\"\" @private=\"\" @param=\"\" {array}=\"\" array=\"\" sorted=\"\" inspect.=\"\" {*}=\"\" value=\"\" evaluate.=\"\" {function}=\"\" per=\"\" element.=\"\" {boolean}=\"\" [rethighest]=\"\" specify=\"\" returning=\"\" highest=\"\" qualified=\"\" index.=\"\" @returns=\"\" {number}=\"\" returns=\"\" index=\"\" at=\"\" should=\"\" be=\"\" inserted=\"\" into=\"\" `array`.=\"\" function=\"\" iteratee,=\"\" rethighest)=\"\" var=\"\" ?=\"\" array.length=\"\" 0,=\"\" valisnan=\"value\" valisnull=\"value\" ==\"=\" null,=\"\" valisundef=\"value\" undefined;=\"\" while=\"\" (low=\"\" high)=\"\" mid=\"nativeFloor((low\" 2),=\"\" isdef=\"computed\" undefined,=\"\" isreflexive=\"computed\" computed;=\"\" if=\"\" (valisnan)=\"\" setlow=\"isReflexive\" ||=\"\" rethighest;=\"\" (valisnull)=\"\" (rethighest=\"\" (valisundef)=\"\" isdef);=\"\" value);=\"\" (setlow)=\"\" nativemin(high,=\"\" max_array_index);=\"\" `_.sorteduniq`.=\"\" new=\"\" duplicate=\"\" free=\"\" array.=\"\" basesorteduniq(array)=\"\" basesorteduniqby(array);=\"\" `_.sorteduniqby`=\"\" without=\"\" support=\"\" shorthands.=\"\" [iteratee]=\"\" basesorteduniqby(array,=\"\" iteratee)=\"\" length=\"array.length,\" iteratee(value)=\"\" seen=\"computed,\" resindex=\"0,\" result=\"[value];\" (++index=\"\" length)=\"\" value;=\"\" (!eq(computed,=\"\" seen))=\"\" result[++resindex]=\"value;\" result;=\"\" `_.uniqby`=\"\" [comparator]=\"\" comparator=\"\" baseuniq(array,=\"\" comparator)=\"\" includes=\"arrayIncludes,\" iscommon=\"true,\" (comparator)=\"\" (length=\"\">= LARGE_ARRAY_SIZE) {\n          var set = iteratee ? null : createSet(array);\n          if (set) {\n            return setToArray(set);\n          }\n          isCommon = false;\n          includes = cacheHas;\n          seen = new SetCache;\n        }\n        else {\n          seen = iteratee ? [] : result;\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var seenIndex = seen.length;\n            while (seenIndex--) {\n              if (seen[seenIndex] === computed) {\n                continue outer;\n              }\n            }\n            if (iteratee) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n          else if (!includes(seen, computed, comparator)) {\n            if (seen !== result) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.unset`.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       */\n      function baseUnset(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n        object = parent(object, path);\n        var key = last(path);\n        return (object != null && has(object, key)) ? delete object[key] : true;\n      }\n  \n      /**\n       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n       * without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {Function} predicate The function invoked per iteration.\n       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseWhile(array, predicate, isDrop, fromRight) {\n        var length = array.length,\n            index = fromRight ? length : -1;\n  \n        while ((fromRight ? index-- : ++index < length) &&\n          predicate(array[index], index, array)) {}\n  \n        return isDrop\n          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n      }\n  \n      /**\n       * The base implementation of `wrapperValue` which returns the result of\n       * performing a sequence of actions on the unwrapped `value`, where each\n       * successive action is supplied the return value of the previous.\n       *\n       * @private\n       * @param {*} value The unwrapped value.\n       * @param {Array} actions Actions to perform to resolve the unwrapped value.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseWrapperValue(value, actions) {\n        var result = value;\n        if (result instanceof LazyWrapper) {\n          result = result.value();\n        }\n        return arrayReduce(actions, function(result, action) {\n          return action.func.apply(action.thisArg, arrayPush([result], action.args));\n        }, result);\n      }\n  \n      /**\n       * The base implementation of methods like `_.xor`, without support for\n       * iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       */\n      function baseXor(arrays, iteratee, comparator) {\n        var index = -1,\n            length = arrays.length;\n  \n        while (++index < length) {\n          var result = result\n            ? arrayPush(\n                baseDifference(result, arrays[index], iteratee, comparator),\n                baseDifference(arrays[index], result, iteratee, comparator)\n              )\n            : arrays[index];\n        }\n        return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n      }\n  \n      /**\n       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n       *\n       * @private\n       * @param {Array} props The property names.\n       * @param {Array} values The property values.\n       * @param {Function} assignFunc The function to assign values.\n       * @returns {Object} Returns the new object.\n       */\n      function baseZipObject(props, values, assignFunc) {\n        var index = -1,\n            length = props.length,\n            valsLength = values.length,\n            result = {};\n  \n        while (++index < length) {\n          assignFunc(result, props[index], index < valsLength ? values[index] : undefined);\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a clone of  `buffer`.\n       *\n       * @private\n       * @param {Buffer} buffer The buffer to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Buffer} Returns the cloned buffer.\n       */\n      function cloneBuffer(buffer, isDeep) {\n        if (isDeep) {\n          return buffer.slice();\n        }\n        var Ctor = buffer.constructor,\n            result = new Ctor(buffer.length);\n  \n        buffer.copy(result);\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `arrayBuffer`.\n       *\n       * @private\n       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n       * @returns {ArrayBuffer} Returns the cloned array buffer.\n       */\n      function cloneArrayBuffer(arrayBuffer) {\n        var Ctor = arrayBuffer.constructor,\n            result = new Ctor(arrayBuffer.byteLength),\n            view = new Uint8Array(result);\n  \n        view.set(new Uint8Array(arrayBuffer));\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `map`.\n       *\n       * @private\n       * @param {Object} map The map to clone.\n       * @returns {Object} Returns the cloned map.\n       */\n      function cloneMap(map) {\n        var Ctor = map.constructor;\n        return arrayReduce(mapToArray(map), addMapEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of `regexp`.\n       *\n       * @private\n       * @param {Object} regexp The regexp to clone.\n       * @returns {Object} Returns the cloned regexp.\n       */\n      function cloneRegExp(regexp) {\n        var Ctor = regexp.constructor,\n            result = new Ctor(regexp.source, reFlags.exec(regexp));\n  \n        result.lastIndex = regexp.lastIndex;\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `set`.\n       *\n       * @private\n       * @param {Object} set The set to clone.\n       * @returns {Object} Returns the cloned set.\n       */\n      function cloneSet(set) {\n        var Ctor = set.constructor;\n        return arrayReduce(setToArray(set), addSetEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of the `symbol` object.\n       *\n       * @private\n       * @param {Object} symbol The symbol object to clone.\n       * @returns {Object} Returns the cloned symbol object.\n       */\n      function cloneSymbol(symbol) {\n        return Symbol ? Object(symbolValueOf.call(symbol)) : {};\n      }\n  \n      /**\n       * Creates a clone of `typedArray`.\n       *\n       * @private\n       * @param {Object} typedArray The typed array to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the cloned typed array.\n       */\n      function cloneTypedArray(typedArray, isDeep) {\n        var arrayBuffer = typedArray.buffer,\n            buffer = isDeep ? cloneArrayBuffer(arrayBuffer) : arrayBuffer,\n            Ctor = typedArray.constructor;\n  \n        return new Ctor(buffer, typedArray.byteOffset, typedArray.length);\n      }\n  \n      /**\n       * Creates an array that is the composition of partially applied arguments,\n       * placeholders, and provided arguments into a single array of arguments.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to prepend to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgs(args, partials, holders) {\n        var holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            leftIndex = -1,\n            leftLength = partials.length,\n            result = Array(leftLength + argsLength);\n  \n        while (++leftIndex < leftLength) {\n          result[leftIndex] = partials[leftIndex];\n        }\n        while (++argsIndex < holdersLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n        while (argsLength--) {\n          result[leftIndex++] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * This function is like `composeArgs` except that the arguments composition\n       * is tailored for `_.partialRight`.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to append to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgsRight(args, partials, holders) {\n        var holdersIndex = -1,\n            holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            rightIndex = -1,\n            rightLength = partials.length,\n            result = Array(argsLength + rightLength);\n  \n        while (++argsIndex < argsLength) {\n          result[argsIndex] = args[argsIndex];\n        }\n        var offset = argsIndex;\n        while (++rightIndex < rightLength) {\n          result[offset + rightIndex] = partials[rightIndex];\n        }\n        while (++holdersIndex < holdersLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * Copies the values of `source` to `array`.\n       *\n       * @private\n       * @param {Array} source The array to copy values from.\n       * @param {Array} [array=[]] The array to copy values to.\n       * @returns {Array} Returns `array`.\n       */\n      function copyArray(source, array) {\n        var index = -1,\n            length = source.length;\n  \n        array || (array = Array(length));\n        while (++index < length) {\n          array[index] = source[index];\n        }\n        return array;\n      }\n  \n      /**\n       * Copies properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObject(source, props, object) {\n        return copyObjectWith(source, props, object);\n      }\n  \n      /**\n       * This function is like `copyObject` except that it accepts a function to\n       * customize copied values.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @param {Function} [customizer] The function to customize copied values.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObjectWith(source, props, object, customizer) {\n        object || (object = {});\n  \n        var index = -1,\n            length = props.length;\n  \n        while (++index < length) {\n          var key = props[index];\n  \n          var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : source[key];\n  \n          assignValue(object, key, newValue);\n        }\n        return object;\n      }\n  \n      /**\n       * Copies own symbol properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy symbols from.\n       * @param {Object} [object={}] The object to copy symbols to.\n       * @returns {Object} Returns `object`.\n       */\n      function copySymbols(source, object) {\n        return copyObject(source, getSymbols(source), object);\n      }\n  \n      /**\n       * Creates a function like `_.groupBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} [initializer] The accumulator object initializer.\n       * @returns {Function} Returns the new aggregator function.\n       */\n      function createAggregator(setter, initializer) {\n        return function(collection, iteratee) {\n          var func = isArray(collection) ? arrayAggregator : baseAggregator,\n              accumulator = initializer ? initializer() : {};\n  \n          return func(collection, setter, getIteratee(iteratee), accumulator);\n        };\n      }\n  \n      /**\n       * Creates a function like `_.assign`.\n       *\n       * @private\n       * @param {Function} assigner The function to assign values.\n       * @returns {Function} Returns the new assigner function.\n       */\n      function createAssigner(assigner) {\n        return rest(function(object, sources) {\n          var index = -1,\n              length = sources.length,\n              customizer = length > 1 ? sources[length - 1] : undefined,\n              guard = length > 2 ? sources[2] : undefined;\n  \n          customizer = typeof customizer == 'function'\n            ? (length--, customizer)\n            : undefined;\n  \n          if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n          }\n          object = Object(object);\n          while (++index < length) {\n            var source = sources[index];\n            if (source) {\n              assigner(object, source, index, customizer);\n            }\n          }\n          return object;\n        });\n      }\n  \n      /**\n       * Creates a `baseEach` or `baseEachRight` function.\n       *\n       * @private\n       * @param {Function} eachFunc The function to iterate over a collection.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseEach(eachFunc, fromRight) {\n        return function(collection, iteratee) {\n          if (collection == null) {\n            return collection;\n          }\n          if (!isArrayLike(collection)) {\n            return eachFunc(collection, iteratee);\n          }\n          var length = collection.length,\n              index = fromRight ? length : -1,\n              iterable = Object(collection);\n  \n          while ((fromRight ? index-- : ++index < length)) {\n            if (iteratee(iterable[index], index, iterable) === false) {\n              break;\n            }\n          }\n          return collection;\n        };\n      }\n  \n      /**\n       * Creates a base function for methods like `_.forIn`.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseFor(fromRight) {\n        return function(object, iteratee, keysFunc) {\n          var index = -1,\n              iterable = Object(object),\n              props = keysFunc(object),\n              length = props.length;\n  \n          while (length--) {\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) {\n              break;\n            }\n          }\n          return object;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg`.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createBaseWrapper(func, bitmask, thisArg) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n          return fn.apply(isBind ? thisArg : this, arguments);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.lowerFirst`.\n       *\n       * @private\n       * @param {string} methodName The name of the `String` case method to use.\n       * @returns {Function} Returns the new function.\n       */\n      function createCaseFirst(methodName) {\n        return function(string) {\n          string = toString(string);\n  \n          var strSymbols = reHasComplexSymbol.test(string)\n            ? stringToArray(string)\n            : undefined;\n  \n          var chr = strSymbols ? strSymbols[0] : string.charAt(0),\n              trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);\n  \n          return chr[methodName]() + trailing;\n        };\n      }\n  \n      /**\n       * Creates a function like `_.camelCase`.\n       *\n       * @private\n       * @param {Function} callback The function to combine each word.\n       * @returns {Function} Returns the new compounder function.\n       */\n      function createCompounder(callback) {\n        return function(string) {\n          return arrayReduce(words(deburr(string)), callback, '');\n        };\n      }\n  \n      /**\n       * Creates a function that produces an instance of `Ctor` regardless of\n       * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n       *\n       * @private\n       * @param {Function} Ctor The constructor to wrap.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCtorWrapper(Ctor) {\n        return function() {\n          // Use a `switch` statement to work with class constructors.\n          // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n          // for more details.\n          var args = arguments;\n          switch (args.length) {\n            case 0: return new Ctor;\n            case 1: return new Ctor(args[0]);\n            case 2: return new Ctor(args[0], args[1]);\n            case 3: return new Ctor(args[0], args[1], args[2]);\n            case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n          }\n          var thisBinding = baseCreate(Ctor.prototype),\n              result = Ctor.apply(thisBinding, args);\n  \n          // Mimic the constructor's `return` behavior.\n          // See https://es5.github.io/#x13.2.2 for more details.\n          return isObject(result) ? result : thisBinding;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to enable currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {number} arity The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCurryWrapper(func, bitmask, arity) {\n        var Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,\n              placeholder = lodash.placeholder || wrapper.placeholder;\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n            ? []\n            : replaceHolders(args, placeholder);\n  \n          length -= holders.length;\n          return length < arity\n            ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)\n            : apply(fn, this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.flow` or `_.flowRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new flow function.\n       */\n      function createFlow(fromRight) {\n        return rest(function(funcs) {\n          funcs = baseFlatten(funcs, 1);\n  \n          var length = funcs.length,\n              index = length,\n              prereq = LodashWrapper.prototype.thru;\n  \n          if (fromRight) {\n            funcs.reverse();\n          }\n          while (index--) {\n            var func = funcs[index];\n            if (typeof func != 'function') {\n              throw new TypeError(FUNC_ERROR_TEXT);\n            }\n            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n              var wrapper = new LodashWrapper([], true);\n            }\n          }\n          index = wrapper ? index : length;\n          while (++index < length) {\n            func = funcs[index];\n  \n            var funcName = getFuncName(func),\n                data = funcName == 'wrapper' ? getData(func) : undefined;\n  \n            if (data && isLaziable(data[0]) &&\n                  data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                  !data[4].length && data[9] == 1\n                ) {\n              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n            } else {\n              wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n            }\n          }\n          return function() {\n            var args = arguments,\n                value = args[0];\n  \n            if (wrapper && args.length == 1 &&\n                isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n              return wrapper.plant(value).value();\n            }\n            var index = 0,\n                result = length ? funcs[index].apply(this, args) : value;\n  \n            while (++index < length) {\n              result = funcs[index].call(this, result);\n            }\n            return result;\n          };\n        });\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with optional `this`\n       * binding of `thisArg`, partial application, and currying.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n        var isAry = bitmask & ARY_FLAG,\n            isBind = bitmask & BIND_FLAG,\n            isBindKey = bitmask & BIND_KEY_FLAG,\n            isCurry = bitmask & CURRY_FLAG,\n            isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n            isFlip = bitmask & FLIP_FLAG,\n            Ctor = isBindKey ? undefined : createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length);\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          if (partials) {\n            args = composeArgs(args, partials, holders);\n          }\n          if (partialsRight) {\n            args = composeArgsRight(args, partialsRight, holdersRight);\n          }\n          if (isCurry || isCurryRight) {\n            var placeholder = lodash.placeholder || wrapper.placeholder,\n                argsHolders = replaceHolders(args, placeholder);\n  \n            length -= argsHolders.length;\n            if (length < arity) {\n              return createRecurryWrapper(\n                func, bitmask, createHybridWrapper, placeholder, thisArg, args,\n                argsHolders, argPos, ary, arity - length\n              );\n            }\n          }\n          var thisBinding = isBind ? thisArg : this,\n              fn = isBindKey ? thisBinding[func] : func;\n  \n          if (argPos) {\n            args = reorder(args, argPos);\n          } else if (isFlip && args.length > 1) {\n            args.reverse();\n          }\n          if (isAry && ary < args.length) {\n            args.length = ary;\n          }\n          if (this && this !== root && this instanceof wrapper) {\n            fn = Ctor || createCtorWrapper(fn);\n          }\n          return fn.apply(thisBinding, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.invertBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} toIteratee The function to resolve iteratees.\n       * @returns {Function} Returns the new inverter function.\n       */\n      function createInverter(setter, toIteratee) {\n        return function(object, iteratee) {\n          return baseInverter(object, setter, toIteratee(iteratee), {});\n        };\n      }\n  \n      /**\n       * Creates a function like `_.over`.\n       *\n       * @private\n       * @param {Function} arrayFunc The function to iterate over iteratees.\n       * @returns {Function} Returns the new invoker function.\n       */\n      function createOver(arrayFunc) {\n        return rest(function(iteratees) {\n          iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());\n          return rest(function(args) {\n            var thisArg = this;\n            return arrayFunc(iteratees, function(iteratee) {\n              return apply(iteratee, thisArg, args);\n            });\n          });\n        });\n      }\n  \n      /**\n       * Creates the padding for `string` based on `length`. The `chars` string\n       * is truncated if the number of characters exceeds `length`.\n       *\n       * @private\n       * @param {string} string The string to create padding for.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padding for `string`.\n       */\n      function createPadding(string, length, chars) {\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return '';\n        }\n        var padLength = length - strLength;\n        chars = chars === undefined ? ' ' : (chars + '');\n  \n        var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));\n        return reHasComplexSymbol.test(chars)\n          ? stringToArray(result).slice(0, padLength).join('')\n          : result.slice(0, padLength);\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg` and the `partials` prepended to those provided to\n       * the wrapper.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {Array} partials The arguments to prepend to those provided to the new function.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createPartialWrapper(func, bitmask, thisArg, partials) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var argsIndex = -1,\n              argsLength = arguments.length,\n              leftIndex = -1,\n              leftLength = partials.length,\n              args = Array(leftLength + argsLength),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n  \n          while (++leftIndex < leftLength) {\n            args[leftIndex] = partials[leftIndex];\n          }\n          while (argsLength--) {\n            args[leftIndex++] = arguments[++argsIndex];\n          }\n          return apply(fn, isBind ? thisArg : this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.range` or `_.rangeRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new range function.\n       */\n      function createRange(fromRight) {\n        return function(start, end, step) {\n          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n            end = step = undefined;\n          }\n          // Ensure the sign of `-0` is preserved.\n          start = toNumber(start);\n          start = start === start ? start : 0;\n          if (end === undefined) {\n            end = start;\n            start = 0;\n          } else {\n            end = toNumber(end) || 0;\n          }\n          step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);\n          return baseRange(start, end, step, fromRight);\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to continue currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {Function} wrapFunc The function to create the `func` wrapper.\n       * @param {*} placeholder The placeholder to replace.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n        var isCurry = bitmask & CURRY_FLAG,\n            newArgPos = argPos ? copyArray(argPos) : undefined,\n            newsHolders = isCurry ? holders : undefined,\n            newHoldersRight = isCurry ? undefined : holders,\n            newPartials = isCurry ? partials : undefined,\n            newPartialsRight = isCurry ? undefined : partials;\n  \n        bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n  \n        if (!(bitmask & CURRY_BOUND_FLAG)) {\n          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n        }\n        var newData = [\n          func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight,\n          newHoldersRight, newArgPos, ary, arity\n        ];\n  \n        var result = wrapFunc.apply(undefined, newData);\n        if (isLaziable(func)) {\n          setData(result, newData);\n        }\n        result.placeholder = placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a function like `_.round`.\n       *\n       * @private\n       * @param {string} methodName The name of the `Math` method to use when rounding.\n       * @returns {Function} Returns the new round function.\n       */\n      function createRound(methodName) {\n        var func = Math[methodName];\n        return function(number, precision) {\n          number = toNumber(number);\n          precision = toInteger(precision);\n          if (precision) {\n            // Shift with exponential notation to avoid floating-point issues.\n            // See [MDN](https://mdn.io/round#Examples) for more details.\n            var pair = (toString(number) + 'e').split('e'),\n                value = func(pair[0] + 'e' + (+pair[1] + precision));\n  \n            pair = (toString(value) + 'e').split('e');\n            return +(pair[0] + 'e' + (+pair[1] - precision));\n          }\n          return func(number);\n        };\n      }\n  \n      /**\n       * Creates a set of `values`.\n       *\n       * @private\n       * @param {Array} values The values to add to the set.\n       * @returns {Object} Returns the new set.\n       */\n      var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {\n        return new Set(values);\n      };\n  \n      /**\n       * Creates a function that either curries or invokes `func` with optional\n       * `this` binding and partially applied arguments.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - `_.bind`\n       *     2 - `_.bindKey`\n       *     4 - `_.curry` or `_.curryRight` of a bound function\n       *     8 - `_.curry`\n       *    16 - `_.curryRight`\n       *    32 - `_.partial`\n       *    64 - `_.partialRight`\n       *   128 - `_.rearg`\n       *   256 - `_.ary`\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to be partially applied.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n        var isBindKey = bitmask & BIND_KEY_FLAG;\n        if (!isBindKey && typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var length = partials ? partials.length : 0;\n        if (!length) {\n          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n          partials = holders = undefined;\n        }\n        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n        arity = arity === undefined ? arity : toInteger(arity);\n        length -= holders ? holders.length : 0;\n  \n        if (bitmask & PARTIAL_RIGHT_FLAG) {\n          var partialsRight = partials,\n              holdersRight = holders;\n  \n          partials = holders = undefined;\n        }\n        var data = isBindKey ? undefined : getData(func);\n  \n        var newData = [\n          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n          argPos, ary, arity\n        ];\n  \n        if (data) {\n          mergeData(newData, data);\n        }\n        func = newData[0];\n        bitmask = newData[1];\n        thisArg = newData[2];\n        partials = newData[3];\n        holders = newData[4];\n        arity = newData[9] = newData[9] == null\n          ? (isBindKey ? 0 : func.length)\n          : nativeMax(newData[9] - length, 0);\n  \n        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n        }\n        if (!bitmask || bitmask == BIND_FLAG) {\n          var result = createBaseWrapper(func, bitmask, thisArg);\n        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n          result = createCurryWrapper(func, bitmask, arity);\n        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n          result = createPartialWrapper(func, bitmask, thisArg, partials);\n        } else {\n          result = createHybridWrapper.apply(undefined, newData);\n        }\n        var setter = data ? baseSetData : setData;\n        return setter(result, newData);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for arrays with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Array} array The array to compare.\n       * @param {Array} other The other array to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `array` and `other` objects.\n       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n       */\n      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n        var index = -1,\n            isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            isUnordered = bitmask & UNORDERED_COMPARE_FLAG,\n            arrLength = array.length,\n            othLength = other.length;\n  \n        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(array);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(array, other);\n  \n        // Ignore non-index properties.\n        while (++index < arrLength) {\n          var arrValue = array[index],\n              othValue = other[index];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, arrValue, index, other, array, stack)\n              : customizer(arrValue, othValue, index, array, other, stack);\n          }\n          if (compared !== undefined) {\n            if (compared) {\n              continue;\n            }\n            result = false;\n            break;\n          }\n          // Recursively compare arrays (susceptible to call stack limits).\n          if (isUnordered) {\n            if (!arraySome(other, function(othValue) {\n                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);\n                })) {\n              result = false;\n              break;\n            }\n          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n            result = false;\n            break;\n          }\n        }\n        stack['delete'](array);\n        return result;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for comparing objects of\n       * the same `toStringTag`.\n       *\n       * **Note:** This function only supports comparing values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {string} tag The `toStringTag` of the objects to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {\n        switch (tag) {\n          case arrayBufferTag:\n            if ((object.byteLength != other.byteLength) ||\n                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n              return false;\n            }\n            return true;\n  \n          case boolTag:\n          case dateTag:\n            // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n            // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n            return +object == +other;\n  \n          case errorTag:\n            return object.name == other.name && object.message == other.message;\n  \n          case numberTag:\n            // Treat `NaN` vs. `NaN` as equal.\n            return (object != +object) ? other != +other : object == +other;\n  \n          case regexpTag:\n          case stringTag:\n            // Coerce regexes to strings and treat strings primitives and string\n            // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n            return object == (other + '');\n  \n          case mapTag:\n            var convert = mapToArray;\n  \n          case setTag:\n            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n            convert || (convert = setToArray);\n  \n            // Recursively compare objects (susceptible to call stack limits).\n            return (isPartial || object.size == other.size) &&\n              equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);\n  \n          case symbolTag:\n            return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));\n        }\n        return false;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for objects with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            objProps = keys(object),\n            objLength = objProps.length,\n            othProps = keys(other),\n            othLength = othProps.length;\n  \n        if (objLength != othLength && !isPartial) {\n          return false;\n        }\n        var index = objLength;\n        while (index--) {\n          var key = objProps[index];\n          if (!(isPartial ? key in other : baseHas(other, key))) {\n            return false;\n          }\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(object, other);\n  \n        var skipCtor = isPartial;\n        while (++index < objLength) {\n          key = objProps[index];\n          var objValue = object[key],\n              othValue = other[key];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, objValue, key, other, object, stack)\n              : customizer(objValue, othValue, key, object, other, stack);\n          }\n          // Recursively compare objects (susceptible to call stack limits).\n          if (!(compared === undefined\n                ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n                : compared\n              )) {\n            result = false;\n            break;\n          }\n          skipCtor || (skipCtor = key == 'constructor');\n        }\n        if (result && !skipCtor) {\n          var objCtor = object.constructor,\n              othCtor = other.constructor;\n  \n          // Non `Object` object instances with different constructors are not equal.\n          if (objCtor != othCtor &&\n              ('constructor' in object && 'constructor' in other) &&\n              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n                typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n            result = false;\n          }\n        }\n        stack['delete'](object);\n        return result;\n      }\n  \n      /**\n       * Gets metadata for `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {*} Returns the metadata for `func`.\n       */\n      var getData = !metaMap ? noop : function(func) {\n        return metaMap.get(func);\n      };\n  \n      /**\n       * Gets the name of `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {string} Returns the function name.\n       */\n      function getFuncName(func) {\n        var result = (func.name + ''),\n            array = realNames[result],\n            length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n  \n        while (length--) {\n          var data = array[length],\n              otherFunc = data.func;\n          if (otherFunc == null || otherFunc == func) {\n            return data.name;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the appropriate \"iteratee\" function. If the `_.iteratee` method is\n       * customized this function returns the custom method, otherwise it returns\n       * `baseIteratee`. If arguments are provided the chosen function is invoked\n       * with them and its result is returned.\n       *\n       * @private\n       * @param {*} [value] The value to convert to an iteratee.\n       * @param {number} [arity] The arity of the created iteratee.\n       * @returns {Function} Returns the chosen function or its result.\n       */\n      function getIteratee() {\n        var result = lodash.iteratee || iteratee;\n        result = result === iteratee ? baseIteratee : result;\n        return arguments.length ? result(arguments[0], arguments[1]) : result;\n      }\n  \n      /**\n       * Gets the \"length\" property value of `object`.\n       *\n       * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n       * that affects Safari on at least iOS 8.1-8.3 ARM64.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {*} Returns the \"length\" value.\n       */\n      var getLength = baseProperty('length');\n  \n      /**\n       * Gets the property names, values, and compare flags of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the match data of `object`.\n       */\n      function getMatchData(object) {\n        var result = toPairs(object),\n            length = result.length;\n  \n        while (length--) {\n          result[length][2] = isStrictComparable(result[length][1]);\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the native function at `key` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {string} key The key of the method to get.\n       * @returns {*} Returns the function if it's native, else `undefined`.\n       */\n      function getNative(object, key) {\n        var value = object == null ? undefined : object[key];\n        return isNative(value) ? value : undefined;\n      }\n  \n      /**\n       * Creates an array of the own symbol properties of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of symbols.\n       */\n      var getSymbols = getOwnPropertySymbols || function() {\n        return [];\n      };\n  \n      /**\n       * Gets the `toStringTag` of `value`.\n       *\n       * @private\n       * @param {*} value The value to query.\n       * @returns {string} Returns the `toStringTag`.\n       */\n      function getTag(value) {\n        return objectToString.call(value);\n      }\n  \n      // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.\n      if ((Map && getTag(new Map) != mapTag) ||\n          (Set && getTag(new Set) != setTag) ||\n          (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n        getTag = function(value) {\n          var result = objectToString.call(value),\n              Ctor = result == objectTag ? value.constructor : null,\n              ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';\n  \n          if (ctorString) {\n            switch (ctorString) {\n              case mapCtorString: return mapTag;\n              case setCtorString: return setTag;\n              case weakMapCtorString: return weakMapTag;\n            }\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Gets the view, applying any `transforms` to the `start` and `end` positions.\n       *\n       * @private\n       * @param {number} start The start of the view.\n       * @param {number} end The end of the view.\n       * @param {Array} transforms The transformations to apply to the view.\n       * @returns {Object} Returns an object containing the `start` and `end`\n       *  positions of the view.\n       */\n      function getView(start, end, transforms) {\n        var index = -1,\n            length = transforms.length;\n  \n        while (++index < length) {\n          var data = transforms[index],\n              size = data.size;\n  \n          switch (data.type) {\n            case 'drop':      start += size; break;\n            case 'dropRight': end -= size; break;\n            case 'take':      end = nativeMin(end, start + size); break;\n            case 'takeRight': start = nativeMax(start, end - size); break;\n          }\n        }\n        return { 'start': start, 'end': end };\n      }\n  \n      /**\n       * Checks if `path` exists on `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @param {Function} hasFunc The function to check properties.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       */\n      function hasPath(object, path, hasFunc) {\n        if (object == null) {\n          return false;\n        }\n        var result = hasFunc(object, path);\n        if (!result && !isKey(path)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          if (object != null) {\n            path = last(path);\n            result = hasFunc(object, path);\n          }\n        }\n        var length = object ? object.length : undefined;\n        return result || (\n          !!length && isLength(length) && isIndex(path, length) &&\n          (isArray(object) || isString(object) || isArguments(object))\n        );\n      }\n  \n      /**\n       * Initializes an array clone.\n       *\n       * @private\n       * @param {Array} array The array to clone.\n       * @returns {Array} Returns the initialized clone.\n       */\n      function initCloneArray(array) {\n        var length = array.length,\n            result = array.constructor(length);\n  \n        // Add properties assigned by `RegExp#exec`.\n        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n          result.index = array.index;\n          result.input = array.input;\n        }\n        return result;\n      }\n  \n      /**\n       * Initializes an object clone.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneObject(object) {\n        if (isPrototype(object)) {\n          return {};\n        }\n        var Ctor = object.constructor;\n        return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n  \n      /**\n       * Initializes an object clone based on its `toStringTag`.\n       *\n       * **Note:** This function only supports cloning values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @param {string} tag The `toStringTag` of the object to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneByTag(object, tag, isDeep) {\n        var Ctor = object.constructor;\n        switch (tag) {\n          case arrayBufferTag:\n            return cloneArrayBuffer(object);\n  \n          case boolTag:\n          case dateTag:\n            return new Ctor(+object);\n  \n          case float32Tag: case float64Tag:\n          case int8Tag: case int16Tag: case int32Tag:\n          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n  \n          case mapTag:\n            return cloneMap(object);\n  \n          case numberTag:\n          case stringTag:\n            return new Ctor(object);\n  \n          case regexpTag:\n            return cloneRegExp(object);\n  \n          case setTag:\n            return cloneSet(object);\n  \n          case symbolTag:\n            return cloneSymbol(object);\n        }\n      }\n  \n      /**\n       * Creates an array of index keys for `object` values of arrays,\n       * `arguments` objects, and strings, otherwise `null` is returned.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array|null} Returns index keys, else `null`.\n       */\n      function indexKeys(object) {\n        var length = object ? object.length : undefined;\n        if (isLength(length) &&\n            (isArray(object) || isString(object) || isArguments(object))) {\n          return baseTimes(length, String);\n        }\n        return null;\n      }\n  \n      /**\n       * Checks if the given arguments are from an iteratee call.\n       *\n       * @private\n       * @param {*} value The potential iteratee value argument.\n       * @param {*} index The potential iteratee index or key argument.\n       * @param {*} object The potential iteratee object argument.\n       * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n       */\n      function isIterateeCall(value, index, object) {\n        if (!isObject(object)) {\n          return false;\n        }\n        var type = typeof index;\n        if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)) {\n          return eq(object[index], value);\n        }\n        return false;\n      }\n  \n      /**\n       * Checks if `value` is a property name and not a property path.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @param {Object} [object] The object to query keys on.\n       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n       */\n      function isKey(value, object) {\n        if (typeof value == 'number') {\n          return true;\n        }\n        return !isArray(value) &&\n          (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n            (object != null && value in Object(object)));\n      }\n  \n      /**\n       * Checks if `value` is suitable for use as unique object key.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n       */\n      function isKeyable(value) {\n        var type = typeof value;\n        return type == 'number' || type == 'boolean' ||\n          (type == 'string' && value != '__proto__') || value == null;\n      }\n  \n      /**\n       * Checks if `func` has a lazy counterpart.\n       *\n       * @private\n       * @param {Function} func The function to check.\n       * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n       */\n      function isLaziable(func) {\n        var funcName = getFuncName(func),\n            other = lodash[funcName];\n  \n        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n          return false;\n        }\n        if (func === other) {\n          return true;\n        }\n        var data = getData(other);\n        return !!data && func === data[0];\n      }\n  \n      /**\n       * Checks if `value` is likely a prototype object.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n       */\n      function isPrototype(value) {\n        var Ctor = value && value.constructor,\n            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n  \n        return value === proto;\n      }\n  \n      /**\n       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` if suitable for strict\n       *  equality comparisons, else `false`.\n       */\n      function isStrictComparable(value) {\n        return value === value && !isObject(value);\n      }\n  \n      /**\n       * Merges the function metadata of `source` into `data`.\n       *\n       * Merging metadata reduces the number of wrappers used to invoke a function.\n       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n       * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n       * modify function arguments, making the order in which they are executed important,\n       * preventing the merging of metadata. However, we make an exception for a safe\n       * combined case where curried functions have `_.ary` and or `_.rearg` applied.\n       *\n       * @private\n       * @param {Array} data The destination metadata.\n       * @param {Array} source The source metadata.\n       * @returns {Array} Returns `data`.\n       */\n      function mergeData(data, source) {\n        var bitmask = data[1],\n            srcBitmask = source[1],\n            newBitmask = bitmask | srcBitmask,\n            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n  \n        var isCombo =\n          (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||\n          (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= 0=\"\" 1=\"\" source[8]))=\"\" ||=\"\" (srcbitmask=\"=\" (ary_flag=\"\" |=\"\" rearg_flag)=\"\" &&=\"\" (source[7].length=\"\" <=\"source[8])\" (bitmask=\"=\" curry_flag));=\"\" exit=\"\" early=\"\" if=\"\" metadata=\"\" can't=\"\" be=\"\" merged.=\"\" (!(iscommon=\"\" iscombo))=\"\" {=\"\" return=\"\" data;=\"\" }=\"\" use=\"\" source=\"\" `thisarg`=\"\" available.=\"\" &=\"\" bind_flag)=\"\" data[2]=\"source[2];\" set=\"\" when=\"\" currying=\"\" a=\"\" bound=\"\" function.=\"\" newbitmask=\"\" ?=\"\" :=\"\" curry_bound_flag;=\"\" compose=\"\" partial=\"\" arguments.=\"\" var=\"\" value=\"source[3];\" (value)=\"\" partials=\"data[3];\" data[3]=\"partials\" composeargs(partials,=\"\" value,=\"\" source[4])=\"\" copyarray(value);=\"\" data[4]=\"partials\" replaceholders(data[3],=\"\" placeholder)=\"\" copyarray(source[4]);=\"\" right=\"\" data[5]=\"partials\" composeargsright(partials,=\"\" source[6])=\"\" data[6]=\"partials\" replaceholders(data[5],=\"\" copyarray(source[6]);=\"\" `argpos`=\"\" data[7]=\"copyArray(value);\" `ary`=\"\" it's=\"\" smaller.=\"\" ary_flag)=\"\" data[8]=\"data[8]\" ==\"null\" source[8]=\"\" nativemin(data[8],=\"\" source[8]);=\"\" `arity`=\"\" one=\"\" is=\"\" not=\"\" provided.=\"\" (data[9]=\"=\" null)=\"\" data[9]=\"source[9];\" `func`=\"\" and=\"\" merge=\"\" bitmasks.=\"\" data[0]=\"source[0];\" data[1]=\"newBitmask;\" **=\"\" *=\"\" used=\"\" by=\"\" `_.defaultsdeep`=\"\" to=\"\" customize=\"\" its=\"\" `_.merge`=\"\" use.=\"\" @private=\"\" @param=\"\" {*}=\"\" objvalue=\"\" the=\"\" destination=\"\" value.=\"\" srcvalue=\"\" {string}=\"\" key=\"\" of=\"\" property=\"\" merge.=\"\" {object}=\"\" object=\"\" parent=\"\" `objvalue`.=\"\" `srcvalue`.=\"\" [stack]=\"\" tracks=\"\" traversed=\"\" values=\"\" their=\"\" merged=\"\" counterparts.=\"\" @returns=\"\" returns=\"\" assign.=\"\" function=\"\" mergedefaults(objvalue,=\"\" srcvalue,=\"\" key,=\"\" object,=\"\" source,=\"\" stack)=\"\" (isobject(objvalue)=\"\" isobject(srcvalue))=\"\" stack.set(srcvalue,=\"\" objvalue);=\"\" basemerge(objvalue,=\"\" undefined,=\"\" mergedefaults,=\"\" stack);=\"\" objvalue;=\"\" gets=\"\" at=\"\" `path`=\"\" `object`.=\"\" query.=\"\" {array}=\"\" path=\"\" get=\"\" of.=\"\" parent(object,=\"\" path)=\"\" path.length=\"=\" get(object,=\"\" baseslice(path,=\"\" 0,=\"\" -1));=\"\" reorder=\"\" `array`=\"\" according=\"\" specified=\"\" indexes=\"\" where=\"\" element=\"\" first=\"\" index=\"\" assigned=\"\" as=\"\" element,=\"\" second=\"\" so=\"\" on.=\"\" array=\"\" reorder.=\"\" arranged=\"\" indexes.=\"\" `array`.=\"\" reorder(array,=\"\" indexes)=\"\" arrlength=\"array.length,\" length=\"nativeMin(indexes.length,\" arrlength),=\"\" oldarray=\"copyArray(array);\" while=\"\" (length--)=\"\" array[length]=\"isIndex(index,\" arrlength)=\"\" oldarray[index]=\"\" undefined;=\"\" array;=\"\" sets=\"\" for=\"\" `func`.=\"\" **note:**=\"\" this=\"\" becomes=\"\" hot,=\"\" i.e.=\"\" invoked=\"\" lot=\"\" in=\"\" short=\"\" period=\"\" time,=\"\" it=\"\" will=\"\" trip=\"\" breaker=\"\" transition=\"\" an=\"\" identity=\"\" avoid=\"\" garbage=\"\" collection=\"\" pauses=\"\" v8.=\"\" see=\"\" [v8=\"\" issue=\"\" 2070](https:=\"\" code.google.com=\"\" p=\"\" v8=\"\" issues=\"\" detail?id=\"2070)\" more=\"\" details.=\"\" {function}=\"\" func=\"\" associate=\"\" with.=\"\" data=\"\" metadata.=\"\" setdata=\"(function()\" count=\"0,\" lastcalled=\"0;\" function(key,=\"\" value)=\"\" stamp=\"now(),\" remaining=\"HOT_SPAN\" -=\"\" (stamp=\"\" lastcalled);=\"\" (remaining=\"\"> 0) {\n            if (++count >= HOT_COUNT) {\n              return key;\n            }\n          } else {\n            count = 0;\n          }\n          return baseSetData(key, value);\n        };\n      }());\n  \n      /**\n       * Converts `string` to a property path array.\n       *\n       * @private\n       * @param {string} string The string to convert.\n       * @returns {Array} Returns the property path array.\n       */\n      function stringToPath(string) {\n        var result = [];\n        toString(string).replace(rePropName, function(match, number, quote, string) {\n          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n        });\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `wrapper`.\n       *\n       * @private\n       * @param {Object} wrapper The wrapper to clone.\n       * @returns {Object} Returns the cloned wrapper.\n       */\n      function wrapperClone(wrapper) {\n        if (wrapper instanceof LazyWrapper) {\n          return wrapper.clone();\n        }\n        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n        result.__actions__ = copyArray(wrapper.__actions__);\n        result.__index__  = wrapper.__index__;\n        result.__values__ = wrapper.__values__;\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an array of elements split into groups the length of `size`.\n       * If `array` can't be split evenly, the final chunk will be the remaining\n       * elements.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to process.\n       * @param {number} [size=0] The length of each chunk.\n       * @returns {Array} Returns the new array containing chunks.\n       * @example\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 2);\n       * // => [['a', 'b'], ['c', 'd']]\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 3);\n       * // => [['a', 'b', 'c'], ['d']]\n       */\n      function chunk(array, size) {\n        size = nativeMax(toInteger(size), 0);\n  \n        var length = array ? array.length : 0;\n        if (!length || size < 1) {\n          return [];\n        }\n        var index = 0,\n            resIndex = -1,\n            result = Array(nativeCeil(length / size));\n  \n        while (index < length) {\n          result[++resIndex] = baseSlice(array, index, (index += size));\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array with all falsey values removed. The values `false`, `null`,\n       * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to compact.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.compact([0, 1, false, 2, '', 3]);\n       * // => [1, 2, 3]\n       */\n      function compact(array) {\n        var index = -1,\n            length = array ? array.length : 0,\n            resIndex = -1,\n            result = [];\n  \n        while (++index < length) {\n          var value = array[index];\n          if (value) {\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a new array concatenating `array` with any additional arrays\n       * and/or values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to concatenate.\n       * @param {...*} [values] The values to concatenate.\n       * @returns {Array} Returns the new concatenated array.\n       * @example\n       *\n       * var array = [1];\n       * var other = _.concat(array, 2, [3], [[4]]);\n       *\n       * console.log(other);\n       * // => [1, 2, 3, [4]]\n       *\n       * console.log(array);\n       * // => [1]\n       */\n      var concat = rest(function(array, values) {\n        if (!isArray(array)) {\n          array = array == null ? [] : [Object(array)];\n        }\n        values = baseFlatten(values, 1);\n        return arrayConcat(array, values);\n      });\n  \n      /**\n       * Creates an array of unique `array` values not included in the other\n       * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.difference([3, 2, 1], [4, 2]);\n       * // => [3, 1]\n       */\n      var difference = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `iteratee` which\n       * is invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n       * // => [3.1, 1.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var differenceBy = rest(function(array, values) {\n        var iteratee = last(values);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `comparator`\n       * which is invoked to compare elements of `array` to `values`. The comparator\n       * is invoked with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       *\n       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }]\n       */\n      var differenceWith = rest(function(array, values) {\n        var comparator = last(values);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.drop([1, 2, 3]);\n       * // => [2, 3]\n       *\n       * _.drop([1, 2, 3], 2);\n       * // => [3]\n       *\n       * _.drop([1, 2, 3], 5);\n       * // => []\n       *\n       * _.drop([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function drop(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.dropRight([1, 2, 3]);\n       * // => [1, 2]\n       *\n       * _.dropRight([1, 2, 3], 2);\n       * // => [1]\n       *\n       * _.dropRight([1, 2, 3], 5);\n       * // => []\n       *\n       * _.dropRight([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function dropRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the end.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.dropRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropRightWhile(users, ['active', false]);\n       * // => objects for ['barney']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropRightWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the beginning.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.dropWhile(users, function(o) { return !o.active; });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropWhile(users, ['active', false]);\n       * // => objects for ['pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true)\n          : [];\n      }\n  \n      /**\n       * Fills elements of `array` with `value` from `start` up to, but not\n       * including, `end`.\n       *\n       * **Note:** This method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.fill(array, 'a');\n       * console.log(array);\n       * // => ['a', 'a', 'a']\n       *\n       * _.fill(Array(3), 2);\n       * // => [2, 2, 2]\n       *\n       * _.fill([4, 6, 8, 10], '*', 1, 3);\n       * // => [4, '*', '*', 10]\n       */\n      function fill(array, value, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n          start = 0;\n          end = length;\n        }\n        return baseFill(array, value, start, end);\n      }\n  \n      /**\n       * This method is like `_.find` except that it returns the index of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.findIndex(users, function(o) { return o.user == 'barney'; });\n       * // => 0\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findIndex(users, { 'user': 'fred', 'active': false });\n       * // => 1\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findIndex(users, ['active', false]);\n       * // => 0\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findIndex(users, 'active');\n       * // => 2\n       */\n      function findIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3))\n          : -1;\n      }\n  \n      /**\n       * This method is like `_.findIndex` except that it iterates over elements\n       * of `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n       * // => 2\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n       * // => 0\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastIndex(users, ['active', false]);\n       * // => 2\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastIndex(users, 'active');\n       * // => 0\n       */\n      function findLastIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3), true)\n          : -1;\n      }\n  \n      /**\n       * Flattens `array` a single level deep.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flatten([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, [3, [4]], 5]\n       */\n      function flatten(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, 1) : [];\n      }\n  \n      /**\n       * Recursively flattens `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flattenDeep([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, 3, 4, 5]\n       */\n      function flattenDeep(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, INFINITY) : [];\n      }\n  \n      /**\n       * Recursively flatten `array` up to `depth` times.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @param {number} [depth=1] The maximum recursion depth.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * var array = [1, [2, [3, [4]], 5]];\n       *\n       * _.flattenDepth(array, 1);\n       * // => [1, 2, [3, [4]], 5]\n       *\n       * _.flattenDepth(array, 2);\n       * // => [1, 2, 3, [4], 5]\n       */\n      function flattenDepth(array, depth) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        depth = depth === undefined ? 1 : toInteger(depth);\n        return baseFlatten(array, depth);\n      }\n  \n      /**\n       * The inverse of `_.toPairs`; this method returns an object composed\n       * from key-value `pairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} pairs The key-value pairs.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.fromPairs([['fred', 30], ['barney', 40]]);\n       * // => { 'fred': 30, 'barney': 40 }\n       */\n      function fromPairs(pairs) {\n        var index = -1,\n            length = pairs ? pairs.length : 0,\n            result = {};\n  \n        while (++index < length) {\n          var pair = pairs[index];\n          result[pair[0]] = pair[1];\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @alias first\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the first element of `array`.\n       * @example\n       *\n       * _.head([1, 2, 3]);\n       * // => 1\n       *\n       * _.head([]);\n       * // => undefined\n       */\n      function head(array) {\n        return array ? array[0] : undefined;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `value` is found in `array`\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n       * from the end of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.indexOf([1, 2, 1, 2], 2);\n       * // => 1\n       *\n       * // Search from the `fromIndex`.\n       * _.indexOf([1, 2, 1, 2], 2, 2);\n       * // => 3\n       */\n      function indexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        fromIndex = toInteger(fromIndex);\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return baseIndexOf(array, value, fromIndex);\n      }\n  \n      /**\n       * Gets all but the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.initial([1, 2, 3]);\n       * // => [1, 2]\n       */\n      function initial(array) {\n        return dropRight(array, 1);\n      }\n  \n      /**\n       * Creates an array of unique values that are included in all given arrays\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersection([2, 1], [4, 2], [1, 2]);\n       * // => [2]\n       */\n      var intersection = rest(function(arrays) {\n        var mapped = arrayMap(arrays, baseCastArrayLikeObject);\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped)\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `iteratee`\n       * which is invoked for each element of each `arrays` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }]\n       */\n      var intersectionBy = rest(function(arrays) {\n        var iteratee = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (iteratee === last(mapped)) {\n          iteratee = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `comparator`\n       * which is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.intersectionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }]\n       */\n      var intersectionWith = rest(function(arrays) {\n        var comparator = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (comparator === last(mapped)) {\n          comparator = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Converts all elements in `array` into a string separated by `separator`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to convert.\n       * @param {string} [separator=','] The element separator.\n       * @returns {string} Returns the joined string.\n       * @example\n       *\n       * _.join(['a', 'b', 'c'], '~');\n       * // => 'a~b~c'\n       */\n      function join(array, separator) {\n        return array ? nativeJoin.call(array, separator) : '';\n      }\n  \n      /**\n       * Gets the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the last element of `array`.\n       * @example\n       *\n       * _.last([1, 2, 3]);\n       * // => 3\n       */\n      function last(array) {\n        var length = array ? array.length : 0;\n        return length ? array[length - 1] : undefined;\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it iterates over elements of\n       * `array` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=array.length-1] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.lastIndexOf([1, 2, 1, 2], 2);\n       * // => 3\n       *\n       * // Search from the `fromIndex`.\n       * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n       * // => 1\n       */\n      function lastIndexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        var index = length;\n        if (fromIndex !== undefined) {\n          index = toInteger(fromIndex);\n          index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;\n        }\n        if (value !== value) {\n          return indexOfNaN(array, index, true);\n        }\n        while (index--) {\n          if (array[index] === value) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Removes all given values from `array` using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * **Note:** Unlike `_.without`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...*} [values] The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pull(array, 2, 3);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      var pull = rest(pullAll);\n  \n      /**\n       * This method is like `_.pull` except that it accepts an array of values to remove.\n       *\n       * **Note:** Unlike `_.difference`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pullAll(array, [2, 3]);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      function pullAll(array, values) {\n        return (array && array.length && values && values.length)\n          ? basePullAll(array, values)\n          : array;\n      }\n  \n      /**\n       * This method is like `_.pullAll` except that it accepts `iteratee` which is\n       * invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n       *\n       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n       * console.log(array);\n       * // => [{ 'x': 2 }]\n       */\n      function pullAllBy(array, values, iteratee) {\n        return (array && array.length && values && values.length)\n          ? basePullAllBy(array, values, getIteratee(iteratee))\n          : array;\n      }\n  \n      /**\n       * Removes elements from `array` corresponding to `indexes` and returns an\n       * array of removed elements.\n       *\n       * **Note:** Unlike `_.at`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [5, 10, 15, 20];\n       * var evens = _.pullAt(array, 1, 3);\n       *\n       * console.log(array);\n       * // => [5, 15]\n       *\n       * console.log(evens);\n       * // => [10, 20]\n       */\n      var pullAt = rest(function(array, indexes) {\n        indexes = arrayMap(baseFlatten(indexes, 1), String);\n  \n        var result = baseAt(array, indexes);\n        basePullAt(array, indexes.sort(compareAscending));\n        return result;\n      });\n  \n      /**\n       * Removes all elements from `array` that `predicate` returns truthy for\n       * and returns an array of the removed elements. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * **Note:** Unlike `_.filter`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [1, 2, 3, 4];\n       * var evens = _.remove(array, function(n) {\n       *   return n % 2 == 0;\n       * });\n       *\n       * console.log(array);\n       * // => [1, 3]\n       *\n       * console.log(evens);\n       * // => [2, 4]\n       */\n      function remove(array, predicate) {\n        var result = [];\n        if (!(array && array.length)) {\n          return result;\n        }\n        var index = -1,\n            indexes = [],\n            length = array.length;\n  \n        predicate = getIteratee(predicate, 3);\n        while (++index < length) {\n          var value = array[index];\n          if (predicate(value, index, array)) {\n            result.push(value);\n            indexes.push(index);\n          }\n        }\n        basePullAt(array, indexes);\n        return result;\n      }\n  \n      /**\n       * Reverses `array` so that the first element becomes the last, the second\n       * element becomes the second to last, and so on.\n       *\n       * **Note:** This method mutates `array` and is based on\n       * [`Array#reverse`](https://mdn.io/Array/reverse).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.reverse(array);\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function reverse(array) {\n        return array ? nativeReverse.call(array) : array;\n      }\n  \n      /**\n       * Creates a slice of `array` from `start` up to, but not including, `end`.\n       *\n       * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)\n       * to ensure dense arrays are returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function slice(array, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n          start = 0;\n          end = length;\n        }\n        else {\n          start = start == null ? 0 : toInteger(start);\n          end = end === undefined ? length : toInteger(end);\n        }\n        return baseSlice(array, start, end);\n      }\n  \n      /**\n       * Uses a binary search to determine the lowest index at which `value` should\n       * be inserted into `array` in order to maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedIndex([30, 50], 40);\n       * // => 1\n       *\n       * _.sortedIndex([4, 5], 4);\n       * // => 0\n       */\n      function sortedIndex(array, value) {\n        return baseSortedIndex(array, value);\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n       *\n       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n       * // => 1\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 0\n       */\n      function sortedIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee));\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedIndexOf([1, 1, 2, 2], 2);\n       * // => 2\n       */\n      function sortedIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value);\n          if (index < length && eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it returns the highest\n       * index at which `value` should be inserted into `array` in order to\n       * maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedLastIndex([4, 5], 4);\n       * // => 1\n       */\n      function sortedLastIndex(array, value) {\n        return baseSortedIndex(array, value, true);\n      }\n  \n      /**\n       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 1\n       */\n      function sortedLastIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee), true);\n      }\n  \n      /**\n       * This method is like `_.lastIndexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedLastIndexOf([1, 1, 2, 2], 2);\n       * // => 3\n       */\n      function sortedLastIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value, true) - 1;\n          if (eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniq([1, 1, 2]);\n       * // => [1, 2]\n       */\n      function sortedUniq(array) {\n        return (array && array.length)\n          ? baseSortedUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniqBy` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n       * // => [1.1, 2.3]\n       */\n      function sortedUniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSortedUniqBy(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * Gets all but the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.tail([1, 2, 3]);\n       * // => [2, 3]\n       */\n      function tail(array) {\n        return drop(array, 1);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.take([1, 2, 3]);\n       * // => [1]\n       *\n       * _.take([1, 2, 3], 2);\n       * // => [1, 2]\n       *\n       * _.take([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.take([1, 2, 3], 0);\n       * // => []\n       */\n      function take(array, n, guard) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.takeRight([1, 2, 3]);\n       * // => [3]\n       *\n       * _.takeRight([1, 2, 3], 2);\n       * // => [2, 3]\n       *\n       * _.takeRight([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.takeRight([1, 2, 3], 0);\n       * // => []\n       */\n      function takeRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the end. Elements are\n       * taken until `predicate` returns falsey. The predicate is invoked with three\n       * arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.takeRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeRightWhile(users, ['active', false]);\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeRightWhile(users, 'active');\n       * // => []\n       */\n      function takeRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), false, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the beginning. Elements\n       * are taken until `predicate` returns falsey. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false},\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.takeWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeWhile(users, ['active', false]);\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeWhile(users, 'active');\n       * // => []\n       */\n      function takeWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3))\n          : [];\n      }\n  \n      /**\n       * Creates an array of unique values, in order, from all given arrays using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.union([2, 1], [4, 2], [1, 2]);\n       * // => [2, 1, 4]\n       */\n      var union = rest(function(arrays) {\n        return baseUniq(baseFlatten(arrays, 1, true));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1, 1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      var unionBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `comparator` which\n       * is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.unionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var unionWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);\n      });\n  \n      /**\n       * Creates a duplicate-free version of an array, using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons, in which only the first occurrence of each element\n       * is kept.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniq([2, 1, 2]);\n       * // => [2, 1]\n       */\n      function uniq(array) {\n        return (array && array.length)\n          ? baseUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n       * // => [2.1, 1.2]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      function uniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseUniq(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `comparator` which\n       * is invoked to compare elements of `array`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n       *\n       * _.uniqWith(objects, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n       */\n      function uniqWith(array, comparator) {\n        return (array && array.length)\n          ? baseUniq(array, undefined, comparator)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts an array of grouped\n       * elements and creates an array regrouping the elements to their pre-zip\n       * configuration.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       *\n       * _.unzip(zipped);\n       * // => [['fred', 'barney'], [30, 40], [true, false]]\n       */\n      function unzip(array) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var length = 0;\n        array = arrayFilter(array, function(group) {\n          if (isArrayLikeObject(group)) {\n            length = nativeMax(group.length, length);\n            return true;\n          }\n        });\n        return baseTimes(length, function(index) {\n          return arrayMap(array, baseProperty(index));\n        });\n      }\n  \n      /**\n       * This method is like `_.unzip` except that it accepts `iteratee` to specify\n       * how regrouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n       * // => [[1, 10, 100], [2, 20, 200]]\n       *\n       * _.unzipWith(zipped, _.add);\n       * // => [3, 30, 300]\n       */\n      function unzipWith(array, iteratee) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var result = unzip(array);\n        if (iteratee == null) {\n          return result;\n        }\n        return arrayMap(result, function(group) {\n          return apply(iteratee, undefined, group);\n        });\n      }\n  \n      /**\n       * Creates an array excluding all given values using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to filter.\n       * @param {...*} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.without([1, 2, 1, 3], 1, 2);\n       * // => [3]\n       */\n      var without = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, values)\n          : [];\n      });\n  \n      /**\n       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n       * of the given arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xor([2, 1], [4, 2]);\n       * // => [1, 4]\n       */\n      var xor = rest(function(arrays) {\n        return baseXor(arrayFilter(arrays, isArrayLikeObject));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var xorBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `comparator` which is\n       * invoked to compare elements of `arrays`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.xorWith(objects, others, _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var xorWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n      });\n  \n      /**\n       * Creates an array of grouped elements, the first of which contains the first\n       * elements of the given arrays, the second of which contains the second elements\n       * of the given arrays, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       */\n      var zip = rest(unzip);\n  \n      /**\n       * This method is like `_.fromPairs` except that it accepts two arrays,\n       * one of property names and one of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObject(['a', 'b'], [1, 2]);\n       * // => { 'a': 1, 'b': 2 }\n       */\n      function zipObject(props, values) {\n        return baseZipObject(props || [], values || [], assignValue);\n      }\n  \n      /**\n       * This method is like `_.zipObject` except that it supports property paths.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n       */\n      function zipObjectDeep(props, values) {\n        return baseZipObject(props || [], values || [], baseSet);\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts `iteratee` to specify\n       * how grouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n       *   return a + b + c;\n       * });\n       * // => [111, 222]\n       */\n      var zipWith = rest(function(arrays) {\n        var length = arrays.length,\n            iteratee = length > 1 ? arrays[length - 1] : undefined;\n  \n        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n        return unzipWith(arrays, iteratee);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.\n       * The result of such method chaining must be unwrapped with `_#value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to wrap.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36 },\n       *   { 'user': 'fred',    'age': 40 },\n       *   { 'user': 'pebbles', 'age': 1 }\n       * ];\n       *\n       * var youngest = _\n       *   .chain(users)\n       *   .sortBy('age')\n       *   .map(function(o) {\n       *     return o.user + ' is ' + o.age;\n       *   })\n       *   .head()\n       *   .value();\n       * // => 'pebbles is 1'\n       */\n      function chain(value) {\n        var result = lodash(value);\n        result.__chain__ = true;\n        return result;\n      }\n  \n      /**\n       * This method invokes `interceptor` and returns `value`. The interceptor\n       * is invoked with one argument; (value). The purpose of this method is to\n       * \"tap into\" a method chain in order to modify intermediate results.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * _([1, 2, 3])\n       *  .tap(function(array) {\n       *    // Mutate input array.\n       *    array.pop();\n       *  })\n       *  .reverse()\n       *  .value();\n       * // => [2, 1]\n       */\n      function tap(value, interceptor) {\n        interceptor(value);\n        return value;\n      }\n  \n      /**\n       * This method is like `_.tap` except that it returns the result of `interceptor`.\n       * The purpose of this method is to \"pass thru\" values replacing intermediate\n       * results in a method chain.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns the result of `interceptor`.\n       * @example\n       *\n       * _('  abc  ')\n       *  .chain()\n       *  .trim()\n       *  .thru(function(value) {\n       *    return [value];\n       *  })\n       *  .value();\n       * // => ['abc']\n       */\n      function thru(value, interceptor) {\n        return interceptor(value);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.at`.\n       *\n       * @name at\n       * @memberOf _\n       * @category Seq\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _(object).at(['a[0].b.c', 'a[1]']).value();\n       * // => [3, 4]\n       *\n       * _(['a', 'b', 'c']).at(0, 2).value();\n       * // => ['a', 'c']\n       */\n      var wrapperAt = rest(function(paths) {\n        paths = baseFlatten(paths, 1);\n        var length = paths.length,\n            start = length ? paths[0] : 0,\n            value = this.__wrapped__,\n            interceptor = function(object) { return baseAt(object, paths); };\n  \n        if (length > 1 || this.__actions__.length ||\n            !(value instanceof LazyWrapper) || !isIndex(start)) {\n          return this.thru(interceptor);\n        }\n        value = value.slice(start, +start + (length ? 1 : 0));\n        value.__actions__.push({\n          'func': thru,\n          'args': [interceptor],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(value, this.__chain__).thru(function(array) {\n          if (length && !array.length) {\n            array.push(undefined);\n          }\n          return array;\n        });\n      });\n  \n      /**\n       * Enables explicit method chaining on the wrapper object.\n       *\n       * @name chain\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // A sequence without explicit chaining.\n       * _(users).head();\n       * // => { 'user': 'barney', 'age': 36 }\n       *\n       * // A sequence with explicit chaining.\n       * _(users)\n       *   .chain()\n       *   .head()\n       *   .pick('user')\n       *   .value();\n       * // => { 'user': 'barney' }\n       */\n      function wrapperChain() {\n        return chain(this);\n      }\n  \n      /**\n       * Executes the chained sequence and returns the wrapped result.\n       *\n       * @name commit\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2];\n       * var wrapped = _(array).push(3);\n       *\n       * console.log(array);\n       * // => [1, 2]\n       *\n       * wrapped = wrapped.commit();\n       * console.log(array);\n       * // => [1, 2, 3]\n       *\n       * wrapped.last();\n       * // => 3\n       *\n       * console.log(array);\n       * // => [1, 2, 3]\n       */\n      function wrapperCommit() {\n        return new LodashWrapper(this.value(), this.__chain__);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.flatMap`.\n       *\n       * @name flatMap\n       * @memberOf _\n       * @category Seq\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _([1, 2]).flatMap(duplicate).value();\n       * // => [1, 1, 2, 2]\n       */\n      function wrapperFlatMap(iteratee) {\n        return this.map(iteratee).flatten();\n      }\n  \n      /**\n       * Gets the next value on a wrapped object following the\n       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n       *\n       * @name next\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the next iterator value.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 1 }\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 2 }\n       *\n       * wrapped.next();\n       * // => { 'done': true, 'value': undefined }\n       */\n      function wrapperNext() {\n        if (this.__values__ === undefined) {\n          this.__values__ = toArray(this.value());\n        }\n        var done = this.__index__ >= this.__values__.length,\n            value = done ? undefined : this.__values__[this.__index__++];\n  \n        return { 'done': done, 'value': value };\n      }\n  \n      /**\n       * Enables the wrapper to be iterable.\n       *\n       * @name Symbol.iterator\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the wrapper object.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped[Symbol.iterator]() === wrapped;\n       * // => true\n       *\n       * Array.from(wrapped);\n       * // => [1, 2]\n       */\n      function wrapperToIterator() {\n        return this;\n      }\n  \n      /**\n       * Creates a clone of the chained sequence planting `value` as the wrapped value.\n       *\n       * @name plant\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to plant.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2]).map(square);\n       * var other = wrapped.plant([3, 4]);\n       *\n       * other.value();\n       * // => [9, 16]\n       *\n       * wrapped.value();\n       * // => [1, 4]\n       */\n      function wrapperPlant(value) {\n        var result,\n            parent = this;\n  \n        while (parent instanceof baseLodash) {\n          var clone = wrapperClone(parent);\n          clone.__index__ = 0;\n          clone.__values__ = undefined;\n          if (result) {\n            previous.__wrapped__ = clone;\n          } else {\n            result = clone;\n          }\n          var previous = clone;\n          parent = parent.__wrapped__;\n        }\n        previous.__wrapped__ = value;\n        return result;\n      }\n  \n      /**\n       * This method is the wrapper version of `_.reverse`.\n       *\n       * **Note:** This method mutates the wrapped array.\n       *\n       * @name reverse\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _(array).reverse().value()\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function wrapperReverse() {\n        var value = this.__wrapped__;\n        if (value instanceof LazyWrapper) {\n          var wrapped = value;\n          if (this.__actions__.length) {\n            wrapped = new LazyWrapper(this);\n          }\n          wrapped = wrapped.reverse();\n          wrapped.__actions__.push({\n            'func': thru,\n            'args': [reverse],\n            'thisArg': undefined\n          });\n          return new LodashWrapper(wrapped, this.__chain__);\n        }\n        return this.thru(reverse);\n      }\n  \n      /**\n       * Executes the chained sequence to extract the unwrapped value.\n       *\n       * @name value\n       * @memberOf _\n       * @alias toJSON, valueOf\n       * @category Seq\n       * @returns {*} Returns the resolved unwrapped value.\n       * @example\n       *\n       * _([1, 2, 3]).value();\n       * // => [1, 2, 3]\n       */\n      function wrapperValue() {\n        return baseWrapperValue(this.__wrapped__, this.__actions__);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the number of times the key was returned by `iteratee`.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.countBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': 1, '6': 2 }\n       *\n       * _.countBy(['one', 'two', 'three'], 'length');\n       * // => { '3': 2, '5': 1 }\n       */\n      var countBy = createAggregator(function(result, value, key) {\n        hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n      });\n  \n      /**\n       * Checks if `predicate` returns truthy for **all** elements of `collection`.\n       * Iteration is stopped once `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n       * @example\n       *\n       * _.every([true, 1, null, 'yes'], Boolean);\n       * // => false\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': false },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.every(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.every(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.every(users, 'active');\n       * // => false\n       */\n      function every(collection, predicate, guard) {\n        var func = isArray(collection) ? arrayEvery : baseEvery;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning an array of all elements\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.filter(users, { 'age': 36, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.filter(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.filter(users, 'active');\n       * // => objects for ['barney']\n       */\n      function filter(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning the first element\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': true },\n       *   { 'user': 'fred',    'age': 40, 'active': false },\n       *   { 'user': 'pebbles', 'age': 1,  'active': true }\n       * ];\n       *\n       * _.find(users, function(o) { return o.age < 40; });\n       * // => object for 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.find(users, { 'age': 1, 'active': true });\n       * // => object for 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.find(users, ['active', false]);\n       * // => object for 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.find(users, 'active');\n       * // => object for 'barney'\n       */\n      function find(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEach);\n      }\n  \n      /**\n       * This method is like `_.find` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * _.findLast([1, 2, 3, 4], function(n) {\n       *   return n % 2 == 1;\n       * });\n       * // => 3\n       */\n      function findLast(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, true);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEachRight);\n      }\n  \n      /**\n       * Creates an array of flattened values by running each element in `collection`\n       * through `iteratee` and concating its result to the other mapped values.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _.flatMap([1, 2], duplicate);\n       * // => [1, 1, 2, 2]\n       */\n      function flatMap(collection, iteratee) {\n        return baseFlatten(map(collection, iteratee), 1);\n      }\n  \n      /**\n       * Iterates over elements of `collection` invoking `iteratee` for each element.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       * Iteratee functions may exit iteration early by explicitly returning `false`.\n       *\n       * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n       * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`\n       * for object iteration.\n       *\n       * @static\n       * @memberOf _\n       * @alias each\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _([1, 2]).forEach(function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `1` then `2`\n       *\n       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forEach(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEach(collection, iteratee)\n          : baseEach(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forEach` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @alias eachRight\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _.forEachRight([1, 2], function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `2` then `1`\n       */\n      function forEachRight(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEachRight(collection, iteratee)\n          : baseEachRight(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is an array of elements responsible for generating the key.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': [4.2], '6': [6.1, 6.3] }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.groupBy(['one', 'two', 'three'], 'length');\n       * // => { '3': ['one', 'two'], '5': ['three'] }\n       */\n      var groupBy = createAggregator(function(result, value, key) {\n        if (hasOwnProperty.call(result, key)) {\n          result[key].push(value);\n        } else {\n          result[key] = [value];\n        }\n      });\n  \n      /**\n       * Checks if `value` is in `collection`. If `collection` is a string it's checked\n       * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * is used for equality comparisons. If `fromIndex` is negative, it's used as\n       * the offset from the end of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object|string} collection The collection to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {boolean} Returns `true` if `value` is found, else `false`.\n       * @example\n       *\n       * _.includes([1, 2, 3], 1);\n       * // => true\n       *\n       * _.includes([1, 2, 3], 1, 2);\n       * // => false\n       *\n       * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n       * // => true\n       *\n       * _.includes('pebbles', 'eb');\n       * // => true\n       */\n      function includes(collection, value, fromIndex, guard) {\n        collection = isArrayLike(collection) ? collection : values(collection);\n        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n  \n        var length = collection.length;\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return isString(collection)\n          ? (fromIndex <= length=\"\" &&=\"\" collection.indexof(value,=\"\" fromindex)=\"\"> -1)\n          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n      }\n  \n      /**\n       * Invokes the method at `path` of each element in `collection`, returning\n       * an array of the results of each invoked method. Any additional arguments\n       * are provided to each invoked method. If `methodName` is a function it's\n       * invoked for, and `this` bound to, each element in `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Array|Function|string} path The path of the method to invoke or\n       *  the function invoked per iteration.\n       * @param {...*} [args] The arguments to invoke each method with.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n       * // => [[1, 5, 7], [1, 2, 3]]\n       *\n       * _.invokeMap([123, 456], String.prototype.split, '');\n       * // => [['1', '2', '3'], ['4', '5', '6']]\n       */\n      var invokeMap = rest(function(collection, path, args) {\n        var index = -1,\n            isFunc = typeof path == 'function',\n            isProp = isKey(path),\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value) {\n          var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n        });\n        return result;\n      });\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the last element responsible for generating the key. The\n       * iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * var array = [\n       *   { 'dir': 'left', 'code': 97 },\n       *   { 'dir': 'right', 'code': 100 }\n       * ];\n       *\n       * _.keyBy(array, function(o) {\n       *   return String.fromCharCode(o.code);\n       * });\n       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n       *\n       * _.keyBy(array, 'dir');\n       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n       */\n      var keyBy = createAggregator(function(result, value, key) {\n        result[key] = value;\n      });\n  \n      /**\n       * Creates an array of values by running each element in `collection` through\n       * `iteratee`. The iteratee is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n       *\n       * The guarded methods are:\n       * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,\n       * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,\n       * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,\n       * and `words`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * _.map([4, 8], square);\n       * // => [16, 64]\n       *\n       * _.map({ 'a': 4, 'b': 8 }, square);\n       * // => [16, 64] (iteration order is not guaranteed)\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.map(users, 'user');\n       * // => ['barney', 'fred']\n       */\n      function map(collection, iteratee) {\n        var func = isArray(collection) ? arrayMap : baseMap;\n        return func(collection, getIteratee(iteratee, 3));\n      }\n  \n      /**\n       * This method is like `_.sortBy` except that it allows specifying the sort\n       * orders of the iteratees to sort by. If `orders` is unspecified, all values\n       * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n       * descending or \"asc\" for ascending sort order of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.\n       * @param {string[]} [orders] The sort orders of `iteratees`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 34 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 36 }\n       * ];\n       *\n       * // Sort by `user` in ascending order and by `age` in descending order.\n       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      function orderBy(collection, iteratees, orders, guard) {\n        if (collection == null) {\n          return [];\n        }\n        if (!isArray(iteratees)) {\n          iteratees = iteratees == null ? [] : [iteratees];\n        }\n        orders = guard ? undefined : orders;\n        if (!isArray(orders)) {\n          orders = orders == null ? [] : [orders];\n        }\n        return baseOrderBy(collection, iteratees, orders);\n      }\n  \n      /**\n       * Creates an array of elements split into two groups, the first of which\n       * contains elements `predicate` returns truthy for, the second of which\n       * contains elements `predicate` returns falsey for. The predicate is\n       * invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of grouped elements.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': false },\n       *   { 'user': 'fred',    'age': 40, 'active': true },\n       *   { 'user': 'pebbles', 'age': 1,  'active': false }\n       * ];\n       *\n       * _.partition(users, function(o) { return o.active; });\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.partition(users, { 'age': 1, 'active': false });\n       * // => objects for [['pebbles'], ['barney', 'fred']]\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.partition(users, ['active', false]);\n       * // => objects for [['barney', 'pebbles'], ['fred']]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.partition(users, 'active');\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       */\n      var partition = createAggregator(function(result, value, key) {\n        result[key ? 0 : 1].push(value);\n      }, function() { return [[], []]; });\n  \n      /**\n       * Reduces `collection` to a value which is the accumulated result of running\n       * each element in `collection` through `iteratee`, where each successive\n       * invocation is supplied the return value of the previous. If `accumulator`\n       * is not given the first element of `collection` is used as the initial\n       * value. The iteratee is invoked with four arguments:\n       * (accumulator, value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.reduce`, `_.reduceRight`, and `_.transform`.\n       *\n       * The guarded methods are:\n       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n       * and `sortBy`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.reduce([1, 2], function(sum, n) {\n       *   return sum + n;\n       * }, 0);\n       * // => 3\n       *\n       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       *   return result;\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n       */\n      function reduce(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduce : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n      }\n  \n      /**\n       * This method is like `_.reduce` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * var array = [[0, 1], [2, 3], [4, 5]];\n       *\n       * _.reduceRight(array, function(flattened, other) {\n       *   return flattened.concat(other);\n       * }, []);\n       * // => [4, 5, 2, 3, 0, 1]\n       */\n      function reduceRight(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduceRight : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n      }\n  \n      /**\n       * The opposite of `_.filter`; this method returns the elements of `collection`\n       * that `predicate` does **not** return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': false },\n       *   { 'user': 'fred',   'age': 40, 'active': true }\n       * ];\n       *\n       * _.reject(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.reject(users, { 'age': 40, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.reject(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.reject(users, 'active');\n       * // => objects for ['barney']\n       */\n      function reject(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        predicate = getIteratee(predicate, 3);\n        return func(collection, function(value, index, collection) {\n          return !predicate(value, index, collection);\n        });\n      }\n  \n      /**\n       * Gets a random element from `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @returns {*} Returns the random element.\n       * @example\n       *\n       * _.sample([1, 2, 3, 4]);\n       * // => 2\n       */\n      function sample(collection) {\n        var array = isArrayLike(collection) ? collection : values(collection),\n            length = array.length;\n  \n        return length > 0 ? array[baseRandom(0, length - 1)] : undefined;\n      }\n  \n      /**\n       * Gets `n` random elements at unique keys from `collection` up to the\n       * size of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @param {number} [n=0] The number of elements to sample.\n       * @returns {Array} Returns the random elements.\n       * @example\n       *\n       * _.sampleSize([1, 2, 3], 2);\n       * // => [3, 1]\n       *\n       * _.sampleSize([1, 2, 3], 4);\n       * // => [2, 3, 1]\n       */\n      function sampleSize(collection, n) {\n        var index = -1,\n            result = toArray(collection),\n            length = result.length,\n            lastIndex = length - 1;\n  \n        n = baseClamp(toInteger(n), 0, length);\n        while (++index < n) {\n          var rand = baseRandom(index, lastIndex),\n              value = result[rand];\n  \n          result[rand] = result[index];\n          result[index] = value;\n        }\n        result.length = n;\n        return result;\n      }\n  \n      /**\n       * Creates an array of shuffled values, using a version of the\n       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to shuffle.\n       * @returns {Array} Returns the new shuffled array.\n       * @example\n       *\n       * _.shuffle([1, 2, 3, 4]);\n       * // => [4, 1, 3, 2]\n       */\n      function shuffle(collection) {\n        return sampleSize(collection, MAX_ARRAY_LENGTH);\n      }\n  \n      /**\n       * Gets the size of `collection` by returning its length for array-like\n       * values or the number of own enumerable properties for objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to inspect.\n       * @returns {number} Returns the collection size.\n       * @example\n       *\n       * _.size([1, 2, 3]);\n       * // => 3\n       *\n       * _.size({ 'a': 1, 'b': 2 });\n       * // => 2\n       *\n       * _.size('pebbles');\n       * // => 7\n       */\n      function size(collection) {\n        if (collection == null) {\n          return 0;\n        }\n        if (isArrayLike(collection)) {\n          var result = collection.length;\n          return (result && isString(collection)) ? stringSize(collection) : result;\n        }\n        return keys(collection).length;\n      }\n  \n      /**\n       * Checks if `predicate` returns truthy for **any** element of `collection`.\n       * Iteration is stopped once `predicate` returns truthy. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       * @example\n       *\n       * _.some([null, 0, 'yes', false], Boolean);\n       * // => true\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': true },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.some(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.some(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.some(users, 'active');\n       * // => true\n       */\n      function some(collection, predicate, guard) {\n        var func = isArray(collection) ? arraySome : baseSome;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Creates an array of elements, sorted in ascending order by the results of\n       * running each element in a collection through each iteratee. This method\n       * performs a stable sort, that is, it preserves the original sort order of\n       * equal elements. The iteratees are invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]\n       *  The iteratees to sort by, specified individually or in arrays.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 34 }\n       * ];\n       *\n       * _.sortBy(users, function(o) { return o.user; });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       *\n       * _.sortBy(users, ['user', 'age']);\n       * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n       *\n       * _.sortBy(users, 'user', function(o) {\n       *   return Math.floor(o.age / 10);\n       * });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      var sortBy = rest(function(collection, iteratees) {\n        if (collection == null) {\n          return [];\n        }\n        var length = iteratees.length;\n        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n          iteratees = [];\n        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n          iteratees.length = 1;\n        }\n        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Gets the timestamp of the number of milliseconds that have elapsed since\n       * the Unix epoch (1 January 1970 00:00:00 UTC).\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Date\n       * @returns {number} Returns the timestamp.\n       * @example\n       *\n       * _.defer(function(stamp) {\n       *   console.log(_.now() - stamp);\n       * }, _.now());\n       * // => logs the number of milliseconds it took for the deferred function to be invoked\n       */\n      var now = Date.now;\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The opposite of `_.before`; this method creates a function that invokes\n       * `func` once it's called `n` or more times.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls before `func` is invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var saves = ['profile', 'settings'];\n       *\n       * var done = _.after(saves.length, function() {\n       *   console.log('done saving!');\n       * });\n       *\n       * _.forEach(saves, function(type) {\n       *   asyncSave({ 'type': type, 'complete': done });\n       * });\n       * // => logs 'done saving!' after the two async saves have completed\n       */\n      function after(n, func) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n < 1) {\n            return func.apply(this, arguments);\n          }\n        };\n      }\n  \n      /**\n       * Creates a function that accepts up to `n` arguments, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @param {number} [n=func.length] The arity cap.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n       * // => [6, 8, 10]\n       */\n      function ary(func, n, guard) {\n        n = guard ? undefined : n;\n        n = (func && n == null) ? func.length : n;\n        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n      }\n  \n      /**\n       * Creates a function that invokes `func`, with the `this` binding and arguments\n       * of the created function, while it's called less than `n` times. Subsequent\n       * calls to the created function return the result of the last `func` invocation.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls at which `func` is no longer invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * jQuery(element).on('click', _.before(5, addContactToList));\n       * // => allows adding up to 4 contacts to the list\n       */\n      function before(n, func) {\n        var result;\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n > 0) {\n            result = func.apply(this, arguments);\n          }\n          if (n <= 1)=\"\" {=\"\" func=\"undefined;\" }=\"\" return=\"\" result;=\"\" };=\"\" **=\"\" *=\"\" creates=\"\" a=\"\" function=\"\" that=\"\" invokes=\"\" `func`=\"\" with=\"\" the=\"\" `this`=\"\" binding=\"\" of=\"\" `thisarg`=\"\" and=\"\" prepends=\"\" any=\"\" additional=\"\" `_.bind`=\"\" arguments=\"\" to=\"\" those=\"\" provided=\"\" bound=\"\" function.=\"\" `_.bind.placeholder`=\"\" value,=\"\" which=\"\" defaults=\"\" `_`=\"\" in=\"\" monolithic=\"\" builds,=\"\" may=\"\" be=\"\" used=\"\" as=\"\" placeholder=\"\" for=\"\" partially=\"\" applied=\"\" arguments.=\"\" **note:**=\"\" unlike=\"\" native=\"\" `function#bind`=\"\" this=\"\" method=\"\" doesn't=\"\" set=\"\" \"length\"=\"\" property=\"\" functions.=\"\" @static=\"\" @memberof=\"\" _=\"\" @category=\"\" @param=\"\" {function}=\"\" bind.=\"\" {*}=\"\" thisarg=\"\" `func`.=\"\" {...*}=\"\" [partials]=\"\" applied.=\"\" @returns=\"\" returns=\"\" new=\"\" @example=\"\" var=\"\" greet=\"function(greeting,\" punctuation)=\"\" greeting=\"\" +=\"\" '=\"\" this.user=\"\" punctuation;=\"\" object=\"{\" 'user':=\"\" 'fred'=\"\" object,=\"\" 'hi');=\"\" bound('!');=\"\" ==\"\"> 'hi fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bind(greet, object, _, '!');\n       * bound('hi');\n       * // => 'hi fred!'\n       */\n      var bind = rest(function(func, thisArg, partials) {\n        var bitmask = BIND_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bind.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(func, bitmask, thisArg, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes the method at `object[key]` and prepends\n       * any additional `_.bindKey` arguments to those provided to the bound function.\n       *\n       * This method differs from `_.bind` by allowing bound functions to reference\n       * methods that may be redefined or don't yet exist.\n       * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n       * for more details.\n       *\n       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Object} object The object to invoke the method on.\n       * @param {string} key The key of the method.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var object = {\n       *   'user': 'fred',\n       *   'greet': function(greeting, punctuation) {\n       *     return greeting + ' ' + this.user + punctuation;\n       *   }\n       * };\n       *\n       * var bound = _.bindKey(object, 'greet', 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * object.greet = function(greeting, punctuation) {\n       *   return greeting + 'ya ' + this.user + punctuation;\n       * };\n       *\n       * bound('!');\n       * // => 'hiya fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bindKey(object, 'greet', _, '!');\n       * bound('hi');\n       * // => 'hiya fred!'\n       */\n      var bindKey = rest(function(object, key, partials) {\n        var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bindKey.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(key, bitmask, object, partials, holders);\n      });\n  \n      /**\n       * Creates a function that accepts arguments of `func` and either invokes\n       * `func` returning its result, if at least `arity` number of arguments have\n       * been provided, or returns a function that accepts the remaining `func`\n       * arguments, and so on. The arity of `func` may be specified if `func.length`\n       * is not sufficient.\n       *\n       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curry(abc);\n       *\n       * curried(1)(2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(1)(_, 3)(2);\n       * // => [1, 2, 3]\n       */\n      function curry(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curry.placeholder;\n        return result;\n      }\n  \n      /**\n       * This method is like `_.curry` except that arguments are applied to `func`\n       * in the manner of `_.partialRight` instead of `_.partial`.\n       *\n       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curryRight(abc);\n       *\n       * curried(3)(2)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(2, 3)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(3)(1, _)(2);\n       * // => [1, 2, 3]\n       */\n      function curryRight(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curryRight.placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a debounced function that delays invoking `func` until after `wait`\n       * milliseconds have elapsed since the last time the debounced function was\n       * invoked. The debounced function comes with a `cancel` method to cancel\n       * delayed `func` invocations and a `flush` method to immediately invoke them.\n       * Provide an options object to indicate whether `func` should be invoked on\n       * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n       * with the last arguments provided to the debounced function. Subsequent calls\n       * to the debounced function return the result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the debounced function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.debounce` and `_.throttle`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to debounce.\n       * @param {number} [wait=0] The number of milliseconds to delay.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=false] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n       *  delayed before it's invoked.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new debounced function.\n       * @example\n       *\n       * // Avoid costly calculations while the window size is in flux.\n       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n       *\n       * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n       * jQuery(element).on('click', _.debounce(sendMail, 300, {\n       *   'leading': true,\n       *   'trailing': false\n       * }));\n       *\n       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n       * var source = new EventSource('/stream');\n       * jQuery(source).on('message', debounced);\n       *\n       * // Cancel the trailing debounced invocation.\n       * jQuery(window).on('popstate', debounced.cancel);\n       */\n      function debounce(func, wait, options) {\n        var args,\n            maxTimeoutId,\n            result,\n            stamp,\n            thisArg,\n            timeoutId,\n            trailingCall,\n            lastCalled = 0,\n            leading = false,\n            maxWait = false,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        wait = toNumber(wait) || 0;\n        if (isObject(options)) {\n          leading = !!options.leading;\n          maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n  \n        function cancel() {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          lastCalled = 0;\n          args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;\n        }\n  \n        function complete(isCalled, id) {\n          if (id) {\n            clearTimeout(id);\n          }\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = undefined;\n            }\n          }\n        }\n  \n        function delayed() {\n          var remaining = wait - (now() - stamp);\n          if (remaining <= 0=\"\" ||=\"\" remaining=\"\"> wait) {\n            complete(trailingCall, maxTimeoutId);\n          } else {\n            timeoutId = setTimeout(delayed, remaining);\n          }\n        }\n  \n        function flush() {\n          if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {\n            result = func.apply(thisArg, args);\n          }\n          cancel();\n          return result;\n        }\n  \n        function maxDelayed() {\n          complete(trailing, timeoutId);\n        }\n  \n        function debounced() {\n          args = arguments;\n          stamp = now();\n          thisArg = this;\n          trailingCall = trailing && (timeoutId || !leading);\n  \n          if (maxWait === false) {\n            var leadingCall = leading && !timeoutId;\n          } else {\n            if (!lastCalled && !maxTimeoutId && !leading) {\n              lastCalled = stamp;\n            }\n            var remaining = maxWait - (stamp - lastCalled);\n  \n            var isCalled = (remaining <= 0=\"\" ||=\"\" remaining=\"\"> maxWait) &&\n              (leading || maxTimeoutId);\n  \n            if (isCalled) {\n              if (maxTimeoutId) {\n                maxTimeoutId = clearTimeout(maxTimeoutId);\n              }\n              lastCalled = stamp;\n              result = func.apply(thisArg, args);\n            }\n            else if (!maxTimeoutId) {\n              maxTimeoutId = setTimeout(maxDelayed, remaining);\n            }\n          }\n          if (isCalled && timeoutId) {\n            timeoutId = clearTimeout(timeoutId);\n          }\n          else if (!timeoutId && wait !== maxWait) {\n            timeoutId = setTimeout(delayed, wait);\n          }\n          if (leadingCall) {\n            isCalled = true;\n            result = func.apply(thisArg, args);\n          }\n          if (isCalled && !timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n          return result;\n        }\n        debounced.cancel = cancel;\n        debounced.flush = flush;\n        return debounced;\n      }\n  \n      /**\n       * Defers invoking the `func` until the current call stack has cleared. Any\n       * additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to defer.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.defer(function(text) {\n       *   console.log(text);\n       * }, 'deferred');\n       * // => logs 'deferred' after one or more milliseconds\n       */\n      var defer = rest(function(func, args) {\n        return baseDelay(func, 1, args);\n      });\n  \n      /**\n       * Invokes `func` after `wait` milliseconds. Any additional arguments are\n       * provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.delay(function(text) {\n       *   console.log(text);\n       * }, 1000, 'later');\n       * // => logs 'later' after one second\n       */\n      var delay = rest(function(func, wait, args) {\n        return baseDelay(func, toNumber(wait) || 0, args);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments reversed.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to flip arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var flipped = _.flip(function() {\n       *   return _.toArray(arguments);\n       * });\n       *\n       * flipped('a', 'b', 'c', 'd');\n       * // => ['d', 'c', 'b', 'a']\n       */\n      function flip(func) {\n        return createWrapper(func, FLIP_FLAG);\n      }\n  \n      /**\n       * Creates a function that memoizes the result of `func`. If `resolver` is\n       * provided it determines the cache key for storing the result based on the\n       * arguments provided to the memoized function. By default, the first argument\n       * provided to the memoized function is used as the map cache key. The `func`\n       * is invoked with the `this` binding of the memoized function.\n       *\n       * **Note:** The cache is exposed as the `cache` property on the memoized\n       * function. Its creation may be customized by replacing the `_.memoize.Cache`\n       * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n       * method interface of `delete`, `get`, `has`, and `set`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to have its output memoized.\n       * @param {Function} [resolver] The function to resolve the cache key.\n       * @returns {Function} Returns the new memoizing function.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2 };\n       * var other = { 'c': 3, 'd': 4 };\n       *\n       * var values = _.memoize(_.values);\n       * values(object);\n       * // => [1, 2]\n       *\n       * values(other);\n       * // => [3, 4]\n       *\n       * object.a = 2;\n       * values(object);\n       * // => [1, 2]\n       *\n       * // Modify the result cache.\n       * values.cache.set(object, ['a', 'b']);\n       * values(object);\n       * // => ['a', 'b']\n       *\n       * // Replace `_.memoize.Cache`.\n       * _.memoize.Cache = WeakMap;\n       */\n      function memoize(func, resolver) {\n        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var memoized = function() {\n          var args = arguments,\n              key = resolver ? resolver.apply(this, args) : args[0],\n              cache = memoized.cache;\n  \n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n          var result = func.apply(this, args);\n          memoized.cache = cache.set(key, result);\n          return result;\n        };\n        memoized.cache = new memoize.Cache;\n        return memoized;\n      }\n  \n      /**\n       * Creates a function that negates the result of the predicate `func`. The\n       * `func` predicate is invoked with the `this` binding and arguments of the\n       * created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} predicate The predicate to negate.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function isEven(n) {\n       *   return n % 2 == 0;\n       * }\n       *\n       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n       * // => [1, 3, 5]\n       */\n      function negate(predicate) {\n        if (typeof predicate != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return function() {\n          return !predicate.apply(this, arguments);\n        };\n      }\n  \n      /**\n       * Creates a function that is restricted to invoking `func` once. Repeat calls\n       * to the function return the value of the first invocation. The `func` is\n       * invoked with the `this` binding and arguments of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var initialize = _.once(createApplication);\n       * initialize();\n       * initialize();\n       * // `initialize` invokes `createApplication` once\n       */\n      function once(func) {\n        return before(2, func);\n      }\n  \n      /**\n       * Creates a function that invokes `func` with arguments transformed by\n       * corresponding `transforms`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to wrap.\n       * @param {...(Function|Function[])} [transforms] The functions to transform\n       * arguments, specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function doubled(n) {\n       *   return n * 2;\n       * }\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var func = _.overArgs(function(x, y) {\n       *   return [x, y];\n       * }, square, doubled);\n       *\n       * func(9, 3);\n       * // => [81, 6]\n       *\n       * func(10, 5);\n       * // => [100, 10]\n       */\n      var overArgs = rest(function(func, transforms) {\n        transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());\n  \n        var funcsLength = transforms.length;\n        return rest(function(args) {\n          var index = -1,\n              length = nativeMin(args.length, funcsLength);\n  \n          while (++index < length) {\n            args[index] = transforms[index].call(this, args[index]);\n          }\n          return apply(func, this, args);\n        });\n      });\n  \n      /**\n       * Creates a function that invokes `func` with `partial` arguments prepended\n       * to those provided to the new function. This method is like `_.bind` except\n       * it does **not** alter the `this` binding.\n       *\n       * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var sayHelloTo = _.partial(greet, 'hello');\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       *\n       * // Partially applied with placeholders.\n       * var greetFred = _.partial(greet, _, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       */\n      var partial = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partial.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * This method is like `_.partial` except that partially applied arguments\n       * are appended to those provided to the new function.\n       *\n       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var greetFred = _.partialRight(greet, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       *\n       * // Partially applied with placeholders.\n       * var sayHelloTo = _.partialRight(greet, 'hello', _);\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       */\n      var partialRight = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partialRight.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments arranged according\n       * to the specified indexes where the argument value at the first index is\n       * provided as the first argument, the argument value at the second index is\n       * provided as the second argument, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to rearrange arguments for.\n       * @param {...(number|number[])} indexes The arranged argument indexes,\n       *  specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var rearged = _.rearg(function(a, b, c) {\n       *   return [a, b, c];\n       * }, 2, 0, 1);\n       *\n       * rearged('b', 'c', 'a')\n       * // => ['a', 'b', 'c']\n       */\n      var rearg = rest(function(func, indexes) {\n        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));\n      });\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the\n       * created function and arguments from `start` and beyond provided as an array.\n       *\n       * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to apply a rest parameter to.\n       * @param {number} [start=func.length-1] The start position of the rest parameter.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.rest(function(what, names) {\n       *   return what + ' ' + _.initial(names).join(', ') +\n       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n       * });\n       *\n       * say('hello', 'fred', 'barney', 'pebbles');\n       * // => 'hello fred, barney, & pebbles'\n       */\n      function rest(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n        return function() {\n          var args = arguments,\n              index = -1,\n              length = nativeMax(args.length - start, 0),\n              array = Array(length);\n  \n          while (++index < length) {\n            array[index] = args[start + index];\n          }\n          switch (start) {\n            case 0: return func.call(this, array);\n            case 1: return func.call(this, args[0], array);\n            case 2: return func.call(this, args[0], args[1], array);\n          }\n          var otherArgs = Array(start + 1);\n          index = -1;\n          while (++index < start) {\n            otherArgs[index] = args[index];\n          }\n          otherArgs[start] = array;\n          return apply(func, this, otherArgs);\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the created\n       * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n       *\n       * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to spread arguments over.\n       * @param {number} [start=0] The start position of the spread.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.spread(function(who, what) {\n       *   return who + ' says ' + what;\n       * });\n       *\n       * say(['fred', 'hello']);\n       * // => 'fred says hello'\n       *\n       * var numbers = Promise.all([\n       *   Promise.resolve(40),\n       *   Promise.resolve(36)\n       * ]);\n       *\n       * numbers.then(_.spread(function(x, y) {\n       *   return x + y;\n       * }));\n       * // => a Promise of 76\n       */\n      function spread(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n        return rest(function(args) {\n          var array = args[start],\n              otherArgs = args.slice(0, start);\n  \n          if (array) {\n            arrayPush(otherArgs, array);\n          }\n          return apply(func, this, otherArgs);\n        });\n      }\n  \n      /**\n       * Creates a throttled function that only invokes `func` at most once per\n       * every `wait` milliseconds. The throttled function comes with a `cancel`\n       * method to cancel delayed `func` invocations and a `flush` method to\n       * immediately invoke them. Provide an options object to indicate whether\n       * `func` should be invoked on the leading and/or trailing edge of the `wait`\n       * timeout. The `func` is invoked with the last arguments provided to the\n       * throttled function. Subsequent calls to the throttled function return the\n       * result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the throttled function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.throttle` and `_.debounce`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to throttle.\n       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=true] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new throttled function.\n       * @example\n       *\n       * // Avoid excessively updating the position while scrolling.\n       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n       *\n       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n       * jQuery(element).on('click', throttled);\n       *\n       * // Cancel the trailing throttled invocation.\n       * jQuery(window).on('popstate', throttled.cancel);\n       */\n      function throttle(func, wait, options) {\n        var leading = true,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        if (isObject(options)) {\n          leading = 'leading' in options ? !!options.leading : leading;\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n        return debounce(func, wait, {\n          'leading': leading,\n          'maxWait': wait,\n          'trailing': trailing\n        });\n      }\n  \n      /**\n       * Creates a function that accepts up to one argument, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.unary(parseInt));\n       * // => [6, 8, 10]\n       */\n      function unary(func) {\n        return ary(func, 1);\n      }\n  \n      /**\n       * Creates a function that provides `value` to the wrapper function as its\n       * first argument. Any additional arguments provided to the function are\n       * appended to those provided to the wrapper function. The wrapper is invoked\n       * with the `this` binding of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {*} value The value to wrap.\n       * @param {Function} [wrapper=identity] The wrapper function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var p = _.wrap(_.escape, function(func, text) {\n       *   return '<p>' + func(text) + '</p>';\n       * });\n       *\n       * p('fred, barney, & pebbles');\n       * // => '<p>fred, barney, &amp; pebbles</p>'\n       */\n      function wrap(value, wrapper) {\n        wrapper = wrapper == null ? identity : wrapper;\n        return partial(wrapper, value);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Casts `value` as an array if it's not one.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast array.\n       * @example\n       *\n       * _.castArray(1);\n       * // => [1]\n       *\n       * _.castArray({ 'a': 1 });\n       * // => [{ 'a': 1 }]\n       *\n       * _.castArray('abc');\n       * // => ['abc']\n       *\n       * _.castArray(null);\n       * // => [null]\n       *\n       * _.castArray(undefined);\n       * // => [undefined]\n       *\n       * _.castArray();\n       * // => []\n       *\n       * var array = [1, 2, 3];\n       * console.log(_.castArray(array) === array);\n       * // => true\n       */\n      function castArray() {\n        if (!arguments.length) {\n          return [];\n        }\n        var value = arguments[0];\n        return isArray(value) ? value : [value];\n      }\n  \n      /**\n       * Creates a shallow clone of `value`.\n       *\n       * **Note:** This method is loosely based on the\n       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n       * and supports cloning arrays, array buffers, booleans, date objects, maps,\n       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n       * arrays. The own enumerable properties of `arguments` objects are cloned\n       * as plain objects. An empty object is returned for uncloneable values such\n       * as error objects, functions, DOM nodes, and WeakMaps.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var shallow = _.clone(objects);\n       * console.log(shallow[0] === objects[0]);\n       * // => true\n       */\n      function clone(value) {\n        return baseClone(value);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it accepts `customizer` which\n       * is invoked to produce the cloned value. If `customizer` returns `undefined`\n       * cloning is handled by the method instead. The `customizer` is invoked with\n       * up to four arguments; (value [, index|key, object, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(false);\n       *   }\n       * }\n       *\n       * var el = _.cloneWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 0\n       */\n      function cloneWith(value, customizer) {\n        return baseClone(value, false, customizer);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var deep = _.cloneDeep(objects);\n       * console.log(deep[0] === objects[0]);\n       * // => false\n       */\n      function cloneDeep(value) {\n        return baseClone(value, true);\n      }\n  \n      /**\n       * This method is like `_.cloneWith` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(true);\n       *   }\n       * }\n       *\n       * var el = _.cloneDeepWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 20\n       */\n      function cloneDeepWith(value, customizer) {\n        return baseClone(value, true, customizer);\n      }\n  \n      /**\n       * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * comparison between two values to determine if they are equivalent.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.eq(object, object);\n       * // => true\n       *\n       * _.eq(object, other);\n       * // => false\n       *\n       * _.eq('a', 'a');\n       * // => true\n       *\n       * _.eq('a', Object('a'));\n       * // => false\n       *\n       * _.eq(NaN, NaN);\n       * // => true\n       */\n      function eq(value, other) {\n        return value === other || (value !== value && other !== other);\n      }\n  \n      /**\n       * Checks if `value` is greater than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n       * @example\n       *\n       * _.gt(3, 1);\n       * // => true\n       *\n       * _.gt(3, 3);\n       * // => false\n       *\n       * _.gt(1, 3);\n       * // => false\n       */\n      function gt(value, other) {\n        return value > other;\n      }\n  \n      /**\n       * Checks if `value` is greater than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.gte(3, 1);\n       * // => true\n       *\n       * _.gte(3, 3);\n       * // => true\n       *\n       * _.gte(1, 3);\n       * // => false\n       */\n      function gte(value, other) {\n        return value >= other;\n      }\n  \n      /**\n       * Checks if `value` is likely an `arguments` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArguments(function() { return arguments; }());\n       * // => true\n       *\n       * _.isArguments([1, 2, 3]);\n       * // => false\n       */\n      function isArguments(value) {\n        // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n          (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as an `Array` object.\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArray([1, 2, 3]);\n       * // => true\n       *\n       * _.isArray(document.body.children);\n       * // => false\n       *\n       * _.isArray('abc');\n       * // => false\n       *\n       * _.isArray(_.noop);\n       * // => false\n       */\n      var isArray = Array.isArray;\n  \n      /**\n       * Checks if `value` is classified as an `ArrayBuffer` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArrayBuffer(new ArrayBuffer(2));\n       * // => true\n       *\n       * _.isArrayBuffer(new Array(2));\n       * // => false\n       */\n      function isArrayBuffer(value) {\n        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;\n      }\n  \n      /**\n       * Checks if `value` is array-like. A value is considered array-like if it's\n       * not a function and has a `value.length` that's an integer greater than or\n       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n       * @example\n       *\n       * _.isArrayLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLike(document.body.children);\n       * // => true\n       *\n       * _.isArrayLike('abc');\n       * // => true\n       *\n       * _.isArrayLike(_.noop);\n       * // => false\n       */\n      function isArrayLike(value) {\n        return value != null &&\n          !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));\n      }\n  \n      /**\n       * This method is like `_.isArrayLike` except that it also checks if `value`\n       * is an object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.\n       * @example\n       *\n       * _.isArrayLikeObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLikeObject(document.body.children);\n       * // => true\n       *\n       * _.isArrayLikeObject('abc');\n       * // => false\n       *\n       * _.isArrayLikeObject(_.noop);\n       * // => false\n       */\n      function isArrayLikeObject(value) {\n        return isObjectLike(value) && isArrayLike(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a boolean primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isBoolean(false);\n       * // => true\n       *\n       * _.isBoolean(null);\n       * // => false\n       */\n      function isBoolean(value) {\n        return value === true || value === false ||\n          (isObjectLike(value) && objectToString.call(value) == boolTag);\n      }\n  \n      /**\n       * Checks if `value` is a buffer.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n       * @example\n       *\n       * _.isBuffer(new Buffer(2));\n       * // => true\n       *\n       * _.isBuffer(new Uint8Array(2));\n       * // => false\n       */\n      var isBuffer = !Buffer ? constant(false) : function(value) {\n        return value instanceof Buffer;\n      };\n  \n      /**\n       * Checks if `value` is classified as a `Date` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isDate(new Date);\n       * // => true\n       *\n       * _.isDate('Mon April 23 2012');\n       * // => false\n       */\n      function isDate(value) {\n        return isObjectLike(value) && objectToString.call(value) == dateTag;\n      }\n  \n      /**\n       * Checks if `value` is likely a DOM element.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n       * @example\n       *\n       * _.isElement(document.body);\n       * // => true\n       *\n       * _.isElement('<body>');\n       * // => false\n       */\n      function isElement(value) {\n        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n      }\n  \n      /**\n       * Checks if `value` is empty. A value is considered empty unless it's an\n       * `arguments` object, array, string, or jQuery-like collection with a length\n       * greater than `0` or an object with own enumerable properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Array|Object|string} value The value to inspect.\n       * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n       * @example\n       *\n       * _.isEmpty(null);\n       * // => true\n       *\n       * _.isEmpty(true);\n       * // => true\n       *\n       * _.isEmpty(1);\n       * // => true\n       *\n       * _.isEmpty([1, 2, 3]);\n       * // => false\n       *\n       * _.isEmpty({ 'a': 1 });\n       * // => false\n       */\n      function isEmpty(value) {\n        if (isArrayLike(value) &&\n            (isArray(value) || isString(value) ||\n              isFunction(value.splice) || isArguments(value))) {\n          return !value.length;\n        }\n        for (var key in value) {\n          if (hasOwnProperty.call(value, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * Performs a deep comparison between two values to determine if they are\n       * equivalent.\n       *\n       * **Note:** This method supports comparing arrays, array buffers, booleans,\n       * date objects, error objects, maps, numbers, `Object` objects, regexes,\n       * sets, strings, symbols, and typed arrays. `Object` objects are compared\n       * by their own, not inherited, enumerable properties. Functions and DOM\n       * nodes are **not** supported.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.isEqual(object, other);\n       * // => true\n       *\n       * object === other;\n       * // => false\n       */\n      function isEqual(value, other) {\n        return baseIsEqual(value, other);\n      }\n  \n      /**\n       * This method is like `_.isEqual` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with up to\n       * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, othValue) {\n       *   if (isGreeting(objValue) && isGreeting(othValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var array = ['hello', 'goodbye'];\n       * var other = ['hi', 'goodbye'];\n       *\n       * _.isEqualWith(array, other, customizer);\n       * // => true\n       */\n      function isEqualWith(value, other, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        var result = customizer ? customizer(value, other) : undefined;\n        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n      }\n  \n      /**\n       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n       * `SyntaxError`, `TypeError`, or `URIError` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n       * @example\n       *\n       * _.isError(new Error);\n       * // => true\n       *\n       * _.isError(Error);\n       * // => false\n       */\n      function isError(value) {\n        if (!isObjectLike(value)) {\n          return false;\n        }\n        var Ctor = value.constructor;\n        return (objectToString.call(value) == errorTag) ||\n          (typeof Ctor == 'function' && objectToString.call(Ctor.prototype) == errorTag);\n      }\n  \n      /**\n       * Checks if `value` is a finite primitive number.\n       *\n       * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n       * @example\n       *\n       * _.isFinite(3);\n       * // => true\n       *\n       * _.isFinite(Number.MAX_VALUE);\n       * // => true\n       *\n       * _.isFinite(3.14);\n       * // => true\n       *\n       * _.isFinite(Infinity);\n       * // => false\n       */\n      function isFinite(value) {\n        return typeof value == 'number' && nativeIsFinite(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Function` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isFunction(_);\n       * // => true\n       *\n       * _.isFunction(/abc/);\n       * // => false\n       */\n      function isFunction(value) {\n        // The use of `Object#toString` avoids issues with the `typeof` operator\n        // in Safari 8 which returns 'object' for typed array constructors, and\n        // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n        var tag = isObject(value) ? objectToString.call(value) : '';\n        return tag == funcTag || tag == genTag;\n      }\n  \n      /**\n       * Checks if `value` is an integer.\n       *\n       * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n       * @example\n       *\n       * _.isInteger(3);\n       * // => true\n       *\n       * _.isInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isInteger(Infinity);\n       * // => false\n       *\n       * _.isInteger('3');\n       * // => false\n       */\n      function isInteger(value) {\n        return typeof value == 'number' && value == toInteger(value);\n      }\n  \n      /**\n       * Checks if `value` is a valid array-like length.\n       *\n       * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n       * @example\n       *\n       * _.isLength(3);\n       * // => true\n       *\n       * _.isLength(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isLength(Infinity);\n       * // => false\n       *\n       * _.isLength('3');\n       * // => false\n       */\n      function isLength(value) {\n        return typeof value == 'number' &&\n          value > -1 && value % 1 == 0 && value <= max_safe_integer;=\"\" }=\"\" **=\"\" *=\"\" checks=\"\" if=\"\" `value`=\"\" is=\"\" the=\"\" [language=\"\" type](https:=\"\" es5.github.io=\"\" #x8)=\"\" of=\"\" `object`.=\"\" (e.g.=\"\" arrays,=\"\" functions,=\"\" objects,=\"\" regexes,=\"\" `new=\"\" number(0)`,=\"\" and=\"\" string('')`)=\"\" @static=\"\" @memberof=\"\" _=\"\" @category=\"\" lang=\"\" @param=\"\" {*}=\"\" value=\"\" to=\"\" check.=\"\" @returns=\"\" {boolean}=\"\" returns=\"\" `true`=\"\" an=\"\" object,=\"\" else=\"\" `false`.=\"\" @example=\"\" _.isobject({});=\"\" ==\"\"> true\n       *\n       * _.isObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isObject(_.noop);\n       * // => true\n       *\n       * _.isObject(null);\n       * // => false\n       */\n      function isObject(value) {\n        var type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n      }\n  \n      /**\n       * Checks if `value` is object-like. A value is object-like if it's not `null`\n       * and has a `typeof` result of \"object\".\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n       * @example\n       *\n       * _.isObjectLike({});\n       * // => true\n       *\n       * _.isObjectLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isObjectLike(_.noop);\n       * // => false\n       *\n       * _.isObjectLike(null);\n       * // => false\n       */\n      function isObjectLike(value) {\n        return !!value && typeof value == 'object';\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Map` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isMap(new Map);\n       * // => true\n       *\n       * _.isMap(new WeakMap);\n       * // => false\n       */\n      function isMap(value) {\n        return isObjectLike(value) && getTag(value) == mapTag;\n      }\n  \n      /**\n       * Performs a partial deep comparison between `object` and `source` to\n       * determine if `object` contains equivalent property values. This method is\n       * equivalent to a `_.matches` function when `source` is partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred', 'age': 40 };\n       *\n       * _.isMatch(object, { 'age': 40 });\n       * // => true\n       *\n       * _.isMatch(object, { 'age': 36 });\n       * // => false\n       */\n      function isMatch(object, source) {\n        return object === source || baseIsMatch(object, source, getMatchData(source));\n      }\n  \n      /**\n       * This method is like `_.isMatch` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with five\n       * arguments: (objValue, srcValue, index|key, object, source).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var object = { 'greeting': 'hello' };\n       * var source = { 'greeting': 'hi' };\n       *\n       * _.isMatchWith(object, source, customizer);\n       * // => true\n       */\n      function isMatchWith(object, source, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return baseIsMatch(object, source, getMatchData(source), customizer);\n      }\n  \n      /**\n       * Checks if `value` is `NaN`.\n       *\n       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n       * which returns `true` for `undefined` and other non-numeric values.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n       * @example\n       *\n       * _.isNaN(NaN);\n       * // => true\n       *\n       * _.isNaN(new Number(NaN));\n       * // => true\n       *\n       * isNaN(undefined);\n       * // => true\n       *\n       * _.isNaN(undefined);\n       * // => false\n       */\n      function isNaN(value) {\n        // An `NaN` primitive is the only value that is not equal to itself.\n        // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.\n        return isNumber(value) && value != +value;\n      }\n  \n      /**\n       * Checks if `value` is a native function.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n       * @example\n       *\n       * _.isNative(Array.prototype.push);\n       * // => true\n       *\n       * _.isNative(_);\n       * // => false\n       */\n      function isNative(value) {\n        if (value == null) {\n          return false;\n        }\n        if (isFunction(value)) {\n          return reIsNative.test(funcToString.call(value));\n        }\n        return isObjectLike(value) &&\n          (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);\n      }\n  \n      /**\n       * Checks if `value` is `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n       * @example\n       *\n       * _.isNull(null);\n       * // => true\n       *\n       * _.isNull(void 0);\n       * // => false\n       */\n      function isNull(value) {\n        return value === null;\n      }\n  \n      /**\n       * Checks if `value` is `null` or `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n       * @example\n       *\n       * _.isNil(null);\n       * // => true\n       *\n       * _.isNil(void 0);\n       * // => true\n       *\n       * _.isNil(NaN);\n       * // => false\n       */\n      function isNil(value) {\n        return value == null;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Number` primitive or object.\n       *\n       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n       * as numbers, use the `_.isFinite` method.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isNumber(3);\n       * // => true\n       *\n       * _.isNumber(Number.MIN_VALUE);\n       * // => true\n       *\n       * _.isNumber(Infinity);\n       * // => true\n       *\n       * _.isNumber('3');\n       * // => false\n       */\n      function isNumber(value) {\n        return typeof value == 'number' ||\n          (isObjectLike(value) && objectToString.call(value) == numberTag);\n      }\n  \n      /**\n       * Checks if `value` is a plain object, that is, an object created by the\n       * `Object` constructor or one with a `[[Prototype]]` of `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       * }\n       *\n       * _.isPlainObject(new Foo);\n       * // => false\n       *\n       * _.isPlainObject([1, 2, 3]);\n       * // => false\n       *\n       * _.isPlainObject({ 'x': 0, 'y': 0 });\n       * // => true\n       *\n       * _.isPlainObject(Object.create(null));\n       * // => true\n       */\n      function isPlainObject(value) {\n        if (!isObjectLike(value) ||\n            objectToString.call(value) != objectTag || isHostObject(value)) {\n          return false;\n        }\n        var proto = objectProto;\n        if (typeof value.constructor == 'function') {\n          proto = getPrototypeOf(value);\n        }\n        if (proto === null) {\n          return true;\n        }\n        var Ctor = proto.constructor;\n        return (typeof Ctor == 'function' &&\n          Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `RegExp` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isRegExp(/abc/);\n       * // => true\n       *\n       * _.isRegExp('/abc/');\n       * // => false\n       */\n      function isRegExp(value) {\n        return isObject(value) && objectToString.call(value) == regexpTag;\n      }\n  \n      /**\n       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n       * double precision number which isn't the result of a rounded unsafe integer.\n       *\n       * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n       * @example\n       *\n       * _.isSafeInteger(3);\n       * // => true\n       *\n       * _.isSafeInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isSafeInteger(Infinity);\n       * // => false\n       *\n       * _.isSafeInteger('3');\n       * // => false\n       */\n      function isSafeInteger(value) {\n        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= max_safe_integer;=\"\" }=\"\" **=\"\" *=\"\" checks=\"\" if=\"\" `value`=\"\" is=\"\" classified=\"\" as=\"\" a=\"\" `set`=\"\" object.=\"\" @static=\"\" @memberof=\"\" _=\"\" @category=\"\" lang=\"\" @param=\"\" {*}=\"\" value=\"\" the=\"\" to=\"\" check.=\"\" @returns=\"\" {boolean}=\"\" returns=\"\" `true`=\"\" correctly=\"\" classified,=\"\" else=\"\" `false`.=\"\" @example=\"\" _.isset(new=\"\" set);=\"\" ==\"\"> true\n       *\n       * _.isSet(new WeakSet);\n       * // => false\n       */\n      function isSet(value) {\n        return isObjectLike(value) && getTag(value) == setTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `String` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isString('abc');\n       * // => true\n       *\n       * _.isString(1);\n       * // => false\n       */\n      function isString(value) {\n        return typeof value == 'string' ||\n          (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Symbol` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSymbol(Symbol.iterator);\n       * // => true\n       *\n       * _.isSymbol('abc');\n       * // => false\n       */\n      function isSymbol(value) {\n        return typeof value == 'symbol' ||\n          (isObjectLike(value) && objectToString.call(value) == symbolTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a typed array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isTypedArray(new Uint8Array);\n       * // => true\n       *\n       * _.isTypedArray([]);\n       * // => false\n       */\n      function isTypedArray(value) {\n        return isObjectLike(value) &&\n          isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n      }\n  \n      /**\n       * Checks if `value` is `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n       * @example\n       *\n       * _.isUndefined(void 0);\n       * // => true\n       *\n       * _.isUndefined(null);\n       * // => false\n       */\n      function isUndefined(value) {\n        return value === undefined;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakMap` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakMap(new WeakMap);\n       * // => true\n       *\n       * _.isWeakMap(new Map);\n       * // => false\n       */\n      function isWeakMap(value) {\n        return isObjectLike(value) && getTag(value) == weakMapTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakSet` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakSet(new WeakSet);\n       * // => true\n       *\n       * _.isWeakSet(new Set);\n       * // => false\n       */\n      function isWeakSet(value) {\n        return isObjectLike(value) && objectToString.call(value) == weakSetTag;\n      }\n  \n      /**\n       * Checks if `value` is less than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n       * @example\n       *\n       * _.lt(1, 3);\n       * // => true\n       *\n       * _.lt(3, 3);\n       * // => false\n       *\n       * _.lt(3, 1);\n       * // => false\n       */\n      function lt(value, other) {\n        return value < other;\n      }\n  \n      /**\n       * Checks if `value` is less than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.lte(1, 3);\n       * // => true\n       *\n       * _.lte(3, 3);\n       * // => true\n       *\n       * _.lte(3, 1);\n       * // => false\n       */\n      function lte(value, other) {\n        return value <= 2=\"\" other;=\"\" }=\"\" **=\"\" *=\"\" converts=\"\" `value`=\"\" to=\"\" an=\"\" array.=\"\" @static=\"\" @memberof=\"\" _=\"\" @category=\"\" lang=\"\" @param=\"\" {*}=\"\" value=\"\" the=\"\" convert.=\"\" @returns=\"\" {array}=\"\" returns=\"\" converted=\"\" @example=\"\" _.toarray({=\"\" 'a':=\"\" 1,=\"\" 'b':=\"\" });=\"\" ==\"\"> [1, 2]\n       *\n       * _.toArray('abc');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toArray(1);\n       * // => []\n       *\n       * _.toArray(null);\n       * // => []\n       */\n      function toArray(value) {\n        if (!value) {\n          return [];\n        }\n        if (isArrayLike(value)) {\n          return isString(value) ? stringToArray(value) : copyArray(value);\n        }\n        if (iteratorSymbol && value[iteratorSymbol]) {\n          return iteratorToArray(value[iteratorSymbol]());\n        }\n        var tag = getTag(value),\n            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n  \n        return func(value);\n      }\n  \n      /**\n       * Converts `value` to an integer.\n       *\n       * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toInteger(3);\n       * // => 3\n       *\n       * _.toInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toInteger(Infinity);\n       * // => 1.7976931348623157e+308\n       *\n       * _.toInteger('3');\n       * // => 3\n       */\n      function toInteger(value) {\n        if (!value) {\n          return value === 0 ? value : 0;\n        }\n        value = toNumber(value);\n        if (value === INFINITY || value === -INFINITY) {\n          var sign = (value < 0 ? -1 : 1);\n          return sign * MAX_INTEGER;\n        }\n        var remainder = value % 1;\n        return value === value ? (remainder ? value - remainder : value) : 0;\n      }\n  \n      /**\n       * Converts `value` to an integer suitable for use as the length of an\n       * array-like object.\n       *\n       * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toLength(3);\n       * // => 3\n       *\n       * _.toLength(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toLength(Infinity);\n       * // => 4294967295\n       *\n       * _.toLength('3');\n       * // => 3\n       */\n      function toLength(value) {\n        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n      }\n  \n      /**\n       * Converts `value` to a number.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {number} Returns the number.\n       * @example\n       *\n       * _.toNumber(3);\n       * // => 3\n       *\n       * _.toNumber(Number.MIN_VALUE);\n       * // => 5e-324\n       *\n       * _.toNumber(Infinity);\n       * // => Infinity\n       *\n       * _.toNumber('3');\n       * // => 3\n       */\n      function toNumber(value) {\n        if (isObject(value)) {\n          var other = isFunction(value.valueOf) ? value.valueOf() : value;\n          value = isObject(other) ? (other + '') : other;\n        }\n        if (typeof value != 'string') {\n          return value === 0 ? value : +value;\n        }\n        value = value.replace(reTrim, '');\n        var isBinary = reIsBinary.test(value);\n        return (isBinary || reIsOctal.test(value))\n          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n          : (reIsBadHex.test(value) ? NAN : +value);\n      }\n  \n      /**\n       * Converts `value` to a plain object flattening inherited enumerable\n       * properties of `value` to own properties of the plain object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Object} Returns the converted plain object.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.assign({ 'a': 1 }, new Foo);\n       * // => { 'a': 1, 'b': 2 }\n       *\n       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n       * // => { 'a': 1, 'b': 2, 'c': 3 }\n       */\n      function toPlainObject(value) {\n        return copyObject(value, keysIn(value));\n      }\n  \n      /**\n       * Converts `value` to a safe integer. A safe integer can be compared and\n       * represented correctly.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toSafeInteger(3);\n       * // => 3\n       *\n       * _.toSafeInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toSafeInteger(Infinity);\n       * // => 9007199254740991\n       *\n       * _.toSafeInteger('3');\n       * // => 3\n       */\n      function toSafeInteger(value) {\n        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      }\n  \n      /**\n       * Converts `value` to a string if it's not one. An empty string is returned\n       * for `null` and `undefined` values. The sign of `-0` is preserved.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {string} Returns the string.\n       * @example\n       *\n       * _.toString(null);\n       * // => ''\n       *\n       * _.toString(-0);\n       * // => '-0'\n       *\n       * _.toString([1, 2, 3]);\n       * // => '1,2,3'\n       */\n      function toString(value) {\n        // Exit early for strings to avoid a performance hit in some environments.\n        if (typeof value == 'string') {\n          return value;\n        }\n        if (value == null) {\n          return '';\n        }\n        if (isSymbol(value)) {\n          return Symbol ? symbolToString.call(value) : '';\n        }\n        var result = (value + '');\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Assigns own enumerable properties of source objects to the destination\n       * object. Source objects are applied from left to right. Subsequent sources\n       * overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object` and is loosely based on\n       * [`Object.assign`](https://mdn.io/Object/assign).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.c = 3;\n       * }\n       *\n       * function Bar() {\n       *   this.e = 5;\n       * }\n       *\n       * Foo.prototype.d = 4;\n       * Bar.prototype.f = 6;\n       *\n       * _.assign({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'c': 3, 'e': 5 }\n       */\n      var assign = createAssigner(function(object, source) {\n        copyObject(source, keys(source), object);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it iterates over own and\n       * inherited source properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extend\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * function Bar() {\n       *   this.d = 4;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       * Bar.prototype.e = 5;\n       *\n       * _.assignIn({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n       */\n      var assignIn = createAssigner(function(object, source) {\n        copyObject(source, keysIn(source), object);\n      });\n  \n      /**\n       * This method is like `_.assignIn` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extendWith\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignInWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keysIn(source), object, customizer);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keys(source), object, customizer);\n      });\n  \n      /**\n       * Creates an array of values corresponding to `paths` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of picked elements.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _.at(object, ['a[0].b.c', 'a[1]']);\n       * // => [3, 4]\n       *\n       * _.at(['a', 'b', 'c'], 0, 2);\n       * // => ['a', 'c']\n       */\n      var at = rest(function(object, paths) {\n        return baseAt(object, baseFlatten(paths, 1));\n      });\n  \n      /**\n       * Creates an object that inherits from the `prototype` object. If a `properties`\n       * object is given its own enumerable properties are assigned to the created object.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} prototype The object to inherit from.\n       * @param {Object} [properties] The properties to assign to the object.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * function Shape() {\n       *   this.x = 0;\n       *   this.y = 0;\n       * }\n       *\n       * function Circle() {\n       *   Shape.call(this);\n       * }\n       *\n       * Circle.prototype = _.create(Shape.prototype, {\n       *   'constructor': Circle\n       * });\n       *\n       * var circle = new Circle;\n       * circle instanceof Circle;\n       * // => true\n       *\n       * circle instanceof Shape;\n       * // => true\n       */\n      function create(prototype, properties) {\n        var result = baseCreate(prototype);\n        return properties ? baseAssign(result, properties) : result;\n      }\n  \n      /**\n       * Assigns own and inherited enumerable properties of source objects to the\n       * destination object for all destination properties that resolve to `undefined`.\n       * Source objects are applied from left to right. Once a property is set,\n       * additional values of the same property are ignored.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n       * // => { 'user': 'barney', 'age': 36 }\n       */\n      var defaults = rest(function(args) {\n        args.push(undefined, assignInDefaults);\n        return apply(assignInWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.defaults` except that it recursively assigns\n       * default properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n       * // => { 'user': { 'name': 'barney', 'age': 36 } }\n       *\n       */\n      var defaultsDeep = rest(function(args) {\n        args.push(undefined, mergeDefaults);\n        return apply(mergeWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.find` except that it returns the key of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findKey(users, function(o) { return o.age < 40; });\n       * // => 'barney' (iteration order is not guaranteed)\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findKey(users, { 'age': 1, 'active': true });\n       * // => 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findKey(users, 'active');\n       * // => 'barney'\n       */\n      function findKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);\n      }\n  \n      /**\n       * This method is like `_.findKey` except that it iterates over elements of\n       * a collection in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findLastKey(users, function(o) { return o.age < 40; });\n       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastKey(users, { 'age': 36, 'active': true });\n       * // => 'barney'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastKey(users, 'active');\n       * // => 'pebbles'\n       */\n      function findLastKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);\n      }\n  \n      /**\n       * Iterates over own and inherited enumerable properties of an object invoking\n       * `iteratee` for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forIn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)\n       */\n      function forIn(object, iteratee) {\n        return object == null\n          ? object\n          : baseFor(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * This method is like `_.forIn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forInRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'\n       */\n      function forInRight(object, iteratee) {\n        return object == null\n          ? object\n          : baseForRight(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * Iterates over own enumerable properties of an object invoking `iteratee`\n       * for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by\n       * explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forOwn(object, iteratee) {\n        return object && baseForOwn(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forOwn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwnRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'\n       */\n      function forOwnRight(object, iteratee) {\n        return object && baseForOwnRight(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an array of function property names from own enumerable properties\n       * of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functions(new Foo);\n       * // => ['a', 'b']\n       */\n      function functions(object) {\n        return object == null ? [] : baseFunctions(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of function property names from own and inherited\n       * enumerable properties of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functionsIn(new Foo);\n       * // => ['a', 'b', 'c']\n       */\n      function functionsIn(object) {\n        return object == null ? [] : baseFunctions(object, keysIn(object));\n      }\n  \n      /**\n       * Gets the value at `path` of `object`. If the resolved value is\n       * `undefined` the `defaultValue` is used in its place.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.get(object, 'a[0].b.c');\n       * // => 3\n       *\n       * _.get(object, ['a', '0', 'b', 'c']);\n       * // => 3\n       *\n       * _.get(object, 'a.b.c', 'default');\n       * // => 'default'\n       */\n      function get(object, path, defaultValue) {\n        var result = object == null ? undefined : baseGet(object, path);\n        return result === undefined ? defaultValue : result;\n      }\n  \n      /**\n       * Checks if `path` is a direct property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = { 'a': { 'b': { 'c': 3 } } };\n       * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.has(object, 'a');\n       * // => true\n       *\n       * _.has(object, 'a.b.c');\n       * // => true\n       *\n       * _.has(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.has(other, 'a');\n       * // => false\n       */\n      function has(object, path) {\n        return hasPath(object, path, baseHas);\n      }\n  \n      /**\n       * Checks if `path` is a direct or inherited property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.hasIn(object, 'a');\n       * // => true\n       *\n       * _.hasIn(object, 'a.b.c');\n       * // => true\n       *\n       * _.hasIn(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.hasIn(object, 'b');\n       * // => false\n       */\n      function hasIn(object, path) {\n        return hasPath(object, path, baseHasIn);\n      }\n  \n      /**\n       * Creates an object composed of the inverted keys and values of `object`.\n       * If `object` contains duplicate values, subsequent values overwrite property\n       * assignments of previous values.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invert(object);\n       * // => { '1': 'c', '2': 'b' }\n       */\n      var invert = createInverter(function(result, value, key) {\n        result[value] = key;\n      }, constant(identity));\n  \n      /**\n       * This method is like `_.invert` except that the inverted object is generated\n       * from the results of running each element of `object` through `iteratee`.\n       * The corresponding inverted value of each inverted key is an array of keys\n       * responsible for generating the inverted value. The iteratee is invoked\n       * with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invertBy(object);\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       *\n       * _.invertBy(object, function(value) {\n       *   return 'group' + value;\n       * });\n       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n       */\n      var invertBy = createInverter(function(result, value, key) {\n        if (hasOwnProperty.call(result, value)) {\n          result[value].push(key);\n        } else {\n          result[value] = [key];\n        }\n      }, getIteratee);\n  \n      /**\n       * Invokes the method at `path` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n       *\n       * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n       * // => [2, 3]\n       */\n      var invoke = rest(baseInvoke);\n  \n      /**\n       * Creates an array of the own enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects. See the\n       * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n       * for more details.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keys(new Foo);\n       * // => ['a', 'b'] (iteration order is not guaranteed)\n       *\n       * _.keys('hi');\n       * // => ['0', '1']\n       */\n      function keys(object) {\n        var isProto = isPrototype(object);\n        if (!(isProto || isArrayLike(object))) {\n          return baseKeys(object);\n        }\n        var indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        for (var key in object) {\n          if (baseHas(object, key) &&\n              !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(isProto && key == 'constructor')) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keysIn(new Foo);\n       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n       */\n      function keysIn(object) {\n        var index = -1,\n            isProto = isPrototype(object),\n            props = baseKeysIn(object),\n            propsLength = props.length,\n            indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        while (++index < propsLength) {\n          var key = props[index];\n          if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The opposite of `_.mapValues`; this method creates an object with the\n       * same values as `object` and keys generated by running each own enumerable\n       * property of `object` through `iteratee`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   return key + value;\n       * });\n       * // => { 'a1': 1, 'b2': 2 }\n       */\n      function mapKeys(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[iteratee(value, key, object)] = value;\n        });\n        return result;\n      }\n  \n      /**\n       * Creates an object with the same keys as `object` and values generated by\n       * running each own enumerable property of `object` through `iteratee`. The\n       * iteratee function is invoked with three arguments: (value, key, object).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * var users = {\n       *   'fred':    { 'user': 'fred',    'age': 40 },\n       *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n       * };\n       *\n       * _.mapValues(users, function(o) { return o.age; });\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.mapValues(users, 'age');\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       */\n      function mapValues(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[key] = iteratee(value, key, object);\n        });\n        return result;\n      }\n  \n      /**\n       * Recursively merges own and inherited enumerable properties of source objects\n       * into the destination object. Source properties that resolve to `undefined`\n       * are skipped if a destination value exists. Array and plain object properties\n       * are merged recursively. Other objects and value types are overridden by\n       * assignment. Source objects are applied from left to right. Subsequent\n       * sources overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var users = {\n       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n       * };\n       *\n       * var ages = {\n       *   'data': [{ 'age': 36 }, { 'age': 40 }]\n       * };\n       *\n       * _.merge(users, ages);\n       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n       */\n      var merge = createAssigner(function(object, source, srcIndex) {\n        baseMerge(object, source, srcIndex);\n      });\n  \n      /**\n       * This method is like `_.merge` except that it accepts `customizer` which\n       * is invoked to produce the merged values of the destination and source\n       * properties. If `customizer` returns `undefined` merging is handled by the\n       * method instead. The `customizer` is invoked with seven arguments:\n       * (objValue, srcValue, key, object, source, stack).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} customizer The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (_.isArray(objValue)) {\n       *     return objValue.concat(srcValue);\n       *   }\n       * }\n       *\n       * var object = {\n       *   'fruits': ['apple'],\n       *   'vegetables': ['beet']\n       * };\n       *\n       * var other = {\n       *   'fruits': ['banana'],\n       *   'vegetables': ['carrot']\n       * };\n       *\n       * _.mergeWith(object, other, customizer);\n       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n       */\n      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n        baseMerge(object, source, srcIndex, customizer);\n      });\n  \n      /**\n       * The opposite of `_.pick`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that are not omitted.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to omit, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omit(object, ['a', 'c']);\n       * // => { 'b': '2' }\n       */\n      var omit = rest(function(object, props) {\n        if (object == null) {\n          return {};\n        }\n        props = arrayMap(baseFlatten(props, 1), String);\n        return basePick(object, baseDifference(keysIn(object), props));\n      });\n  \n      /**\n       * The opposite of `_.pickBy`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that `predicate`\n       * doesn't return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omitBy(object, _.isNumber);\n       * // => { 'b': '2' }\n       */\n      function omitBy(object, predicate) {\n        predicate = getIteratee(predicate, 2);\n        return basePickBy(object, function(value, key) {\n          return !predicate(value, key);\n        });\n      }\n  \n      /**\n       * Creates an object composed of the picked `object` properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to pick, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pick(object, ['a', 'c']);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      var pick = rest(function(object, props) {\n        return object == null ? {} : basePick(object, baseFlatten(props, 1));\n      });\n  \n      /**\n       * Creates an object composed of the `object` properties `predicate` returns\n       * truthy for. The predicate is invoked with two arguments: (value, key).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pickBy(object, _.isNumber);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      function pickBy(object, predicate) {\n        return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));\n      }\n  \n      /**\n       * This method is like `_.get` except that if the resolved value is a function\n       * it's invoked with the `this` binding of its parent object and its result\n       * is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to resolve.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n       *\n       * _.result(object, 'a[0].b.c1');\n       * // => 3\n       *\n       * _.result(object, 'a[0].b.c2');\n       * // => 4\n       *\n       * _.result(object, 'a[0].b.c3', 'default');\n       * // => 'default'\n       *\n       * _.result(object, 'a[0].b.c3', _.constant('default'));\n       * // => 'default'\n       */\n      function result(object, path, defaultValue) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          var result = get(object, path);\n          object = parent(object, path);\n        } else {\n          result = object == null ? undefined : object[path];\n        }\n        if (result === undefined) {\n          result = defaultValue;\n        }\n        return isFunction(result) ? result.call(object) : result;\n      }\n  \n      /**\n       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist\n       * it's created. Arrays are created for missing index properties while objects\n       * are created for all other missing properties. Use `_.setWith` to customize\n       * `path` creation.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.set(object, 'a[0].b.c', 4);\n       * console.log(object.a[0].b.c);\n       * // => 4\n       *\n       * _.set(object, 'x[0].y.z', 5);\n       * console.log(object.x[0].y.z);\n       * // => 5\n       */\n      function set(object, path, value) {\n        return object == null ? object : baseSet(object, path, value);\n      }\n  \n      /**\n       * This method is like `_.set` except that it accepts `customizer` which is\n       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n       * path creation is handled by the method instead. The `customizer` is invoked\n       * with three arguments: (nsValue, key, nsObject).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);\n       * // => { '0': { '1': { '2': 3 }, 'length': 2 } }\n       */\n      function setWith(object, path, value, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return object == null ? object : baseSet(object, path, value, customizer);\n      }\n  \n      /**\n       * Creates an array of own enumerable key-value pairs for `object` which\n       * can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairs(new Foo);\n       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n       */\n      function toPairs(object) {\n        return baseToPairs(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of own and inherited enumerable key-value pairs for\n       * `object` which can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairsIn(new Foo);\n       * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)\n       */\n      function toPairsIn(object) {\n        return baseToPairs(object, keysIn(object));\n      }\n  \n      /**\n       * An alternative to `_.reduce`; this method transforms `object` to a new\n       * `accumulator` object which is the result of running each of its own enumerable\n       * properties through `iteratee`, with each invocation potentially mutating\n       * the `accumulator` object. The iteratee is invoked with four arguments:\n       * (accumulator, value, key, object). Iteratee functions may exit iteration\n       * early by explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Array|Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The custom accumulator value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.transform([2, 3, 4], function(result, n) {\n       *   result.push(n *= n);\n       *   return n % 2 == 0;\n       * }, []);\n       * // => [4, 9]\n       *\n       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       */\n      function transform(object, iteratee, accumulator) {\n        var isArr = isArray(object) || isTypedArray(object);\n        iteratee = getIteratee(iteratee, 4);\n  \n        if (accumulator == null) {\n          if (isArr || isObject(object)) {\n            var Ctor = object.constructor;\n            if (isArr) {\n              accumulator = isArray(object) ? new Ctor : [];\n            } else {\n              accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n            }\n          } else {\n            accumulator = {};\n          }\n        }\n        (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n          return iteratee(accumulator, value, index, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * Removes the property at `path` of `object`.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       *\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       */\n      function unset(object, path) {\n        return object == null ? true : baseUnset(object, path);\n      }\n  \n      /**\n       * Creates an array of the own enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.values(new Foo);\n       * // => [1, 2] (iteration order is not guaranteed)\n       *\n       * _.values('hi');\n       * // => ['h', 'i']\n       */\n      function values(object) {\n        return object ? baseValues(object, keys(object)) : [];\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.valuesIn(new Foo);\n       * // => [1, 2, 3] (iteration order is not guaranteed)\n       */\n      function valuesIn(object) {\n        return object == null ? [] : baseValues(object, keysIn(object));\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Clamps `number` within the inclusive `lower` and `upper` bounds.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       * @example\n       *\n       * _.clamp(-10, -5, 5);\n       * // => -5\n       *\n       * _.clamp(10, -5, 5);\n       * // => 5\n       */\n      function clamp(number, lower, upper) {\n        if (upper === undefined) {\n          upper = lower;\n          lower = undefined;\n        }\n        if (upper !== undefined) {\n          upper = toNumber(upper);\n          upper = upper === upper ? upper : 0;\n        }\n        if (lower !== undefined) {\n          lower = toNumber(lower);\n          lower = lower === lower ? lower : 0;\n        }\n        return baseClamp(toNumber(number), lower, upper);\n      }\n  \n      /**\n       * Checks if `n` is between `start` and up to but not including, `end`. If\n       * `end` is not specified it's set to `start` with `start` then set to `0`.\n       * If `start` is greater than `end` the params are swapped to support\n       * negative ranges.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to check.\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       * @example\n       *\n       * _.inRange(3, 2, 4);\n       * // => true\n       *\n       * _.inRange(4, 8);\n       * // => true\n       *\n       * _.inRange(4, 2);\n       * // => false\n       *\n       * _.inRange(2, 2);\n       * // => false\n       *\n       * _.inRange(1.2, 2);\n       * // => true\n       *\n       * _.inRange(5.2, 4);\n       * // => false\n       *\n       * _.inRange(-3, -2, -6);\n       * // => true\n       */\n      function inRange(number, start, end) {\n        start = toNumber(start) || 0;\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toNumber(end) || 0;\n        }\n        number = toNumber(number);\n        return baseInRange(number, start, end);\n      }\n  \n      /**\n       * Produces a random number between the inclusive `lower` and `upper` bounds.\n       * If only one argument is provided a number between `0` and the given number\n       * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,\n       * a floating-point number is returned instead of an integer.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} [lower=0] The lower bound.\n       * @param {number} [upper=1] The upper bound.\n       * @param {boolean} [floating] Specify returning a floating-point number.\n       * @returns {number} Returns the random number.\n       * @example\n       *\n       * _.random(0, 5);\n       * // => an integer between 0 and 5\n       *\n       * _.random(5);\n       * // => also an integer between 0 and 5\n       *\n       * _.random(5, true);\n       * // => a floating-point number between 0 and 5\n       *\n       * _.random(1.2, 5.2);\n       * // => a floating-point number between 1.2 and 5.2\n       */\n      function random(lower, upper, floating) {\n        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n          upper = floating = undefined;\n        }\n        if (floating === undefined) {\n          if (typeof upper == 'boolean') {\n            floating = upper;\n            upper = undefined;\n          }\n          else if (typeof lower == 'boolean') {\n            floating = lower;\n            lower = undefined;\n          }\n        }\n        if (lower === undefined && upper === undefined) {\n          lower = 0;\n          upper = 1;\n        }\n        else {\n          lower = toNumber(lower) || 0;\n          if (upper === undefined) {\n            upper = lower;\n            lower = 0;\n          } else {\n            upper = toNumber(upper) || 0;\n          }\n        }\n        if (lower > upper) {\n          var temp = lower;\n          lower = upper;\n          upper = temp;\n        }\n        if (floating || lower % 1 || upper % 1) {\n          var rand = nativeRandom();\n          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n        }\n        return baseRandom(lower, upper);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the camel cased string.\n       * @example\n       *\n       * _.camelCase('Foo Bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('--foo-bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('__foo_bar__');\n       * // => 'fooBar'\n       */\n      var camelCase = createCompounder(function(result, word, index) {\n        word = word.toLowerCase();\n        return result + (index ? capitalize(word) : word);\n      });\n  \n      /**\n       * Converts the first character of `string` to upper case and the remaining\n       * to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to capitalize.\n       * @returns {string} Returns the capitalized string.\n       * @example\n       *\n       * _.capitalize('FRED');\n       * // => 'Fred'\n       */\n      function capitalize(string) {\n        return upperFirst(toString(string).toLowerCase());\n      }\n  \n      /**\n       * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n       * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to deburr.\n       * @returns {string} Returns the deburred string.\n       * @example\n       *\n       * _.deburr('déjà vu');\n       * // => 'deja vu'\n       */\n      function deburr(string) {\n        string = toString(string);\n        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n      }\n  \n      /**\n       * Checks if `string` ends with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=string.length] The position to search from.\n       * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n       * @example\n       *\n       * _.endsWith('abc', 'c');\n       * // => true\n       *\n       * _.endsWith('abc', 'b');\n       * // => false\n       *\n       * _.endsWith('abc', 'b', 2);\n       * // => true\n       */\n      function endsWith(string, target, position) {\n        string = toString(string);\n        target = typeof target == 'string' ? target : (target + '');\n  \n        var length = string.length;\n        position = position === undefined\n          ? length\n          : baseClamp(toInteger(position), 0, length);\n  \n        position -= target.length;\n        return position >= 0 && string.indexOf(target, position) == position;\n      }\n  \n      /**\n       * Converts the characters \"&\", \"<\", \"=\"\">\", '\"', \"'\", and \"\\`\" in `string` to\n       * their corresponding HTML entities.\n       *\n       * **Note:** No other characters are escaped. To escape additional\n       * characters use a third-party library like [_he_](https://mths.be/he).\n       *\n       * Though the \">\" character is escaped for symmetry, characters like\n       * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n       * unless they're part of a tag or unquoted attribute value.\n       * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n       * (under \"semi-related fun fact\") for more details.\n       *\n       * Backticks are escaped because in IE < 9, they can break out of\n       * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n       * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n       * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n       * for more details.\n       *\n       * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n       * to reduce XSS vectors.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escape('fred, barney, & pebbles');\n       * // => 'fred, barney, &amp; pebbles'\n       */\n      function escape(string) {\n        string = toString(string);\n        return (string && reHasUnescapedHtml.test(string))\n          ? string.replace(reUnescapedHtml, escapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n       * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escapeRegExp('[lodash](https://lodash.com/)');\n       * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n       */\n      function escapeRegExp(string) {\n        string = toString(string);\n        return (string && reHasRegExpChar.test(string))\n          ? string.replace(reRegExpChar, '\\\\$&')\n          : string;\n      }\n  \n      /**\n       * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the kebab cased string.\n       * @example\n       *\n       * _.kebabCase('Foo Bar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('fooBar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('__foo_bar__');\n       * // => 'foo-bar'\n       */\n      var kebabCase = createCompounder(function(result, word, index) {\n        return result + (index ? '-' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts `string`, as space separated words, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.lowerCase('--Foo-Bar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('fooBar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('__FOO_BAR__');\n       * // => 'foo bar'\n       */\n      var lowerCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts the first character of `string` to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.lowerFirst('Fred');\n       * // => 'fred'\n       *\n       * _.lowerFirst('FRED');\n       * // => 'fRED'\n       */\n      var lowerFirst = createCaseFirst('toLowerCase');\n  \n      /**\n       * Converts the first character of `string` to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.upperFirst('fred');\n       * // => 'Fred'\n       *\n       * _.upperFirst('FRED');\n       * // => 'FRED'\n       */\n      var upperFirst = createCaseFirst('toUpperCase');\n  \n      /**\n       * Pads `string` on the left and right sides if it's shorter than `length`.\n       * Padding characters are truncated if they can't be evenly divided by `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.pad('abc', 8);\n       * // => '  abc   '\n       *\n       * _.pad('abc', 8, '_-');\n       * // => '_-abc_-_'\n       *\n       * _.pad('abc', 3);\n       * // => 'abc'\n       */\n      function pad(string, length, chars) {\n        string = toString(string);\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return string;\n        }\n        var mid = (length - strLength) / 2,\n            leftLength = nativeFloor(mid),\n            rightLength = nativeCeil(mid);\n  \n        return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);\n      }\n  \n      /**\n       * Pads `string` on the right side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padEnd('abc', 6);\n       * // => 'abc   '\n       *\n       * _.padEnd('abc', 6, '_-');\n       * // => 'abc_-_'\n       *\n       * _.padEnd('abc', 3);\n       * // => 'abc'\n       */\n      function padEnd(string, length, chars) {\n        string = toString(string);\n        return string + createPadding(string, length, chars);\n      }\n  \n      /**\n       * Pads `string` on the left side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padStart('abc', 6);\n       * // => '   abc'\n       *\n       * _.padStart('abc', 6, '_-');\n       * // => '_-_abc'\n       *\n       * _.padStart('abc', 3);\n       * // => 'abc'\n       */\n      function padStart(string, length, chars) {\n        string = toString(string);\n        return createPadding(string, length, chars) + string;\n      }\n  \n      /**\n       * Converts `string` to an integer of the specified radix. If `radix` is\n       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n       * in which case a `radix` of `16` is used.\n       *\n       * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)\n       * of `parseInt`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} string The string to convert.\n       * @param {number} [radix=10] The radix to interpret `value` by.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.parseInt('08');\n       * // => 8\n       *\n       * _.map(['6', '08', '10'], _.parseInt);\n       * // => [6, 8, 10]\n       */\n      function parseInt(string, radix, guard) {\n        // Chrome fails to trim leading <bom> whitespace characters.\n        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n        if (guard || radix == null) {\n          radix = 0;\n        } else if (radix) {\n          radix = +radix;\n        }\n        string = toString(string).replace(reTrim, '');\n        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n      }\n  \n      /**\n       * Repeats the given string `n` times.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to repeat.\n       * @param {number} [n=0] The number of times to repeat the string.\n       * @returns {string} Returns the repeated string.\n       * @example\n       *\n       * _.repeat('*', 3);\n       * // => '***'\n       *\n       * _.repeat('abc', 2);\n       * // => 'abcabc'\n       *\n       * _.repeat('abc', 0);\n       * // => ''\n       */\n      function repeat(string, n) {\n        string = toString(string);\n        n = toInteger(n);\n  \n        var result = '';\n        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n          return result;\n        }\n        // Leverage the exponentiation by squaring algorithm for a faster repeat.\n        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n        do {\n          if (n % 2) {\n            result += string;\n          }\n          n = nativeFloor(n / 2);\n          string += string;\n        } while (n);\n  \n        return result;\n      }\n  \n      /**\n       * Replaces matches for `pattern` in `string` with `replacement`.\n       *\n       * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to modify.\n       * @param {RegExp|string} pattern The pattern to replace.\n       * @param {Function|string} replacement The match replacement.\n       * @returns {string} Returns the modified string.\n       * @example\n       *\n       * _.replace('Hi Fred', 'Fred', 'Barney');\n       * // => 'Hi Barney'\n       */\n      function replace() {\n        var args = arguments,\n            string = toString(args[0]);\n  \n        return args.length < 3 ? string : string.replace(args[1], args[2]);\n      }\n  \n      /**\n       * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the snake cased string.\n       * @example\n       *\n       * _.snakeCase('Foo Bar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('fooBar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('--foo-bar');\n       * // => 'foo_bar'\n       */\n      var snakeCase = createCompounder(function(result, word, index) {\n        return result + (index ? '_' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Splits `string` by `separator`.\n       *\n       * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to split.\n       * @param {RegExp|string} separator The separator pattern to split by.\n       * @param {number} [limit] The length to truncate results to.\n       * @returns {Array} Returns the new array of string segments.\n       * @example\n       *\n       * _.split('a-b-c', '-', 2);\n       * // => ['a', 'b']\n       */\n      function split(string, separator, limit) {\n        return toString(string).split(separator, limit);\n      }\n  \n      /**\n       * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the start cased string.\n       * @example\n       *\n       * _.startCase('--foo-bar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('fooBar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('__foo_bar__');\n       * // => 'Foo Bar'\n       */\n      var startCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + capitalize(word);\n      });\n  \n      /**\n       * Checks if `string` starts with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=0] The position to search from.\n       * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n       * @example\n       *\n       * _.startsWith('abc', 'a');\n       * // => true\n       *\n       * _.startsWith('abc', 'b');\n       * // => false\n       *\n       * _.startsWith('abc', 'b', 1);\n       * // => true\n       */\n      function startsWith(string, target, position) {\n        string = toString(string);\n        position = baseClamp(toInteger(position), 0, string.length);\n        return string.lastIndexOf(target, position) == position;\n      }\n  \n      /**\n       * Creates a compiled template function that can interpolate data properties\n       * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n       * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n       * properties may be accessed as free variables in the template. If a setting\n       * object is given it takes precedence over `_.templateSettings` values.\n       *\n       * **Note:** In the development build `_.template` utilizes\n       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n       * for easier debugging.\n       *\n       * For more information on precompiling templates see\n       * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n       *\n       * For more information on Chrome extension sandboxes see\n       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The template string.\n       * @param {Object} [options] The options object.\n       * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n       * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n       * @param {Object} [options.imports] An object to import into the template as free variables.\n       * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n       * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n       * @param {string} [options.variable] The data object variable name.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the compiled template function.\n       * @example\n       *\n       * // Use the \"interpolate\" delimiter to create a compiled template.\n       * var compiled = _.template('hello <%= user=\"\" %=\"\">!');\n       * compiled({ 'user': 'fred' });\n       * // => 'hello fred!'\n       *\n       * // Use the HTML \"escape\" delimiter to escape data property values.\n       * var compiled = _.template('<b><%- value=\"\" %=\"\"></%-></b>');\n       * compiled({ 'value': '<script>' });\n       * // => '<b>&lt;script&gt;</b>'\n       *\n       * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the internal `print` function in \"evaluate\" delimiters.\n       * var compiled = _.template('<% print(\"hello \" + user); %>!');\n       * compiled({ 'user': 'barney' });\n       * // => 'hello barney!'\n       *\n       * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n       * var compiled = _.template('hello ${ user }!');\n       * compiled({ 'user': 'pebbles' });\n       * // => 'hello pebbles!'\n       *\n       * // Use custom template delimiters.\n       * _.templateSettings.interpolate = /undefined/g;\n       * var compiled = _.template('hello !');\n       * compiled({ 'user': 'mustache' });\n       * // => 'hello mustache!'\n       *\n       * // Use backslashes to treat delimiters as plain text.\n       * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n       * compiled({ 'value': 'ignored' });\n       * // => '<%- value %>'\n       *\n       * // Use the `imports` option to import `jQuery` as `jq`.\n       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n       * compiled(data);\n       * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n       *\n       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n       * compiled.source;\n       * // => function(data) {\n       * //   var __t, __p = '';\n       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n       * //   return __p;\n       * // }\n       *\n       * // Use the `source` property to inline compiled templates for meaningful\n       * // line numbers in error messages and stack traces.\n       * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n       *   var JST = {\\\n       *     \"main\": ' + _.template(mainText).source + '\\\n       *   };\\\n       * ');\n       */\n      function template(string, options, guard) {\n        // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n        // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n        var settings = lodash.templateSettings;\n  \n        if (guard && isIterateeCall(string, options, guard)) {\n          options = undefined;\n        }\n        string = toString(string);\n        options = assignInWith({}, options, settings, assignInDefaults);\n  \n        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n            importsKeys = keys(imports),\n            importsValues = baseValues(imports, importsKeys);\n  \n        var isEscaping,\n            isEvaluating,\n            index = 0,\n            interpolate = options.interpolate || reNoMatch,\n            source = \"__p += '\";\n  \n        // Compile the regexp to match each delimiter.\n        var reDelimiters = RegExp(\n          (options.escape || reNoMatch).source + '|' +\n          interpolate.source + '|' +\n          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n          (options.evaluate || reNoMatch).source + '|$'\n        , 'g');\n  \n        // Use a sourceURL for easier debugging.\n        var sourceURL = '//# sourceURL=' +\n          ('sourceURL' in options\n            ? options.sourceURL\n            : ('lodash.templateSources[' + (++templateCounter) + ']')\n          ) + '\\n';\n  \n        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n          interpolateValue || (interpolateValue = esTemplateValue);\n  \n          // Escape characters that can't be included in string literals.\n          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n  \n          // Replace delimiters with snippets.\n          if (escapeValue) {\n            isEscaping = true;\n            source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n          }\n          if (evaluateValue) {\n            isEvaluating = true;\n            source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n          }\n          if (interpolateValue) {\n            source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n          }\n          index = offset + match.length;\n  \n          // The JS engine embedded in Adobe products needs `match` returned in\n          // order to produce the correct `offset` value.\n          return match;\n        });\n  \n        source += \"';\\n\";\n  \n        // If `variable` is not specified wrap a with-statement around the generated\n        // code to add the data object to the top of the scope chain.\n        var variable = options.variable;\n        if (!variable) {\n          source = 'with (obj) {\\n' + source + '\\n}\\n';\n        }\n        // Cleanup code by stripping empty strings.\n        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n          .replace(reEmptyStringMiddle, '$1')\n          .replace(reEmptyStringTrailing, '$1;');\n  \n        // Frame code as the function body.\n        source = 'function(' + (variable || 'obj') + ') {\\n' +\n          (variable\n            ? ''\n            : 'obj || (obj = {});\\n'\n          ) +\n          \"var __t, __p = ''\" +\n          (isEscaping\n             ? ', __e = _.escape'\n             : ''\n          ) +\n          (isEvaluating\n            ? ', __j = Array.prototype.join;\\n' +\n              \"function print() { __p += __j.call(arguments, '') }\\n\"\n            : ';\\n'\n          ) +\n          source +\n          'return __p\\n}';\n  \n        var result = attempt(function() {\n          return Function(importsKeys, sourceURL + 'return ' + source)\n            .apply(undefined, importsValues);\n        });\n  \n        // Provide the compiled function's source by its `toString` method or\n        // the `source` property as a convenience for inlining compiled templates.\n        result.source = source;\n        if (isError(result)) {\n          throw result;\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `string`, as a whole, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.toLower('--Foo-Bar');\n       * // => '--foo-bar'\n       *\n       * _.toLower('fooBar');\n       * // => 'foobar'\n       *\n       * _.toLower('__FOO_BAR__');\n       * // => '__foo_bar__'\n       */\n      function toLower(value) {\n        return toString(value).toLowerCase();\n      }\n  \n      /**\n       * Converts `string`, as a whole, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.toUpper('--foo-bar');\n       * // => '--FOO-BAR'\n       *\n       * _.toUpper('fooBar');\n       * // => 'FOOBAR'\n       *\n       * _.toUpper('__foo_bar__');\n       * // => '__FOO_BAR__'\n       */\n      function toUpper(value) {\n        return toString(value).toUpperCase();\n      }\n  \n      /**\n       * Removes leading and trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trim('  abc  ');\n       * // => 'abc'\n       *\n       * _.trim('-_-abc-_-', '_-');\n       * // => 'abc'\n       *\n       * _.map(['  foo  ', '  bar  '], _.trim);\n       * // => ['foo', 'bar']\n       */\n      function trim(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrim, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string),\n            chrSymbols = stringToArray(chars);\n  \n        return strSymbols\n          .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimEnd('  abc  ');\n       * // => '  abc'\n       *\n       * _.trimEnd('-_-abc-_-', '_-');\n       * // => '-_-abc'\n       */\n      function trimEnd(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimEnd, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes leading whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimStart('  abc  ');\n       * // => 'abc  '\n       *\n       * _.trimStart('-_-abc-_-', '_-');\n       * // => 'abc-_-'\n       */\n      function trimStart(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimStart, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(charsStartIndex(strSymbols, stringToArray(chars)))\n          .join('');\n      }\n  \n      /**\n       * Truncates `string` if it's longer than the given maximum string length.\n       * The last characters of the truncated string are replaced with the omission\n       * string which defaults to \"...\".\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to truncate.\n       * @param {Object} [options=({})] The options object.\n       * @param {number} [options.length=30] The maximum string length.\n       * @param {string} [options.omission='...'] The string to indicate text is omitted.\n       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n       * @returns {string} Returns the truncated string.\n       * @example\n       *\n       * _.truncate('hi-diddly-ho there, neighborino');\n       * // => 'hi-diddly-ho there, neighbo...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': ' '\n       * });\n       * // => 'hi-diddly-ho there,...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': /,? +/\n       * });\n       * // => 'hi-diddly-ho there...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'omission': ' [...]'\n       * });\n       * // => 'hi-diddly-ho there, neig [...]'\n       */\n      function truncate(string, options) {\n        var length = DEFAULT_TRUNC_LENGTH,\n            omission = DEFAULT_TRUNC_OMISSION;\n  \n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? toInteger(options.length) : length;\n          omission = 'omission' in options ? toString(options.omission) : omission;\n        }\n        string = toString(string);\n  \n        var strLength = string.length;\n        if (reHasComplexSymbol.test(string)) {\n          var strSymbols = stringToArray(string);\n          strLength = strSymbols.length;\n        }\n        if (length >= strLength) {\n          return string;\n        }\n        var end = length - stringSize(omission);\n        if (end < 1) {\n          return omission;\n        }\n        var result = strSymbols\n          ? strSymbols.slice(0, end).join('')\n          : string.slice(0, end);\n  \n        if (separator === undefined) {\n          return result + omission;\n        }\n        if (strSymbols) {\n          end += (result.length - end);\n        }\n        if (isRegExp(separator)) {\n          if (string.slice(end).search(separator)) {\n            var match,\n                substring = result;\n  \n            if (!separator.global) {\n              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n            }\n            separator.lastIndex = 0;\n            while ((match = separator.exec(substring))) {\n              var newEnd = match.index;\n            }\n            result = result.slice(0, newEnd === undefined ? end : newEnd);\n          }\n        } else if (string.indexOf(separator, end) != end) {\n          var index = result.lastIndexOf(separator);\n          if (index > -1) {\n            result = result.slice(0, index);\n          }\n        }\n        return result + omission;\n      }\n  \n      /**\n       * The inverse of `_.escape`; this method converts the HTML entities\n       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n       * corresponding characters.\n       *\n       * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n       * entities use a third-party library like [_he_](https://mths.be/he).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to unescape.\n       * @returns {string} Returns the unescaped string.\n       * @example\n       *\n       * _.unescape('fred, barney, &amp; pebbles');\n       * // => 'fred, barney, & pebbles'\n       */\n      function unescape(string) {\n        string = toString(string);\n        return (string && reHasEscapedHtml.test(string))\n          ? string.replace(reEscapedHtml, unescapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Converts `string`, as space separated words, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.upperCase('--foo-bar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('fooBar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('__foo_bar__');\n       * // => 'FOO BAR'\n       */\n      var upperCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toUpperCase();\n      });\n  \n      /**\n       * Splits `string` into an array of its words.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to inspect.\n       * @param {RegExp|string} [pattern] The pattern to match words.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the words of `string`.\n       * @example\n       *\n       * _.words('fred, barney, & pebbles');\n       * // => ['fred', 'barney', 'pebbles']\n       *\n       * _.words('fred, barney, & pebbles', /[^, ]+/g);\n       * // => ['fred', 'barney', '&', 'pebbles']\n       */\n      function words(string, pattern, guard) {\n        string = toString(string);\n        pattern = guard ? undefined : pattern;\n  \n        if (pattern === undefined) {\n          pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;\n        }\n        return string.match(pattern) || [];\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Attempts to invoke `func`, returning either the result or the caught error\n       * object. Any additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function} func The function to attempt.\n       * @returns {*} Returns the `func` result or error object.\n       * @example\n       *\n       * // Avoid throwing errors for invalid selectors.\n       * var elements = _.attempt(function(selector) {\n       *   return document.querySelectorAll(selector);\n       * }, '>_>');\n       *\n       * if (_.isError(elements)) {\n       *   elements = [];\n       * }\n       */\n      var attempt = rest(function(func, args) {\n        try {\n          return apply(func, undefined, args);\n        } catch (e) {\n          return isError(e) ? e : new Error(e);\n        }\n      });\n  \n      /**\n       * Binds methods of an object to the object itself, overwriting the existing\n       * method.\n       *\n       * **Note:** This method doesn't set the \"length\" property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to bind and assign the bound methods to.\n       * @param {...(string|string[])} methodNames The object method names to bind,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var view = {\n       *   'label': 'docs',\n       *   'onClick': function() {\n       *     console.log('clicked ' + this.label);\n       *   }\n       * };\n       *\n       * _.bindAll(view, 'onClick');\n       * jQuery(element).on('click', view.onClick);\n       * // => logs 'clicked docs' when clicked\n       */\n      var bindAll = rest(function(object, methodNames) {\n        arrayEach(baseFlatten(methodNames, 1), function(key) {\n          object[key] = bind(object[key], object);\n        });\n        return object;\n      });\n  \n      /**\n       * Creates a function that iterates over `pairs` invoking the corresponding\n       * function of the first predicate to return truthy. The predicate-function\n       * pairs are invoked with the `this` binding and arguments of the created\n       * function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array} pairs The predicate-function pairs.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.cond([\n       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n       *   [_.constant(true),                _.constant('no match')]\n       * ]);\n       *\n       * func({ 'a': 1, 'b': 2 });\n       * // => 'matches A'\n       *\n       * func({ 'a': 0, 'b': 1 });\n       * // => 'matches B'\n       *\n       * func({ 'a': '1', 'b': '2' });\n       * // => 'no match'\n       */\n      function cond(pairs) {\n        var length = pairs ? pairs.length : 0,\n            toIteratee = getIteratee();\n  \n        pairs = !length ? [] : arrayMap(pairs, function(pair) {\n          if (typeof pair[1] != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          return [toIteratee(pair[0]), pair[1]];\n        });\n  \n        return rest(function(args) {\n          var index = -1;\n          while (++index < length) {\n            var pair = pairs[index];\n            if (apply(pair[0], this, args)) {\n              return apply(pair[1], this, args);\n            }\n          }\n        });\n      }\n  \n      /**\n       * Creates a function that invokes the predicate properties of `source` with\n       * the corresponding property values of a given object, returning `true` if\n       * all predicates return truthy, else `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function conforms(source) {\n        return baseConforms(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that returns `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to return from the new function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var getter = _.constant(object);\n       *\n       * getter() === object;\n       * // => true\n       */\n      function constant(value) {\n        return function() {\n          return value;\n        };\n      }\n  \n      /**\n       * Creates a function that returns the result of invoking the given functions\n       * with the `this` binding of the created function, where each successive\n       * invocation is supplied the return value of the previous.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flow(_.add, square);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flow = createFlow();\n  \n      /**\n       * This method is like `_.flow` except that it creates a function that\n       * invokes the given functions from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flowRight(square, _.add);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flowRight = createFlow(true);\n  \n      /**\n       * This method returns the first argument given to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value Any value.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.identity(object) === object;\n       * // => true\n       */\n      function identity(value) {\n        return value;\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the arguments of the created\n       * function. If `func` is a property name the created callback returns the\n       * property value for a given element. If `func` is an object the created\n       * callback returns `true` for elements that contain the equivalent object\n       * properties, otherwise it returns `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} [func=_.identity] The value to convert to a callback.\n       * @returns {Function} Returns the callback.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // Create custom iteratee shorthands.\n       * _.iteratee = _.wrap(_.iteratee, function(callback, func) {\n       *   var p = /^(\\S+)\\s*([<>])\\s*(\\S+)$/.exec(func);\n       *   return !p ? callback(func) : function(object) {\n       *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);\n       *   };\n       * });\n       *\n       * _.filter(users, 'age > 36');\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function iteratee(func) {\n        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between a given\n       * object and `source`, returning `true` if the given object has equivalent\n       * property values, else `false`. The created function is equivalent to\n       * `_.isMatch` with a `source` partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n       */\n      function matches(source) {\n        return baseMatches(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between the\n       * value at `path` of a given object to `srcValue`, returning `true` if the\n       * object value is equivalent, else `false`.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * _.find(users, _.matchesProperty('user', 'fred'));\n       * // => { 'user': 'fred' }\n       */\n      function matchesProperty(path, srcValue) {\n        return baseMatchesProperty(path, baseClone(srcValue, true));\n      }\n  \n      /**\n       * Creates a function that invokes the method at `path` of a given object.\n       * Any additional arguments are provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': _.constant(2) } } },\n       *   { 'a': { 'b': { 'c': _.constant(1) } } }\n       * ];\n       *\n       * _.map(objects, _.method('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      var method = rest(function(path, args) {\n        return function(object) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * The opposite of `_.method`; this method creates a function that invokes\n       * the method at a given path of `object`. Any additional arguments are\n       * provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = _.times(3, _.constant),\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n       * // => [2, 0]\n       */\n      var methodOf = rest(function(object, args) {\n        return function(path) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * Adds all own enumerable function properties of a source object to the\n       * destination object. If `object` is a function then methods are added to\n       * its prototype as well.\n       *\n       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n       * avoid conflicts caused by modifying the original.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function|Object} [object=lodash] The destination object.\n       * @param {Object} source The object of functions to add.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.chain=true] Specify whether the functions added\n       *  are chainable.\n       * @returns {Function|Object} Returns `object`.\n       * @example\n       *\n       * function vowels(string) {\n       *   return _.filter(string, function(v) {\n       *     return /[aeiou]/i.test(v);\n       *   });\n       * }\n       *\n       * _.mixin({ 'vowels': vowels });\n       * _.vowels('fred');\n       * // => ['e']\n       *\n       * _('fred').vowels().value();\n       * // => ['e']\n       *\n       * _.mixin({ 'vowels': vowels }, { 'chain': false });\n       * _('fred').vowels();\n       * // => ['e']\n       */\n      function mixin(object, source, options) {\n        var props = keys(source),\n            methodNames = baseFunctions(source, props);\n  \n        if (options == null &&\n            !(isObject(source) && (methodNames.length || !props.length))) {\n          options = source;\n          source = object;\n          object = this;\n          methodNames = baseFunctions(source, keys(source));\n        }\n        var chain = (isObject(options) && 'chain' in options) ? options.chain : true,\n            isFunc = isFunction(object);\n  \n        arrayEach(methodNames, function(methodName) {\n          var func = source[methodName];\n          object[methodName] = func;\n          if (isFunc) {\n            object.prototype[methodName] = function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = copyArray(this.__actions__);\n  \n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }\n        });\n  \n        return object;\n      }\n  \n      /**\n       * Reverts the `_` variable to its previous value and returns a reference to\n       * the `lodash` function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @returns {Function} Returns the `lodash` function.\n       * @example\n       *\n       * var lodash = _.noConflict();\n       */\n      function noConflict() {\n        if (root._ === this) {\n          root._ = oldDash;\n        }\n        return this;\n      }\n  \n      /**\n       * A no-operation function that returns `undefined` regardless of the\n       * arguments it receives.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.noop(object) === undefined;\n       * // => true\n       */\n      function noop() {\n        // No operation performed.\n      }\n  \n      /**\n       * Creates a function that returns its nth argument.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [n=0] The index of the argument to return.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.nthArg(1);\n       *\n       * func('a', 'b', 'c');\n       * // => 'b'\n       */\n      function nthArg(n) {\n        n = toInteger(n);\n        return function() {\n          return arguments[n];\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `iteratees` with the arguments provided\n       * to the created function and returns their results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} iteratees The iteratees to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.over(Math.max, Math.min);\n       *\n       * func(1, 2, 3, 4);\n       * // => [4, 1]\n       */\n      var over = createOver(arrayMap);\n  \n      /**\n       * Creates a function that checks if **all** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overEvery(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => false\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overEvery = createOver(arrayEvery);\n  \n      /**\n       * Creates a function that checks if **any** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overSome(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => true\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overSome = createOver(arraySome);\n  \n      /**\n       * Creates a function that returns the value at `path` of a given object.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': 2 } } },\n       *   { 'a': { 'b': { 'c': 1 } } }\n       * ];\n       *\n       * _.map(objects, _.property('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      function property(path) {\n        return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n      }\n  \n      /**\n       * The opposite of `_.property`; this method creates a function that returns\n       * the value at a given path of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = [0, 1, 2],\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n       * // => [2, 0]\n       */\n      function propertyOf(object) {\n        return function(path) {\n          return object == null ? undefined : baseGet(object, path);\n        };\n      }\n  \n      /**\n       * Creates an array of numbers (positive and/or negative) progressing from\n       * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n       * `start` is specified without an `end` or `step`. If `end` is not specified\n       * it's set to `start` with `start` then set to `0`.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.range(4);\n       * // => [0, 1, 2, 3]\n       *\n       * _.range(-4);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 5);\n       * // => [1, 2, 3, 4]\n       *\n       * _.range(0, 20, 5);\n       * // => [0, 5, 10, 15]\n       *\n       * _.range(0, -4, -1);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.range(0);\n       * // => []\n       */\n      var range = createRange();\n  \n      /**\n       * This method is like `_.range` except that it populates values in\n       * descending order.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.rangeRight(4);\n       * // => [3, 2, 1, 0]\n       *\n       * _.rangeRight(-4);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 5);\n       * // => [4, 3, 2, 1]\n       *\n       * _.rangeRight(0, 20, 5);\n       * // => [15, 10, 5, 0]\n       *\n       * _.rangeRight(0, -4, -1);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.rangeRight(0);\n       * // => []\n       */\n      var rangeRight = createRange(true);\n  \n      /**\n       * Invokes the iteratee function `n` times, returning an array of the results\n       * of each invocation. The iteratee is invoked with one argument; (index).\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} n The number of times to invoke `iteratee`.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.times(3, String);\n       * // => ['0', '1', '2']\n       *\n       *  _.times(4, _.constant(true));\n       * // => [true, true, true, true]\n       */\n      function times(n, iteratee) {\n        n = toInteger(n);\n        if (n < 1 || n > MAX_SAFE_INTEGER) {\n          return [];\n        }\n        var index = MAX_ARRAY_LENGTH,\n            length = nativeMin(n, MAX_ARRAY_LENGTH);\n  \n        iteratee = baseCastFunction(iteratee);\n        n -= MAX_ARRAY_LENGTH;\n  \n        var result = baseTimes(length, iteratee);\n        while (++index < n) {\n          iteratee(index);\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `value` to a property path array.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the new property path array.\n       * @example\n       *\n       * _.toPath('a.b.c');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toPath('a[0].b.c');\n       * // => ['a', '0', 'b', 'c']\n       *\n       * var path = ['a', 'b', 'c'],\n       *     newPath = _.toPath(path);\n       *\n       * console.log(newPath);\n       * // => ['a', 'b', 'c']\n       *\n       * console.log(path === newPath);\n       * // => false\n       */\n      function toPath(value) {\n        return isArray(value) ? arrayMap(value, String) : stringToPath(value);\n      }\n  \n      /**\n       * Generates a unique ID. If `prefix` is given the ID is appended to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {string} [prefix=''] The value to prefix the ID with.\n       * @returns {string} Returns the unique ID.\n       * @example\n       *\n       * _.uniqueId('contact_');\n       * // => 'contact_104'\n       *\n       * _.uniqueId();\n       * // => '105'\n       */\n      function uniqueId(prefix) {\n        var id = ++idCounter;\n        return toString(prefix) + id;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Adds two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} augend The first number in an addition.\n       * @param {number} addend The second number in an addition.\n       * @returns {number} Returns the total.\n       * @example\n       *\n       * _.add(6, 4);\n       * // => 10\n       */\n      function add(augend, addend) {\n        var result;\n        if (augend === undefined && addend === undefined) {\n          return 0;\n        }\n        if (augend !== undefined) {\n          result = augend;\n        }\n        if (addend !== undefined) {\n          result = result === undefined ? addend : (result + addend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes `number` rounded up to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round up.\n       * @param {number} [precision=0] The precision to round up to.\n       * @returns {number} Returns the rounded up number.\n       * @example\n       *\n       * _.ceil(4.006);\n       * // => 5\n       *\n       * _.ceil(6.004, 2);\n       * // => 6.01\n       *\n       * _.ceil(6040, -2);\n       * // => 6100\n       */\n      var ceil = createRound('ceil');\n  \n      /**\n       * Computes `number` rounded down to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round down.\n       * @param {number} [precision=0] The precision to round down to.\n       * @returns {number} Returns the rounded down number.\n       * @example\n       *\n       * _.floor(4.006);\n       * // => 4\n       *\n       * _.floor(0.046, 2);\n       * // => 0.04\n       *\n       * _.floor(4060, -2);\n       * // => 4000\n       */\n      var floor = createRound('floor');\n  \n      /**\n       * Computes the maximum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * _.max([4, 2, 8, 6]);\n       * // => 8\n       *\n       * _.max([]);\n       * // => undefined\n       */\n      function max(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, gt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.max` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.maxBy(objects, function(o) { return o.n; });\n       * // => { 'n': 2 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.maxBy(objects, 'n');\n       * // => { 'n': 2 }\n       */\n      function maxBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), gt)\n          : undefined;\n      }\n  \n      /**\n       * Computes the mean of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the mean.\n       * @example\n       *\n       * _.mean([4, 2, 8, 6]);\n       * // => 5\n       */\n      function mean(array) {\n        return sum(array) / (array ? array.length : 0);\n      }\n  \n      /**\n       * Computes the minimum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * _.min([4, 2, 8, 6]);\n       * // => 2\n       *\n       * _.min([]);\n       * // => undefined\n       */\n      function min(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, lt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.min` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.minBy(objects, function(o) { return o.n; });\n       * // => { 'n': 1 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.minBy(objects, 'n');\n       * // => { 'n': 1 }\n       */\n      function minBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), lt)\n          : undefined;\n      }\n  \n      /**\n       * Computes `number` rounded to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round.\n       * @param {number} [precision=0] The precision to round to.\n       * @returns {number} Returns the rounded number.\n       * @example\n       *\n       * _.round(4.006);\n       * // => 4\n       *\n       * _.round(4.006, 2);\n       * // => 4.01\n       *\n       * _.round(4060, -2);\n       * // => 4100\n       */\n      var round = createRound('round');\n  \n      /**\n       * Subtract two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} minuend The first number in a subtraction.\n       * @param {number} subtrahend The second number in a subtraction.\n       * @returns {number} Returns the difference.\n       * @example\n       *\n       * _.subtract(6, 4);\n       * // => 2\n       */\n      function subtract(minuend, subtrahend) {\n        var result;\n        if (minuend === undefined && subtrahend === undefined) {\n          return 0;\n        }\n        if (minuend !== undefined) {\n          result = minuend;\n        }\n        if (subtrahend !== undefined) {\n          result = result === undefined ? subtrahend : (result - subtrahend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes the sum of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * _.sum([4, 2, 8, 6]);\n       * // => 20\n       */\n      function sum(array) {\n        return (array && array.length)\n          ? baseSum(array, identity)\n          : 0;\n      }\n  \n      /**\n       * This method is like `_.sum` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the value to be summed.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n       *\n       * _.sumBy(objects, function(o) { return o.n; });\n       * // => 20\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sumBy(objects, 'n');\n       * // => 20\n       */\n      function sumBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSum(array, getIteratee(iteratee))\n          : 0;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Ensure wrappers are instances of `baseLodash`.\n      lodash.prototype = baseLodash.prototype;\n  \n      LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n      LodashWrapper.prototype.constructor = LodashWrapper;\n  \n      LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n      LazyWrapper.prototype.constructor = LazyWrapper;\n  \n      // Avoid inheriting from `Object.prototype` when possible.\n      Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;\n  \n      // Add functions to the `MapCache`.\n      MapCache.prototype.clear = mapClear;\n      MapCache.prototype['delete'] = mapDelete;\n      MapCache.prototype.get = mapGet;\n      MapCache.prototype.has = mapHas;\n      MapCache.prototype.set = mapSet;\n  \n      // Add functions to the `SetCache`.\n      SetCache.prototype.push = cachePush;\n  \n      // Add functions to the `Stack` cache.\n      Stack.prototype.clear = stackClear;\n      Stack.prototype['delete'] = stackDelete;\n      Stack.prototype.get = stackGet;\n      Stack.prototype.has = stackHas;\n      Stack.prototype.set = stackSet;\n  \n      // Assign cache to `_.memoize`.\n      memoize.Cache = MapCache;\n  \n      // Add functions that return wrapped values when chaining.\n      lodash.after = after;\n      lodash.ary = ary;\n      lodash.assign = assign;\n      lodash.assignIn = assignIn;\n      lodash.assignInWith = assignInWith;\n      lodash.assignWith = assignWith;\n      lodash.at = at;\n      lodash.before = before;\n      lodash.bind = bind;\n      lodash.bindAll = bindAll;\n      lodash.bindKey = bindKey;\n      lodash.castArray = castArray;\n      lodash.chain = chain;\n      lodash.chunk = chunk;\n      lodash.compact = compact;\n      lodash.concat = concat;\n      lodash.cond = cond;\n      lodash.conforms = conforms;\n      lodash.constant = constant;\n      lodash.countBy = countBy;\n      lodash.create = create;\n      lodash.curry = curry;\n      lodash.curryRight = curryRight;\n      lodash.debounce = debounce;\n      lodash.defaults = defaults;\n      lodash.defaultsDeep = defaultsDeep;\n      lodash.defer = defer;\n      lodash.delay = delay;\n      lodash.difference = difference;\n      lodash.differenceBy = differenceBy;\n      lodash.differenceWith = differenceWith;\n      lodash.drop = drop;\n      lodash.dropRight = dropRight;\n      lodash.dropRightWhile = dropRightWhile;\n      lodash.dropWhile = dropWhile;\n      lodash.fill = fill;\n      lodash.filter = filter;\n      lodash.flatMap = flatMap;\n      lodash.flatten = flatten;\n      lodash.flattenDeep = flattenDeep;\n      lodash.flattenDepth = flattenDepth;\n      lodash.flip = flip;\n      lodash.flow = flow;\n      lodash.flowRight = flowRight;\n      lodash.fromPairs = fromPairs;\n      lodash.functions = functions;\n      lodash.functionsIn = functionsIn;\n      lodash.groupBy = groupBy;\n      lodash.initial = initial;\n      lodash.intersection = intersection;\n      lodash.intersectionBy = intersectionBy;\n      lodash.intersectionWith = intersectionWith;\n      lodash.invert = invert;\n      lodash.invertBy = invertBy;\n      lodash.invokeMap = invokeMap;\n      lodash.iteratee = iteratee;\n      lodash.keyBy = keyBy;\n      lodash.keys = keys;\n      lodash.keysIn = keysIn;\n      lodash.map = map;\n      lodash.mapKeys = mapKeys;\n      lodash.mapValues = mapValues;\n      lodash.matches = matches;\n      lodash.matchesProperty = matchesProperty;\n      lodash.memoize = memoize;\n      lodash.merge = merge;\n      lodash.mergeWith = mergeWith;\n      lodash.method = method;\n      lodash.methodOf = methodOf;\n      lodash.mixin = mixin;\n      lodash.negate = negate;\n      lodash.nthArg = nthArg;\n      lodash.omit = omit;\n      lodash.omitBy = omitBy;\n      lodash.once = once;\n      lodash.orderBy = orderBy;\n      lodash.over = over;\n      lodash.overArgs = overArgs;\n      lodash.overEvery = overEvery;\n      lodash.overSome = overSome;\n      lodash.partial = partial;\n      lodash.partialRight = partialRight;\n      lodash.partition = partition;\n      lodash.pick = pick;\n      lodash.pickBy = pickBy;\n      lodash.property = property;\n      lodash.propertyOf = propertyOf;\n      lodash.pull = pull;\n      lodash.pullAll = pullAll;\n      lodash.pullAllBy = pullAllBy;\n      lodash.pullAt = pullAt;\n      lodash.range = range;\n      lodash.rangeRight = rangeRight;\n      lodash.rearg = rearg;\n      lodash.reject = reject;\n      lodash.remove = remove;\n      lodash.rest = rest;\n      lodash.reverse = reverse;\n      lodash.sampleSize = sampleSize;\n      lodash.set = set;\n      lodash.setWith = setWith;\n      lodash.shuffle = shuffle;\n      lodash.slice = slice;\n      lodash.sortBy = sortBy;\n      lodash.sortedUniq = sortedUniq;\n      lodash.sortedUniqBy = sortedUniqBy;\n      lodash.split = split;\n      lodash.spread = spread;\n      lodash.tail = tail;\n      lodash.take = take;\n      lodash.takeRight = takeRight;\n      lodash.takeRightWhile = takeRightWhile;\n      lodash.takeWhile = takeWhile;\n      lodash.tap = tap;\n      lodash.throttle = throttle;\n      lodash.thru = thru;\n      lodash.toArray = toArray;\n      lodash.toPairs = toPairs;\n      lodash.toPairsIn = toPairsIn;\n      lodash.toPath = toPath;\n      lodash.toPlainObject = toPlainObject;\n      lodash.transform = transform;\n      lodash.unary = unary;\n      lodash.union = union;\n      lodash.unionBy = unionBy;\n      lodash.unionWith = unionWith;\n      lodash.uniq = uniq;\n      lodash.uniqBy = uniqBy;\n      lodash.uniqWith = uniqWith;\n      lodash.unset = unset;\n      lodash.unzip = unzip;\n      lodash.unzipWith = unzipWith;\n      lodash.values = values;\n      lodash.valuesIn = valuesIn;\n      lodash.without = without;\n      lodash.words = words;\n      lodash.wrap = wrap;\n      lodash.xor = xor;\n      lodash.xorBy = xorBy;\n      lodash.xorWith = xorWith;\n      lodash.zip = zip;\n      lodash.zipObject = zipObject;\n      lodash.zipObjectDeep = zipObjectDeep;\n      lodash.zipWith = zipWith;\n  \n      // Add aliases.\n      lodash.extend = assignIn;\n      lodash.extendWith = assignInWith;\n  \n      // Add functions to `lodash.prototype`.\n      mixin(lodash, lodash);\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Add functions that return unwrapped values when chaining.\n      lodash.add = add;\n      lodash.attempt = attempt;\n      lodash.camelCase = camelCase;\n      lodash.capitalize = capitalize;\n      lodash.ceil = ceil;\n      lodash.clamp = clamp;\n      lodash.clone = clone;\n      lodash.cloneDeep = cloneDeep;\n      lodash.cloneDeepWith = cloneDeepWith;\n      lodash.cloneWith = cloneWith;\n      lodash.deburr = deburr;\n      lodash.endsWith = endsWith;\n      lodash.eq = eq;\n      lodash.escape = escape;\n      lodash.escapeRegExp = escapeRegExp;\n      lodash.every = every;\n      lodash.find = find;\n      lodash.findIndex = findIndex;\n      lodash.findKey = findKey;\n      lodash.findLast = findLast;\n      lodash.findLastIndex = findLastIndex;\n      lodash.findLastKey = findLastKey;\n      lodash.floor = floor;\n      lodash.forEach = forEach;\n      lodash.forEachRight = forEachRight;\n      lodash.forIn = forIn;\n      lodash.forInRight = forInRight;\n      lodash.forOwn = forOwn;\n      lodash.forOwnRight = forOwnRight;\n      lodash.get = get;\n      lodash.gt = gt;\n      lodash.gte = gte;\n      lodash.has = has;\n      lodash.hasIn = hasIn;\n      lodash.head = head;\n      lodash.identity = identity;\n      lodash.includes = includes;\n      lodash.indexOf = indexOf;\n      lodash.inRange = inRange;\n      lodash.invoke = invoke;\n      lodash.isArguments = isArguments;\n      lodash.isArray = isArray;\n      lodash.isArrayBuffer = isArrayBuffer;\n      lodash.isArrayLike = isArrayLike;\n      lodash.isArrayLikeObject = isArrayLikeObject;\n      lodash.isBoolean = isBoolean;\n      lodash.isBuffer = isBuffer;\n      lodash.isDate = isDate;\n      lodash.isElement = isElement;\n      lodash.isEmpty = isEmpty;\n      lodash.isEqual = isEqual;\n      lodash.isEqualWith = isEqualWith;\n      lodash.isError = isError;\n      lodash.isFinite = isFinite;\n      lodash.isFunction = isFunction;\n      lodash.isInteger = isInteger;\n      lodash.isLength = isLength;\n      lodash.isMap = isMap;\n      lodash.isMatch = isMatch;\n      lodash.isMatchWith = isMatchWith;\n      lodash.isNaN = isNaN;\n      lodash.isNative = isNative;\n      lodash.isNil = isNil;\n      lodash.isNull = isNull;\n      lodash.isNumber = isNumber;\n      lodash.isObject = isObject;\n      lodash.isObjectLike = isObjectLike;\n      lodash.isPlainObject = isPlainObject;\n      lodash.isRegExp = isRegExp;\n      lodash.isSafeInteger = isSafeInteger;\n      lodash.isSet = isSet;\n      lodash.isString = isString;\n      lodash.isSymbol = isSymbol;\n      lodash.isTypedArray = isTypedArray;\n      lodash.isUndefined = isUndefined;\n      lodash.isWeakMap = isWeakMap;\n      lodash.isWeakSet = isWeakSet;\n      lodash.join = join;\n      lodash.kebabCase = kebabCase;\n      lodash.last = last;\n      lodash.lastIndexOf = lastIndexOf;\n      lodash.lowerCase = lowerCase;\n      lodash.lowerFirst = lowerFirst;\n      lodash.lt = lt;\n      lodash.lte = lte;\n      lodash.max = max;\n      lodash.maxBy = maxBy;\n      lodash.mean = mean;\n      lodash.min = min;\n      lodash.minBy = minBy;\n      lodash.noConflict = noConflict;\n      lodash.noop = noop;\n      lodash.now = now;\n      lodash.pad = pad;\n      lodash.padEnd = padEnd;\n      lodash.padStart = padStart;\n      lodash.parseInt = parseInt;\n      lodash.random = random;\n      lodash.reduce = reduce;\n      lodash.reduceRight = reduceRight;\n      lodash.repeat = repeat;\n      lodash.replace = replace;\n      lodash.result = result;\n      lodash.round = round;\n      lodash.runInContext = runInContext;\n      lodash.sample = sample;\n      lodash.size = size;\n      lodash.snakeCase = snakeCase;\n      lodash.some = some;\n      lodash.sortedIndex = sortedIndex;\n      lodash.sortedIndexBy = sortedIndexBy;\n      lodash.sortedIndexOf = sortedIndexOf;\n      lodash.sortedLastIndex = sortedLastIndex;\n      lodash.sortedLastIndexBy = sortedLastIndexBy;\n      lodash.sortedLastIndexOf = sortedLastIndexOf;\n      lodash.startCase = startCase;\n      lodash.startsWith = startsWith;\n      lodash.subtract = subtract;\n      lodash.sum = sum;\n      lodash.sumBy = sumBy;\n      lodash.template = template;\n      lodash.times = times;\n      lodash.toInteger = toInteger;\n      lodash.toLength = toLength;\n      lodash.toLower = toLower;\n      lodash.toNumber = toNumber;\n      lodash.toSafeInteger = toSafeInteger;\n      lodash.toString = toString;\n      lodash.toUpper = toUpper;\n      lodash.trim = trim;\n      lodash.trimEnd = trimEnd;\n      lodash.trimStart = trimStart;\n      lodash.truncate = truncate;\n      lodash.unescape = unescape;\n      lodash.uniqueId = uniqueId;\n      lodash.upperCase = upperCase;\n      lodash.upperFirst = upperFirst;\n  \n      // Add aliases.\n      lodash.each = forEach;\n      lodash.eachRight = forEachRight;\n      lodash.first = head;\n  \n      mixin(lodash, (function() {\n        var source = {};\n        baseForOwn(lodash, function(func, methodName) {\n          if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n            source[methodName] = func;\n          }\n        });\n        return source;\n      }()), { 'chain': false });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf _\n       * @type {string}\n       */\n      lodash.VERSION = VERSION;\n  \n      // Assign default placeholders.\n      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n        lodash[methodName].placeholder = lodash;\n      });\n  \n      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n      arrayEach(['drop', 'take'], function(methodName, index) {\n        LazyWrapper.prototype[methodName] = function(n) {\n          var filtered = this.__filtered__;\n          if (filtered && !index) {\n            return new LazyWrapper(this);\n          }\n          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n  \n          var result = this.clone();\n          if (filtered) {\n            result.__takeCount__ = nativeMin(n, result.__takeCount__);\n          } else {\n            result.__views__.push({\n              'size': nativeMin(n, MAX_ARRAY_LENGTH),\n              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n            });\n          }\n          return result;\n        };\n  \n        LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n          return this.reverse()[methodName](n).reverse();\n        };\n      });\n  \n      // Add `LazyWrapper` methods that accept an `iteratee` value.\n      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n        var type = index + 1,\n            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n  \n        LazyWrapper.prototype[methodName] = function(iteratee) {\n          var result = this.clone();\n          result.__iteratees__.push({\n            'iteratee': getIteratee(iteratee, 3),\n            'type': type\n          });\n          result.__filtered__ = result.__filtered__ || isFilter;\n          return result;\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.head` and `_.last`.\n      arrayEach(['head', 'last'], function(methodName, index) {\n        var takeName = 'take' + (index ? 'Right' : '');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this[takeName](1).value()[0];\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n      arrayEach(['initial', 'tail'], function(methodName, index) {\n        var dropName = 'drop' + (index ? '' : 'Right');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n        };\n      });\n  \n      LazyWrapper.prototype.compact = function() {\n        return this.filter(identity);\n      };\n  \n      LazyWrapper.prototype.find = function(predicate) {\n        return this.filter(predicate).head();\n      };\n  \n      LazyWrapper.prototype.findLast = function(predicate) {\n        return this.reverse().find(predicate);\n      };\n  \n      LazyWrapper.prototype.invokeMap = rest(function(path, args) {\n        if (typeof path == 'function') {\n          return new LazyWrapper(this);\n        }\n        return this.map(function(value) {\n          return baseInvoke(value, path, args);\n        });\n      });\n  \n      LazyWrapper.prototype.reject = function(predicate) {\n        predicate = getIteratee(predicate, 3);\n        return this.filter(function(value) {\n          return !predicate(value);\n        });\n      };\n  \n      LazyWrapper.prototype.slice = function(start, end) {\n        start = toInteger(start);\n  \n        var result = this;\n        if (result.__filtered__ && (start > 0 || end < 0)) {\n          return new LazyWrapper(result);\n        }\n        if (start < 0) {\n          result = result.takeRight(-start);\n        } else if (start) {\n          result = result.drop(start);\n        }\n        if (end !== undefined) {\n          end = toInteger(end);\n          result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n        }\n        return result;\n      };\n  \n      LazyWrapper.prototype.takeRightWhile = function(predicate) {\n        return this.reverse().takeWhile(predicate).reverse();\n      };\n  \n      LazyWrapper.prototype.toArray = function() {\n        return this.take(MAX_ARRAY_LENGTH);\n      };\n  \n      // Add `LazyWrapper` methods to `lodash.prototype`.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n            isTaker = /^(?:head|last)$/.test(methodName),\n            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n            retUnwrapped = isTaker || /^find/.test(methodName);\n  \n        if (!lodashFunc) {\n          return;\n        }\n        lodash.prototype[methodName] = function() {\n          var value = this.__wrapped__,\n              args = isTaker ? [1] : arguments,\n              isLazy = value instanceof LazyWrapper,\n              iteratee = args[0],\n              useLazy = isLazy || isArray(value);\n  \n          var interceptor = function(value) {\n            var result = lodashFunc.apply(lodash, arrayPush([value], args));\n            return (isTaker && chainAll) ? result[0] : result;\n          };\n  \n          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n            // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n            isLazy = useLazy = false;\n          }\n          var chainAll = this.__chain__,\n              isHybrid = !!this.__actions__.length,\n              isUnwrapped = retUnwrapped && !chainAll,\n              onlyLazy = isLazy && !isHybrid;\n  \n          if (!retUnwrapped && useLazy) {\n            value = onlyLazy ? value : new LazyWrapper(this);\n            var result = func.apply(value, args);\n            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n            return new LodashWrapper(result, chainAll);\n          }\n          if (isUnwrapped && onlyLazy) {\n            return func.apply(this, args);\n          }\n          result = this.thru(interceptor);\n          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n        };\n      });\n  \n      // Add `Array` and `String` methods to `lodash.prototype`.\n      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n        var func = arrayProto[methodName],\n            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n            retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n  \n        lodash.prototype[methodName] = function() {\n          var args = arguments;\n          if (retUnwrapped && !this.__chain__) {\n            return func.apply(this.value(), args);\n          }\n          return this[chainName](function(value) {\n            return func.apply(value, args);\n          });\n        };\n      });\n  \n      // Map minified function names to their real names.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var lodashFunc = lodash[methodName];\n        if (lodashFunc) {\n          var key = (lodashFunc.name + ''),\n              names = realNames[key] || (realNames[key] = []);\n  \n          names.push({ 'name': methodName, 'func': lodashFunc });\n        }\n      });\n  \n      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{\n        'name': 'wrapper',\n        'func': undefined\n      }];\n  \n      // Add functions to the lazy wrapper.\n      LazyWrapper.prototype.clone = lazyClone;\n      LazyWrapper.prototype.reverse = lazyReverse;\n      LazyWrapper.prototype.value = lazyValue;\n  \n      // Add chaining functions to the `lodash` wrapper.\n      lodash.prototype.at = wrapperAt;\n      lodash.prototype.chain = wrapperChain;\n      lodash.prototype.commit = wrapperCommit;\n      lodash.prototype.flatMap = wrapperFlatMap;\n      lodash.prototype.next = wrapperNext;\n      lodash.prototype.plant = wrapperPlant;\n      lodash.prototype.reverse = wrapperReverse;\n      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n  \n      if (iteratorSymbol) {\n        lodash.prototype[iteratorSymbol] = wrapperToIterator;\n      }\n      return lodash;\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    // Export lodash.\n    var _ = runInContext();\n  \n    // Expose lodash on the free variable `window` or `self` when available. This\n    // prevents errors in cases where lodash is loaded by a script tag in the presence\n    // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.\n    (freeWindow || freeSelf || {})._ = _;\n  \n    // Some AMD build optimizers like r.js check for condition patterns like the following:\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      // Define as an anonymous module so, through path mapping, it can be\n      // referenced as the \"underscore\" module.\n      define(function() {\n        return _;\n      });\n    }\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    else if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = _)._ = _;\n      }\n      // Export for CommonJS support.\n      freeExports._ = _;\n    }\n    else {\n      // Export to the global object.\n      root._ = _;\n    }\n  }.call(this));</script></%=></bom></\",></=></=></=></body></=></=></=></=></=></=></=></=></',></':></%=([\\s\\s]+?)%></%([\\s\\s]+?)%></%-([\\s\\s]+?)%></https:></http:></http:></https:>","excerpt":"","more":"/**\n * @license\n * lodash 4.5.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash -o ./dist/lodash.js`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n    /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n    var undefined;\n  \n    /** Used as the semantic version number. */\n    var VERSION = '4.5.0';\n  \n    /** Used to compose bitmasks for wrapper metadata. */\n    var BIND_FLAG = 1,\n        BIND_KEY_FLAG = 2,\n        CURRY_BOUND_FLAG = 4,\n        CURRY_FLAG = 8,\n        CURRY_RIGHT_FLAG = 16,\n        PARTIAL_FLAG = 32,\n        PARTIAL_RIGHT_FLAG = 64,\n        ARY_FLAG = 128,\n        REARG_FLAG = 256,\n        FLIP_FLAG = 512;\n  \n    /** Used to compose bitmasks for comparison styles. */\n    var UNORDERED_COMPARE_FLAG = 1,\n        PARTIAL_COMPARE_FLAG = 2;\n  \n    /** Used as default options for `_.truncate`. */\n    var DEFAULT_TRUNC_LENGTH = 30,\n        DEFAULT_TRUNC_OMISSION = '...';\n  \n    /** Used to detect hot functions by number of calls within a span of milliseconds. */\n    var HOT_COUNT = 150,\n        HOT_SPAN = 16;\n  \n    /** Used as the size to enable large array optimizations. */\n    var LARGE_ARRAY_SIZE = 200;\n  \n    /** Used to indicate the type of lazy iteratees. */\n    var LAZY_FILTER_FLAG = 1,\n        LAZY_MAP_FLAG = 2,\n        LAZY_WHILE_FLAG = 3;\n  \n    /** Used as the `TypeError` message for \"Functions\" methods. */\n    var FUNC_ERROR_TEXT = 'Expected a function';\n  \n    /** Used to stand-in for `undefined` hash values. */\n    var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  \n    /** Used as references for various `Number` constants. */\n    var INFINITY = 1 / 0,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_INTEGER = 1.7976931348623157e+308,\n        NAN = 0 / 0;\n  \n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n  \n    /** Used as the internal argument placeholder. */\n    var PLACEHOLDER = '__lodash_placeholder__';\n  \n    /** `Object#toString` result references. */\n    var argsTag = '[object Arguments]',\n        arrayTag = '[object Array]',\n        boolTag = '[object Boolean]',\n        dateTag = '[object Date]',\n        errorTag = '[object Error]',\n        funcTag = '[object Function]',\n        genTag = '[object GeneratorFunction]',\n        mapTag = '[object Map]',\n        numberTag = '[object Number]',\n        objectTag = '[object Object]',\n        regexpTag = '[object RegExp]',\n        setTag = '[object Set]',\n        stringTag = '[object String]',\n        symbolTag = '[object Symbol]',\n        weakMapTag = '[object WeakMap]',\n        weakSetTag = '[object WeakSet]';\n  \n    var arrayBufferTag = '[object ArrayBuffer]',\n        float32Tag = '[object Float32Array]',\n        float64Tag = '[object Float64Array]',\n        int8Tag = '[object Int8Array]',\n        int16Tag = '[object Int16Array]',\n        int32Tag = '[object Int32Array]',\n        uint8Tag = '[object Uint8Array]',\n        uint8ClampedTag = '[object Uint8ClampedArray]',\n        uint16Tag = '[object Uint16Array]',\n        uint32Tag = '[object Uint32Array]';\n  \n    /** Used to match empty string literals in compiled template source. */\n    var reEmptyStringLeading = /\\b__p \\+= '';/g,\n        reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n        reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n  \n    /** Used to match HTML entities and HTML characters. */\n    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n        reUnescapedHtml = /[&<>\"'`]/g,\n        reHasEscapedHtml = RegExp(reEscapedHtml.source),\n        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n  \n    /** Used to match template delimiters. */\n    var reEscape = /<%-([\\s\\S]+?)%>/g,\n        reEvaluate = /<%([\\s\\S]+?)%>/g,\n        reInterpolate = /<%=([\\s\\S]+?)%>/g;\n  \n    /** Used to match property names within property paths. */\n    var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        reIsPlainProp = /^\\w*$/,\n        rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n  \n    /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n        reHasRegExpChar = RegExp(reRegExpChar.source);\n  \n    /** Used to match leading and trailing whitespace. */\n    var reTrim = /^\\s+|\\s+$/g,\n        reTrimStart = /^\\s+/,\n        reTrimEnd = /\\s+$/;\n  \n    /** Used to match backslashes in property paths. */\n    var reEscapeChar = /\\\\(\\\\)?/g;\n  \n    /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n    var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n  \n    /** Used to match `RegExp` flags from their coerced string values. */\n    var reFlags = /\\w*$/;\n  \n    /** Used to detect hexadecimal string values. */\n    var reHasHexPrefix = /^0x/i;\n  \n    /** Used to detect bad signed hexadecimal string values. */\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  \n    /** Used to detect binary string values. */\n    var reIsBinary = /^0b[01]+$/i;\n  \n    /** Used to detect host constructors (Safari > 5). */\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  \n    /** Used to detect octal string values. */\n    var reIsOctal = /^0o[0-7]+$/i;\n  \n    /** Used to detect unsigned integer values. */\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  \n    /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n    var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n  \n    /** Used to ensure capturing order of template delimiters. */\n    var reNoMatch = /($^)/;\n  \n    /** Used to match unescaped characters in compiled string literals. */\n    var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n  \n    /** Used to compose unicode character classes. */\n    var rsAstralRange = '\\\\ud800-\\\\udfff',\n        rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n        rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n        rsDingbatRange = '\\\\u2700-\\\\u27bf',\n        rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n        rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n        rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n        rsQuoteRange = '\\\\u2018\\\\u2019\\\\u201c\\\\u201d',\n        rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n        rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n        rsVarRange = '\\\\ufe0e\\\\ufe0f',\n        rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;\n  \n    /** Used to compose unicode capture groups. */\n    var rsAstral = '[' + rsAstralRange + ']',\n        rsBreak = '[' + rsBreakRange + ']',\n        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n        rsDigits = '\\\\d+',\n        rsDingbat = '[' + rsDingbatRange + ']',\n        rsLower = '[' + rsLowerRange + ']',\n        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n        rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n        rsNonAstral = '[^' + rsAstralRange + ']',\n        rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n        rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n        rsUpper = '[' + rsUpperRange + ']',\n        rsZWJ = '\\\\u200d';\n  \n    /** Used to compose unicode regexes. */\n    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n        reOptMod = rsModifier + '?',\n        rsOptVar = '[' + rsVarRange + ']?',\n        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n        rsSeq = rsOptVar + reOptMod + rsOptJoin,\n        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  \n    /**\n     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n     */\n    var reComboMark = RegExp(rsCombo, 'g');\n  \n    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  \n    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n  \n    /** Used to match non-compound words composed of alphanumeric characters. */\n    var reBasicWord = /[a-zA-Z0-9]+/g;\n  \n    /** Used to match complex or compound words. */\n    var reComplexWord = RegExp([\n      rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n      rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n      rsUpper + '?' + rsLowerMisc + '+',\n      rsUpper + '+',\n      rsDigits,\n      rsEmoji\n    ].join('|'), 'g');\n  \n    /** Used to detect strings that need a more robust regexp to match words. */\n    var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n  \n    /** Used to assign default `context` object properties. */\n    var contextProps = [\n      'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n      'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',\n      'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n    ];\n  \n    /** Used to make template sourceURLs easier to identify. */\n    var templateCounter = -1;\n  \n    /** Used to identify `toStringTag` values of typed arrays. */\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n    typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n    typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n    typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n    typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n    typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n    typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  \n    /** Used to identify `toStringTag` values supported by `_.clone`. */\n    var cloneableTags = {};\n    cloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n    cloneableTags[dateTag] = cloneableTags[float32Tag] =\n    cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n    cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n    cloneableTags[mapTag] = cloneableTags[numberTag] =\n    cloneableTags[objectTag] = cloneableTags[regexpTag] =\n    cloneableTags[setTag] = cloneableTags[stringTag] =\n    cloneableTags[symbolTag] = cloneableTags[uint8Tag] =\n    cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =\n    cloneableTags[uint32Tag] = true;\n    cloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n  \n    /** Used to map latin-1 supplementary letters to basic latin letters. */\n    var deburredLetters = {\n      '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n      '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n      '\\xc7': 'C',  '\\xe7': 'c',\n      '\\xd0': 'D',  '\\xf0': 'd',\n      '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n      '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n      '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n      '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n      '\\xd1': 'N',  '\\xf1': 'n',\n      '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n      '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n      '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n      '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n      '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n      '\\xc6': 'Ae', '\\xe6': 'ae',\n      '\\xde': 'Th', '\\xfe': 'th',\n      '\\xdf': 'ss'\n    };\n  \n    /** Used to map characters to HTML entities. */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '`': '&#96;'\n    };\n  \n    /** Used to map HTML entities to characters. */\n    var htmlUnescapes = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#96;': '`'\n    };\n  \n    /** Used to determine if values are of the language type `Object`. */\n    var objectTypes = {\n      'function': true,\n      'object': true\n    };\n  \n    /** Used to escape characters for inclusion in compiled string literals. */\n    var stringEscapes = {\n      '\\\\': '\\\\',\n      \"'\": \"'\",\n      '\\n': 'n',\n      '\\r': 'r',\n      '\\u2028': 'u2028',\n      '\\u2029': 'u2029'\n    };\n  \n    /** Built-in method references without a dependency on `root`. */\n    var freeParseFloat = parseFloat,\n        freeParseInt = parseInt;\n  \n    /** Detect free variable `exports`. */\n    var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n      ? exports\n      : undefined;\n  \n    /** Detect free variable `module`. */\n    var freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n      ? module\n      : undefined;\n  \n    /** Detect the popular CommonJS extension `module.exports`. */\n    var moduleExports = (freeModule && freeModule.exports === freeExports)\n      ? freeExports\n      : undefined;\n  \n    /** Detect free variable `global` from Node.js. */\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n  \n    /** Detect free variable `self`. */\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  \n    /** Detect free variable `window`. */\n    var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  \n    /** Detect `this` as the global object. */\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  \n    /**\n     * Used as a reference to the global object.\n     *\n     * The `this` value is used if it's the global object to avoid Greasemonkey's\n     * restricted `window` object, otherwise the `window` object is used.\n     */\n    var root = freeGlobal ||\n      ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n        freeSelf || thisGlobal || Function('return this')();\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Adds the key-value `pair` to `map`.\n     *\n     * @private\n     * @param {Object} map The map to modify.\n     * @param {Array} pair The key-value pair to add.\n     * @returns {Object} Returns `map`.\n     */\n    function addMapEntry(map, pair) {\n      map.set(pair[0], pair[1]);\n      return map;\n    }\n  \n    /**\n     * Adds `value` to `set`.\n     *\n     * @private\n     * @param {Object} set The set to modify.\n     * @param {*} value The value to add.\n     * @returns {Object} Returns `set`.\n     */\n    function addSetEntry(set, value) {\n      set.add(value);\n      return set;\n    }\n  \n    /**\n     * A faster alternative to `Function#apply`, this function invokes `func`\n     * with the `this` binding of `thisArg` and the arguments of `args`.\n     *\n     * @private\n     * @param {Function} func The function to invoke.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} args The arguments to invoke `func` with.\n     * @returns {*} Returns the result of `func`.\n     */\n    function apply(func, thisArg, args) {\n      var length = args.length;\n      switch (length) {\n        case 0: return func.call(thisArg);\n        case 1: return func.call(thisArg, args[0]);\n        case 2: return func.call(thisArg, args[0], args[1]);\n        case 3: return func.call(thisArg, args[0], args[1], args[2]);\n      }\n      return func.apply(thisArg, args);\n    }\n  \n    /**\n     * A specialized version of `baseAggregator` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function arrayAggregator(array, setter, iteratee, accumulator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index];\n        setter(accumulator, value, iteratee(value), array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * Creates a new array concatenating `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The first array to concatenate.\n     * @param {Array} other The second array to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n  \n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.forEach` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n  \n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.every` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    /**\n     * A specialized version of `_.filter` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * A specialized version of `_.includes` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludes(array, value) {\n      return !!array.length && baseIndexOf(array, value, 0) > -1;\n    }\n  \n    /**\n     * A specialized version of `_.includesWith` for arrays without support for\n     * specifying an index to search from.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} target The value to search for.\n     * @param {Function} comparator The comparator invoked per element.\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\n     */\n    function arrayIncludesWith(array, value, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (comparator(value, array[index])) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * A specialized version of `_.map` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n  \n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n  \n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n  \n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n  \n    /**\n     * A specialized version of `_.reduce` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initAccum) {\n      var index = -1,\n          length = array.length;\n  \n      if (initAccum && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n      var length = array.length;\n      if (initAccum && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n  \n    /**\n     * A specialized version of `_.some` for arrays without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  \n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n  \n        if (current != null && (computed === undefined\n              ? current === current\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of methods like `_.find` and `_.findKey`, without\n     * support for iteratee shorthands, which iterates over `collection` using\n     * `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseFindIndex(array, predicate, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} fromIndex The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function baseIndexOf(array, value, fromIndex) {\n      if (value !== value) {\n        return indexOfNaN(array, fromIndex);\n      }\n      var index = fromIndex - 1,\n          length = array.length;\n  \n      while (++index < length) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight`, without support\n     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initAccum\n          ? (initAccum = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n  \n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n  \n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n  \n    /**\n     * The base implementation of `_.sum` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(array, iteratee) {\n      var result,\n          index = -1,\n          length = array.length;\n  \n      while (++index < length) {\n        var current = iteratee(array[index]);\n        if (current !== undefined) {\n          result = result === undefined ? current : (result + current);\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.times` without support for iteratee shorthands\n     * or max array length checks.\n     *\n     * @private\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     */\n    function baseTimes(n, iteratee) {\n      var index = -1,\n          result = Array(n);\n  \n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    }\n  \n    /**\n     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n     * of key-value pairs for `object` corresponding to the property names of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the new array of key-value pairs.\n     */\n    function baseToPairs(object, props) {\n      return arrayMap(props, function(key) {\n        return [key, object[key]];\n      });\n    }\n  \n    /**\n     * The base implementation of `_.unary` without support for storing wrapper metadata.\n     *\n     * @private\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new function.\n     */\n    function baseUnary(func) {\n      return function(value) {\n        return func(value);\n      };\n    }\n  \n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      return arrayMap(props, function(key) {\n        return object[key];\n      });\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the first unmatched string symbol.\n     */\n    function charsStartIndex(strSymbols, chrSymbols) {\n      var index = -1,\n          length = strSymbols.length;\n  \n      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n     * that is not found in the character symbols.\n     *\n     * @private\n     * @param {Array} strSymbols The string symbols to inspect.\n     * @param {Array} chrSymbols The character symbols to find.\n     * @returns {number} Returns the index of the last unmatched string symbol.\n     */\n    function charsEndIndex(strSymbols, chrSymbols) {\n      var index = strSymbols.length;\n  \n      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n      return index;\n    }\n  \n    /**\n     * Checks if `value` is a global object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n     */\n    function checkGlobal(value) {\n      return (value && value.Object === Object) ? value : null;\n    }\n  \n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsNull = value === null,\n            valIsUndef = value === undefined,\n            valIsReflexive = value === value;\n  \n        var othIsNull = other === null,\n            othIsUndef = other === undefined,\n            othIsReflexive = other === other;\n  \n        if ((value > other && !othIsNull) || !valIsReflexive ||\n            (valIsNull && !othIsUndef && othIsReflexive) ||\n            (valIsUndef && othIsReflexive)) {\n          return 1;\n        }\n        if ((value < other && !valIsNull) || !othIsReflexive ||\n            (othIsNull && !valIsUndef && valIsReflexive) ||\n            (othIsUndef && valIsReflexive)) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n  \n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n  \n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n  \n    /**\n     * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n     *\n     * @private\n     * @param {string} letter The matched letter to deburr.\n     * @returns {string} Returns the deburred letter.\n     */\n    function deburrLetter(letter) {\n      return deburredLetters[letter];\n    }\n  \n    /**\n     * Used by `_.escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(chr) {\n      return htmlEscapes[chr];\n    }\n  \n    /**\n     * Used by `_.template` to escape characters for inclusion in compiled string literals.\n     *\n     * @private\n     * @param {string} chr The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeStringChar(chr) {\n      return '\\\\' + stringEscapes[chr];\n    }\n  \n    /**\n     * Gets the index at which the first occurrence of `NaN` is found in `array`.\n     *\n     * @private\n     * @param {Array} array The array to search.\n     * @param {number} fromIndex The index to search from.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n     */\n    function indexOfNaN(array, fromIndex, fromRight) {\n      var length = array.length,\n          index = fromIndex + (fromRight ? 0 : -1);\n  \n      while ((fromRight ? index-- : ++index < length)) {\n        var other = array[index];\n        if (other !== other) {\n          return index;\n        }\n      }\n      return -1;\n    }\n  \n    /**\n     * Checks if `value` is a host object in IE < 9.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n     */\n    function isHostObject(value) {\n      // Many host objects are `Object` objects that can coerce to strings\n      // despite having improperly defined `toString` methods.\n      var result = false;\n      if (value != null && typeof value.toString != 'function') {\n        try {\n          result = !!(value + '');\n        } catch (e) {}\n      }\n      return result;\n    }\n  \n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n  \n    /**\n     * Converts `iterator` to an array.\n     *\n     * @private\n     * @param {Object} iterator The iterator to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function iteratorToArray(iterator) {\n      var data,\n          result = [];\n  \n      while (!(data = iterator.next()).done) {\n        result.push(data.value);\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `map` to an array.\n     *\n     * @private\n     * @param {Object} map The map to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function mapToArray(map) {\n      var index = -1,\n          result = Array(map.size);\n  \n      map.forEach(function(value, key) {\n        result[++index] = [key, value];\n      });\n      return result;\n    }\n  \n    /**\n     * Replaces all `placeholder` elements in `array` with an internal placeholder\n     * and returns an array of their indexes.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {*} placeholder The placeholder to replace.\n     * @returns {Array} Returns the new array of placeholder indexes.\n     */\n    function replaceHolders(array, placeholder) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n  \n      while (++index < length) {\n        if (array[index] === placeholder) {\n          array[index] = PLACEHOLDER;\n          result[++resIndex] = index;\n        }\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `set` to an array.\n     *\n     * @private\n     * @param {Object} set The set to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function setToArray(set) {\n      var index = -1,\n          result = Array(set.size);\n  \n      set.forEach(function(value) {\n        result[++index] = value;\n      });\n      return result;\n    }\n  \n    /**\n     * Gets the number of symbols in `string`.\n     *\n     * @private\n     * @param {string} string The string to inspect.\n     * @returns {number} Returns the string size.\n     */\n    function stringSize(string) {\n      if (!(string && reHasComplexSymbol.test(string))) {\n        return string.length;\n      }\n      var result = reComplexSymbol.lastIndex = 0;\n      while (reComplexSymbol.test(string)) {\n        result++;\n      }\n      return result;\n    }\n  \n    /**\n     * Converts `string` to an array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the converted array.\n     */\n    function stringToArray(string) {\n      return string.match(reComplexSymbol);\n    }\n  \n    /**\n     * Used by `_.unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} chr The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(chr) {\n      return htmlUnescapes[chr];\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    /**\n     * Create a new pristine `lodash` function using the `context` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Util\n     * @param {Object} [context=root] The context object.\n     * @returns {Function} Returns a new `lodash` function.\n     * @example\n     *\n     * _.mixin({ 'foo': _.constant('foo') });\n     *\n     * var lodash = _.runInContext();\n     * lodash.mixin({ 'bar': lodash.constant('bar') });\n     *\n     * _.isFunction(_.foo);\n     * // => true\n     * _.isFunction(_.bar);\n     * // => false\n     *\n     * lodash.isFunction(lodash.foo);\n     * // => false\n     * lodash.isFunction(lodash.bar);\n     * // => true\n     *\n     * // Use `context` to mock `Date#getTime` use in `_.now`.\n     * var mock = _.runInContext({\n     *   'Date': function() {\n     *     return { 'getTime': getTimeMock };\n     *   }\n     * });\n     *\n     * // Create a suped-up `defer` in Node.js.\n     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n     */\n    function runInContext(context) {\n      context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;\n  \n      /** Built-in constructor references. */\n      var Date = context.Date,\n          Error = context.Error,\n          Math = context.Math,\n          RegExp = context.RegExp,\n          TypeError = context.TypeError;\n  \n      /** Used for built-in method references. */\n      var arrayProto = context.Array.prototype,\n          objectProto = context.Object.prototype;\n  \n      /** Used to resolve the decompiled source of functions. */\n      var funcToString = context.Function.prototype.toString;\n  \n      /** Used to check objects for own properties. */\n      var hasOwnProperty = objectProto.hasOwnProperty;\n  \n      /** Used to generate unique IDs. */\n      var idCounter = 0;\n  \n      /** Used to infer the `Object` constructor. */\n      var objectCtorString = funcToString.call(Object);\n  \n      /**\n       * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n       * of values.\n       */\n      var objectToString = objectProto.toString;\n  \n      /** Used to restore the original `_` reference in `_.noConflict`. */\n      var oldDash = root._;\n  \n      /** Used to detect if a method is native. */\n      var reIsNative = RegExp('^' +\n        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n      );\n  \n      /** Built-in value references. */\n      var Buffer = moduleExports ? context.Buffer : undefined,\n          Reflect = context.Reflect,\n          Symbol = context.Symbol,\n          Uint8Array = context.Uint8Array,\n          clearTimeout = context.clearTimeout,\n          enumerate = Reflect ? Reflect.enumerate : undefined,\n          getPrototypeOf = Object.getPrototypeOf,\n          getOwnPropertySymbols = Object.getOwnPropertySymbols,\n          iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,\n          objectCreate = Object.create,\n          propertyIsEnumerable = objectProto.propertyIsEnumerable,\n          setTimeout = context.setTimeout,\n          splice = arrayProto.splice;\n  \n      /* Built-in method references for those with the same name as other `lodash` methods. */\n      var nativeCeil = Math.ceil,\n          nativeFloor = Math.floor,\n          nativeIsFinite = context.isFinite,\n          nativeJoin = arrayProto.join,\n          nativeKeys = Object.keys,\n          nativeMax = Math.max,\n          nativeMin = Math.min,\n          nativeParseInt = context.parseInt,\n          nativeRandom = Math.random,\n          nativeReverse = arrayProto.reverse;\n  \n      /* Built-in method references that are verified to be native. */\n      var Map = getNative(context, 'Map'),\n          Set = getNative(context, 'Set'),\n          WeakMap = getNative(context, 'WeakMap'),\n          nativeCreate = getNative(Object, 'create');\n  \n      /** Used to store function metadata. */\n      var metaMap = WeakMap && new WeakMap;\n  \n      /** Used to detect maps, sets, and weakmaps. */\n      var mapCtorString = Map ? funcToString.call(Map) : '',\n          setCtorString = Set ? funcToString.call(Set) : '',\n          weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';\n  \n      /** Used to convert symbols to primitives and strings. */\n      var symbolProto = Symbol ? Symbol.prototype : undefined,\n          symbolValueOf = Symbol ? symbolProto.valueOf : undefined,\n          symbolToString = Symbol ? symbolProto.toString : undefined;\n  \n      /** Used to lookup unminified function names. */\n      var realNames = {};\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object which wraps `value` to enable implicit method\n       * chaining. Methods that operate on and return arrays, collections, and\n       * functions can be chained together. Methods that retrieve a single value or\n       * may return a primitive value will automatically end the chain sequence and\n       * return the unwrapped value. Otherwise, the value must be unwrapped with\n       * `_#value`.\n       *\n       * Explicit chaining, which must be unwrapped with `_#value` in all cases,\n       * may be enabled using `_.chain`.\n       *\n       * The execution of chained methods is lazy, that is, it's deferred until\n       * `_#value` is implicitly or explicitly called.\n       *\n       * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n       * fusion is an optimization to merge iteratee calls; this avoids the creation\n       * of intermediate arrays and can greatly reduce the number of iteratee executions.\n       * Sections of a chain sequence qualify for shortcut fusion if the section is\n       * applied to an array of at least two hundred elements and any iteratees\n       * accept only one argument. The heuristic for whether a section qualifies\n       * for shortcut fusion is subject to change.\n       *\n       * Chaining is supported in custom builds as long as the `_#value` method is\n       * directly or indirectly included in the build.\n       *\n       * In addition to lodash methods, wrappers have `Array` and `String` methods.\n       *\n       * The wrapper `Array` methods are:\n       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n       *\n       * The wrapper `String` methods are:\n       * `replace` and `split`\n       *\n       * The wrapper methods that support shortcut fusion are:\n       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n       *\n       * The chainable wrapper methods are:\n       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,\n       * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,\n       * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flattenDepth`,\n       * `flip`, `flow`, `flowRight`, `fromPairs`, `functions`, `functionsIn`,\n       * `groupBy`, `initial`, `intersection`, `intersectionBy`, `intersectionWith`,\n       * `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`,\n       * `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`, `memoize`,\n       * `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`, `nthArg`,\n       * `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`, `overEvery`,\n       * `overSome`, `partial`, `partialRight`, `partition`, `pick`, `pickBy`, `plant`,\n       * `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAt`, `push`,\n       * `range`, `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`,\n       * `sampleSize`, `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`,\n       * `splice`, `spread`, `tail`, `take`, `takeRight`, `takeRightWhile`,\n       * `takeWhile`, `tap`, `throttle`, `thru`, `toArray`, `toPairs`, `toPairsIn`,\n       * `toPath`, `toPlainObject`, `transform`, `unary`, `union`, `unionBy`,\n       * `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`, `unshift`, `unzip`,\n       * `unzipWith`, `values`, `valuesIn`, `without`, `wrap`, `xor`, `xorBy`,\n       * `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, and `zipWith`\n       *\n       * The wrapper methods that are **not** chainable by default are:\n       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,\n       * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n       * `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`, `forIn`,\n       * `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`,\n       * `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`,\n       * `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,\n       * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,\n       * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,\n       * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,\n       * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,\n       * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,\n       * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,\n       * `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`,\n       * `now`, `pad`, `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`,\n       * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `sample`,\n       * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`,\n       * `sortedLastIndex`, `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`,\n       * `sum`, `sumBy`, `template`, `times`, `toLower`, `toInteger`, `toLength`,\n       * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,\n       * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,\n       * `value`, and `words`\n       *\n       * @name _\n       * @constructor\n       * @category Seq\n       * @param {*} value The value to wrap in a `lodash` instance.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2, 3]);\n       *\n       * // Returns an unwrapped value.\n       * wrapped.reduce(_.add);\n       * // => 6\n       *\n       * // Returns a wrapped value.\n       * var squares = wrapped.map(square);\n       *\n       * _.isArray(squares);\n       * // => false\n       *\n       * _.isArray(squares.value());\n       * // => true\n       */\n      function lodash(value) {\n        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n          if (value instanceof LodashWrapper) {\n            return value;\n          }\n          if (hasOwnProperty.call(value, '__wrapped__')) {\n            return wrapperClone(value);\n          }\n        }\n        return new LodashWrapper(value);\n      }\n  \n      /**\n       * The function whose prototype all chaining wrappers inherit from.\n       *\n       * @private\n       */\n      function baseLodash() {\n        // No operation performed.\n      }\n  \n      /**\n       * The base constructor for creating `lodash` wrapper objects.\n       *\n       * @private\n       * @param {*} value The value to wrap.\n       * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n       */\n      function LodashWrapper(value, chainAll) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__chain__ = !!chainAll;\n        this.__index__ = 0;\n        this.__values__ = undefined;\n      }\n  \n      /**\n       * By default, the template delimiters used by lodash are like those in\n       * embedded Ruby (ERB). Change the following template settings to use\n       * alternative delimiters.\n       *\n       * @static\n       * @memberOf _\n       * @type {Object}\n       */\n      lodash.templateSettings = {\n  \n        /**\n         * Used to detect `data` property values to be HTML-escaped.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'escape': reEscape,\n  \n        /**\n         * Used to detect code to be evaluated.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'evaluate': reEvaluate,\n  \n        /**\n         * Used to detect `data` property values to inject.\n         *\n         * @memberOf _.templateSettings\n         * @type {RegExp}\n         */\n        'interpolate': reInterpolate,\n  \n        /**\n         * Used to reference the data object in the template text.\n         *\n         * @memberOf _.templateSettings\n         * @type {string}\n         */\n        'variable': '',\n  \n        /**\n         * Used to import variables into the compiled template.\n         *\n         * @memberOf _.templateSettings\n         * @type {Object}\n         */\n        'imports': {\n  \n          /**\n           * A reference to the `lodash` function.\n           *\n           * @memberOf _.templateSettings.imports\n           * @type {Function}\n           */\n          '_': lodash\n        }\n      };\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n       *\n       * @private\n       * @constructor\n       * @param {*} value The value to wrap.\n       */\n      function LazyWrapper(value) {\n        this.__wrapped__ = value;\n        this.__actions__ = [];\n        this.__dir__ = 1;\n        this.__filtered__ = false;\n        this.__iteratees__ = [];\n        this.__takeCount__ = MAX_ARRAY_LENGTH;\n        this.__views__ = [];\n      }\n  \n      /**\n       * Creates a clone of the lazy wrapper object.\n       *\n       * @private\n       * @name clone\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the cloned `LazyWrapper` object.\n       */\n      function lazyClone() {\n        var result = new LazyWrapper(this.__wrapped__);\n        result.__actions__ = copyArray(this.__actions__);\n        result.__dir__ = this.__dir__;\n        result.__filtered__ = this.__filtered__;\n        result.__iteratees__ = copyArray(this.__iteratees__);\n        result.__takeCount__ = this.__takeCount__;\n        result.__views__ = copyArray(this.__views__);\n        return result;\n      }\n  \n      /**\n       * Reverses the direction of lazy iteration.\n       *\n       * @private\n       * @name reverse\n       * @memberOf LazyWrapper\n       * @returns {Object} Returns the new reversed `LazyWrapper` object.\n       */\n      function lazyReverse() {\n        if (this.__filtered__) {\n          var result = new LazyWrapper(this);\n          result.__dir__ = -1;\n          result.__filtered__ = true;\n        } else {\n          result = this.clone();\n          result.__dir__ *= -1;\n        }\n        return result;\n      }\n  \n      /**\n       * Extracts the unwrapped value from its lazy wrapper.\n       *\n       * @private\n       * @name value\n       * @memberOf LazyWrapper\n       * @returns {*} Returns the unwrapped value.\n       */\n      function lazyValue() {\n        var array = this.__wrapped__.value(),\n            dir = this.__dir__,\n            isArr = isArray(array),\n            isRight = dir < 0,\n            arrLength = isArr ? array.length : 0,\n            view = getView(0, arrLength, this.__views__),\n            start = view.start,\n            end = view.end,\n            length = end - start,\n            index = isRight ? end : (start - 1),\n            iteratees = this.__iteratees__,\n            iterLength = iteratees.length,\n            resIndex = 0,\n            takeCount = nativeMin(length, this.__takeCount__);\n  \n        if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n            (arrLength == length && takeCount == length)) {\n          return baseWrapperValue(array, this.__actions__);\n        }\n        var result = [];\n  \n        outer:\n        while (length-- && resIndex < takeCount) {\n          index += dir;\n  \n          var iterIndex = -1,\n              value = array[index];\n  \n          while (++iterIndex < iterLength) {\n            var data = iteratees[iterIndex],\n                iteratee = data.iteratee,\n                type = data.type,\n                computed = iteratee(value);\n  \n            if (type == LAZY_MAP_FLAG) {\n              value = computed;\n            } else if (!computed) {\n              if (type == LAZY_FILTER_FLAG) {\n                continue outer;\n              } else {\n                break outer;\n              }\n            }\n          }\n          result[resIndex++] = value;\n        }\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an hash object.\n       *\n       * @private\n       * @constructor\n       * @returns {Object} Returns the new hash object.\n       */\n      function Hash() {}\n  \n      /**\n       * Removes `key` and its value from the hash.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function hashDelete(hash, key) {\n        return hashHas(hash, key) && delete hash[key];\n      }\n  \n      /**\n       * Gets the hash value for `key`.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function hashGet(hash, key) {\n        if (nativeCreate) {\n          var result = hash[key];\n          return result === HASH_UNDEFINED ? undefined : result;\n        }\n        return hasOwnProperty.call(hash, key) ? hash[key] : undefined;\n      }\n  \n      /**\n       * Checks if a hash value for `key` exists.\n       *\n       * @private\n       * @param {Object} hash The hash to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function hashHas(hash, key) {\n        return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);\n      }\n  \n      /**\n       * Sets the hash `key` to `value`.\n       *\n       * @private\n       * @param {Object} hash The hash to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function hashSet(hash, key, value) {\n        hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a map cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function MapCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the map.\n       *\n       * @private\n       * @name clear\n       * @memberOf MapCache\n       */\n      function mapClear() {\n        this.__data__ = {\n          'hash': new Hash,\n          'map': Map ? new Map : [],\n          'string': new Hash\n        };\n      }\n  \n      /**\n       * Removes `key` and its value from the map.\n       *\n       * @private\n       * @name delete\n       * @memberOf MapCache\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function mapDelete(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashDelete(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map['delete'](key) : assocDelete(data.map, key);\n      }\n  \n      /**\n       * Gets the map value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf MapCache\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function mapGet(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashGet(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.get(key) : assocGet(data.map, key);\n      }\n  \n      /**\n       * Checks if a map value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf MapCache\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function mapHas(key) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          return hashHas(typeof key == 'string' ? data.string : data.hash, key);\n        }\n        return Map ? data.map.has(key) : assocHas(data.map, key);\n      }\n  \n      /**\n       * Sets the map `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf MapCache\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the map cache object.\n       */\n      function mapSet(key, value) {\n        var data = this.__data__;\n        if (isKeyable(key)) {\n          hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n        } else if (Map) {\n          data.map.set(key, value);\n        } else {\n          assocSet(data.map, key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       *\n       * Creates a set cache object to store unique values.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function SetCache(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.__data__ = new MapCache;\n        while (++index < length) {\n          this.push(values[index]);\n        }\n      }\n  \n      /**\n       * Checks if `value` is in `cache`.\n       *\n       * @private\n       * @param {Object} cache The set cache to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns `true` if `value` is found, else `false`.\n       */\n      function cacheHas(cache, value) {\n        var map = cache.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          return hash[value] === HASH_UNDEFINED;\n        }\n        return map.has(value);\n      }\n  \n      /**\n       * Adds `value` to the set cache.\n       *\n       * @private\n       * @name push\n       * @memberOf SetCache\n       * @param {*} value The value to cache.\n       */\n      function cachePush(value) {\n        var map = this.__data__;\n        if (isKeyable(value)) {\n          var data = map.__data__,\n              hash = typeof value == 'string' ? data.string : data.hash;\n  \n          hash[value] = HASH_UNDEFINED;\n        }\n        else {\n          map.set(value, HASH_UNDEFINED);\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a stack cache object to store key-value pairs.\n       *\n       * @private\n       * @constructor\n       * @param {Array} [values] The values to cache.\n       */\n      function Stack(values) {\n        var index = -1,\n            length = values ? values.length : 0;\n  \n        this.clear();\n        while (++index < length) {\n          var entry = values[index];\n          this.set(entry[0], entry[1]);\n        }\n      }\n  \n      /**\n       * Removes all key-value entries from the stack.\n       *\n       * @private\n       * @name clear\n       * @memberOf Stack\n       */\n      function stackClear() {\n        this.__data__ = { 'array': [], 'map': null };\n      }\n  \n      /**\n       * Removes `key` and its value from the stack.\n       *\n       * @private\n       * @name delete\n       * @memberOf Stack\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function stackDelete(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocDelete(array, key) : data.map['delete'](key);\n      }\n  \n      /**\n       * Gets the stack value for `key`.\n       *\n       * @private\n       * @name get\n       * @memberOf Stack\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function stackGet(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocGet(array, key) : data.map.get(key);\n      }\n  \n      /**\n       * Checks if a stack value for `key` exists.\n       *\n       * @private\n       * @name has\n       * @memberOf Stack\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function stackHas(key) {\n        var data = this.__data__,\n            array = data.array;\n  \n        return array ? assocHas(array, key) : data.map.has(key);\n      }\n  \n      /**\n       * Sets the stack `key` to `value`.\n       *\n       * @private\n       * @name set\n       * @memberOf Stack\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns the stack cache object.\n       */\n      function stackSet(key, value) {\n        var data = this.__data__,\n            array = data.array;\n  \n        if (array) {\n          if (array.length < (LARGE_ARRAY_SIZE - 1)) {\n            assocSet(array, key, value);\n          } else {\n            data.array = null;\n            data.map = new MapCache(array);\n          }\n        }\n        var map = data.map;\n        if (map) {\n          map.set(key, value);\n        }\n        return this;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Removes `key` and its value from the associative array.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to remove.\n       * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n       */\n      function assocDelete(array, key) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          return false;\n        }\n        var lastIndex = array.length - 1;\n        if (index == lastIndex) {\n          array.pop();\n        } else {\n          splice.call(array, index, 1);\n        }\n        return true;\n      }\n  \n      /**\n       * Gets the associative array value for `key`.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the value to get.\n       * @returns {*} Returns the entry value.\n       */\n      function assocGet(array, key) {\n        var index = assocIndexOf(array, key);\n        return index < 0 ? undefined : array[index][1];\n      }\n  \n      /**\n       * Checks if an associative array value for `key` exists.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {string} key The key of the entry to check.\n       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n       */\n      function assocHas(array, key) {\n        return assocIndexOf(array, key) > -1;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `key` is found in `array`\n       * of key-value pairs.\n       *\n       * @private\n       * @param {Array} array The array to search.\n       * @param {*} key The key to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       */\n      function assocIndexOf(array, key) {\n        var length = array.length;\n        while (length--) {\n          if (eq(array[length][0], key)) {\n            return length;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Sets the associative array `key` to `value`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {string} key The key of the value to set.\n       * @param {*} value The value to set.\n       */\n      function assocSet(array, key, value) {\n        var index = assocIndexOf(array, key);\n        if (index < 0) {\n          array.push([key, value]);\n        } else {\n          array[index][1] = value;\n        }\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Used by `_.defaults` to customize its `_.assignIn` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to assign.\n       * @param {Object} object The parent object of `objValue`.\n       * @returns {*} Returns the value to assign.\n       */\n      function assignInDefaults(objValue, srcValue, key, object) {\n        if (objValue === undefined ||\n            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n          return srcValue;\n        }\n        return objValue;\n      }\n  \n      /**\n       * This function is like `assignValue` except that it doesn't assign `undefined` values.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignMergeValue(object, key, value) {\n        if ((value !== undefined && !eq(object[key], value)) ||\n            (typeof key == 'number' && value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Assigns `value` to `key` of `object` if the existing value is not equivalent\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {string} key The key of the property to assign.\n       * @param {*} value The value to assign.\n       */\n      function assignValue(object, key, value) {\n        var objValue = object[key];\n        if ((!eq(objValue, value) ||\n              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||\n            (value === undefined && !(key in object))) {\n          object[key] = value;\n        }\n      }\n  \n      /**\n       * Aggregates elements of `collection` on `accumulator` with keys transformed\n       * by `iteratee` and values set by `setter`.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform keys.\n       * @param {Object} accumulator The initial aggregated object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseAggregator(collection, setter, iteratee, accumulator) {\n        baseEach(collection, function(value, key, collection) {\n          setter(accumulator, value, iteratee(value), collection);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.assign` without support for multiple sources\n       * or `customizer` functions.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @returns {Object} Returns `object`.\n       */\n      function baseAssign(object, source) {\n        return object && copyObject(source, keys(source), object);\n      }\n  \n      /**\n       * The base implementation of `_.at` without support for individual paths.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {string[]} paths The property paths of elements to pick.\n       * @returns {Array} Returns the new array of picked elements.\n       */\n      function baseAt(object, paths) {\n        var index = -1,\n            isNil = object == null,\n            length = paths.length,\n            result = Array(length);\n  \n        while (++index < length) {\n          result[index] = isNil ? undefined : get(object, paths[index]);\n        }\n        return result;\n      }\n  \n      /**\n       * Casts `value` to an empty array if it's not an array like object.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastArrayLikeObject(value) {\n        return isArrayLikeObject(value) ? value : [];\n      }\n  \n      /**\n       * Casts `value` to `identity` if it's not a function.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the array-like object.\n       */\n      function baseCastFunction(value) {\n        return typeof value == 'function' ? value : identity;\n      }\n  \n      /**\n       * Casts `value` to a path array if it's not one.\n       *\n       * @private\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast property path array.\n       */\n      function baseCastPath(value) {\n        return isArray(value) ? value : stringToPath(value);\n      }\n  \n      /**\n       * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       */\n      function baseClamp(number, lower, upper) {\n        if (number === number) {\n          if (upper !== undefined) {\n            number = number <= upper ? number : upper;\n          }\n          if (lower !== undefined) {\n            number = number >= lower ? number : lower;\n          }\n        }\n        return number;\n      }\n  \n      /**\n       * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n       * traversed objects.\n       *\n       * @private\n       * @param {*} value The value to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @param {string} [key] The key of `value`.\n       * @param {Object} [object] The parent object of `value`.\n       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n       * @returns {*} Returns the cloned value.\n       */\n      function baseClone(value, isDeep, customizer, key, object, stack) {\n        var result;\n        if (customizer) {\n          result = object ? customizer(value, key, object, stack) : customizer(value);\n        }\n        if (result !== undefined) {\n          return result;\n        }\n        if (!isObject(value)) {\n          return value;\n        }\n        var isArr = isArray(value);\n        if (isArr) {\n          result = initCloneArray(value);\n          if (!isDeep) {\n            return copyArray(value, result);\n          }\n        } else {\n          var tag = getTag(value),\n              isFunc = tag == funcTag || tag == genTag;\n  \n          if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n          }\n          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n              return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n              return copySymbols(value, baseAssign(result, value));\n            }\n          } else {\n            if (!cloneableTags[tag]) {\n              return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n          }\n        }\n        // Check for circular references and return its corresponding clone.\n        stack || (stack = new Stack);\n        var stacked = stack.get(value);\n        if (stacked) {\n          return stacked;\n        }\n        stack.set(value, result);\n  \n        // Recursively populate clone (susceptible to call stack limits).\n        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n          assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));\n        });\n        return isArr ? result : copySymbols(value, result);\n      }\n  \n      /**\n       * The base implementation of `_.conforms` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       */\n      function baseConforms(source) {\n        var props = keys(source),\n            length = props.length;\n  \n        return function(object) {\n          if (object == null) {\n            return !length;\n          }\n          var index = length;\n          while (index--) {\n            var key = props[index],\n                predicate = source[key],\n                value = object[key];\n  \n            if ((value === undefined && !(key in Object(object))) || !predicate(value)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n  \n      /**\n       * The base implementation of `_.create` without support for assigning\n       * properties to the created object.\n       *\n       * @private\n       * @param {Object} prototype The object to inherit from.\n       * @returns {Object} Returns the new object.\n       */\n      function baseCreate(proto) {\n        return isObject(proto) ? objectCreate(proto) : {};\n      }\n  \n      /**\n       * The base implementation of `_.delay` and `_.defer` which accepts an array\n       * of `func` arguments.\n       *\n       * @private\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {Object} args The arguments to provide to `func`.\n       * @returns {number} Returns the timer id.\n       */\n      function baseDelay(func, wait, args) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return setTimeout(function() { func.apply(undefined, args); }, wait);\n      }\n  \n      /**\n       * The base implementation of methods like `_.difference` without support for\n       * excluding multiple arrays or iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Array} values The values to exclude.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       */\n      function baseDifference(array, values, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            isCommon = true,\n            length = array.length,\n            result = [],\n            valuesLength = values.length;\n  \n        if (!length) {\n          return result;\n        }\n        if (iteratee) {\n          values = arrayMap(values, baseUnary(iteratee));\n        }\n        if (comparator) {\n          includes = arrayIncludesWith;\n          isCommon = false;\n        }\n        else if (values.length >= LARGE_ARRAY_SIZE) {\n          includes = cacheHas;\n          isCommon = false;\n          values = new SetCache(values);\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var valuesIndex = valuesLength;\n            while (valuesIndex--) {\n              if (values[valuesIndex] === computed) {\n                continue outer;\n              }\n            }\n            result.push(value);\n          }\n          else if (!includes(values, computed, comparator)) {\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.forEach` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEach = createBaseEach(baseForOwn);\n  \n      /**\n       * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       */\n      var baseEachRight = createBaseEach(baseForOwnRight, true);\n  \n      /**\n       * The base implementation of `_.every` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`\n       */\n      function baseEvery(collection, predicate) {\n        var result = true;\n        baseEach(collection, function(value, index, collection) {\n          result = !!predicate(value, index, collection);\n          return result;\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.fill` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       */\n      function baseFill(array, value, start, end) {\n        var length = array.length;\n  \n        start = toInteger(start);\n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = (end === undefined || end > length) ? length : toInteger(end);\n        if (end < 0) {\n          end += length;\n        }\n        end = start > end ? 0 : toLength(end);\n        while (start < end) {\n          array[start++] = value;\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.filter` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       */\n      function baseFilter(collection, predicate) {\n        var result = [];\n        baseEach(collection, function(value, index, collection) {\n          if (predicate(value, index, collection)) {\n            result.push(value);\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.flatten` with support for restricting flattening.\n       *\n       * @private\n       * @param {Array} array The array to flatten.\n       * @param {number} depth The maximum recursion depth.\n       * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n       * @param {Array} [result=[]] The initial result value.\n       * @returns {Array} Returns the new flattened array.\n       */\n      function baseFlatten(array, depth, isStrict, result) {\n        result || (result = []);\n  \n        var index = -1,\n            length = array.length;\n  \n        while (++index < length) {\n          var value = array[index];\n          if (depth > 0 && isArrayLikeObject(value) &&\n              (isStrict || isArray(value) || isArguments(value))) {\n            if (depth > 1) {\n              // Recursively flatten arrays (susceptible to call stack limits).\n              baseFlatten(value, depth - 1, isStrict, result);\n            } else {\n              arrayPush(result, value);\n            }\n          } else if (!isStrict) {\n            result[result.length] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `baseForIn` and `baseForOwn` which iterates\n       * over `object` properties returned by `keysFunc` invoking `iteratee` for\n       * each property. Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseFor = createBaseFor();\n  \n      /**\n       * This function is like `baseFor` except that it iterates over properties\n       * in the opposite order.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @param {Function} keysFunc The function to get the keys of `object`.\n       * @returns {Object} Returns `object`.\n       */\n      var baseForRight = createBaseFor(true);\n  \n      /**\n       * The base implementation of `_.forIn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForIn(object, iteratee) {\n        return object == null ? object : baseFor(object, iteratee, keysIn);\n      }\n  \n      /**\n       * The base implementation of `_.forOwn` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwn(object, iteratee) {\n        return object && baseFor(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       */\n      function baseForOwnRight(object, iteratee) {\n        return object && baseForRight(object, iteratee, keys);\n      }\n  \n      /**\n       * The base implementation of `_.functions` which creates an array of\n       * `object` function property names filtered from `props`.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Array} props The property names to filter.\n       * @returns {Array} Returns the new array of filtered property names.\n       */\n      function baseFunctions(object, props) {\n        return arrayFilter(props, function(key) {\n          return isFunction(object[key]);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.get` without support for default values.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseGet(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = 0,\n            length = path.length;\n  \n        while (object != null && index < length) {\n          object = object[path[index++]];\n        }\n        return (index && index == length) ? object : undefined;\n      }\n  \n      /**\n       * The base implementation of `_.has` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHas(object, key) {\n        // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n        // that are composed entirely of index properties, return `false` for\n        // `hasOwnProperty` checks of them.\n        return hasOwnProperty.call(object, key) ||\n          (typeof object == 'object' && key in object && getPrototypeOf(object) === null);\n      }\n  \n      /**\n       * The base implementation of `_.hasIn` without support for deep paths.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} key The key to check.\n       * @returns {boolean} Returns `true` if `key` exists, else `false`.\n       */\n      function baseHasIn(object, key) {\n        return key in Object(object);\n      }\n  \n      /**\n       * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} number The number to check.\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       */\n      function baseInRange(number, start, end) {\n        return number >= nativeMin(start, end) && number < nativeMax(start, end);\n      }\n  \n      /**\n       * The base implementation of methods like `_.intersection`, without support\n       * for iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       */\n      function baseIntersection(arrays, iteratee, comparator) {\n        var includes = comparator ? arrayIncludesWith : arrayIncludes,\n            othLength = arrays.length,\n            othIndex = othLength,\n            caches = Array(othLength),\n            result = [];\n  \n        while (othIndex--) {\n          var array = arrays[othIndex];\n          if (othIndex && iteratee) {\n            array = arrayMap(array, baseUnary(iteratee));\n          }\n          caches[othIndex] = !comparator && (iteratee || array.length >= 120)\n            ? new SetCache(othIndex && array)\n            : undefined;\n        }\n        array = arrays[0];\n  \n        var index = -1,\n            length = array.length,\n            seen = caches[0];\n  \n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (!(seen\n                ? cacheHas(seen, computed)\n                : includes(result, computed, comparator)\n              )) {\n            var othIndex = othLength;\n            while (--othIndex) {\n              var cache = caches[othIndex];\n              if (!(cache\n                    ? cacheHas(cache, computed)\n                    : includes(arrays[othIndex], computed, comparator))\n                  ) {\n                continue outer;\n              }\n            }\n            if (seen) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.invert` and `_.invertBy` which inverts\n       * `object` with values transformed by `iteratee` and set by `setter`.\n       *\n       * @private\n       * @param {Object} object The object to iterate over.\n       * @param {Function} setter The function to set `accumulator` values.\n       * @param {Function} iteratee The iteratee to transform values.\n       * @param {Object} accumulator The initial inverted object.\n       * @returns {Function} Returns `accumulator`.\n       */\n      function baseInverter(object, setter, iteratee, accumulator) {\n        baseForOwn(object, function(value, key, object) {\n          setter(accumulator, iteratee(value), key, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * The base implementation of `_.invoke` without support for individual\n       * method arguments.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {Array} args The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       */\n      function baseInvoke(object, path, args) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          path = last(path);\n        }\n        var func = object == null ? object : object[path];\n        return func == null ? undefined : apply(func, object, args);\n      }\n  \n      /**\n       * The base implementation of `_.isEqual` which supports partial comparisons\n       * and tracks traversed objects.\n       *\n       * @private\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {boolean} [bitmask] The bitmask of comparison flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - Unordered comparison\n       *     2 - Partial comparison\n       * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       */\n      function baseIsEqual(value, other, customizer, bitmask, stack) {\n        if (value === other) {\n          return true;\n        }\n        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n          return value !== value && other !== other;\n        }\n        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqual` for arrays and objects which performs\n       * deep comparisons and tracks traversed objects enabling objects with circular\n       * references to be compared.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n        var objIsArr = isArray(object),\n            othIsArr = isArray(other),\n            objTag = arrayTag,\n            othTag = arrayTag;\n  \n        if (!objIsArr) {\n          objTag = getTag(object);\n          if (objTag == argsTag) {\n            objTag = objectTag;\n          } else if (objTag != objectTag) {\n            objIsArr = isTypedArray(object);\n          }\n        }\n        if (!othIsArr) {\n          othTag = getTag(other);\n          if (othTag == argsTag) {\n            othTag = objectTag;\n          } else if (othTag != objectTag) {\n            othIsArr = isTypedArray(other);\n          }\n        }\n        var objIsObj = objTag == objectTag && !isHostObject(object),\n            othIsObj = othTag == objectTag && !isHostObject(other),\n            isSameTag = objTag == othTag;\n  \n        if (isSameTag && !(objIsArr || objIsObj)) {\n          return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);\n        }\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n        if (!isPartial) {\n          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n  \n          if (objIsWrapped || othIsWrapped) {\n            return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);\n          }\n        }\n        if (!isSameTag) {\n          return false;\n        }\n        stack || (stack = new Stack);\n        return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);\n      }\n  \n      /**\n       * The base implementation of `_.isMatch` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Array} matchData The property names, values, and compare flags to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       */\n      function baseIsMatch(object, source, matchData, customizer) {\n        var index = matchData.length,\n            length = index,\n            noCustomizer = !customizer;\n  \n        if (object == null) {\n          return !length;\n        }\n        object = Object(object);\n        while (index--) {\n          var data = matchData[index];\n          if ((noCustomizer && data[2])\n                ? data[1] !== object[data[0]]\n                : !(data[0] in object)\n              ) {\n            return false;\n          }\n        }\n        while (++index < length) {\n          data = matchData[index];\n          var key = data[0],\n              objValue = object[key],\n              srcValue = data[1];\n  \n          if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) {\n              return false;\n            }\n          } else {\n            var stack = new Stack,\n                result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;\n  \n            if (!(result === undefined\n                  ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                  : result\n                )) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * The base implementation of `_.iteratee`.\n       *\n       * @private\n       * @param {*} [value=_.identity] The value to convert to an iteratee.\n       * @returns {Function} Returns the iteratee.\n       */\n      function baseIteratee(value) {\n        var type = typeof value;\n        if (type == 'function') {\n          return value;\n        }\n        if (value == null) {\n          return identity;\n        }\n        if (type == 'object') {\n          return isArray(value)\n            ? baseMatchesProperty(value[0], value[1])\n            : baseMatches(value);\n        }\n        return property(value);\n      }\n  \n      /**\n       * The base implementation of `_.keys` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeys(object) {\n        return nativeKeys(Object(object));\n      }\n  \n      /**\n       * The base implementation of `_.keysIn` which doesn't skip the constructor\n       * property of prototypes or treat sparse arrays as dense.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       */\n      function baseKeysIn(object) {\n        object = object == null ? object : Object(object);\n  \n        var result = [];\n        for (var key in object) {\n          result.push(key);\n        }\n        return result;\n      }\n  \n      // Fallback for IE < 9 with es6-shim.\n      if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n        baseKeysIn = function(object) {\n          return iteratorToArray(enumerate(object));\n        };\n      }\n  \n      /**\n       * The base implementation of `_.map` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} iteratee The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       */\n      function baseMap(collection, iteratee) {\n        var index = -1,\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value, key, collection) {\n          result[++index] = iteratee(value, key, collection);\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.matches` which doesn't clone `source`.\n       *\n       * @private\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatches(source) {\n        var matchData = getMatchData(source);\n        if (matchData.length == 1 && matchData[0][2]) {\n          var key = matchData[0][0],\n              value = matchData[0][1];\n  \n          return function(object) {\n            if (object == null) {\n              return false;\n            }\n            return object[key] === value &&\n              (value !== undefined || (key in Object(object)));\n          };\n        }\n        return function(object) {\n          return object === source || baseIsMatch(object, source, matchData);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n       *\n       * @private\n       * @param {string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       */\n      function baseMatchesProperty(path, srcValue) {\n        return function(object) {\n          var objValue = get(object, path);\n          return (objValue === undefined && objValue === srcValue)\n            ? hasIn(object, path)\n            : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.merge` without support for multiple sources.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} [customizer] The function to customize merged values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMerge(object, source, srcIndex, customizer, stack) {\n        if (object === source) {\n          return;\n        }\n        var props = (isArray(source) || isTypedArray(source))\n          ? undefined\n          : keysIn(source);\n  \n        arrayEach(props || source, function(srcValue, key) {\n          if (props) {\n            key = srcValue;\n            srcValue = source[key];\n          }\n          if (isObject(srcValue)) {\n            stack || (stack = new Stack);\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n          }\n          else {\n            var newValue = customizer\n              ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n              : undefined;\n  \n            if (newValue === undefined) {\n              newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n          }\n        });\n      }\n  \n      /**\n       * A specialized version of `baseMerge` for arrays and objects which performs\n       * deep merges and tracks traversed objects enabling objects with circular\n       * references to be merged.\n       *\n       * @private\n       * @param {Object} object The destination object.\n       * @param {Object} source The source object.\n       * @param {string} key The key of the value to merge.\n       * @param {number} srcIndex The index of `source`.\n       * @param {Function} mergeFunc The function to merge values.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       */\n      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n        var objValue = object[key],\n            srcValue = source[key],\n            stacked = stack.get(srcValue);\n  \n        if (stacked) {\n          assignMergeValue(object, key, stacked);\n          return;\n        }\n        var newValue = customizer\n          ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n          : undefined;\n  \n        var isCommon = newValue === undefined;\n  \n        if (isCommon) {\n          newValue = srcValue;\n          if (isArray(srcValue) || isTypedArray(srcValue)) {\n            if (isArray(objValue)) {\n              newValue = objValue;\n            }\n            else if (isArrayLikeObject(objValue)) {\n              newValue = copyArray(objValue);\n            }\n            else {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n          }\n          else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            if (isArguments(objValue)) {\n              newValue = toPlainObject(objValue);\n            }\n            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n              isCommon = false;\n              newValue = baseClone(srcValue, true);\n            }\n            else {\n              newValue = objValue;\n            }\n          }\n          else {\n            isCommon = false;\n          }\n        }\n        stack.set(srcValue, newValue);\n  \n        if (isCommon) {\n          // Recursively merge objects and arrays (susceptible to call stack limits).\n          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        }\n        assignMergeValue(object, key, newValue);\n      }\n  \n      /**\n       * The base implementation of `_.orderBy` without param guards.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n       * @param {string[]} orders The sort orders of `iteratees`.\n       * @returns {Array} Returns the new sorted array.\n       */\n      function baseOrderBy(collection, iteratees, orders) {\n        var index = -1,\n            toIteratee = getIteratee();\n  \n        iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {\n          return toIteratee(iteratee);\n        });\n  \n        var result = baseMap(collection, function(value, key, collection) {\n          var criteria = arrayMap(iteratees, function(iteratee) {\n            return iteratee(value);\n          });\n          return { 'criteria': criteria, 'index': ++index, 'value': value };\n        });\n  \n        return baseSortBy(result, function(object, other) {\n          return compareMultiple(object, other, orders);\n        });\n      }\n  \n      /**\n       * The base implementation of `_.pick` without support for individual\n       * property names.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {string[]} props The property names to pick.\n       * @returns {Object} Returns the new object.\n       */\n      function basePick(object, props) {\n        object = Object(object);\n        return arrayReduce(props, function(result, key) {\n          if (key in object) {\n            result[key] = object[key];\n          }\n          return result;\n        }, {});\n      }\n  \n      /**\n       * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Object} object The source object.\n       * @param {Function} predicate The function invoked per property.\n       * @returns {Object} Returns the new object.\n       */\n      function basePickBy(object, predicate) {\n        var result = {};\n        baseForIn(object, function(value, key) {\n          if (predicate(value, key)) {\n            result[key] = value;\n          }\n        });\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.property` without support for deep paths.\n       *\n       * @private\n       * @param {string} key The key of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function baseProperty(key) {\n        return function(object) {\n          return object == null ? undefined : object[key];\n        };\n      }\n  \n      /**\n       * A specialized version of `baseProperty` which supports deep paths.\n       *\n       * @private\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       */\n      function basePropertyDeep(path) {\n        return function(object) {\n          return baseGet(object, path);\n        };\n      }\n  \n      /**\n       * The base implementation of `_.pullAll`.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAll(array, values) {\n        return basePullAllBy(array, values);\n      }\n  \n      /**\n       * The base implementation of `_.pullAllBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAllBy(array, values, iteratee) {\n        var index = -1,\n            length = values.length,\n            seen = array;\n  \n        if (iteratee) {\n          seen = arrayMap(array, function(value) { return iteratee(value); });\n        }\n        while (++index < length) {\n          var fromIndex = 0,\n              value = values[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {\n            if (seen !== array) {\n              splice.call(seen, fromIndex, 1);\n            }\n            splice.call(array, fromIndex, 1);\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.pullAt` without support for individual\n       * indexes or capturing the removed elements.\n       *\n       * @private\n       * @param {Array} array The array to modify.\n       * @param {number[]} indexes The indexes of elements to remove.\n       * @returns {Array} Returns `array`.\n       */\n      function basePullAt(array, indexes) {\n        var length = array ? indexes.length : 0,\n            lastIndex = length - 1;\n  \n        while (length--) {\n          var index = indexes[length];\n          if (lastIndex == length || index != previous) {\n            var previous = index;\n            if (isIndex(index)) {\n              splice.call(array, index, 1);\n            }\n            else if (!isKey(index, array)) {\n              var path = baseCastPath(index),\n                  object = parent(array, path);\n  \n              if (object != null) {\n                delete object[last(path)];\n              }\n            }\n            else {\n              delete array[index];\n            }\n          }\n        }\n        return array;\n      }\n  \n      /**\n       * The base implementation of `_.random` without support for returning\n       * floating-point numbers.\n       *\n       * @private\n       * @param {number} lower The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the random number.\n       */\n      function baseRandom(lower, upper) {\n        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n      }\n  \n      /**\n       * The base implementation of `_.range` and `_.rangeRight` which doesn't\n       * coerce arguments to numbers.\n       *\n       * @private\n       * @param {number} start The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} step The value to increment or decrement by.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the new array of numbers.\n       */\n      function baseRange(start, end, step, fromRight) {\n        var index = -1,\n            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n            result = Array(length);\n  \n        while (length--) {\n          result[fromRight ? length : ++index] = start;\n          start += step;\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.set`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize path creation.\n       * @returns {Object} Returns `object`.\n       */\n      function baseSet(object, path, value, customizer) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n  \n        var index = -1,\n            length = path.length,\n            lastIndex = length - 1,\n            nested = object;\n  \n        while (nested != null && ++index < length) {\n          var key = path[index];\n          if (isObject(nested)) {\n            var newValue = value;\n            if (index != lastIndex) {\n              var objValue = nested[key];\n              newValue = customizer ? customizer(objValue, key, nested) : undefined;\n              if (newValue === undefined) {\n                newValue = objValue == null\n                  ? (isIndex(path[index + 1]) ? [] : {})\n                  : objValue;\n              }\n            }\n            assignValue(nested, key, newValue);\n          }\n          nested = nested[key];\n        }\n        return object;\n      }\n  \n      /**\n       * The base implementation of `setData` without support for hot loop detection.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var baseSetData = !metaMap ? identity : function(func, data) {\n        metaMap.set(func, data);\n        return func;\n      };\n  \n      /**\n       * The base implementation of `_.slice` without an iteratee call guard.\n       *\n       * @private\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseSlice(array, start, end) {\n        var index = -1,\n            length = array.length;\n  \n        if (start < 0) {\n          start = -start > length ? 0 : (length + start);\n        }\n        end = end > length ? length : end;\n        if (end < 0) {\n          end += length;\n        }\n        length = start > end ? 0 : ((end - start) >>> 0);\n        start >>>= 0;\n  \n        var result = Array(length);\n        while (++index < length) {\n          result[index] = array[index + start];\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.some` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} predicate The function invoked per iteration.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       */\n      function baseSome(collection, predicate) {\n        var result;\n  \n        baseEach(collection, function(value, index, collection) {\n          result = predicate(value, index, collection);\n          return !result;\n        });\n        return !!result;\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n       * performs a binary search of `array` to determine the index at which `value`\n       * should be inserted into `array` in order to maintain its sort order.\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted\n       *  into `array`.\n       */\n      function baseSortedIndex(array, value, retHighest) {\n        var low = 0,\n            high = array ? array.length : low;\n  \n        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n          while (low < high) {\n            var mid = (low + high) >>> 1,\n                computed = array[mid];\n  \n            if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n              low = mid + 1;\n            } else {\n              high = mid;\n            }\n          }\n          return high;\n        }\n        return baseSortedIndexBy(array, value, identity, retHighest);\n      }\n  \n      /**\n       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n       * which invokes `iteratee` for `value` and each element of `array` to compute\n       * their sort ranking. The iteratee is invoked with one argument; (value).\n       *\n       * @private\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function} iteratee The iteratee invoked per element.\n       * @param {boolean} [retHighest] Specify returning the highest qualified index.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       */\n      function baseSortedIndexBy(array, value, iteratee, retHighest) {\n        value = iteratee(value);\n  \n        var low = 0,\n            high = array ? array.length : 0,\n            valIsNaN = value !== value,\n            valIsNull = value === null,\n            valIsUndef = value === undefined;\n  \n        while (low < high) {\n          var mid = nativeFloor((low + high) / 2),\n              computed = iteratee(array[mid]),\n              isDef = computed !== undefined,\n              isReflexive = computed === computed;\n  \n          if (valIsNaN) {\n            var setLow = isReflexive || retHighest;\n          } else if (valIsNull) {\n            setLow = isReflexive && isDef && (retHighest || computed != null);\n          } else if (valIsUndef) {\n            setLow = isReflexive && (retHighest || isDef);\n          } else if (computed == null) {\n            setLow = false;\n          } else {\n            setLow = retHighest ? (computed <= value) : (computed < value);\n          }\n          if (setLow) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return nativeMin(high, MAX_ARRAY_INDEX);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniq`.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniq(array) {\n        return baseSortedUniqBy(array);\n      }\n  \n      /**\n       * The base implementation of `_.sortedUniqBy` without support for iteratee\n       * shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseSortedUniqBy(array, iteratee) {\n        var index = 0,\n            length = array.length,\n            value = array[0],\n            computed = iteratee ? iteratee(value) : value,\n            seen = computed,\n            resIndex = 0,\n            result = [value];\n  \n        while (++index < length) {\n          value = array[index],\n          computed = iteratee ? iteratee(value) : value;\n  \n          if (!eq(computed, seen)) {\n            seen = computed;\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       */\n      function baseUniq(array, iteratee, comparator) {\n        var index = -1,\n            includes = arrayIncludes,\n            length = array.length,\n            isCommon = true,\n            result = [],\n            seen = result;\n  \n        if (comparator) {\n          isCommon = false;\n          includes = arrayIncludesWith;\n        }\n        else if (length >= LARGE_ARRAY_SIZE) {\n          var set = iteratee ? null : createSet(array);\n          if (set) {\n            return setToArray(set);\n          }\n          isCommon = false;\n          includes = cacheHas;\n          seen = new SetCache;\n        }\n        else {\n          seen = iteratee ? [] : result;\n        }\n        outer:\n        while (++index < length) {\n          var value = array[index],\n              computed = iteratee ? iteratee(value) : value;\n  \n          if (isCommon && computed === computed) {\n            var seenIndex = seen.length;\n            while (seenIndex--) {\n              if (seen[seenIndex] === computed) {\n                continue outer;\n              }\n            }\n            if (iteratee) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n          else if (!includes(seen, computed, comparator)) {\n            if (seen !== result) {\n              seen.push(computed);\n            }\n            result.push(value);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The base implementation of `_.unset`.\n       *\n       * @private\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       */\n      function baseUnset(object, path) {\n        path = isKey(path, object) ? [path + ''] : baseCastPath(path);\n        object = parent(object, path);\n        var key = last(path);\n        return (object != null && has(object, key)) ? delete object[key] : true;\n      }\n  \n      /**\n       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n       * without support for iteratee shorthands.\n       *\n       * @private\n       * @param {Array} array The array to query.\n       * @param {Function} predicate The function invoked per iteration.\n       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function baseWhile(array, predicate, isDrop, fromRight) {\n        var length = array.length,\n            index = fromRight ? length : -1;\n  \n        while ((fromRight ? index-- : ++index < length) &&\n          predicate(array[index], index, array)) {}\n  \n        return isDrop\n          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n      }\n  \n      /**\n       * The base implementation of `wrapperValue` which returns the result of\n       * performing a sequence of actions on the unwrapped `value`, where each\n       * successive action is supplied the return value of the previous.\n       *\n       * @private\n       * @param {*} value The unwrapped value.\n       * @param {Array} actions Actions to perform to resolve the unwrapped value.\n       * @returns {*} Returns the resolved value.\n       */\n      function baseWrapperValue(value, actions) {\n        var result = value;\n        if (result instanceof LazyWrapper) {\n          result = result.value();\n        }\n        return arrayReduce(actions, function(result, action) {\n          return action.func.apply(action.thisArg, arrayPush([result], action.args));\n        }, result);\n      }\n  \n      /**\n       * The base implementation of methods like `_.xor`, without support for\n       * iteratee shorthands, that accepts an array of arrays to inspect.\n       *\n       * @private\n       * @param {Array} arrays The arrays to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       */\n      function baseXor(arrays, iteratee, comparator) {\n        var index = -1,\n            length = arrays.length;\n  \n        while (++index < length) {\n          var result = result\n            ? arrayPush(\n                baseDifference(result, arrays[index], iteratee, comparator),\n                baseDifference(arrays[index], result, iteratee, comparator)\n              )\n            : arrays[index];\n        }\n        return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n      }\n  \n      /**\n       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n       *\n       * @private\n       * @param {Array} props The property names.\n       * @param {Array} values The property values.\n       * @param {Function} assignFunc The function to assign values.\n       * @returns {Object} Returns the new object.\n       */\n      function baseZipObject(props, values, assignFunc) {\n        var index = -1,\n            length = props.length,\n            valsLength = values.length,\n            result = {};\n  \n        while (++index < length) {\n          assignFunc(result, props[index], index < valsLength ? values[index] : undefined);\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a clone of  `buffer`.\n       *\n       * @private\n       * @param {Buffer} buffer The buffer to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Buffer} Returns the cloned buffer.\n       */\n      function cloneBuffer(buffer, isDeep) {\n        if (isDeep) {\n          return buffer.slice();\n        }\n        var Ctor = buffer.constructor,\n            result = new Ctor(buffer.length);\n  \n        buffer.copy(result);\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `arrayBuffer`.\n       *\n       * @private\n       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n       * @returns {ArrayBuffer} Returns the cloned array buffer.\n       */\n      function cloneArrayBuffer(arrayBuffer) {\n        var Ctor = arrayBuffer.constructor,\n            result = new Ctor(arrayBuffer.byteLength),\n            view = new Uint8Array(result);\n  \n        view.set(new Uint8Array(arrayBuffer));\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `map`.\n       *\n       * @private\n       * @param {Object} map The map to clone.\n       * @returns {Object} Returns the cloned map.\n       */\n      function cloneMap(map) {\n        var Ctor = map.constructor;\n        return arrayReduce(mapToArray(map), addMapEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of `regexp`.\n       *\n       * @private\n       * @param {Object} regexp The regexp to clone.\n       * @returns {Object} Returns the cloned regexp.\n       */\n      function cloneRegExp(regexp) {\n        var Ctor = regexp.constructor,\n            result = new Ctor(regexp.source, reFlags.exec(regexp));\n  \n        result.lastIndex = regexp.lastIndex;\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `set`.\n       *\n       * @private\n       * @param {Object} set The set to clone.\n       * @returns {Object} Returns the cloned set.\n       */\n      function cloneSet(set) {\n        var Ctor = set.constructor;\n        return arrayReduce(setToArray(set), addSetEntry, new Ctor);\n      }\n  \n      /**\n       * Creates a clone of the `symbol` object.\n       *\n       * @private\n       * @param {Object} symbol The symbol object to clone.\n       * @returns {Object} Returns the cloned symbol object.\n       */\n      function cloneSymbol(symbol) {\n        return Symbol ? Object(symbolValueOf.call(symbol)) : {};\n      }\n  \n      /**\n       * Creates a clone of `typedArray`.\n       *\n       * @private\n       * @param {Object} typedArray The typed array to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the cloned typed array.\n       */\n      function cloneTypedArray(typedArray, isDeep) {\n        var arrayBuffer = typedArray.buffer,\n            buffer = isDeep ? cloneArrayBuffer(arrayBuffer) : arrayBuffer,\n            Ctor = typedArray.constructor;\n  \n        return new Ctor(buffer, typedArray.byteOffset, typedArray.length);\n      }\n  \n      /**\n       * Creates an array that is the composition of partially applied arguments,\n       * placeholders, and provided arguments into a single array of arguments.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to prepend to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgs(args, partials, holders) {\n        var holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            leftIndex = -1,\n            leftLength = partials.length,\n            result = Array(leftLength + argsLength);\n  \n        while (++leftIndex < leftLength) {\n          result[leftIndex] = partials[leftIndex];\n        }\n        while (++argsIndex < holdersLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n        while (argsLength--) {\n          result[leftIndex++] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * This function is like `composeArgs` except that the arguments composition\n       * is tailored for `_.partialRight`.\n       *\n       * @private\n       * @param {Array|Object} args The provided arguments.\n       * @param {Array} partials The arguments to append to those provided.\n       * @param {Array} holders The `partials` placeholder indexes.\n       * @returns {Array} Returns the new array of composed arguments.\n       */\n      function composeArgsRight(args, partials, holders) {\n        var holdersIndex = -1,\n            holdersLength = holders.length,\n            argsIndex = -1,\n            argsLength = nativeMax(args.length - holdersLength, 0),\n            rightIndex = -1,\n            rightLength = partials.length,\n            result = Array(argsLength + rightLength);\n  \n        while (++argsIndex < argsLength) {\n          result[argsIndex] = args[argsIndex];\n        }\n        var offset = argsIndex;\n        while (++rightIndex < rightLength) {\n          result[offset + rightIndex] = partials[rightIndex];\n        }\n        while (++holdersIndex < holdersLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n        return result;\n      }\n  \n      /**\n       * Copies the values of `source` to `array`.\n       *\n       * @private\n       * @param {Array} source The array to copy values from.\n       * @param {Array} [array=[]] The array to copy values to.\n       * @returns {Array} Returns `array`.\n       */\n      function copyArray(source, array) {\n        var index = -1,\n            length = source.length;\n  \n        array || (array = Array(length));\n        while (++index < length) {\n          array[index] = source[index];\n        }\n        return array;\n      }\n  \n      /**\n       * Copies properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObject(source, props, object) {\n        return copyObjectWith(source, props, object);\n      }\n  \n      /**\n       * This function is like `copyObject` except that it accepts a function to\n       * customize copied values.\n       *\n       * @private\n       * @param {Object} source The object to copy properties from.\n       * @param {Array} props The property names to copy.\n       * @param {Object} [object={}] The object to copy properties to.\n       * @param {Function} [customizer] The function to customize copied values.\n       * @returns {Object} Returns `object`.\n       */\n      function copyObjectWith(source, props, object, customizer) {\n        object || (object = {});\n  \n        var index = -1,\n            length = props.length;\n  \n        while (++index < length) {\n          var key = props[index];\n  \n          var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : source[key];\n  \n          assignValue(object, key, newValue);\n        }\n        return object;\n      }\n  \n      /**\n       * Copies own symbol properties of `source` to `object`.\n       *\n       * @private\n       * @param {Object} source The object to copy symbols from.\n       * @param {Object} [object={}] The object to copy symbols to.\n       * @returns {Object} Returns `object`.\n       */\n      function copySymbols(source, object) {\n        return copyObject(source, getSymbols(source), object);\n      }\n  \n      /**\n       * Creates a function like `_.groupBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} [initializer] The accumulator object initializer.\n       * @returns {Function} Returns the new aggregator function.\n       */\n      function createAggregator(setter, initializer) {\n        return function(collection, iteratee) {\n          var func = isArray(collection) ? arrayAggregator : baseAggregator,\n              accumulator = initializer ? initializer() : {};\n  \n          return func(collection, setter, getIteratee(iteratee), accumulator);\n        };\n      }\n  \n      /**\n       * Creates a function like `_.assign`.\n       *\n       * @private\n       * @param {Function} assigner The function to assign values.\n       * @returns {Function} Returns the new assigner function.\n       */\n      function createAssigner(assigner) {\n        return rest(function(object, sources) {\n          var index = -1,\n              length = sources.length,\n              customizer = length > 1 ? sources[length - 1] : undefined,\n              guard = length > 2 ? sources[2] : undefined;\n  \n          customizer = typeof customizer == 'function'\n            ? (length--, customizer)\n            : undefined;\n  \n          if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n          }\n          object = Object(object);\n          while (++index < length) {\n            var source = sources[index];\n            if (source) {\n              assigner(object, source, index, customizer);\n            }\n          }\n          return object;\n        });\n      }\n  \n      /**\n       * Creates a `baseEach` or `baseEachRight` function.\n       *\n       * @private\n       * @param {Function} eachFunc The function to iterate over a collection.\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseEach(eachFunc, fromRight) {\n        return function(collection, iteratee) {\n          if (collection == null) {\n            return collection;\n          }\n          if (!isArrayLike(collection)) {\n            return eachFunc(collection, iteratee);\n          }\n          var length = collection.length,\n              index = fromRight ? length : -1,\n              iterable = Object(collection);\n  \n          while ((fromRight ? index-- : ++index < length)) {\n            if (iteratee(iterable[index], index, iterable) === false) {\n              break;\n            }\n          }\n          return collection;\n        };\n      }\n  \n      /**\n       * Creates a base function for methods like `_.forIn`.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new base function.\n       */\n      function createBaseFor(fromRight) {\n        return function(object, iteratee, keysFunc) {\n          var index = -1,\n              iterable = Object(object),\n              props = keysFunc(object),\n              length = props.length;\n  \n          while (length--) {\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) {\n              break;\n            }\n          }\n          return object;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg`.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createBaseWrapper(func, bitmask, thisArg) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n          return fn.apply(isBind ? thisArg : this, arguments);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.lowerFirst`.\n       *\n       * @private\n       * @param {string} methodName The name of the `String` case method to use.\n       * @returns {Function} Returns the new function.\n       */\n      function createCaseFirst(methodName) {\n        return function(string) {\n          string = toString(string);\n  \n          var strSymbols = reHasComplexSymbol.test(string)\n            ? stringToArray(string)\n            : undefined;\n  \n          var chr = strSymbols ? strSymbols[0] : string.charAt(0),\n              trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);\n  \n          return chr[methodName]() + trailing;\n        };\n      }\n  \n      /**\n       * Creates a function like `_.camelCase`.\n       *\n       * @private\n       * @param {Function} callback The function to combine each word.\n       * @returns {Function} Returns the new compounder function.\n       */\n      function createCompounder(callback) {\n        return function(string) {\n          return arrayReduce(words(deburr(string)), callback, '');\n        };\n      }\n  \n      /**\n       * Creates a function that produces an instance of `Ctor` regardless of\n       * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n       *\n       * @private\n       * @param {Function} Ctor The constructor to wrap.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCtorWrapper(Ctor) {\n        return function() {\n          // Use a `switch` statement to work with class constructors.\n          // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n          // for more details.\n          var args = arguments;\n          switch (args.length) {\n            case 0: return new Ctor;\n            case 1: return new Ctor(args[0]);\n            case 2: return new Ctor(args[0], args[1]);\n            case 3: return new Ctor(args[0], args[1], args[2]);\n            case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n          }\n          var thisBinding = baseCreate(Ctor.prototype),\n              result = Ctor.apply(thisBinding, args);\n  \n          // Mimic the constructor's `return` behavior.\n          // See https://es5.github.io/#x13.2.2 for more details.\n          return isObject(result) ? result : thisBinding;\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to enable currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {number} arity The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createCurryWrapper(func, bitmask, arity) {\n        var Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,\n              placeholder = lodash.placeholder || wrapper.placeholder;\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n            ? []\n            : replaceHolders(args, placeholder);\n  \n          length -= holders.length;\n          return length < arity\n            ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)\n            : apply(fn, this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.flow` or `_.flowRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new flow function.\n       */\n      function createFlow(fromRight) {\n        return rest(function(funcs) {\n          funcs = baseFlatten(funcs, 1);\n  \n          var length = funcs.length,\n              index = length,\n              prereq = LodashWrapper.prototype.thru;\n  \n          if (fromRight) {\n            funcs.reverse();\n          }\n          while (index--) {\n            var func = funcs[index];\n            if (typeof func != 'function') {\n              throw new TypeError(FUNC_ERROR_TEXT);\n            }\n            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n              var wrapper = new LodashWrapper([], true);\n            }\n          }\n          index = wrapper ? index : length;\n          while (++index < length) {\n            func = funcs[index];\n  \n            var funcName = getFuncName(func),\n                data = funcName == 'wrapper' ? getData(func) : undefined;\n  \n            if (data && isLaziable(data[0]) &&\n                  data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                  !data[4].length && data[9] == 1\n                ) {\n              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n            } else {\n              wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n            }\n          }\n          return function() {\n            var args = arguments,\n                value = args[0];\n  \n            if (wrapper && args.length == 1 &&\n                isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n              return wrapper.plant(value).value();\n            }\n            var index = 0,\n                result = length ? funcs[index].apply(this, args) : value;\n  \n            while (++index < length) {\n              result = funcs[index].call(this, result);\n            }\n            return result;\n          };\n        });\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with optional `this`\n       * binding of `thisArg`, partial application, and currying.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n        var isAry = bitmask & ARY_FLAG,\n            isBind = bitmask & BIND_FLAG,\n            isBindKey = bitmask & BIND_KEY_FLAG,\n            isCurry = bitmask & CURRY_FLAG,\n            isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n            isFlip = bitmask & FLIP_FLAG,\n            Ctor = isBindKey ? undefined : createCtorWrapper(func);\n  \n        function wrapper() {\n          var length = arguments.length,\n              index = length,\n              args = Array(length);\n  \n          while (index--) {\n            args[index] = arguments[index];\n          }\n          if (partials) {\n            args = composeArgs(args, partials, holders);\n          }\n          if (partialsRight) {\n            args = composeArgsRight(args, partialsRight, holdersRight);\n          }\n          if (isCurry || isCurryRight) {\n            var placeholder = lodash.placeholder || wrapper.placeholder,\n                argsHolders = replaceHolders(args, placeholder);\n  \n            length -= argsHolders.length;\n            if (length < arity) {\n              return createRecurryWrapper(\n                func, bitmask, createHybridWrapper, placeholder, thisArg, args,\n                argsHolders, argPos, ary, arity - length\n              );\n            }\n          }\n          var thisBinding = isBind ? thisArg : this,\n              fn = isBindKey ? thisBinding[func] : func;\n  \n          if (argPos) {\n            args = reorder(args, argPos);\n          } else if (isFlip && args.length > 1) {\n            args.reverse();\n          }\n          if (isAry && ary < args.length) {\n            args.length = ary;\n          }\n          if (this && this !== root && this instanceof wrapper) {\n            fn = Ctor || createCtorWrapper(fn);\n          }\n          return fn.apply(thisBinding, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a function like `_.invertBy`.\n       *\n       * @private\n       * @param {Function} setter The function to set accumulator values.\n       * @param {Function} toIteratee The function to resolve iteratees.\n       * @returns {Function} Returns the new inverter function.\n       */\n      function createInverter(setter, toIteratee) {\n        return function(object, iteratee) {\n          return baseInverter(object, setter, toIteratee(iteratee), {});\n        };\n      }\n  \n      /**\n       * Creates a function like `_.over`.\n       *\n       * @private\n       * @param {Function} arrayFunc The function to iterate over iteratees.\n       * @returns {Function} Returns the new invoker function.\n       */\n      function createOver(arrayFunc) {\n        return rest(function(iteratees) {\n          iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());\n          return rest(function(args) {\n            var thisArg = this;\n            return arrayFunc(iteratees, function(iteratee) {\n              return apply(iteratee, thisArg, args);\n            });\n          });\n        });\n      }\n  \n      /**\n       * Creates the padding for `string` based on `length`. The `chars` string\n       * is truncated if the number of characters exceeds `length`.\n       *\n       * @private\n       * @param {string} string The string to create padding for.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padding for `string`.\n       */\n      function createPadding(string, length, chars) {\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return '';\n        }\n        var padLength = length - strLength;\n        chars = chars === undefined ? ' ' : (chars + '');\n  \n        var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));\n        return reHasComplexSymbol.test(chars)\n          ? stringToArray(result).slice(0, padLength).join('')\n          : result.slice(0, padLength);\n      }\n  \n      /**\n       * Creates a function that wraps `func` to invoke it with the optional `this`\n       * binding of `thisArg` and the `partials` prepended to those provided to\n       * the wrapper.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {Array} partials The arguments to prepend to those provided to the new function.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createPartialWrapper(func, bitmask, thisArg, partials) {\n        var isBind = bitmask & BIND_FLAG,\n            Ctor = createCtorWrapper(func);\n  \n        function wrapper() {\n          var argsIndex = -1,\n              argsLength = arguments.length,\n              leftIndex = -1,\n              leftLength = partials.length,\n              args = Array(leftLength + argsLength),\n              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n  \n          while (++leftIndex < leftLength) {\n            args[leftIndex] = partials[leftIndex];\n          }\n          while (argsLength--) {\n            args[leftIndex++] = arguments[++argsIndex];\n          }\n          return apply(fn, isBind ? thisArg : this, args);\n        }\n        return wrapper;\n      }\n  \n      /**\n       * Creates a `_.range` or `_.rangeRight` function.\n       *\n       * @private\n       * @param {boolean} [fromRight] Specify iterating from right to left.\n       * @returns {Function} Returns the new range function.\n       */\n      function createRange(fromRight) {\n        return function(start, end, step) {\n          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n            end = step = undefined;\n          }\n          // Ensure the sign of `-0` is preserved.\n          start = toNumber(start);\n          start = start === start ? start : 0;\n          if (end === undefined) {\n            end = start;\n            start = 0;\n          } else {\n            end = toNumber(end) || 0;\n          }\n          step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);\n          return baseRange(start, end, step, fromRight);\n        };\n      }\n  \n      /**\n       * Creates a function that wraps `func` to continue currying.\n       *\n       * @private\n       * @param {Function} func The function to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.\n       * @param {Function} wrapFunc The function to create the `func` wrapper.\n       * @param {*} placeholder The placeholder to replace.\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n        var isCurry = bitmask & CURRY_FLAG,\n            newArgPos = argPos ? copyArray(argPos) : undefined,\n            newsHolders = isCurry ? holders : undefined,\n            newHoldersRight = isCurry ? undefined : holders,\n            newPartials = isCurry ? partials : undefined,\n            newPartialsRight = isCurry ? undefined : partials;\n  \n        bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n  \n        if (!(bitmask & CURRY_BOUND_FLAG)) {\n          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n        }\n        var newData = [\n          func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight,\n          newHoldersRight, newArgPos, ary, arity\n        ];\n  \n        var result = wrapFunc.apply(undefined, newData);\n        if (isLaziable(func)) {\n          setData(result, newData);\n        }\n        result.placeholder = placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a function like `_.round`.\n       *\n       * @private\n       * @param {string} methodName The name of the `Math` method to use when rounding.\n       * @returns {Function} Returns the new round function.\n       */\n      function createRound(methodName) {\n        var func = Math[methodName];\n        return function(number, precision) {\n          number = toNumber(number);\n          precision = toInteger(precision);\n          if (precision) {\n            // Shift with exponential notation to avoid floating-point issues.\n            // See [MDN](https://mdn.io/round#Examples) for more details.\n            var pair = (toString(number) + 'e').split('e'),\n                value = func(pair[0] + 'e' + (+pair[1] + precision));\n  \n            pair = (toString(value) + 'e').split('e');\n            return +(pair[0] + 'e' + (+pair[1] - precision));\n          }\n          return func(number);\n        };\n      }\n  \n      /**\n       * Creates a set of `values`.\n       *\n       * @private\n       * @param {Array} values The values to add to the set.\n       * @returns {Object} Returns the new set.\n       */\n      var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {\n        return new Set(values);\n      };\n  \n      /**\n       * Creates a function that either curries or invokes `func` with optional\n       * `this` binding and partially applied arguments.\n       *\n       * @private\n       * @param {Function|string} func The function or method name to wrap.\n       * @param {number} bitmask The bitmask of wrapper flags.\n       *  The bitmask may be composed of the following flags:\n       *     1 - `_.bind`\n       *     2 - `_.bindKey`\n       *     4 - `_.curry` or `_.curryRight` of a bound function\n       *     8 - `_.curry`\n       *    16 - `_.curryRight`\n       *    32 - `_.partial`\n       *    64 - `_.partialRight`\n       *   128 - `_.rearg`\n       *   256 - `_.ary`\n       * @param {*} [thisArg] The `this` binding of `func`.\n       * @param {Array} [partials] The arguments to be partially applied.\n       * @param {Array} [holders] The `partials` placeholder indexes.\n       * @param {Array} [argPos] The argument positions of the new function.\n       * @param {number} [ary] The arity cap of `func`.\n       * @param {number} [arity] The arity of `func`.\n       * @returns {Function} Returns the new wrapped function.\n       */\n      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n        var isBindKey = bitmask & BIND_KEY_FLAG;\n        if (!isBindKey && typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var length = partials ? partials.length : 0;\n        if (!length) {\n          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n          partials = holders = undefined;\n        }\n        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n        arity = arity === undefined ? arity : toInteger(arity);\n        length -= holders ? holders.length : 0;\n  \n        if (bitmask & PARTIAL_RIGHT_FLAG) {\n          var partialsRight = partials,\n              holdersRight = holders;\n  \n          partials = holders = undefined;\n        }\n        var data = isBindKey ? undefined : getData(func);\n  \n        var newData = [\n          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n          argPos, ary, arity\n        ];\n  \n        if (data) {\n          mergeData(newData, data);\n        }\n        func = newData[0];\n        bitmask = newData[1];\n        thisArg = newData[2];\n        partials = newData[3];\n        holders = newData[4];\n        arity = newData[9] = newData[9] == null\n          ? (isBindKey ? 0 : func.length)\n          : nativeMax(newData[9] - length, 0);\n  \n        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n        }\n        if (!bitmask || bitmask == BIND_FLAG) {\n          var result = createBaseWrapper(func, bitmask, thisArg);\n        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n          result = createCurryWrapper(func, bitmask, arity);\n        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n          result = createPartialWrapper(func, bitmask, thisArg, partials);\n        } else {\n          result = createHybridWrapper.apply(undefined, newData);\n        }\n        var setter = data ? baseSetData : setData;\n        return setter(result, newData);\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for arrays with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Array} array The array to compare.\n       * @param {Array} other The other array to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `array` and `other` objects.\n       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n       */\n      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n        var index = -1,\n            isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            isUnordered = bitmask & UNORDERED_COMPARE_FLAG,\n            arrLength = array.length,\n            othLength = other.length;\n  \n        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(array);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(array, other);\n  \n        // Ignore non-index properties.\n        while (++index < arrLength) {\n          var arrValue = array[index],\n              othValue = other[index];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, arrValue, index, other, array, stack)\n              : customizer(arrValue, othValue, index, array, other, stack);\n          }\n          if (compared !== undefined) {\n            if (compared) {\n              continue;\n            }\n            result = false;\n            break;\n          }\n          // Recursively compare arrays (susceptible to call stack limits).\n          if (isUnordered) {\n            if (!arraySome(other, function(othValue) {\n                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);\n                })) {\n              result = false;\n              break;\n            }\n          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n            result = false;\n            break;\n          }\n        }\n        stack['delete'](array);\n        return result;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for comparing objects of\n       * the same `toStringTag`.\n       *\n       * **Note:** This function only supports comparing values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {string} tag The `toStringTag` of the objects to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {\n        switch (tag) {\n          case arrayBufferTag:\n            if ((object.byteLength != other.byteLength) ||\n                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n              return false;\n            }\n            return true;\n  \n          case boolTag:\n          case dateTag:\n            // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n            // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n            return +object == +other;\n  \n          case errorTag:\n            return object.name == other.name && object.message == other.message;\n  \n          case numberTag:\n            // Treat `NaN` vs. `NaN` as equal.\n            return (object != +object) ? other != +other : object == +other;\n  \n          case regexpTag:\n          case stringTag:\n            // Coerce regexes to strings and treat strings primitives and string\n            // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n            return object == (other + '');\n  \n          case mapTag:\n            var convert = mapToArray;\n  \n          case setTag:\n            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n            convert || (convert = setToArray);\n  \n            // Recursively compare objects (susceptible to call stack limits).\n            return (isPartial || object.size == other.size) &&\n              equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);\n  \n          case symbolTag:\n            return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));\n        }\n        return false;\n      }\n  \n      /**\n       * A specialized version of `baseIsEqualDeep` for objects with support for\n       * partial deep comparisons.\n       *\n       * @private\n       * @param {Object} object The object to compare.\n       * @param {Object} other The other object to compare.\n       * @param {Function} equalFunc The function to determine equivalents of values.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.\n       * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n       */\n      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n            objProps = keys(object),\n            objLength = objProps.length,\n            othProps = keys(other),\n            othLength = othProps.length;\n  \n        if (objLength != othLength && !isPartial) {\n          return false;\n        }\n        var index = objLength;\n        while (index--) {\n          var key = objProps[index];\n          if (!(isPartial ? key in other : baseHas(other, key))) {\n            return false;\n          }\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        var result = true;\n        stack.set(object, other);\n  \n        var skipCtor = isPartial;\n        while (++index < objLength) {\n          key = objProps[index];\n          var objValue = object[key],\n              othValue = other[key];\n  \n          if (customizer) {\n            var compared = isPartial\n              ? customizer(othValue, objValue, key, other, object, stack)\n              : customizer(objValue, othValue, key, object, other, stack);\n          }\n          // Recursively compare objects (susceptible to call stack limits).\n          if (!(compared === undefined\n                ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n                : compared\n              )) {\n            result = false;\n            break;\n          }\n          skipCtor || (skipCtor = key == 'constructor');\n        }\n        if (result && !skipCtor) {\n          var objCtor = object.constructor,\n              othCtor = other.constructor;\n  \n          // Non `Object` object instances with different constructors are not equal.\n          if (objCtor != othCtor &&\n              ('constructor' in object && 'constructor' in other) &&\n              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n                typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n            result = false;\n          }\n        }\n        stack['delete'](object);\n        return result;\n      }\n  \n      /**\n       * Gets metadata for `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {*} Returns the metadata for `func`.\n       */\n      var getData = !metaMap ? noop : function(func) {\n        return metaMap.get(func);\n      };\n  \n      /**\n       * Gets the name of `func`.\n       *\n       * @private\n       * @param {Function} func The function to query.\n       * @returns {string} Returns the function name.\n       */\n      function getFuncName(func) {\n        var result = (func.name + ''),\n            array = realNames[result],\n            length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n  \n        while (length--) {\n          var data = array[length],\n              otherFunc = data.func;\n          if (otherFunc == null || otherFunc == func) {\n            return data.name;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the appropriate \"iteratee\" function. If the `_.iteratee` method is\n       * customized this function returns the custom method, otherwise it returns\n       * `baseIteratee`. If arguments are provided the chosen function is invoked\n       * with them and its result is returned.\n       *\n       * @private\n       * @param {*} [value] The value to convert to an iteratee.\n       * @param {number} [arity] The arity of the created iteratee.\n       * @returns {Function} Returns the chosen function or its result.\n       */\n      function getIteratee() {\n        var result = lodash.iteratee || iteratee;\n        result = result === iteratee ? baseIteratee : result;\n        return arguments.length ? result(arguments[0], arguments[1]) : result;\n      }\n  \n      /**\n       * Gets the \"length\" property value of `object`.\n       *\n       * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n       * that affects Safari on at least iOS 8.1-8.3 ARM64.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {*} Returns the \"length\" value.\n       */\n      var getLength = baseProperty('length');\n  \n      /**\n       * Gets the property names, values, and compare flags of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the match data of `object`.\n       */\n      function getMatchData(object) {\n        var result = toPairs(object),\n            length = result.length;\n  \n        while (length--) {\n          result[length][2] = isStrictComparable(result[length][1]);\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the native function at `key` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {string} key The key of the method to get.\n       * @returns {*} Returns the function if it's native, else `undefined`.\n       */\n      function getNative(object, key) {\n        var value = object == null ? undefined : object[key];\n        return isNative(value) ? value : undefined;\n      }\n  \n      /**\n       * Creates an array of the own symbol properties of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of symbols.\n       */\n      var getSymbols = getOwnPropertySymbols || function() {\n        return [];\n      };\n  \n      /**\n       * Gets the `toStringTag` of `value`.\n       *\n       * @private\n       * @param {*} value The value to query.\n       * @returns {string} Returns the `toStringTag`.\n       */\n      function getTag(value) {\n        return objectToString.call(value);\n      }\n  \n      // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.\n      if ((Map && getTag(new Map) != mapTag) ||\n          (Set && getTag(new Set) != setTag) ||\n          (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n        getTag = function(value) {\n          var result = objectToString.call(value),\n              Ctor = result == objectTag ? value.constructor : null,\n              ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';\n  \n          if (ctorString) {\n            switch (ctorString) {\n              case mapCtorString: return mapTag;\n              case setCtorString: return setTag;\n              case weakMapCtorString: return weakMapTag;\n            }\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Gets the view, applying any `transforms` to the `start` and `end` positions.\n       *\n       * @private\n       * @param {number} start The start of the view.\n       * @param {number} end The end of the view.\n       * @param {Array} transforms The transformations to apply to the view.\n       * @returns {Object} Returns an object containing the `start` and `end`\n       *  positions of the view.\n       */\n      function getView(start, end, transforms) {\n        var index = -1,\n            length = transforms.length;\n  \n        while (++index < length) {\n          var data = transforms[index],\n              size = data.size;\n  \n          switch (data.type) {\n            case 'drop':      start += size; break;\n            case 'dropRight': end -= size; break;\n            case 'take':      end = nativeMin(end, start + size); break;\n            case 'takeRight': start = nativeMax(start, end - size); break;\n          }\n        }\n        return { 'start': start, 'end': end };\n      }\n  \n      /**\n       * Checks if `path` exists on `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @param {Function} hasFunc The function to check properties.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       */\n      function hasPath(object, path, hasFunc) {\n        if (object == null) {\n          return false;\n        }\n        var result = hasFunc(object, path);\n        if (!result && !isKey(path)) {\n          path = baseCastPath(path);\n          object = parent(object, path);\n          if (object != null) {\n            path = last(path);\n            result = hasFunc(object, path);\n          }\n        }\n        var length = object ? object.length : undefined;\n        return result || (\n          !!length && isLength(length) && isIndex(path, length) &&\n          (isArray(object) || isString(object) || isArguments(object))\n        );\n      }\n  \n      /**\n       * Initializes an array clone.\n       *\n       * @private\n       * @param {Array} array The array to clone.\n       * @returns {Array} Returns the initialized clone.\n       */\n      function initCloneArray(array) {\n        var length = array.length,\n            result = array.constructor(length);\n  \n        // Add properties assigned by `RegExp#exec`.\n        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n          result.index = array.index;\n          result.input = array.input;\n        }\n        return result;\n      }\n  \n      /**\n       * Initializes an object clone.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneObject(object) {\n        if (isPrototype(object)) {\n          return {};\n        }\n        var Ctor = object.constructor;\n        return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n  \n      /**\n       * Initializes an object clone based on its `toStringTag`.\n       *\n       * **Note:** This function only supports cloning values with tags of\n       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n       *\n       * @private\n       * @param {Object} object The object to clone.\n       * @param {string} tag The `toStringTag` of the object to clone.\n       * @param {boolean} [isDeep] Specify a deep clone.\n       * @returns {Object} Returns the initialized clone.\n       */\n      function initCloneByTag(object, tag, isDeep) {\n        var Ctor = object.constructor;\n        switch (tag) {\n          case arrayBufferTag:\n            return cloneArrayBuffer(object);\n  \n          case boolTag:\n          case dateTag:\n            return new Ctor(+object);\n  \n          case float32Tag: case float64Tag:\n          case int8Tag: case int16Tag: case int32Tag:\n          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n  \n          case mapTag:\n            return cloneMap(object);\n  \n          case numberTag:\n          case stringTag:\n            return new Ctor(object);\n  \n          case regexpTag:\n            return cloneRegExp(object);\n  \n          case setTag:\n            return cloneSet(object);\n  \n          case symbolTag:\n            return cloneSymbol(object);\n        }\n      }\n  \n      /**\n       * Creates an array of index keys for `object` values of arrays,\n       * `arguments` objects, and strings, otherwise `null` is returned.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @returns {Array|null} Returns index keys, else `null`.\n       */\n      function indexKeys(object) {\n        var length = object ? object.length : undefined;\n        if (isLength(length) &&\n            (isArray(object) || isString(object) || isArguments(object))) {\n          return baseTimes(length, String);\n        }\n        return null;\n      }\n  \n      /**\n       * Checks if the given arguments are from an iteratee call.\n       *\n       * @private\n       * @param {*} value The potential iteratee value argument.\n       * @param {*} index The potential iteratee index or key argument.\n       * @param {*} object The potential iteratee object argument.\n       * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n       */\n      function isIterateeCall(value, index, object) {\n        if (!isObject(object)) {\n          return false;\n        }\n        var type = typeof index;\n        if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)) {\n          return eq(object[index], value);\n        }\n        return false;\n      }\n  \n      /**\n       * Checks if `value` is a property name and not a property path.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @param {Object} [object] The object to query keys on.\n       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n       */\n      function isKey(value, object) {\n        if (typeof value == 'number') {\n          return true;\n        }\n        return !isArray(value) &&\n          (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n            (object != null && value in Object(object)));\n      }\n  \n      /**\n       * Checks if `value` is suitable for use as unique object key.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n       */\n      function isKeyable(value) {\n        var type = typeof value;\n        return type == 'number' || type == 'boolean' ||\n          (type == 'string' && value != '__proto__') || value == null;\n      }\n  \n      /**\n       * Checks if `func` has a lazy counterpart.\n       *\n       * @private\n       * @param {Function} func The function to check.\n       * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n       */\n      function isLaziable(func) {\n        var funcName = getFuncName(func),\n            other = lodash[funcName];\n  \n        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n          return false;\n        }\n        if (func === other) {\n          return true;\n        }\n        var data = getData(other);\n        return !!data && func === data[0];\n      }\n  \n      /**\n       * Checks if `value` is likely a prototype object.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n       */\n      function isPrototype(value) {\n        var Ctor = value && value.constructor,\n            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n  \n        return value === proto;\n      }\n  \n      /**\n       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n       *\n       * @private\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` if suitable for strict\n       *  equality comparisons, else `false`.\n       */\n      function isStrictComparable(value) {\n        return value === value && !isObject(value);\n      }\n  \n      /**\n       * Merges the function metadata of `source` into `data`.\n       *\n       * Merging metadata reduces the number of wrappers used to invoke a function.\n       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n       * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n       * modify function arguments, making the order in which they are executed important,\n       * preventing the merging of metadata. However, we make an exception for a safe\n       * combined case where curried functions have `_.ary` and or `_.rearg` applied.\n       *\n       * @private\n       * @param {Array} data The destination metadata.\n       * @param {Array} source The source metadata.\n       * @returns {Array} Returns `data`.\n       */\n      function mergeData(data, source) {\n        var bitmask = data[1],\n            srcBitmask = source[1],\n            newBitmask = bitmask | srcBitmask,\n            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n  \n        var isCombo =\n          (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||\n          (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n          (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n  \n        // Exit early if metadata can't be merged.\n        if (!(isCommon || isCombo)) {\n          return data;\n        }\n        // Use source `thisArg` if available.\n        if (srcBitmask & BIND_FLAG) {\n          data[2] = source[2];\n          // Set when currying a bound function.\n          newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n        }\n        // Compose partial arguments.\n        var value = source[3];\n        if (value) {\n          var partials = data[3];\n          data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);\n          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);\n        }\n        // Compose partial right arguments.\n        value = source[5];\n        if (value) {\n          partials = data[5];\n          data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);\n          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);\n        }\n        // Use source `argPos` if available.\n        value = source[7];\n        if (value) {\n          data[7] = copyArray(value);\n        }\n        // Use source `ary` if it's smaller.\n        if (srcBitmask & ARY_FLAG) {\n          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n        }\n        // Use source `arity` if one is not provided.\n        if (data[9] == null) {\n          data[9] = source[9];\n        }\n        // Use source `func` and merge bitmasks.\n        data[0] = source[0];\n        data[1] = newBitmask;\n  \n        return data;\n      }\n  \n      /**\n       * Used by `_.defaultsDeep` to customize its `_.merge` use.\n       *\n       * @private\n       * @param {*} objValue The destination value.\n       * @param {*} srcValue The source value.\n       * @param {string} key The key of the property to merge.\n       * @param {Object} object The parent object of `objValue`.\n       * @param {Object} source The parent object of `srcValue`.\n       * @param {Object} [stack] Tracks traversed source values and their merged counterparts.\n       * @returns {*} Returns the value to assign.\n       */\n      function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n        if (isObject(objValue) && isObject(srcValue)) {\n          stack.set(srcValue, objValue);\n          baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        }\n        return objValue;\n      }\n  \n      /**\n       * Gets the parent value at `path` of `object`.\n       *\n       * @private\n       * @param {Object} object The object to query.\n       * @param {Array} path The path to get the parent value of.\n       * @returns {*} Returns the parent value.\n       */\n      function parent(object, path) {\n        return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));\n      }\n  \n      /**\n       * Reorder `array` according to the specified indexes where the element at\n       * the first index is assigned as the first element, the element at\n       * the second index is assigned as the second element, and so on.\n       *\n       * @private\n       * @param {Array} array The array to reorder.\n       * @param {Array} indexes The arranged array indexes.\n       * @returns {Array} Returns `array`.\n       */\n      function reorder(array, indexes) {\n        var arrLength = array.length,\n            length = nativeMin(indexes.length, arrLength),\n            oldArray = copyArray(array);\n  \n        while (length--) {\n          var index = indexes[length];\n          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n        }\n        return array;\n      }\n  \n      /**\n       * Sets metadata for `func`.\n       *\n       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n       * period of time, it will trip its breaker and transition to an identity function\n       * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n       * for more details.\n       *\n       * @private\n       * @param {Function} func The function to associate metadata with.\n       * @param {*} data The metadata.\n       * @returns {Function} Returns `func`.\n       */\n      var setData = (function() {\n        var count = 0,\n            lastCalled = 0;\n  \n        return function(key, value) {\n          var stamp = now(),\n              remaining = HOT_SPAN - (stamp - lastCalled);\n  \n          lastCalled = stamp;\n          if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n              return key;\n            }\n          } else {\n            count = 0;\n          }\n          return baseSetData(key, value);\n        };\n      }());\n  \n      /**\n       * Converts `string` to a property path array.\n       *\n       * @private\n       * @param {string} string The string to convert.\n       * @returns {Array} Returns the property path array.\n       */\n      function stringToPath(string) {\n        var result = [];\n        toString(string).replace(rePropName, function(match, number, quote, string) {\n          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n        });\n        return result;\n      }\n  \n      /**\n       * Creates a clone of `wrapper`.\n       *\n       * @private\n       * @param {Object} wrapper The wrapper to clone.\n       * @returns {Object} Returns the cloned wrapper.\n       */\n      function wrapperClone(wrapper) {\n        if (wrapper instanceof LazyWrapper) {\n          return wrapper.clone();\n        }\n        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n        result.__actions__ = copyArray(wrapper.__actions__);\n        result.__index__  = wrapper.__index__;\n        result.__values__ = wrapper.__values__;\n        return result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an array of elements split into groups the length of `size`.\n       * If `array` can't be split evenly, the final chunk will be the remaining\n       * elements.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to process.\n       * @param {number} [size=0] The length of each chunk.\n       * @returns {Array} Returns the new array containing chunks.\n       * @example\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 2);\n       * // => [['a', 'b'], ['c', 'd']]\n       *\n       * _.chunk(['a', 'b', 'c', 'd'], 3);\n       * // => [['a', 'b', 'c'], ['d']]\n       */\n      function chunk(array, size) {\n        size = nativeMax(toInteger(size), 0);\n  \n        var length = array ? array.length : 0;\n        if (!length || size < 1) {\n          return [];\n        }\n        var index = 0,\n            resIndex = -1,\n            result = Array(nativeCeil(length / size));\n  \n        while (index < length) {\n          result[++resIndex] = baseSlice(array, index, (index += size));\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array with all falsey values removed. The values `false`, `null`,\n       * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to compact.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.compact([0, 1, false, 2, '', 3]);\n       * // => [1, 2, 3]\n       */\n      function compact(array) {\n        var index = -1,\n            length = array ? array.length : 0,\n            resIndex = -1,\n            result = [];\n  \n        while (++index < length) {\n          var value = array[index];\n          if (value) {\n            result[++resIndex] = value;\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates a new array concatenating `array` with any additional arrays\n       * and/or values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to concatenate.\n       * @param {...*} [values] The values to concatenate.\n       * @returns {Array} Returns the new concatenated array.\n       * @example\n       *\n       * var array = [1];\n       * var other = _.concat(array, 2, [3], [[4]]);\n       *\n       * console.log(other);\n       * // => [1, 2, 3, [4]]\n       *\n       * console.log(array);\n       * // => [1]\n       */\n      var concat = rest(function(array, values) {\n        if (!isArray(array)) {\n          array = array == null ? [] : [Object(array)];\n        }\n        values = baseFlatten(values, 1);\n        return arrayConcat(array, values);\n      });\n  \n      /**\n       * Creates an array of unique `array` values not included in the other\n       * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.difference([3, 2, 1], [4, 2]);\n       * // => [3, 1]\n       */\n      var difference = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `iteratee` which\n       * is invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n       * // => [3.1, 1.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var differenceBy = rest(function(array, values) {\n        var iteratee = last(values);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.difference` except that it accepts `comparator`\n       * which is invoked to compare elements of `array` to `values`. The comparator\n       * is invoked with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {...Array} [values] The values to exclude.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       *\n       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }]\n       */\n      var differenceWith = rest(function(array, values) {\n        var comparator = last(values);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return isArrayLikeObject(array)\n          ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.drop([1, 2, 3]);\n       * // => [2, 3]\n       *\n       * _.drop([1, 2, 3], 2);\n       * // => [3]\n       *\n       * _.drop([1, 2, 3], 5);\n       * // => []\n       *\n       * _.drop([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function drop(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements dropped from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to drop.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.dropRight([1, 2, 3]);\n       * // => [1, 2]\n       *\n       * _.dropRight([1, 2, 3], 2);\n       * // => [1]\n       *\n       * _.dropRight([1, 2, 3], 5);\n       * // => []\n       *\n       * _.dropRight([1, 2, 3], 0);\n       * // => [1, 2, 3]\n       */\n      function dropRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the end.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.dropRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropRightWhile(users, ['active', false]);\n       * // => objects for ['barney']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropRightWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` excluding elements dropped from the beginning.\n       * Elements are dropped until `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.dropWhile(users, function(o) { return !o.active; });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.dropWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.dropWhile(users, ['active', false]);\n       * // => objects for ['pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.dropWhile(users, 'active');\n       * // => objects for ['barney', 'fred', 'pebbles']\n       */\n      function dropWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), true)\n          : [];\n      }\n  \n      /**\n       * Fills elements of `array` with `value` from `start` up to, but not\n       * including, `end`.\n       *\n       * **Note:** This method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to fill.\n       * @param {*} value The value to fill `array` with.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.fill(array, 'a');\n       * console.log(array);\n       * // => ['a', 'a', 'a']\n       *\n       * _.fill(Array(3), 2);\n       * // => [2, 2, 2]\n       *\n       * _.fill([4, 6, 8, 10], '*', 1, 3);\n       * // => [4, '*', '*', 10]\n       */\n      function fill(array, value, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n          start = 0;\n          end = length;\n        }\n        return baseFill(array, value, start, end);\n      }\n  \n      /**\n       * This method is like `_.find` except that it returns the index of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.findIndex(users, function(o) { return o.user == 'barney'; });\n       * // => 0\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findIndex(users, { 'user': 'fred', 'active': false });\n       * // => 1\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findIndex(users, ['active', false]);\n       * // => 0\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findIndex(users, 'active');\n       * // => 2\n       */\n      function findIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3))\n          : -1;\n      }\n  \n      /**\n       * This method is like `_.findIndex` except that it iterates over elements\n       * of `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {number} Returns the index of the found element, else `-1`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n       * // => 2\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n       * // => 0\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastIndex(users, ['active', false]);\n       * // => 2\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastIndex(users, 'active');\n       * // => 0\n       */\n      function findLastIndex(array, predicate) {\n        return (array && array.length)\n          ? baseFindIndex(array, getIteratee(predicate, 3), true)\n          : -1;\n      }\n  \n      /**\n       * Flattens `array` a single level deep.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flatten([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, [3, [4]], 5]\n       */\n      function flatten(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, 1) : [];\n      }\n  \n      /**\n       * Recursively flattens `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * _.flattenDeep([1, [2, [3, [4]], 5]]);\n       * // => [1, 2, 3, 4, 5]\n       */\n      function flattenDeep(array) {\n        var length = array ? array.length : 0;\n        return length ? baseFlatten(array, INFINITY) : [];\n      }\n  \n      /**\n       * Recursively flatten `array` up to `depth` times.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to flatten.\n       * @param {number} [depth=1] The maximum recursion depth.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * var array = [1, [2, [3, [4]], 5]];\n       *\n       * _.flattenDepth(array, 1);\n       * // => [1, 2, [3, [4]], 5]\n       *\n       * _.flattenDepth(array, 2);\n       * // => [1, 2, 3, [4], 5]\n       */\n      function flattenDepth(array, depth) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        depth = depth === undefined ? 1 : toInteger(depth);\n        return baseFlatten(array, depth);\n      }\n  \n      /**\n       * The inverse of `_.toPairs`; this method returns an object composed\n       * from key-value `pairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} pairs The key-value pairs.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.fromPairs([['fred', 30], ['barney', 40]]);\n       * // => { 'fred': 30, 'barney': 40 }\n       */\n      function fromPairs(pairs) {\n        var index = -1,\n            length = pairs ? pairs.length : 0,\n            result = {};\n  \n        while (++index < length) {\n          var pair = pairs[index];\n          result[pair[0]] = pair[1];\n        }\n        return result;\n      }\n  \n      /**\n       * Gets the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @alias first\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the first element of `array`.\n       * @example\n       *\n       * _.head([1, 2, 3]);\n       * // => 1\n       *\n       * _.head([]);\n       * // => undefined\n       */\n      function head(array) {\n        return array ? array[0] : undefined;\n      }\n  \n      /**\n       * Gets the index at which the first occurrence of `value` is found in `array`\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n       * from the end of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.indexOf([1, 2, 1, 2], 2);\n       * // => 1\n       *\n       * // Search from the `fromIndex`.\n       * _.indexOf([1, 2, 1, 2], 2, 2);\n       * // => 3\n       */\n      function indexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        fromIndex = toInteger(fromIndex);\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return baseIndexOf(array, value, fromIndex);\n      }\n  \n      /**\n       * Gets all but the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.initial([1, 2, 3]);\n       * // => [1, 2]\n       */\n      function initial(array) {\n        return dropRight(array, 1);\n      }\n  \n      /**\n       * Creates an array of unique values that are included in all given arrays\n       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersection([2, 1], [4, 2], [1, 2]);\n       * // => [2]\n       */\n      var intersection = rest(function(arrays) {\n        var mapped = arrayMap(arrays, baseCastArrayLikeObject);\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped)\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `iteratee`\n       * which is invoked for each element of each `arrays` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }]\n       */\n      var intersectionBy = rest(function(arrays) {\n        var iteratee = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (iteratee === last(mapped)) {\n          iteratee = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, getIteratee(iteratee))\n          : [];\n      });\n  \n      /**\n       * This method is like `_.intersection` except that it accepts `comparator`\n       * which is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of shared values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.intersectionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }]\n       */\n      var intersectionWith = rest(function(arrays) {\n        var comparator = last(arrays),\n            mapped = arrayMap(arrays, baseCastArrayLikeObject);\n  \n        if (comparator === last(mapped)) {\n          comparator = undefined;\n        } else {\n          mapped.pop();\n        }\n        return (mapped.length && mapped[0] === arrays[0])\n          ? baseIntersection(mapped, undefined, comparator)\n          : [];\n      });\n  \n      /**\n       * Converts all elements in `array` into a string separated by `separator`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to convert.\n       * @param {string} [separator=','] The element separator.\n       * @returns {string} Returns the joined string.\n       * @example\n       *\n       * _.join(['a', 'b', 'c'], '~');\n       * // => 'a~b~c'\n       */\n      function join(array, separator) {\n        return array ? nativeJoin.call(array, separator) : '';\n      }\n  \n      /**\n       * Gets the last element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {*} Returns the last element of `array`.\n       * @example\n       *\n       * _.last([1, 2, 3]);\n       * // => 3\n       */\n      function last(array) {\n        var length = array ? array.length : 0;\n        return length ? array[length - 1] : undefined;\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it iterates over elements of\n       * `array` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=array.length-1] The index to search from.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.lastIndexOf([1, 2, 1, 2], 2);\n       * // => 3\n       *\n       * // Search from the `fromIndex`.\n       * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n       * // => 1\n       */\n      function lastIndexOf(array, value, fromIndex) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return -1;\n        }\n        var index = length;\n        if (fromIndex !== undefined) {\n          index = toInteger(fromIndex);\n          index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;\n        }\n        if (value !== value) {\n          return indexOfNaN(array, index, true);\n        }\n        while (index--) {\n          if (array[index] === value) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * Removes all given values from `array` using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * **Note:** Unlike `_.without`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...*} [values] The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pull(array, 2, 3);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      var pull = rest(pullAll);\n  \n      /**\n       * This method is like `_.pull` except that it accepts an array of values to remove.\n       *\n       * **Note:** Unlike `_.difference`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3, 1, 2, 3];\n       *\n       * _.pullAll(array, [2, 3]);\n       * console.log(array);\n       * // => [1, 1]\n       */\n      function pullAll(array, values) {\n        return (array && array.length && values && values.length)\n          ? basePullAll(array, values)\n          : array;\n      }\n  \n      /**\n       * This method is like `_.pullAll` except that it accepts `iteratee` which is\n       * invoked for each element of `array` and `values` to generate the criterion\n       * by which uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Array} values The values to remove.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n       *\n       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n       * console.log(array);\n       * // => [{ 'x': 2 }]\n       */\n      function pullAllBy(array, values, iteratee) {\n        return (array && array.length && values && values.length)\n          ? basePullAllBy(array, values, getIteratee(iteratee))\n          : array;\n      }\n  \n      /**\n       * Removes elements from `array` corresponding to `indexes` and returns an\n       * array of removed elements.\n       *\n       * **Note:** Unlike `_.at`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [5, 10, 15, 20];\n       * var evens = _.pullAt(array, 1, 3);\n       *\n       * console.log(array);\n       * // => [5, 15]\n       *\n       * console.log(evens);\n       * // => [10, 20]\n       */\n      var pullAt = rest(function(array, indexes) {\n        indexes = arrayMap(baseFlatten(indexes, 1), String);\n  \n        var result = baseAt(array, indexes);\n        basePullAt(array, indexes.sort(compareAscending));\n        return result;\n      });\n  \n      /**\n       * Removes all elements from `array` that `predicate` returns truthy for\n       * and returns an array of the removed elements. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * **Note:** Unlike `_.filter`, this method mutates `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to modify.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new array of removed elements.\n       * @example\n       *\n       * var array = [1, 2, 3, 4];\n       * var evens = _.remove(array, function(n) {\n       *   return n % 2 == 0;\n       * });\n       *\n       * console.log(array);\n       * // => [1, 3]\n       *\n       * console.log(evens);\n       * // => [2, 4]\n       */\n      function remove(array, predicate) {\n        var result = [];\n        if (!(array && array.length)) {\n          return result;\n        }\n        var index = -1,\n            indexes = [],\n            length = array.length;\n  \n        predicate = getIteratee(predicate, 3);\n        while (++index < length) {\n          var value = array[index];\n          if (predicate(value, index, array)) {\n            result.push(value);\n            indexes.push(index);\n          }\n        }\n        basePullAt(array, indexes);\n        return result;\n      }\n  \n      /**\n       * Reverses `array` so that the first element becomes the last, the second\n       * element becomes the second to last, and so on.\n       *\n       * **Note:** This method mutates `array` and is based on\n       * [`Array#reverse`](https://mdn.io/Array/reverse).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @returns {Array} Returns `array`.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _.reverse(array);\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function reverse(array) {\n        return array ? nativeReverse.call(array) : array;\n      }\n  \n      /**\n       * Creates a slice of `array` from `start` up to, but not including, `end`.\n       *\n       * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)\n       * to ensure dense arrays are returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to slice.\n       * @param {number} [start=0] The start position.\n       * @param {number} [end=array.length] The end position.\n       * @returns {Array} Returns the slice of `array`.\n       */\n      function slice(array, start, end) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n          start = 0;\n          end = length;\n        }\n        else {\n          start = start == null ? 0 : toInteger(start);\n          end = end === undefined ? length : toInteger(end);\n        }\n        return baseSlice(array, start, end);\n      }\n  \n      /**\n       * Uses a binary search to determine the lowest index at which `value` should\n       * be inserted into `array` in order to maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedIndex([30, 50], 40);\n       * // => 1\n       *\n       * _.sortedIndex([4, 5], 4);\n       * // => 0\n       */\n      function sortedIndex(array, value) {\n        return baseSortedIndex(array, value);\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n       *\n       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n       * // => 1\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 0\n       */\n      function sortedIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee));\n      }\n  \n      /**\n       * This method is like `_.indexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedIndexOf([1, 1, 2, 2], 2);\n       * // => 2\n       */\n      function sortedIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value);\n          if (index < length && eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.sortedIndex` except that it returns the highest\n       * index at which `value` should be inserted into `array` in order to\n       * maintain its sort order.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * _.sortedLastIndex([4, 5], 4);\n       * // => 1\n       */\n      function sortedLastIndex(array, value) {\n        return baseSortedIndex(array, value, true);\n      }\n  \n      /**\n       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n       * which is invoked for `value` and each element of `array` to compute their\n       * sort ranking. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The sorted array to inspect.\n       * @param {*} value The value to evaluate.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the index at which `value` should be inserted into `array`.\n       * @example\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n       * // => 1\n       */\n      function sortedLastIndexBy(array, value, iteratee) {\n        return baseSortedIndexBy(array, value, getIteratee(iteratee), true);\n      }\n  \n      /**\n       * This method is like `_.lastIndexOf` except that it performs a binary\n       * search on a sorted `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to search.\n       * @param {*} value The value to search for.\n       * @returns {number} Returns the index of the matched value, else `-1`.\n       * @example\n       *\n       * _.sortedLastIndexOf([1, 1, 2, 2], 2);\n       * // => 3\n       */\n      function sortedLastIndexOf(array, value) {\n        var length = array ? array.length : 0;\n        if (length) {\n          var index = baseSortedIndex(array, value, true) - 1;\n          if (eq(array[index], value)) {\n            return index;\n          }\n        }\n        return -1;\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniq([1, 1, 2]);\n       * // => [1, 2]\n       */\n      function sortedUniq(array) {\n        return (array && array.length)\n          ? baseSortedUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniqBy` except that it's designed and optimized\n       * for sorted arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [iteratee] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n       * // => [1.1, 2.3]\n       */\n      function sortedUniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSortedUniqBy(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * Gets all but the first element of `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.tail([1, 2, 3]);\n       * // => [2, 3]\n       */\n      function tail(array) {\n        return drop(array, 1);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the beginning.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.take([1, 2, 3]);\n       * // => [1]\n       *\n       * _.take([1, 2, 3], 2);\n       * // => [1, 2]\n       *\n       * _.take([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.take([1, 2, 3], 0);\n       * // => []\n       */\n      function take(array, n, guard) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        return baseSlice(array, 0, n < 0 ? 0 : n);\n      }\n  \n      /**\n       * Creates a slice of `array` with `n` elements taken from the end.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {number} [n=1] The number of elements to take.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * _.takeRight([1, 2, 3]);\n       * // => [3]\n       *\n       * _.takeRight([1, 2, 3], 2);\n       * // => [2, 3]\n       *\n       * _.takeRight([1, 2, 3], 5);\n       * // => [1, 2, 3]\n       *\n       * _.takeRight([1, 2, 3], 0);\n       * // => []\n       */\n      function takeRight(array, n, guard) {\n        var length = array ? array.length : 0;\n        if (!length) {\n          return [];\n        }\n        n = (guard || n === undefined) ? 1 : toInteger(n);\n        n = length - n;\n        return baseSlice(array, n < 0 ? 0 : n, length);\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the end. Elements are\n       * taken until `predicate` returns falsey. The predicate is invoked with three\n       * arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': true },\n       *   { 'user': 'fred',    'active': false },\n       *   { 'user': 'pebbles', 'active': false }\n       * ];\n       *\n       * _.takeRightWhile(users, function(o) { return !o.active; });\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n       * // => objects for ['pebbles']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeRightWhile(users, ['active', false]);\n       * // => objects for ['fred', 'pebbles']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeRightWhile(users, 'active');\n       * // => []\n       */\n      function takeRightWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3), false, true)\n          : [];\n      }\n  \n      /**\n       * Creates a slice of `array` with elements taken from the beginning. Elements\n       * are taken until `predicate` returns falsey. The predicate is invoked with\n       * three arguments: (value, index, array).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to query.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the slice of `array`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'active': false },\n       *   { 'user': 'fred',    'active': false},\n       *   { 'user': 'pebbles', 'active': true }\n       * ];\n       *\n       * _.takeWhile(users, function(o) { return !o.active; });\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.takeWhile(users, { 'user': 'barney', 'active': false });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.takeWhile(users, ['active', false]);\n       * // => objects for ['barney', 'fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.takeWhile(users, 'active');\n       * // => []\n       */\n      function takeWhile(array, predicate) {\n        return (array && array.length)\n          ? baseWhile(array, getIteratee(predicate, 3))\n          : [];\n      }\n  \n      /**\n       * Creates an array of unique values, in order, from all given arrays using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.union([2, 1], [4, 2], [1, 2]);\n       * // => [2, 1, 4]\n       */\n      var union = rest(function(arrays) {\n        return baseUniq(baseFlatten(arrays, 1, true));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [2.1, 1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      var unionBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.union` except that it accepts `comparator` which\n       * is invoked to compare elements of `arrays`. The comparator is invoked\n       * with two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of combined values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.unionWith(objects, others, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var unionWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);\n      });\n  \n      /**\n       * Creates a duplicate-free version of an array, using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons, in which only the first occurrence of each element\n       * is kept.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniq([2, 1, 2]);\n       * // => [2, 1]\n       */\n      function uniq(array) {\n        return (array && array.length)\n          ? baseUniq(array)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n       * // => [2.1, 1.2]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 1 }, { 'x': 2 }]\n       */\n      function uniqBy(array, iteratee) {\n        return (array && array.length)\n          ? baseUniq(array, getIteratee(iteratee))\n          : [];\n      }\n  \n      /**\n       * This method is like `_.uniq` except that it accepts `comparator` which\n       * is invoked to compare elements of `array`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new duplicate free array.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n       *\n       * _.uniqWith(objects, _.isEqual);\n       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n       */\n      function uniqWith(array, comparator) {\n        return (array && array.length)\n          ? baseUniq(array, undefined, comparator)\n          : [];\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts an array of grouped\n       * elements and creates an array regrouping the elements to their pre-zip\n       * configuration.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       *\n       * _.unzip(zipped);\n       * // => [['fred', 'barney'], [30, 40], [true, false]]\n       */\n      function unzip(array) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var length = 0;\n        array = arrayFilter(array, function(group) {\n          if (isArrayLikeObject(group)) {\n            length = nativeMax(group.length, length);\n            return true;\n          }\n        });\n        return baseTimes(length, function(index) {\n          return arrayMap(array, baseProperty(index));\n        });\n      }\n  \n      /**\n       * This method is like `_.unzip` except that it accepts `iteratee` to specify\n       * how regrouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array of grouped elements to process.\n       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.\n       * @returns {Array} Returns the new array of regrouped elements.\n       * @example\n       *\n       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n       * // => [[1, 10, 100], [2, 20, 200]]\n       *\n       * _.unzipWith(zipped, _.add);\n       * // => [3, 30, 300]\n       */\n      function unzipWith(array, iteratee) {\n        if (!(array && array.length)) {\n          return [];\n        }\n        var result = unzip(array);\n        if (iteratee == null) {\n          return result;\n        }\n        return arrayMap(result, function(group) {\n          return apply(iteratee, undefined, group);\n        });\n      }\n  \n      /**\n       * Creates an array excluding all given values using\n       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * for equality comparisons.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} array The array to filter.\n       * @param {...*} [values] The values to exclude.\n       * @returns {Array} Returns the new array of filtered values.\n       * @example\n       *\n       * _.without([1, 2, 1, 3], 1, 2);\n       * // => [3]\n       */\n      var without = rest(function(array, values) {\n        return isArrayLikeObject(array)\n          ? baseDifference(array, values)\n          : [];\n      });\n  \n      /**\n       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n       * of the given arrays.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xor([2, 1], [4, 2]);\n       * // => [1, 4]\n       */\n      var xor = rest(function(arrays) {\n        return baseXor(arrayFilter(arrays, isArrayLikeObject));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `iteratee` which is\n       * invoked for each element of each `arrays` to generate the criterion by which\n       * uniqueness is computed. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n       * // => [1.2, 4.3]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n       * // => [{ 'x': 2 }]\n       */\n      var xorBy = rest(function(arrays) {\n        var iteratee = last(arrays);\n        if (isArrayLikeObject(iteratee)) {\n          iteratee = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));\n      });\n  \n      /**\n       * This method is like `_.xor` except that it accepts `comparator` which is\n       * invoked to compare elements of `arrays`. The comparator is invoked with\n       * two arguments: (arrVal, othVal).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to inspect.\n       * @param {Function} [comparator] The comparator invoked per element.\n       * @returns {Array} Returns the new array of values.\n       * @example\n       *\n       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n       *\n       * _.xorWith(objects, others, _.isEqual);\n       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n       */\n      var xorWith = rest(function(arrays) {\n        var comparator = last(arrays);\n        if (isArrayLikeObject(comparator)) {\n          comparator = undefined;\n        }\n        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n      });\n  \n      /**\n       * Creates an array of grouped elements, the first of which contains the first\n       * elements of the given arrays, the second of which contains the second elements\n       * of the given arrays, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n       * // => [['fred', 30, true], ['barney', 40, false]]\n       */\n      var zip = rest(unzip);\n  \n      /**\n       * This method is like `_.fromPairs` except that it accepts two arrays,\n       * one of property names and one of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObject(['a', 'b'], [1, 2]);\n       * // => { 'a': 1, 'b': 2 }\n       */\n      function zipObject(props, values) {\n        return baseZipObject(props || [], values || [], assignValue);\n      }\n  \n      /**\n       * This method is like `_.zipObject` except that it supports property paths.\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {Array} [props=[]] The property names.\n       * @param {Array} [values=[]] The property values.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n       */\n      function zipObjectDeep(props, values) {\n        return baseZipObject(props || [], values || [], baseSet);\n      }\n  \n      /**\n       * This method is like `_.zip` except that it accepts `iteratee` to specify\n       * how grouped values should be combined. The iteratee is invoked with the\n       * elements of each group: (...group).\n       *\n       * @static\n       * @memberOf _\n       * @category Array\n       * @param {...Array} [arrays] The arrays to process.\n       * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n       * @returns {Array} Returns the new array of grouped elements.\n       * @example\n       *\n       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n       *   return a + b + c;\n       * });\n       * // => [111, 222]\n       */\n      var zipWith = rest(function(arrays) {\n        var length = arrays.length,\n            iteratee = length > 1 ? arrays[length - 1] : undefined;\n  \n        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n        return unzipWith(arrays, iteratee);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.\n       * The result of such method chaining must be unwrapped with `_#value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to wrap.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36 },\n       *   { 'user': 'fred',    'age': 40 },\n       *   { 'user': 'pebbles', 'age': 1 }\n       * ];\n       *\n       * var youngest = _\n       *   .chain(users)\n       *   .sortBy('age')\n       *   .map(function(o) {\n       *     return o.user + ' is ' + o.age;\n       *   })\n       *   .head()\n       *   .value();\n       * // => 'pebbles is 1'\n       */\n      function chain(value) {\n        var result = lodash(value);\n        result.__chain__ = true;\n        return result;\n      }\n  \n      /**\n       * This method invokes `interceptor` and returns `value`. The interceptor\n       * is invoked with one argument; (value). The purpose of this method is to\n       * \"tap into\" a method chain in order to modify intermediate results.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * _([1, 2, 3])\n       *  .tap(function(array) {\n       *    // Mutate input array.\n       *    array.pop();\n       *  })\n       *  .reverse()\n       *  .value();\n       * // => [2, 1]\n       */\n      function tap(value, interceptor) {\n        interceptor(value);\n        return value;\n      }\n  \n      /**\n       * This method is like `_.tap` except that it returns the result of `interceptor`.\n       * The purpose of this method is to \"pass thru\" values replacing intermediate\n       * results in a method chain.\n       *\n       * @static\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to provide to `interceptor`.\n       * @param {Function} interceptor The function to invoke.\n       * @returns {*} Returns the result of `interceptor`.\n       * @example\n       *\n       * _('  abc  ')\n       *  .chain()\n       *  .trim()\n       *  .thru(function(value) {\n       *    return [value];\n       *  })\n       *  .value();\n       * // => ['abc']\n       */\n      function thru(value, interceptor) {\n        return interceptor(value);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.at`.\n       *\n       * @name at\n       * @memberOf _\n       * @category Seq\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _(object).at(['a[0].b.c', 'a[1]']).value();\n       * // => [3, 4]\n       *\n       * _(['a', 'b', 'c']).at(0, 2).value();\n       * // => ['a', 'c']\n       */\n      var wrapperAt = rest(function(paths) {\n        paths = baseFlatten(paths, 1);\n        var length = paths.length,\n            start = length ? paths[0] : 0,\n            value = this.__wrapped__,\n            interceptor = function(object) { return baseAt(object, paths); };\n  \n        if (length > 1 || this.__actions__.length ||\n            !(value instanceof LazyWrapper) || !isIndex(start)) {\n          return this.thru(interceptor);\n        }\n        value = value.slice(start, +start + (length ? 1 : 0));\n        value.__actions__.push({\n          'func': thru,\n          'args': [interceptor],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(value, this.__chain__).thru(function(array) {\n          if (length && !array.length) {\n            array.push(undefined);\n          }\n          return array;\n        });\n      });\n  \n      /**\n       * Enables explicit method chaining on the wrapper object.\n       *\n       * @name chain\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // A sequence without explicit chaining.\n       * _(users).head();\n       * // => { 'user': 'barney', 'age': 36 }\n       *\n       * // A sequence with explicit chaining.\n       * _(users)\n       *   .chain()\n       *   .head()\n       *   .pick('user')\n       *   .value();\n       * // => { 'user': 'barney' }\n       */\n      function wrapperChain() {\n        return chain(this);\n      }\n  \n      /**\n       * Executes the chained sequence and returns the wrapped result.\n       *\n       * @name commit\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2];\n       * var wrapped = _(array).push(3);\n       *\n       * console.log(array);\n       * // => [1, 2]\n       *\n       * wrapped = wrapped.commit();\n       * console.log(array);\n       * // => [1, 2, 3]\n       *\n       * wrapped.last();\n       * // => 3\n       *\n       * console.log(array);\n       * // => [1, 2, 3]\n       */\n      function wrapperCommit() {\n        return new LodashWrapper(this.value(), this.__chain__);\n      }\n  \n      /**\n       * This method is the wrapper version of `_.flatMap`.\n       *\n       * @name flatMap\n       * @memberOf _\n       * @category Seq\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _([1, 2]).flatMap(duplicate).value();\n       * // => [1, 1, 2, 2]\n       */\n      function wrapperFlatMap(iteratee) {\n        return this.map(iteratee).flatten();\n      }\n  \n      /**\n       * Gets the next value on a wrapped object following the\n       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n       *\n       * @name next\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the next iterator value.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 1 }\n       *\n       * wrapped.next();\n       * // => { 'done': false, 'value': 2 }\n       *\n       * wrapped.next();\n       * // => { 'done': true, 'value': undefined }\n       */\n      function wrapperNext() {\n        if (this.__values__ === undefined) {\n          this.__values__ = toArray(this.value());\n        }\n        var done = this.__index__ >= this.__values__.length,\n            value = done ? undefined : this.__values__[this.__index__++];\n  \n        return { 'done': done, 'value': value };\n      }\n  \n      /**\n       * Enables the wrapper to be iterable.\n       *\n       * @name Symbol.iterator\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the wrapper object.\n       * @example\n       *\n       * var wrapped = _([1, 2]);\n       *\n       * wrapped[Symbol.iterator]() === wrapped;\n       * // => true\n       *\n       * Array.from(wrapped);\n       * // => [1, 2]\n       */\n      function wrapperToIterator() {\n        return this;\n      }\n  \n      /**\n       * Creates a clone of the chained sequence planting `value` as the wrapped value.\n       *\n       * @name plant\n       * @memberOf _\n       * @category Seq\n       * @param {*} value The value to plant.\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var wrapped = _([1, 2]).map(square);\n       * var other = wrapped.plant([3, 4]);\n       *\n       * other.value();\n       * // => [9, 16]\n       *\n       * wrapped.value();\n       * // => [1, 4]\n       */\n      function wrapperPlant(value) {\n        var result,\n            parent = this;\n  \n        while (parent instanceof baseLodash) {\n          var clone = wrapperClone(parent);\n          clone.__index__ = 0;\n          clone.__values__ = undefined;\n          if (result) {\n            previous.__wrapped__ = clone;\n          } else {\n            result = clone;\n          }\n          var previous = clone;\n          parent = parent.__wrapped__;\n        }\n        previous.__wrapped__ = value;\n        return result;\n      }\n  \n      /**\n       * This method is the wrapper version of `_.reverse`.\n       *\n       * **Note:** This method mutates the wrapped array.\n       *\n       * @name reverse\n       * @memberOf _\n       * @category Seq\n       * @returns {Object} Returns the new `lodash` wrapper instance.\n       * @example\n       *\n       * var array = [1, 2, 3];\n       *\n       * _(array).reverse().value()\n       * // => [3, 2, 1]\n       *\n       * console.log(array);\n       * // => [3, 2, 1]\n       */\n      function wrapperReverse() {\n        var value = this.__wrapped__;\n        if (value instanceof LazyWrapper) {\n          var wrapped = value;\n          if (this.__actions__.length) {\n            wrapped = new LazyWrapper(this);\n          }\n          wrapped = wrapped.reverse();\n          wrapped.__actions__.push({\n            'func': thru,\n            'args': [reverse],\n            'thisArg': undefined\n          });\n          return new LodashWrapper(wrapped, this.__chain__);\n        }\n        return this.thru(reverse);\n      }\n  \n      /**\n       * Executes the chained sequence to extract the unwrapped value.\n       *\n       * @name value\n       * @memberOf _\n       * @alias toJSON, valueOf\n       * @category Seq\n       * @returns {*} Returns the resolved unwrapped value.\n       * @example\n       *\n       * _([1, 2, 3]).value();\n       * // => [1, 2, 3]\n       */\n      function wrapperValue() {\n        return baseWrapperValue(this.__wrapped__, this.__actions__);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the number of times the key was returned by `iteratee`.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.countBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': 1, '6': 2 }\n       *\n       * _.countBy(['one', 'two', 'three'], 'length');\n       * // => { '3': 2, '5': 1 }\n       */\n      var countBy = createAggregator(function(result, value, key) {\n        hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n      });\n  \n      /**\n       * Checks if `predicate` returns truthy for **all** elements of `collection`.\n       * Iteration is stopped once `predicate` returns falsey. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.\n       * @example\n       *\n       * _.every([true, 1, null, 'yes'], Boolean);\n       * // => false\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': false },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.every(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.every(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.every(users, 'active');\n       * // => false\n       */\n      function every(collection, predicate, guard) {\n        var func = isArray(collection) ? arrayEvery : baseEvery;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning an array of all elements\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.filter(users, { 'age': 36, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.filter(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.filter(users, 'active');\n       * // => objects for ['barney']\n       */\n      function filter(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Iterates over elements of `collection`, returning the first element\n       * `predicate` returns truthy for. The predicate is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': true },\n       *   { 'user': 'fred',    'age': 40, 'active': false },\n       *   { 'user': 'pebbles', 'age': 1,  'active': true }\n       * ];\n       *\n       * _.find(users, function(o) { return o.age < 40; });\n       * // => object for 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.find(users, { 'age': 1, 'active': true });\n       * // => object for 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.find(users, ['active', false]);\n       * // => object for 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.find(users, 'active');\n       * // => object for 'barney'\n       */\n      function find(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEach);\n      }\n  \n      /**\n       * This method is like `_.find` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {*} Returns the matched element, else `undefined`.\n       * @example\n       *\n       * _.findLast([1, 2, 3, 4], function(n) {\n       *   return n % 2 == 1;\n       * });\n       * // => 3\n       */\n      function findLast(collection, predicate) {\n        predicate = getIteratee(predicate, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, true);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, baseEachRight);\n      }\n  \n      /**\n       * Creates an array of flattened values by running each element in `collection`\n       * through `iteratee` and concating its result to the other mapped values.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new flattened array.\n       * @example\n       *\n       * function duplicate(n) {\n       *   return [n, n];\n       * }\n       *\n       * _.flatMap([1, 2], duplicate);\n       * // => [1, 1, 2, 2]\n       */\n      function flatMap(collection, iteratee) {\n        return baseFlatten(map(collection, iteratee), 1);\n      }\n  \n      /**\n       * Iterates over elements of `collection` invoking `iteratee` for each element.\n       * The iteratee is invoked with three arguments: (value, index|key, collection).\n       * Iteratee functions may exit iteration early by explicitly returning `false`.\n       *\n       * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n       * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`\n       * for object iteration.\n       *\n       * @static\n       * @memberOf _\n       * @alias each\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _([1, 2]).forEach(function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `1` then `2`\n       *\n       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forEach(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEach(collection, iteratee)\n          : baseEach(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forEach` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @alias eachRight\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array|Object} Returns `collection`.\n       * @example\n       *\n       * _.forEachRight([1, 2], function(value) {\n       *   console.log(value);\n       * });\n       * // => logs `2` then `1`\n       */\n      function forEachRight(collection, iteratee) {\n        return (typeof iteratee == 'function' && isArray(collection))\n          ? arrayEachRight(collection, iteratee)\n          : baseEachRight(collection, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is an array of elements responsible for generating the key.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n       * // => { '4': [4.2], '6': [6.1, 6.3] }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.groupBy(['one', 'two', 'three'], 'length');\n       * // => { '3': ['one', 'two'], '5': ['three'] }\n       */\n      var groupBy = createAggregator(function(result, value, key) {\n        if (hasOwnProperty.call(result, key)) {\n          result[key].push(value);\n        } else {\n          result[key] = [value];\n        }\n      });\n  \n      /**\n       * Checks if `value` is in `collection`. If `collection` is a string it's checked\n       * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * is used for equality comparisons. If `fromIndex` is negative, it's used as\n       * the offset from the end of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object|string} collection The collection to search.\n       * @param {*} value The value to search for.\n       * @param {number} [fromIndex=0] The index to search from.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {boolean} Returns `true` if `value` is found, else `false`.\n       * @example\n       *\n       * _.includes([1, 2, 3], 1);\n       * // => true\n       *\n       * _.includes([1, 2, 3], 1, 2);\n       * // => false\n       *\n       * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n       * // => true\n       *\n       * _.includes('pebbles', 'eb');\n       * // => true\n       */\n      function includes(collection, value, fromIndex, guard) {\n        collection = isArrayLike(collection) ? collection : values(collection);\n        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n  \n        var length = collection.length;\n        if (fromIndex < 0) {\n          fromIndex = nativeMax(length + fromIndex, 0);\n        }\n        return isString(collection)\n          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n      }\n  \n      /**\n       * Invokes the method at `path` of each element in `collection`, returning\n       * an array of the results of each invoked method. Any additional arguments\n       * are provided to each invoked method. If `methodName` is a function it's\n       * invoked for, and `this` bound to, each element in `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Array|Function|string} path The path of the method to invoke or\n       *  the function invoked per iteration.\n       * @param {...*} [args] The arguments to invoke each method with.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n       * // => [[1, 5, 7], [1, 2, 3]]\n       *\n       * _.invokeMap([123, 456], String.prototype.split, '');\n       * // => [['1', '2', '3'], ['4', '5', '6']]\n       */\n      var invokeMap = rest(function(collection, path, args) {\n        var index = -1,\n            isFunc = typeof path == 'function',\n            isProp = isKey(path),\n            result = isArrayLike(collection) ? Array(collection.length) : [];\n  \n        baseEach(collection, function(value) {\n          var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n        });\n        return result;\n      });\n  \n      /**\n       * Creates an object composed of keys generated from the results of running\n       * each element of `collection` through `iteratee`. The corresponding value\n       * of each key is the last element responsible for generating the key. The\n       * iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.\n       * @returns {Object} Returns the composed aggregate object.\n       * @example\n       *\n       * var array = [\n       *   { 'dir': 'left', 'code': 97 },\n       *   { 'dir': 'right', 'code': 100 }\n       * ];\n       *\n       * _.keyBy(array, function(o) {\n       *   return String.fromCharCode(o.code);\n       * });\n       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n       *\n       * _.keyBy(array, 'dir');\n       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n       */\n      var keyBy = createAggregator(function(result, value, key) {\n        result[key] = value;\n      });\n  \n      /**\n       * Creates an array of values by running each element in `collection` through\n       * `iteratee`. The iteratee is invoked with three arguments:\n       * (value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n       *\n       * The guarded methods are:\n       * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,\n       * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,\n       * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,\n       * and `words`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new mapped array.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * _.map([4, 8], square);\n       * // => [16, 64]\n       *\n       * _.map({ 'a': 4, 'b': 8 }, square);\n       * // => [16, 64] (iteration order is not guaranteed)\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.map(users, 'user');\n       * // => ['barney', 'fred']\n       */\n      function map(collection, iteratee) {\n        var func = isArray(collection) ? arrayMap : baseMap;\n        return func(collection, getIteratee(iteratee, 3));\n      }\n  \n      /**\n       * This method is like `_.sortBy` except that it allows specifying the sort\n       * orders of the iteratees to sort by. If `orders` is unspecified, all values\n       * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n       * descending or \"asc\" for ascending sort order of corresponding values.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.\n       * @param {string[]} [orders] The sort orders of `iteratees`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 34 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 36 }\n       * ];\n       *\n       * // Sort by `user` in ascending order and by `age` in descending order.\n       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      function orderBy(collection, iteratees, orders, guard) {\n        if (collection == null) {\n          return [];\n        }\n        if (!isArray(iteratees)) {\n          iteratees = iteratees == null ? [] : [iteratees];\n        }\n        orders = guard ? undefined : orders;\n        if (!isArray(orders)) {\n          orders = orders == null ? [] : [orders];\n        }\n        return baseOrderBy(collection, iteratees, orders);\n      }\n  \n      /**\n       * Creates an array of elements split into two groups, the first of which\n       * contains elements `predicate` returns truthy for, the second of which\n       * contains elements `predicate` returns falsey for. The predicate is\n       * invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of grouped elements.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney',  'age': 36, 'active': false },\n       *   { 'user': 'fred',    'age': 40, 'active': true },\n       *   { 'user': 'pebbles', 'age': 1,  'active': false }\n       * ];\n       *\n       * _.partition(users, function(o) { return o.active; });\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.partition(users, { 'age': 1, 'active': false });\n       * // => objects for [['pebbles'], ['barney', 'fred']]\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.partition(users, ['active', false]);\n       * // => objects for [['barney', 'pebbles'], ['fred']]\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.partition(users, 'active');\n       * // => objects for [['fred'], ['barney', 'pebbles']]\n       */\n      var partition = createAggregator(function(result, value, key) {\n        result[key ? 0 : 1].push(value);\n      }, function() { return [[], []]; });\n  \n      /**\n       * Reduces `collection` to a value which is the accumulated result of running\n       * each element in `collection` through `iteratee`, where each successive\n       * invocation is supplied the return value of the previous. If `accumulator`\n       * is not given the first element of `collection` is used as the initial\n       * value. The iteratee is invoked with four arguments:\n       * (accumulator, value, index|key, collection).\n       *\n       * Many lodash methods are guarded to work as iteratees for methods like\n       * `_.reduce`, `_.reduceRight`, and `_.transform`.\n       *\n       * The guarded methods are:\n       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n       * and `sortBy`\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.reduce([1, 2], function(sum, n) {\n       *   return sum + n;\n       * }, 0);\n       * // => 3\n       *\n       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       *   return result;\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n       */\n      function reduce(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduce : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n      }\n  \n      /**\n       * This method is like `_.reduce` except that it iterates over elements of\n       * `collection` from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The initial value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * var array = [[0, 1], [2, 3], [4, 5]];\n       *\n       * _.reduceRight(array, function(flattened, other) {\n       *   return flattened.concat(other);\n       * }, []);\n       * // => [4, 5, 2, 3, 0, 1]\n       */\n      function reduceRight(collection, iteratee, accumulator) {\n        var func = isArray(collection) ? arrayReduceRight : baseReduce,\n            initAccum = arguments.length < 3;\n  \n        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n      }\n  \n      /**\n       * The opposite of `_.filter`; this method returns the elements of `collection`\n       * that `predicate` does **not** return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the new filtered array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': false },\n       *   { 'user': 'fred',   'age': 40, 'active': true }\n       * ];\n       *\n       * _.reject(users, function(o) { return !o.active; });\n       * // => objects for ['fred']\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.reject(users, { 'age': 40, 'active': true });\n       * // => objects for ['barney']\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.reject(users, ['active', false]);\n       * // => objects for ['fred']\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.reject(users, 'active');\n       * // => objects for ['barney']\n       */\n      function reject(collection, predicate) {\n        var func = isArray(collection) ? arrayFilter : baseFilter;\n        predicate = getIteratee(predicate, 3);\n        return func(collection, function(value, index, collection) {\n          return !predicate(value, index, collection);\n        });\n      }\n  \n      /**\n       * Gets a random element from `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @returns {*} Returns the random element.\n       * @example\n       *\n       * _.sample([1, 2, 3, 4]);\n       * // => 2\n       */\n      function sample(collection) {\n        var array = isArrayLike(collection) ? collection : values(collection),\n            length = array.length;\n  \n        return length > 0 ? array[baseRandom(0, length - 1)] : undefined;\n      }\n  \n      /**\n       * Gets `n` random elements at unique keys from `collection` up to the\n       * size of `collection`.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to sample.\n       * @param {number} [n=0] The number of elements to sample.\n       * @returns {Array} Returns the random elements.\n       * @example\n       *\n       * _.sampleSize([1, 2, 3], 2);\n       * // => [3, 1]\n       *\n       * _.sampleSize([1, 2, 3], 4);\n       * // => [2, 3, 1]\n       */\n      function sampleSize(collection, n) {\n        var index = -1,\n            result = toArray(collection),\n            length = result.length,\n            lastIndex = length - 1;\n  \n        n = baseClamp(toInteger(n), 0, length);\n        while (++index < n) {\n          var rand = baseRandom(index, lastIndex),\n              value = result[rand];\n  \n          result[rand] = result[index];\n          result[index] = value;\n        }\n        result.length = n;\n        return result;\n      }\n  \n      /**\n       * Creates an array of shuffled values, using a version of the\n       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to shuffle.\n       * @returns {Array} Returns the new shuffled array.\n       * @example\n       *\n       * _.shuffle([1, 2, 3, 4]);\n       * // => [4, 1, 3, 2]\n       */\n      function shuffle(collection) {\n        return sampleSize(collection, MAX_ARRAY_LENGTH);\n      }\n  \n      /**\n       * Gets the size of `collection` by returning its length for array-like\n       * values or the number of own enumerable properties for objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to inspect.\n       * @returns {number} Returns the collection size.\n       * @example\n       *\n       * _.size([1, 2, 3]);\n       * // => 3\n       *\n       * _.size({ 'a': 1, 'b': 2 });\n       * // => 2\n       *\n       * _.size('pebbles');\n       * // => 7\n       */\n      function size(collection) {\n        if (collection == null) {\n          return 0;\n        }\n        if (isArrayLike(collection)) {\n          var result = collection.length;\n          return (result && isString(collection)) ? stringSize(collection) : result;\n        }\n        return keys(collection).length;\n      }\n  \n      /**\n       * Checks if `predicate` returns truthy for **any** element of `collection`.\n       * Iteration is stopped once `predicate` returns truthy. The predicate is\n       * invoked with three arguments: (value, index|key, collection).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.\n       * @example\n       *\n       * _.some([null, 0, 'yes', false], Boolean);\n       * // => true\n       *\n       * var users = [\n       *   { 'user': 'barney', 'active': true },\n       *   { 'user': 'fred',   'active': false }\n       * ];\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.some(users, { 'user': 'barney', 'active': false });\n       * // => false\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.some(users, ['active', false]);\n       * // => true\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.some(users, 'active');\n       * // => true\n       */\n      function some(collection, predicate, guard) {\n        var func = isArray(collection) ? arraySome : baseSome;\n        if (guard && isIterateeCall(collection, predicate, guard)) {\n          predicate = undefined;\n        }\n        return func(collection, getIteratee(predicate, 3));\n      }\n  \n      /**\n       * Creates an array of elements, sorted in ascending order by the results of\n       * running each element in a collection through each iteratee. This method\n       * performs a stable sort, that is, it preserves the original sort order of\n       * equal elements. The iteratees are invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Collection\n       * @param {Array|Object} collection The collection to iterate over.\n       * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]\n       *  The iteratees to sort by, specified individually or in arrays.\n       * @returns {Array} Returns the new sorted array.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'fred',   'age': 48 },\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 42 },\n       *   { 'user': 'barney', 'age': 34 }\n       * ];\n       *\n       * _.sortBy(users, function(o) { return o.user; });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       *\n       * _.sortBy(users, ['user', 'age']);\n       * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n       *\n       * _.sortBy(users, 'user', function(o) {\n       *   return Math.floor(o.age / 10);\n       * });\n       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n       */\n      var sortBy = rest(function(collection, iteratees) {\n        if (collection == null) {\n          return [];\n        }\n        var length = iteratees.length;\n        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n          iteratees = [];\n        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n          iteratees.length = 1;\n        }\n        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n      });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Gets the timestamp of the number of milliseconds that have elapsed since\n       * the Unix epoch (1 January 1970 00:00:00 UTC).\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Date\n       * @returns {number} Returns the timestamp.\n       * @example\n       *\n       * _.defer(function(stamp) {\n       *   console.log(_.now() - stamp);\n       * }, _.now());\n       * // => logs the number of milliseconds it took for the deferred function to be invoked\n       */\n      var now = Date.now;\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The opposite of `_.before`; this method creates a function that invokes\n       * `func` once it's called `n` or more times.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls before `func` is invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var saves = ['profile', 'settings'];\n       *\n       * var done = _.after(saves.length, function() {\n       *   console.log('done saving!');\n       * });\n       *\n       * _.forEach(saves, function(type) {\n       *   asyncSave({ 'type': type, 'complete': done });\n       * });\n       * // => logs 'done saving!' after the two async saves have completed\n       */\n      function after(n, func) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n < 1) {\n            return func.apply(this, arguments);\n          }\n        };\n      }\n  \n      /**\n       * Creates a function that accepts up to `n` arguments, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @param {number} [n=func.length] The arity cap.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n       * // => [6, 8, 10]\n       */\n      function ary(func, n, guard) {\n        n = guard ? undefined : n;\n        n = (func && n == null) ? func.length : n;\n        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n      }\n  \n      /**\n       * Creates a function that invokes `func`, with the `this` binding and arguments\n       * of the created function, while it's called less than `n` times. Subsequent\n       * calls to the created function return the result of the last `func` invocation.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {number} n The number of calls at which `func` is no longer invoked.\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * jQuery(element).on('click', _.before(5, addContactToList));\n       * // => allows adding up to 4 contacts to the list\n       */\n      function before(n, func) {\n        var result;\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        n = toInteger(n);\n        return function() {\n          if (--n > 0) {\n            result = func.apply(this, arguments);\n          }\n          if (n <= 1) {\n            func = undefined;\n          }\n          return result;\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of `thisArg`\n       * and prepends any additional `_.bind` arguments to those provided to the\n       * bound function.\n       *\n       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** Unlike native `Function#bind` this method doesn't set the \"length\"\n       * property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to bind.\n       * @param {*} thisArg The `this` binding of `func`.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var greet = function(greeting, punctuation) {\n       *   return greeting + ' ' + this.user + punctuation;\n       * };\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * var bound = _.bind(greet, object, 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bind(greet, object, _, '!');\n       * bound('hi');\n       * // => 'hi fred!'\n       */\n      var bind = rest(function(func, thisArg, partials) {\n        var bitmask = BIND_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bind.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(func, bitmask, thisArg, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes the method at `object[key]` and prepends\n       * any additional `_.bindKey` arguments to those provided to the bound function.\n       *\n       * This method differs from `_.bind` by allowing bound functions to reference\n       * methods that may be redefined or don't yet exist.\n       * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n       * for more details.\n       *\n       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Object} object The object to invoke the method on.\n       * @param {string} key The key of the method.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new bound function.\n       * @example\n       *\n       * var object = {\n       *   'user': 'fred',\n       *   'greet': function(greeting, punctuation) {\n       *     return greeting + ' ' + this.user + punctuation;\n       *   }\n       * };\n       *\n       * var bound = _.bindKey(object, 'greet', 'hi');\n       * bound('!');\n       * // => 'hi fred!'\n       *\n       * object.greet = function(greeting, punctuation) {\n       *   return greeting + 'ya ' + this.user + punctuation;\n       * };\n       *\n       * bound('!');\n       * // => 'hiya fred!'\n       *\n       * // Bound with placeholders.\n       * var bound = _.bindKey(object, 'greet', _, '!');\n       * bound('hi');\n       * // => 'hiya fred!'\n       */\n      var bindKey = rest(function(object, key, partials) {\n        var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n        if (partials.length) {\n          var placeholder = lodash.placeholder || bindKey.placeholder,\n              holders = replaceHolders(partials, placeholder);\n  \n          bitmask |= PARTIAL_FLAG;\n        }\n        return createWrapper(key, bitmask, object, partials, holders);\n      });\n  \n      /**\n       * Creates a function that accepts arguments of `func` and either invokes\n       * `func` returning its result, if at least `arity` number of arguments have\n       * been provided, or returns a function that accepts the remaining `func`\n       * arguments, and so on. The arity of `func` may be specified if `func.length`\n       * is not sufficient.\n       *\n       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n       * may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curry(abc);\n       *\n       * curried(1)(2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2)(3);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(1)(_, 3)(2);\n       * // => [1, 2, 3]\n       */\n      function curry(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curry.placeholder;\n        return result;\n      }\n  \n      /**\n       * This method is like `_.curry` except that arguments are applied to `func`\n       * in the manner of `_.partialRight` instead of `_.partial`.\n       *\n       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for provided arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of curried functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to curry.\n       * @param {number} [arity=func.length] The arity of `func`.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the new curried function.\n       * @example\n       *\n       * var abc = function(a, b, c) {\n       *   return [a, b, c];\n       * };\n       *\n       * var curried = _.curryRight(abc);\n       *\n       * curried(3)(2)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(2, 3)(1);\n       * // => [1, 2, 3]\n       *\n       * curried(1, 2, 3);\n       * // => [1, 2, 3]\n       *\n       * // Curried with placeholders.\n       * curried(3)(1, _)(2);\n       * // => [1, 2, 3]\n       */\n      function curryRight(func, arity, guard) {\n        arity = guard ? undefined : arity;\n        var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = lodash.placeholder || curryRight.placeholder;\n        return result;\n      }\n  \n      /**\n       * Creates a debounced function that delays invoking `func` until after `wait`\n       * milliseconds have elapsed since the last time the debounced function was\n       * invoked. The debounced function comes with a `cancel` method to cancel\n       * delayed `func` invocations and a `flush` method to immediately invoke them.\n       * Provide an options object to indicate whether `func` should be invoked on\n       * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n       * with the last arguments provided to the debounced function. Subsequent calls\n       * to the debounced function return the result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the debounced function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.debounce` and `_.throttle`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to debounce.\n       * @param {number} [wait=0] The number of milliseconds to delay.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=false] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n       *  delayed before it's invoked.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new debounced function.\n       * @example\n       *\n       * // Avoid costly calculations while the window size is in flux.\n       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n       *\n       * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n       * jQuery(element).on('click', _.debounce(sendMail, 300, {\n       *   'leading': true,\n       *   'trailing': false\n       * }));\n       *\n       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n       * var source = new EventSource('/stream');\n       * jQuery(source).on('message', debounced);\n       *\n       * // Cancel the trailing debounced invocation.\n       * jQuery(window).on('popstate', debounced.cancel);\n       */\n      function debounce(func, wait, options) {\n        var args,\n            maxTimeoutId,\n            result,\n            stamp,\n            thisArg,\n            timeoutId,\n            trailingCall,\n            lastCalled = 0,\n            leading = false,\n            maxWait = false,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        wait = toNumber(wait) || 0;\n        if (isObject(options)) {\n          leading = !!options.leading;\n          maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n  \n        function cancel() {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          lastCalled = 0;\n          args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;\n        }\n  \n        function complete(isCalled, id) {\n          if (id) {\n            clearTimeout(id);\n          }\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = undefined;\n            }\n          }\n        }\n  \n        function delayed() {\n          var remaining = wait - (now() - stamp);\n          if (remaining <= 0 || remaining > wait) {\n            complete(trailingCall, maxTimeoutId);\n          } else {\n            timeoutId = setTimeout(delayed, remaining);\n          }\n        }\n  \n        function flush() {\n          if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {\n            result = func.apply(thisArg, args);\n          }\n          cancel();\n          return result;\n        }\n  \n        function maxDelayed() {\n          complete(trailing, timeoutId);\n        }\n  \n        function debounced() {\n          args = arguments;\n          stamp = now();\n          thisArg = this;\n          trailingCall = trailing && (timeoutId || !leading);\n  \n          if (maxWait === false) {\n            var leadingCall = leading && !timeoutId;\n          } else {\n            if (!lastCalled && !maxTimeoutId && !leading) {\n              lastCalled = stamp;\n            }\n            var remaining = maxWait - (stamp - lastCalled);\n  \n            var isCalled = (remaining <= 0 || remaining > maxWait) &&\n              (leading || maxTimeoutId);\n  \n            if (isCalled) {\n              if (maxTimeoutId) {\n                maxTimeoutId = clearTimeout(maxTimeoutId);\n              }\n              lastCalled = stamp;\n              result = func.apply(thisArg, args);\n            }\n            else if (!maxTimeoutId) {\n              maxTimeoutId = setTimeout(maxDelayed, remaining);\n            }\n          }\n          if (isCalled && timeoutId) {\n            timeoutId = clearTimeout(timeoutId);\n          }\n          else if (!timeoutId && wait !== maxWait) {\n            timeoutId = setTimeout(delayed, wait);\n          }\n          if (leadingCall) {\n            isCalled = true;\n            result = func.apply(thisArg, args);\n          }\n          if (isCalled && !timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n          return result;\n        }\n        debounced.cancel = cancel;\n        debounced.flush = flush;\n        return debounced;\n      }\n  \n      /**\n       * Defers invoking the `func` until the current call stack has cleared. Any\n       * additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to defer.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.defer(function(text) {\n       *   console.log(text);\n       * }, 'deferred');\n       * // => logs 'deferred' after one or more milliseconds\n       */\n      var defer = rest(function(func, args) {\n        return baseDelay(func, 1, args);\n      });\n  \n      /**\n       * Invokes `func` after `wait` milliseconds. Any additional arguments are\n       * provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to delay.\n       * @param {number} wait The number of milliseconds to delay invocation.\n       * @param {...*} [args] The arguments to invoke `func` with.\n       * @returns {number} Returns the timer id.\n       * @example\n       *\n       * _.delay(function(text) {\n       *   console.log(text);\n       * }, 1000, 'later');\n       * // => logs 'later' after one second\n       */\n      var delay = rest(function(func, wait, args) {\n        return baseDelay(func, toNumber(wait) || 0, args);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments reversed.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to flip arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var flipped = _.flip(function() {\n       *   return _.toArray(arguments);\n       * });\n       *\n       * flipped('a', 'b', 'c', 'd');\n       * // => ['d', 'c', 'b', 'a']\n       */\n      function flip(func) {\n        return createWrapper(func, FLIP_FLAG);\n      }\n  \n      /**\n       * Creates a function that memoizes the result of `func`. If `resolver` is\n       * provided it determines the cache key for storing the result based on the\n       * arguments provided to the memoized function. By default, the first argument\n       * provided to the memoized function is used as the map cache key. The `func`\n       * is invoked with the `this` binding of the memoized function.\n       *\n       * **Note:** The cache is exposed as the `cache` property on the memoized\n       * function. Its creation may be customized by replacing the `_.memoize.Cache`\n       * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n       * method interface of `delete`, `get`, `has`, and `set`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to have its output memoized.\n       * @param {Function} [resolver] The function to resolve the cache key.\n       * @returns {Function} Returns the new memoizing function.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2 };\n       * var other = { 'c': 3, 'd': 4 };\n       *\n       * var values = _.memoize(_.values);\n       * values(object);\n       * // => [1, 2]\n       *\n       * values(other);\n       * // => [3, 4]\n       *\n       * object.a = 2;\n       * values(object);\n       * // => [1, 2]\n       *\n       * // Modify the result cache.\n       * values.cache.set(object, ['a', 'b']);\n       * values(object);\n       * // => ['a', 'b']\n       *\n       * // Replace `_.memoize.Cache`.\n       * _.memoize.Cache = WeakMap;\n       */\n      function memoize(func, resolver) {\n        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        var memoized = function() {\n          var args = arguments,\n              key = resolver ? resolver.apply(this, args) : args[0],\n              cache = memoized.cache;\n  \n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n          var result = func.apply(this, args);\n          memoized.cache = cache.set(key, result);\n          return result;\n        };\n        memoized.cache = new memoize.Cache;\n        return memoized;\n      }\n  \n      /**\n       * Creates a function that negates the result of the predicate `func`. The\n       * `func` predicate is invoked with the `this` binding and arguments of the\n       * created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} predicate The predicate to negate.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function isEven(n) {\n       *   return n % 2 == 0;\n       * }\n       *\n       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n       * // => [1, 3, 5]\n       */\n      function negate(predicate) {\n        if (typeof predicate != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return function() {\n          return !predicate.apply(this, arguments);\n        };\n      }\n  \n      /**\n       * Creates a function that is restricted to invoking `func` once. Repeat calls\n       * to the function return the value of the first invocation. The `func` is\n       * invoked with the `this` binding and arguments of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to restrict.\n       * @returns {Function} Returns the new restricted function.\n       * @example\n       *\n       * var initialize = _.once(createApplication);\n       * initialize();\n       * initialize();\n       * // `initialize` invokes `createApplication` once\n       */\n      function once(func) {\n        return before(2, func);\n      }\n  \n      /**\n       * Creates a function that invokes `func` with arguments transformed by\n       * corresponding `transforms`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to wrap.\n       * @param {...(Function|Function[])} [transforms] The functions to transform\n       * arguments, specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function doubled(n) {\n       *   return n * 2;\n       * }\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var func = _.overArgs(function(x, y) {\n       *   return [x, y];\n       * }, square, doubled);\n       *\n       * func(9, 3);\n       * // => [81, 6]\n       *\n       * func(10, 5);\n       * // => [100, 10]\n       */\n      var overArgs = rest(function(func, transforms) {\n        transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());\n  \n        var funcsLength = transforms.length;\n        return rest(function(args) {\n          var index = -1,\n              length = nativeMin(args.length, funcsLength);\n  \n          while (++index < length) {\n            args[index] = transforms[index].call(this, args[index]);\n          }\n          return apply(func, this, args);\n        });\n      });\n  \n      /**\n       * Creates a function that invokes `func` with `partial` arguments prepended\n       * to those provided to the new function. This method is like `_.bind` except\n       * it does **not** alter the `this` binding.\n       *\n       * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var sayHelloTo = _.partial(greet, 'hello');\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       *\n       * // Partially applied with placeholders.\n       * var greetFred = _.partial(greet, _, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       */\n      var partial = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partial.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * This method is like `_.partial` except that partially applied arguments\n       * are appended to those provided to the new function.\n       *\n       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n       * builds, may be used as a placeholder for partially applied arguments.\n       *\n       * **Note:** This method doesn't set the \"length\" property of partially\n       * applied functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to partially apply arguments to.\n       * @param {...*} [partials] The arguments to be partially applied.\n       * @returns {Function} Returns the new partially applied function.\n       * @example\n       *\n       * var greet = function(greeting, name) {\n       *   return greeting + ' ' + name;\n       * };\n       *\n       * var greetFred = _.partialRight(greet, 'fred');\n       * greetFred('hi');\n       * // => 'hi fred'\n       *\n       * // Partially applied with placeholders.\n       * var sayHelloTo = _.partialRight(greet, 'hello', _);\n       * sayHelloTo('fred');\n       * // => 'hello fred'\n       */\n      var partialRight = rest(function(func, partials) {\n        var placeholder = lodash.placeholder || partialRight.placeholder,\n            holders = replaceHolders(partials, placeholder);\n  \n        return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n      });\n  \n      /**\n       * Creates a function that invokes `func` with arguments arranged according\n       * to the specified indexes where the argument value at the first index is\n       * provided as the first argument, the argument value at the second index is\n       * provided as the second argument, and so on.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to rearrange arguments for.\n       * @param {...(number|number[])} indexes The arranged argument indexes,\n       *  specified individually or in arrays.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var rearged = _.rearg(function(a, b, c) {\n       *   return [a, b, c];\n       * }, 2, 0, 1);\n       *\n       * rearged('b', 'c', 'a')\n       * // => ['a', 'b', 'c']\n       */\n      var rearg = rest(function(func, indexes) {\n        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));\n      });\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the\n       * created function and arguments from `start` and beyond provided as an array.\n       *\n       * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to apply a rest parameter to.\n       * @param {number} [start=func.length-1] The start position of the rest parameter.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.rest(function(what, names) {\n       *   return what + ' ' + _.initial(names).join(', ') +\n       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n       * });\n       *\n       * say('hello', 'fred', 'barney', 'pebbles');\n       * // => 'hello fred, barney, & pebbles'\n       */\n      function rest(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n        return function() {\n          var args = arguments,\n              index = -1,\n              length = nativeMax(args.length - start, 0),\n              array = Array(length);\n  \n          while (++index < length) {\n            array[index] = args[start + index];\n          }\n          switch (start) {\n            case 0: return func.call(this, array);\n            case 1: return func.call(this, args[0], array);\n            case 2: return func.call(this, args[0], args[1], array);\n          }\n          var otherArgs = Array(start + 1);\n          index = -1;\n          while (++index < start) {\n            otherArgs[index] = args[index];\n          }\n          otherArgs[start] = array;\n          return apply(func, this, otherArgs);\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the `this` binding of the created\n       * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n       *\n       * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to spread arguments over.\n       * @param {number} [start=0] The start position of the spread.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var say = _.spread(function(who, what) {\n       *   return who + ' says ' + what;\n       * });\n       *\n       * say(['fred', 'hello']);\n       * // => 'fred says hello'\n       *\n       * var numbers = Promise.all([\n       *   Promise.resolve(40),\n       *   Promise.resolve(36)\n       * ]);\n       *\n       * numbers.then(_.spread(function(x, y) {\n       *   return x + y;\n       * }));\n       * // => a Promise of 76\n       */\n      function spread(func, start) {\n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n        return rest(function(args) {\n          var array = args[start],\n              otherArgs = args.slice(0, start);\n  \n          if (array) {\n            arrayPush(otherArgs, array);\n          }\n          return apply(func, this, otherArgs);\n        });\n      }\n  \n      /**\n       * Creates a throttled function that only invokes `func` at most once per\n       * every `wait` milliseconds. The throttled function comes with a `cancel`\n       * method to cancel delayed `func` invocations and a `flush` method to\n       * immediately invoke them. Provide an options object to indicate whether\n       * `func` should be invoked on the leading and/or trailing edge of the `wait`\n       * timeout. The `func` is invoked with the last arguments provided to the\n       * throttled function. Subsequent calls to the throttled function return the\n       * result of the last `func` invocation.\n       *\n       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n       * on the trailing edge of the timeout only if the throttled function is\n       * invoked more than once during the `wait` timeout.\n       *\n       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n       * for details over the differences between `_.throttle` and `_.debounce`.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to throttle.\n       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.leading=true] Specify invoking on the leading\n       *  edge of the timeout.\n       * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n       *  edge of the timeout.\n       * @returns {Function} Returns the new throttled function.\n       * @example\n       *\n       * // Avoid excessively updating the position while scrolling.\n       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n       *\n       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n       * jQuery(element).on('click', throttled);\n       *\n       * // Cancel the trailing throttled invocation.\n       * jQuery(window).on('popstate', throttled.cancel);\n       */\n      function throttle(func, wait, options) {\n        var leading = true,\n            trailing = true;\n  \n        if (typeof func != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        if (isObject(options)) {\n          leading = 'leading' in options ? !!options.leading : leading;\n          trailing = 'trailing' in options ? !!options.trailing : trailing;\n        }\n        return debounce(func, wait, {\n          'leading': leading,\n          'maxWait': wait,\n          'trailing': trailing\n        });\n      }\n  \n      /**\n       * Creates a function that accepts up to one argument, ignoring any\n       * additional arguments.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {Function} func The function to cap arguments for.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * _.map(['6', '8', '10'], _.unary(parseInt));\n       * // => [6, 8, 10]\n       */\n      function unary(func) {\n        return ary(func, 1);\n      }\n  \n      /**\n       * Creates a function that provides `value` to the wrapper function as its\n       * first argument. Any additional arguments provided to the function are\n       * appended to those provided to the wrapper function. The wrapper is invoked\n       * with the `this` binding of the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Function\n       * @param {*} value The value to wrap.\n       * @param {Function} [wrapper=identity] The wrapper function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var p = _.wrap(_.escape, function(func, text) {\n       *   return '<p>' + func(text) + '</p>';\n       * });\n       *\n       * p('fred, barney, & pebbles');\n       * // => '<p>fred, barney, &amp; pebbles</p>'\n       */\n      function wrap(value, wrapper) {\n        wrapper = wrapper == null ? identity : wrapper;\n        return partial(wrapper, value);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Casts `value` as an array if it's not one.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to inspect.\n       * @returns {Array} Returns the cast array.\n       * @example\n       *\n       * _.castArray(1);\n       * // => [1]\n       *\n       * _.castArray({ 'a': 1 });\n       * // => [{ 'a': 1 }]\n       *\n       * _.castArray('abc');\n       * // => ['abc']\n       *\n       * _.castArray(null);\n       * // => [null]\n       *\n       * _.castArray(undefined);\n       * // => [undefined]\n       *\n       * _.castArray();\n       * // => []\n       *\n       * var array = [1, 2, 3];\n       * console.log(_.castArray(array) === array);\n       * // => true\n       */\n      function castArray() {\n        if (!arguments.length) {\n          return [];\n        }\n        var value = arguments[0];\n        return isArray(value) ? value : [value];\n      }\n  \n      /**\n       * Creates a shallow clone of `value`.\n       *\n       * **Note:** This method is loosely based on the\n       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n       * and supports cloning arrays, array buffers, booleans, date objects, maps,\n       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n       * arrays. The own enumerable properties of `arguments` objects are cloned\n       * as plain objects. An empty object is returned for uncloneable values such\n       * as error objects, functions, DOM nodes, and WeakMaps.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var shallow = _.clone(objects);\n       * console.log(shallow[0] === objects[0]);\n       * // => true\n       */\n      function clone(value) {\n        return baseClone(value);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it accepts `customizer` which\n       * is invoked to produce the cloned value. If `customizer` returns `undefined`\n       * cloning is handled by the method instead. The `customizer` is invoked with\n       * up to four arguments; (value [, index|key, object, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(false);\n       *   }\n       * }\n       *\n       * var el = _.cloneWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 0\n       */\n      function cloneWith(value, customizer) {\n        return baseClone(value, false, customizer);\n      }\n  \n      /**\n       * This method is like `_.clone` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * var objects = [{ 'a': 1 }, { 'b': 2 }];\n       *\n       * var deep = _.cloneDeep(objects);\n       * console.log(deep[0] === objects[0]);\n       * // => false\n       */\n      function cloneDeep(value) {\n        return baseClone(value, true);\n      }\n  \n      /**\n       * This method is like `_.cloneWith` except that it recursively clones `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to recursively clone.\n       * @param {Function} [customizer] The function to customize cloning.\n       * @returns {*} Returns the deep cloned value.\n       * @example\n       *\n       * function customizer(value) {\n       *   if (_.isElement(value)) {\n       *     return value.cloneNode(true);\n       *   }\n       * }\n       *\n       * var el = _.cloneDeepWith(document.body, customizer);\n       *\n       * console.log(el === document.body);\n       * // => false\n       * console.log(el.nodeName);\n       * // => 'BODY'\n       * console.log(el.childNodes.length);\n       * // => 20\n       */\n      function cloneDeepWith(value, customizer) {\n        return baseClone(value, true, customizer);\n      }\n  \n      /**\n       * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n       * comparison between two values to determine if they are equivalent.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.eq(object, object);\n       * // => true\n       *\n       * _.eq(object, other);\n       * // => false\n       *\n       * _.eq('a', 'a');\n       * // => true\n       *\n       * _.eq('a', Object('a'));\n       * // => false\n       *\n       * _.eq(NaN, NaN);\n       * // => true\n       */\n      function eq(value, other) {\n        return value === other || (value !== value && other !== other);\n      }\n  \n      /**\n       * Checks if `value` is greater than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n       * @example\n       *\n       * _.gt(3, 1);\n       * // => true\n       *\n       * _.gt(3, 3);\n       * // => false\n       *\n       * _.gt(1, 3);\n       * // => false\n       */\n      function gt(value, other) {\n        return value > other;\n      }\n  \n      /**\n       * Checks if `value` is greater than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.gte(3, 1);\n       * // => true\n       *\n       * _.gte(3, 3);\n       * // => true\n       *\n       * _.gte(1, 3);\n       * // => false\n       */\n      function gte(value, other) {\n        return value >= other;\n      }\n  \n      /**\n       * Checks if `value` is likely an `arguments` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArguments(function() { return arguments; }());\n       * // => true\n       *\n       * _.isArguments([1, 2, 3]);\n       * // => false\n       */\n      function isArguments(value) {\n        // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n          (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as an `Array` object.\n       *\n       * @static\n       * @memberOf _\n       * @type {Function}\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArray([1, 2, 3]);\n       * // => true\n       *\n       * _.isArray(document.body.children);\n       * // => false\n       *\n       * _.isArray('abc');\n       * // => false\n       *\n       * _.isArray(_.noop);\n       * // => false\n       */\n      var isArray = Array.isArray;\n  \n      /**\n       * Checks if `value` is classified as an `ArrayBuffer` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isArrayBuffer(new ArrayBuffer(2));\n       * // => true\n       *\n       * _.isArrayBuffer(new Array(2));\n       * // => false\n       */\n      function isArrayBuffer(value) {\n        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;\n      }\n  \n      /**\n       * Checks if `value` is array-like. A value is considered array-like if it's\n       * not a function and has a `value.length` that's an integer greater than or\n       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n       * @example\n       *\n       * _.isArrayLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLike(document.body.children);\n       * // => true\n       *\n       * _.isArrayLike('abc');\n       * // => true\n       *\n       * _.isArrayLike(_.noop);\n       * // => false\n       */\n      function isArrayLike(value) {\n        return value != null &&\n          !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));\n      }\n  \n      /**\n       * This method is like `_.isArrayLike` except that it also checks if `value`\n       * is an object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.\n       * @example\n       *\n       * _.isArrayLikeObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isArrayLikeObject(document.body.children);\n       * // => true\n       *\n       * _.isArrayLikeObject('abc');\n       * // => false\n       *\n       * _.isArrayLikeObject(_.noop);\n       * // => false\n       */\n      function isArrayLikeObject(value) {\n        return isObjectLike(value) && isArrayLike(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a boolean primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isBoolean(false);\n       * // => true\n       *\n       * _.isBoolean(null);\n       * // => false\n       */\n      function isBoolean(value) {\n        return value === true || value === false ||\n          (isObjectLike(value) && objectToString.call(value) == boolTag);\n      }\n  \n      /**\n       * Checks if `value` is a buffer.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n       * @example\n       *\n       * _.isBuffer(new Buffer(2));\n       * // => true\n       *\n       * _.isBuffer(new Uint8Array(2));\n       * // => false\n       */\n      var isBuffer = !Buffer ? constant(false) : function(value) {\n        return value instanceof Buffer;\n      };\n  \n      /**\n       * Checks if `value` is classified as a `Date` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isDate(new Date);\n       * // => true\n       *\n       * _.isDate('Mon April 23 2012');\n       * // => false\n       */\n      function isDate(value) {\n        return isObjectLike(value) && objectToString.call(value) == dateTag;\n      }\n  \n      /**\n       * Checks if `value` is likely a DOM element.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n       * @example\n       *\n       * _.isElement(document.body);\n       * // => true\n       *\n       * _.isElement('<body>');\n       * // => false\n       */\n      function isElement(value) {\n        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n      }\n  \n      /**\n       * Checks if `value` is empty. A value is considered empty unless it's an\n       * `arguments` object, array, string, or jQuery-like collection with a length\n       * greater than `0` or an object with own enumerable properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Array|Object|string} value The value to inspect.\n       * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n       * @example\n       *\n       * _.isEmpty(null);\n       * // => true\n       *\n       * _.isEmpty(true);\n       * // => true\n       *\n       * _.isEmpty(1);\n       * // => true\n       *\n       * _.isEmpty([1, 2, 3]);\n       * // => false\n       *\n       * _.isEmpty({ 'a': 1 });\n       * // => false\n       */\n      function isEmpty(value) {\n        if (isArrayLike(value) &&\n            (isArray(value) || isString(value) ||\n              isFunction(value.splice) || isArguments(value))) {\n          return !value.length;\n        }\n        for (var key in value) {\n          if (hasOwnProperty.call(value, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      /**\n       * Performs a deep comparison between two values to determine if they are\n       * equivalent.\n       *\n       * **Note:** This method supports comparing arrays, array buffers, booleans,\n       * date objects, error objects, maps, numbers, `Object` objects, regexes,\n       * sets, strings, symbols, and typed arrays. `Object` objects are compared\n       * by their own, not inherited, enumerable properties. Functions and DOM\n       * nodes are **not** supported.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var other = { 'user': 'fred' };\n       *\n       * _.isEqual(object, other);\n       * // => true\n       *\n       * object === other;\n       * // => false\n       */\n      function isEqual(value, other) {\n        return baseIsEqual(value, other);\n      }\n  \n      /**\n       * This method is like `_.isEqual` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with up to\n       * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, othValue) {\n       *   if (isGreeting(objValue) && isGreeting(othValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var array = ['hello', 'goodbye'];\n       * var other = ['hi', 'goodbye'];\n       *\n       * _.isEqualWith(array, other, customizer);\n       * // => true\n       */\n      function isEqualWith(value, other, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        var result = customizer ? customizer(value, other) : undefined;\n        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n      }\n  \n      /**\n       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n       * `SyntaxError`, `TypeError`, or `URIError` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n       * @example\n       *\n       * _.isError(new Error);\n       * // => true\n       *\n       * _.isError(Error);\n       * // => false\n       */\n      function isError(value) {\n        if (!isObjectLike(value)) {\n          return false;\n        }\n        var Ctor = value.constructor;\n        return (objectToString.call(value) == errorTag) ||\n          (typeof Ctor == 'function' && objectToString.call(Ctor.prototype) == errorTag);\n      }\n  \n      /**\n       * Checks if `value` is a finite primitive number.\n       *\n       * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n       * @example\n       *\n       * _.isFinite(3);\n       * // => true\n       *\n       * _.isFinite(Number.MAX_VALUE);\n       * // => true\n       *\n       * _.isFinite(3.14);\n       * // => true\n       *\n       * _.isFinite(Infinity);\n       * // => false\n       */\n      function isFinite(value) {\n        return typeof value == 'number' && nativeIsFinite(value);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Function` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isFunction(_);\n       * // => true\n       *\n       * _.isFunction(/abc/);\n       * // => false\n       */\n      function isFunction(value) {\n        // The use of `Object#toString` avoids issues with the `typeof` operator\n        // in Safari 8 which returns 'object' for typed array constructors, and\n        // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n        var tag = isObject(value) ? objectToString.call(value) : '';\n        return tag == funcTag || tag == genTag;\n      }\n  \n      /**\n       * Checks if `value` is an integer.\n       *\n       * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n       * @example\n       *\n       * _.isInteger(3);\n       * // => true\n       *\n       * _.isInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isInteger(Infinity);\n       * // => false\n       *\n       * _.isInteger('3');\n       * // => false\n       */\n      function isInteger(value) {\n        return typeof value == 'number' && value == toInteger(value);\n      }\n  \n      /**\n       * Checks if `value` is a valid array-like length.\n       *\n       * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n       * @example\n       *\n       * _.isLength(3);\n       * // => true\n       *\n       * _.isLength(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isLength(Infinity);\n       * // => false\n       *\n       * _.isLength('3');\n       * // => false\n       */\n      function isLength(value) {\n        return typeof value == 'number' &&\n          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n       * @example\n       *\n       * _.isObject({});\n       * // => true\n       *\n       * _.isObject([1, 2, 3]);\n       * // => true\n       *\n       * _.isObject(_.noop);\n       * // => true\n       *\n       * _.isObject(null);\n       * // => false\n       */\n      function isObject(value) {\n        var type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n      }\n  \n      /**\n       * Checks if `value` is object-like. A value is object-like if it's not `null`\n       * and has a `typeof` result of \"object\".\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n       * @example\n       *\n       * _.isObjectLike({});\n       * // => true\n       *\n       * _.isObjectLike([1, 2, 3]);\n       * // => true\n       *\n       * _.isObjectLike(_.noop);\n       * // => false\n       *\n       * _.isObjectLike(null);\n       * // => false\n       */\n      function isObjectLike(value) {\n        return !!value && typeof value == 'object';\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Map` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isMap(new Map);\n       * // => true\n       *\n       * _.isMap(new WeakMap);\n       * // => false\n       */\n      function isMap(value) {\n        return isObjectLike(value) && getTag(value) == mapTag;\n      }\n  \n      /**\n       * Performs a partial deep comparison between `object` and `source` to\n       * determine if `object` contains equivalent property values. This method is\n       * equivalent to a `_.matches` function when `source` is partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * var object = { 'user': 'fred', 'age': 40 };\n       *\n       * _.isMatch(object, { 'age': 40 });\n       * // => true\n       *\n       * _.isMatch(object, { 'age': 36 });\n       * // => false\n       */\n      function isMatch(object, source) {\n        return object === source || baseIsMatch(object, source, getMatchData(source));\n      }\n  \n      /**\n       * This method is like `_.isMatch` except that it accepts `customizer` which\n       * is invoked to compare values. If `customizer` returns `undefined` comparisons\n       * are handled by the method instead. The `customizer` is invoked with five\n       * arguments: (objValue, srcValue, index|key, object, source).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {Object} object The object to inspect.\n       * @param {Object} source The object of property values to match.\n       * @param {Function} [customizer] The function to customize comparisons.\n       * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n       * @example\n       *\n       * function isGreeting(value) {\n       *   return /^h(?:i|ello)$/.test(value);\n       * }\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n       *     return true;\n       *   }\n       * }\n       *\n       * var object = { 'greeting': 'hello' };\n       * var source = { 'greeting': 'hi' };\n       *\n       * _.isMatchWith(object, source, customizer);\n       * // => true\n       */\n      function isMatchWith(object, source, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return baseIsMatch(object, source, getMatchData(source), customizer);\n      }\n  \n      /**\n       * Checks if `value` is `NaN`.\n       *\n       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n       * which returns `true` for `undefined` and other non-numeric values.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n       * @example\n       *\n       * _.isNaN(NaN);\n       * // => true\n       *\n       * _.isNaN(new Number(NaN));\n       * // => true\n       *\n       * isNaN(undefined);\n       * // => true\n       *\n       * _.isNaN(undefined);\n       * // => false\n       */\n      function isNaN(value) {\n        // An `NaN` primitive is the only value that is not equal to itself.\n        // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.\n        return isNumber(value) && value != +value;\n      }\n  \n      /**\n       * Checks if `value` is a native function.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n       * @example\n       *\n       * _.isNative(Array.prototype.push);\n       * // => true\n       *\n       * _.isNative(_);\n       * // => false\n       */\n      function isNative(value) {\n        if (value == null) {\n          return false;\n        }\n        if (isFunction(value)) {\n          return reIsNative.test(funcToString.call(value));\n        }\n        return isObjectLike(value) &&\n          (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);\n      }\n  \n      /**\n       * Checks if `value` is `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n       * @example\n       *\n       * _.isNull(null);\n       * // => true\n       *\n       * _.isNull(void 0);\n       * // => false\n       */\n      function isNull(value) {\n        return value === null;\n      }\n  \n      /**\n       * Checks if `value` is `null` or `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n       * @example\n       *\n       * _.isNil(null);\n       * // => true\n       *\n       * _.isNil(void 0);\n       * // => true\n       *\n       * _.isNil(NaN);\n       * // => false\n       */\n      function isNil(value) {\n        return value == null;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Number` primitive or object.\n       *\n       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n       * as numbers, use the `_.isFinite` method.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isNumber(3);\n       * // => true\n       *\n       * _.isNumber(Number.MIN_VALUE);\n       * // => true\n       *\n       * _.isNumber(Infinity);\n       * // => true\n       *\n       * _.isNumber('3');\n       * // => false\n       */\n      function isNumber(value) {\n        return typeof value == 'number' ||\n          (isObjectLike(value) && objectToString.call(value) == numberTag);\n      }\n  \n      /**\n       * Checks if `value` is a plain object, that is, an object created by the\n       * `Object` constructor or one with a `[[Prototype]]` of `null`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       * }\n       *\n       * _.isPlainObject(new Foo);\n       * // => false\n       *\n       * _.isPlainObject([1, 2, 3]);\n       * // => false\n       *\n       * _.isPlainObject({ 'x': 0, 'y': 0 });\n       * // => true\n       *\n       * _.isPlainObject(Object.create(null));\n       * // => true\n       */\n      function isPlainObject(value) {\n        if (!isObjectLike(value) ||\n            objectToString.call(value) != objectTag || isHostObject(value)) {\n          return false;\n        }\n        var proto = objectProto;\n        if (typeof value.constructor == 'function') {\n          proto = getPrototypeOf(value);\n        }\n        if (proto === null) {\n          return true;\n        }\n        var Ctor = proto.constructor;\n        return (typeof Ctor == 'function' &&\n          Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `RegExp` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isRegExp(/abc/);\n       * // => true\n       *\n       * _.isRegExp('/abc/');\n       * // => false\n       */\n      function isRegExp(value) {\n        return isObject(value) && objectToString.call(value) == regexpTag;\n      }\n  \n      /**\n       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n       * double precision number which isn't the result of a rounded unsafe integer.\n       *\n       * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n       * @example\n       *\n       * _.isSafeInteger(3);\n       * // => true\n       *\n       * _.isSafeInteger(Number.MIN_VALUE);\n       * // => false\n       *\n       * _.isSafeInteger(Infinity);\n       * // => false\n       *\n       * _.isSafeInteger('3');\n       * // => false\n       */\n      function isSafeInteger(value) {\n        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Set` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSet(new Set);\n       * // => true\n       *\n       * _.isSet(new WeakSet);\n       * // => false\n       */\n      function isSet(value) {\n        return isObjectLike(value) && getTag(value) == setTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `String` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isString('abc');\n       * // => true\n       *\n       * _.isString(1);\n       * // => false\n       */\n      function isString(value) {\n        return typeof value == 'string' ||\n          (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a `Symbol` primitive or object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isSymbol(Symbol.iterator);\n       * // => true\n       *\n       * _.isSymbol('abc');\n       * // => false\n       */\n      function isSymbol(value) {\n        return typeof value == 'symbol' ||\n          (isObjectLike(value) && objectToString.call(value) == symbolTag);\n      }\n  \n      /**\n       * Checks if `value` is classified as a typed array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isTypedArray(new Uint8Array);\n       * // => true\n       *\n       * _.isTypedArray([]);\n       * // => false\n       */\n      function isTypedArray(value) {\n        return isObjectLike(value) &&\n          isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n      }\n  \n      /**\n       * Checks if `value` is `undefined`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n       * @example\n       *\n       * _.isUndefined(void 0);\n       * // => true\n       *\n       * _.isUndefined(null);\n       * // => false\n       */\n      function isUndefined(value) {\n        return value === undefined;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakMap` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakMap(new WeakMap);\n       * // => true\n       *\n       * _.isWeakMap(new Map);\n       * // => false\n       */\n      function isWeakMap(value) {\n        return isObjectLike(value) && getTag(value) == weakMapTag;\n      }\n  \n      /**\n       * Checks if `value` is classified as a `WeakSet` object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to check.\n       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n       * @example\n       *\n       * _.isWeakSet(new WeakSet);\n       * // => true\n       *\n       * _.isWeakSet(new Set);\n       * // => false\n       */\n      function isWeakSet(value) {\n        return isObjectLike(value) && objectToString.call(value) == weakSetTag;\n      }\n  \n      /**\n       * Checks if `value` is less than `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n       * @example\n       *\n       * _.lt(1, 3);\n       * // => true\n       *\n       * _.lt(3, 3);\n       * // => false\n       *\n       * _.lt(3, 1);\n       * // => false\n       */\n      function lt(value, other) {\n        return value < other;\n      }\n  \n      /**\n       * Checks if `value` is less than or equal to `other`.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to compare.\n       * @param {*} other The other value to compare.\n       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n       * @example\n       *\n       * _.lte(1, 3);\n       * // => true\n       *\n       * _.lte(3, 3);\n       * // => true\n       *\n       * _.lte(3, 1);\n       * // => false\n       */\n      function lte(value, other) {\n        return value <= other;\n      }\n  \n      /**\n       * Converts `value` to an array.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the converted array.\n       * @example\n       *\n       * _.toArray({ 'a': 1, 'b': 2 });\n       * // => [1, 2]\n       *\n       * _.toArray('abc');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toArray(1);\n       * // => []\n       *\n       * _.toArray(null);\n       * // => []\n       */\n      function toArray(value) {\n        if (!value) {\n          return [];\n        }\n        if (isArrayLike(value)) {\n          return isString(value) ? stringToArray(value) : copyArray(value);\n        }\n        if (iteratorSymbol && value[iteratorSymbol]) {\n          return iteratorToArray(value[iteratorSymbol]());\n        }\n        var tag = getTag(value),\n            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n  \n        return func(value);\n      }\n  \n      /**\n       * Converts `value` to an integer.\n       *\n       * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toInteger(3);\n       * // => 3\n       *\n       * _.toInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toInteger(Infinity);\n       * // => 1.7976931348623157e+308\n       *\n       * _.toInteger('3');\n       * // => 3\n       */\n      function toInteger(value) {\n        if (!value) {\n          return value === 0 ? value : 0;\n        }\n        value = toNumber(value);\n        if (value === INFINITY || value === -INFINITY) {\n          var sign = (value < 0 ? -1 : 1);\n          return sign * MAX_INTEGER;\n        }\n        var remainder = value % 1;\n        return value === value ? (remainder ? value - remainder : value) : 0;\n      }\n  \n      /**\n       * Converts `value` to an integer suitable for use as the length of an\n       * array-like object.\n       *\n       * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toLength(3);\n       * // => 3\n       *\n       * _.toLength(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toLength(Infinity);\n       * // => 4294967295\n       *\n       * _.toLength('3');\n       * // => 3\n       */\n      function toLength(value) {\n        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n      }\n  \n      /**\n       * Converts `value` to a number.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {number} Returns the number.\n       * @example\n       *\n       * _.toNumber(3);\n       * // => 3\n       *\n       * _.toNumber(Number.MIN_VALUE);\n       * // => 5e-324\n       *\n       * _.toNumber(Infinity);\n       * // => Infinity\n       *\n       * _.toNumber('3');\n       * // => 3\n       */\n      function toNumber(value) {\n        if (isObject(value)) {\n          var other = isFunction(value.valueOf) ? value.valueOf() : value;\n          value = isObject(other) ? (other + '') : other;\n        }\n        if (typeof value != 'string') {\n          return value === 0 ? value : +value;\n        }\n        value = value.replace(reTrim, '');\n        var isBinary = reIsBinary.test(value);\n        return (isBinary || reIsOctal.test(value))\n          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n          : (reIsBadHex.test(value) ? NAN : +value);\n      }\n  \n      /**\n       * Converts `value` to a plain object flattening inherited enumerable\n       * properties of `value` to own properties of the plain object.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {Object} Returns the converted plain object.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.assign({ 'a': 1 }, new Foo);\n       * // => { 'a': 1, 'b': 2 }\n       *\n       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n       * // => { 'a': 1, 'b': 2, 'c': 3 }\n       */\n      function toPlainObject(value) {\n        return copyObject(value, keysIn(value));\n      }\n  \n      /**\n       * Converts `value` to a safe integer. A safe integer can be compared and\n       * represented correctly.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to convert.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.toSafeInteger(3);\n       * // => 3\n       *\n       * _.toSafeInteger(Number.MIN_VALUE);\n       * // => 0\n       *\n       * _.toSafeInteger(Infinity);\n       * // => 9007199254740991\n       *\n       * _.toSafeInteger('3');\n       * // => 3\n       */\n      function toSafeInteger(value) {\n        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      }\n  \n      /**\n       * Converts `value` to a string if it's not one. An empty string is returned\n       * for `null` and `undefined` values. The sign of `-0` is preserved.\n       *\n       * @static\n       * @memberOf _\n       * @category Lang\n       * @param {*} value The value to process.\n       * @returns {string} Returns the string.\n       * @example\n       *\n       * _.toString(null);\n       * // => ''\n       *\n       * _.toString(-0);\n       * // => '-0'\n       *\n       * _.toString([1, 2, 3]);\n       * // => '1,2,3'\n       */\n      function toString(value) {\n        // Exit early for strings to avoid a performance hit in some environments.\n        if (typeof value == 'string') {\n          return value;\n        }\n        if (value == null) {\n          return '';\n        }\n        if (isSymbol(value)) {\n          return Symbol ? symbolToString.call(value) : '';\n        }\n        var result = (value + '');\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Assigns own enumerable properties of source objects to the destination\n       * object. Source objects are applied from left to right. Subsequent sources\n       * overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object` and is loosely based on\n       * [`Object.assign`](https://mdn.io/Object/assign).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.c = 3;\n       * }\n       *\n       * function Bar() {\n       *   this.e = 5;\n       * }\n       *\n       * Foo.prototype.d = 4;\n       * Bar.prototype.f = 6;\n       *\n       * _.assign({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'c': 3, 'e': 5 }\n       */\n      var assign = createAssigner(function(object, source) {\n        copyObject(source, keys(source), object);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it iterates over own and\n       * inherited source properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extend\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.b = 2;\n       * }\n       *\n       * function Bar() {\n       *   this.d = 4;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       * Bar.prototype.e = 5;\n       *\n       * _.assignIn({ 'a': 1 }, new Foo, new Bar);\n       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n       */\n      var assignIn = createAssigner(function(object, source) {\n        copyObject(source, keysIn(source), object);\n      });\n  \n      /**\n       * This method is like `_.assignIn` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @alias extendWith\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignInWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keysIn(source), object, customizer);\n      });\n  \n      /**\n       * This method is like `_.assign` except that it accepts `customizer` which\n       * is invoked to produce the assigned values. If `customizer` returns `undefined`\n       * assignment is handled by the method instead. The `customizer` is invoked\n       * with five arguments: (objValue, srcValue, key, object, source).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   return _.isUndefined(objValue) ? srcValue : objValue;\n       * }\n       *\n       * var defaults = _.partialRight(_.assignWith, customizer);\n       *\n       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n       * // => { 'a': 1, 'b': 2 }\n       */\n      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n        copyObjectWith(source, keys(source), object, customizer);\n      });\n  \n      /**\n       * Creates an array of values corresponding to `paths` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {...(string|string[])} [paths] The property paths of elements to pick,\n       *  specified individually or in arrays.\n       * @returns {Array} Returns the new array of picked elements.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n       *\n       * _.at(object, ['a[0].b.c', 'a[1]']);\n       * // => [3, 4]\n       *\n       * _.at(['a', 'b', 'c'], 0, 2);\n       * // => ['a', 'c']\n       */\n      var at = rest(function(object, paths) {\n        return baseAt(object, baseFlatten(paths, 1));\n      });\n  \n      /**\n       * Creates an object that inherits from the `prototype` object. If a `properties`\n       * object is given its own enumerable properties are assigned to the created object.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} prototype The object to inherit from.\n       * @param {Object} [properties] The properties to assign to the object.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * function Shape() {\n       *   this.x = 0;\n       *   this.y = 0;\n       * }\n       *\n       * function Circle() {\n       *   Shape.call(this);\n       * }\n       *\n       * Circle.prototype = _.create(Shape.prototype, {\n       *   'constructor': Circle\n       * });\n       *\n       * var circle = new Circle;\n       * circle instanceof Circle;\n       * // => true\n       *\n       * circle instanceof Shape;\n       * // => true\n       */\n      function create(prototype, properties) {\n        var result = baseCreate(prototype);\n        return properties ? baseAssign(result, properties) : result;\n      }\n  \n      /**\n       * Assigns own and inherited enumerable properties of source objects to the\n       * destination object for all destination properties that resolve to `undefined`.\n       * Source objects are applied from left to right. Once a property is set,\n       * additional values of the same property are ignored.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n       * // => { 'user': 'barney', 'age': 36 }\n       */\n      var defaults = rest(function(args) {\n        args.push(undefined, assignInDefaults);\n        return apply(assignInWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.defaults` except that it recursively assigns\n       * default properties.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n       * // => { 'user': { 'name': 'barney', 'age': 36 } }\n       *\n       */\n      var defaultsDeep = rest(function(args) {\n        args.push(undefined, mergeDefaults);\n        return apply(mergeWith, undefined, args);\n      });\n  \n      /**\n       * This method is like `_.find` except that it returns the key of the first\n       * element `predicate` returns truthy for instead of the element itself.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findKey(users, function(o) { return o.age < 40; });\n       * // => 'barney' (iteration order is not guaranteed)\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findKey(users, { 'age': 1, 'active': true });\n       * // => 'pebbles'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findKey(users, 'active');\n       * // => 'barney'\n       */\n      function findKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);\n      }\n  \n      /**\n       * This method is like `_.findKey` except that it iterates over elements of\n       * a collection in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to search.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.\n       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n       * @example\n       *\n       * var users = {\n       *   'barney':  { 'age': 36, 'active': true },\n       *   'fred':    { 'age': 40, 'active': false },\n       *   'pebbles': { 'age': 1,  'active': true }\n       * };\n       *\n       * _.findLastKey(users, function(o) { return o.age < 40; });\n       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n       *\n       * // The `_.matches` iteratee shorthand.\n       * _.findLastKey(users, { 'age': 36, 'active': true });\n       * // => 'barney'\n       *\n       * // The `_.matchesProperty` iteratee shorthand.\n       * _.findLastKey(users, ['active', false]);\n       * // => 'fred'\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.findLastKey(users, 'active');\n       * // => 'pebbles'\n       */\n      function findLastKey(object, predicate) {\n        return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);\n      }\n  \n      /**\n       * Iterates over own and inherited enumerable properties of an object invoking\n       * `iteratee` for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by explicitly\n       * returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forIn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)\n       */\n      function forIn(object, iteratee) {\n        return object == null\n          ? object\n          : baseFor(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * This method is like `_.forIn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forInRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'\n       */\n      function forInRight(object, iteratee) {\n        return object == null\n          ? object\n          : baseForRight(object, baseCastFunction(iteratee), keysIn);\n      }\n  \n      /**\n       * Iterates over own enumerable properties of an object invoking `iteratee`\n       * for each property. The iteratee is invoked with three arguments:\n       * (value, key, object). Iteratee functions may exit iteration early by\n       * explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwn(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'a' then 'b' (iteration order is not guaranteed)\n       */\n      function forOwn(object, iteratee) {\n        return object && baseForOwn(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * This method is like `_.forOwn` except that it iterates over properties of\n       * `object` in the opposite order.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.forOwnRight(new Foo, function(value, key) {\n       *   console.log(key);\n       * });\n       * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'\n       */\n      function forOwnRight(object, iteratee) {\n        return object && baseForOwnRight(object, baseCastFunction(iteratee));\n      }\n  \n      /**\n       * Creates an array of function property names from own enumerable properties\n       * of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functions(new Foo);\n       * // => ['a', 'b']\n       */\n      function functions(object) {\n        return object == null ? [] : baseFunctions(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of function property names from own and inherited\n       * enumerable properties of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to inspect.\n       * @returns {Array} Returns the new array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = _.constant('a');\n       *   this.b = _.constant('b');\n       * }\n       *\n       * Foo.prototype.c = _.constant('c');\n       *\n       * _.functionsIn(new Foo);\n       * // => ['a', 'b', 'c']\n       */\n      function functionsIn(object) {\n        return object == null ? [] : baseFunctions(object, keysIn(object));\n      }\n  \n      /**\n       * Gets the value at `path` of `object`. If the resolved value is\n       * `undefined` the `defaultValue` is used in its place.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.get(object, 'a[0].b.c');\n       * // => 3\n       *\n       * _.get(object, ['a', '0', 'b', 'c']);\n       * // => 3\n       *\n       * _.get(object, 'a.b.c', 'default');\n       * // => 'default'\n       */\n      function get(object, path, defaultValue) {\n        var result = object == null ? undefined : baseGet(object, path);\n        return result === undefined ? defaultValue : result;\n      }\n  \n      /**\n       * Checks if `path` is a direct property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = { 'a': { 'b': { 'c': 3 } } };\n       * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.has(object, 'a');\n       * // => true\n       *\n       * _.has(object, 'a.b.c');\n       * // => true\n       *\n       * _.has(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.has(other, 'a');\n       * // => false\n       */\n      function has(object, path) {\n        return hasPath(object, path, baseHas);\n      }\n  \n      /**\n       * Checks if `path` is a direct or inherited property of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path to check.\n       * @returns {boolean} Returns `true` if `path` exists, else `false`.\n       * @example\n       *\n       * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });\n       *\n       * _.hasIn(object, 'a');\n       * // => true\n       *\n       * _.hasIn(object, 'a.b.c');\n       * // => true\n       *\n       * _.hasIn(object, ['a', 'b', 'c']);\n       * // => true\n       *\n       * _.hasIn(object, 'b');\n       * // => false\n       */\n      function hasIn(object, path) {\n        return hasPath(object, path, baseHasIn);\n      }\n  \n      /**\n       * Creates an object composed of the inverted keys and values of `object`.\n       * If `object` contains duplicate values, subsequent values overwrite property\n       * assignments of previous values.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invert(object);\n       * // => { '1': 'c', '2': 'b' }\n       */\n      var invert = createInverter(function(result, value, key) {\n        result[value] = key;\n      }, constant(identity));\n  \n      /**\n       * This method is like `_.invert` except that the inverted object is generated\n       * from the results of running each element of `object` through `iteratee`.\n       * The corresponding inverted value of each inverted key is an array of keys\n       * responsible for generating the inverted value. The iteratee is invoked\n       * with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to invert.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {Object} Returns the new inverted object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': 2, 'c': 1 };\n       *\n       * _.invertBy(object);\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       *\n       * _.invertBy(object, function(value) {\n       *   return 'group' + value;\n       * });\n       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n       */\n      var invertBy = createInverter(function(result, value, key) {\n        if (hasOwnProperty.call(result, value)) {\n          result[value].push(key);\n        } else {\n          result[value] = [key];\n        }\n      }, getIteratee);\n  \n      /**\n       * Invokes the method at `path` of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {*} Returns the result of the invoked method.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n       *\n       * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n       * // => [2, 3]\n       */\n      var invoke = rest(baseInvoke);\n  \n      /**\n       * Creates an array of the own enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects. See the\n       * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n       * for more details.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keys(new Foo);\n       * // => ['a', 'b'] (iteration order is not guaranteed)\n       *\n       * _.keys('hi');\n       * // => ['0', '1']\n       */\n      function keys(object) {\n        var isProto = isPrototype(object);\n        if (!(isProto || isArrayLike(object))) {\n          return baseKeys(object);\n        }\n        var indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        for (var key in object) {\n          if (baseHas(object, key) &&\n              !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(isProto && key == 'constructor')) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property names of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property names.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.keysIn(new Foo);\n       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n       */\n      function keysIn(object) {\n        var index = -1,\n            isProto = isPrototype(object),\n            props = baseKeysIn(object),\n            propsLength = props.length,\n            indexes = indexKeys(object),\n            skipIndexes = !!indexes,\n            result = indexes || [],\n            length = result.length;\n  \n        while (++index < propsLength) {\n          var key = props[index];\n          if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n            result.push(key);\n          }\n        }\n        return result;\n      }\n  \n      /**\n       * The opposite of `_.mapValues`; this method creates an object with the\n       * same values as `object` and keys generated by running each own enumerable\n       * property of `object` through `iteratee`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n       *   return key + value;\n       * });\n       * // => { 'a1': 1, 'b2': 2 }\n       */\n      function mapKeys(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[iteratee(value, key, object)] = value;\n        });\n        return result;\n      }\n  \n      /**\n       * Creates an object with the same keys as `object` and values generated by\n       * running each own enumerable property of `object` through `iteratee`. The\n       * iteratee function is invoked with three arguments: (value, key, object).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Object} Returns the new mapped object.\n       * @example\n       *\n       * var users = {\n       *   'fred':    { 'user': 'fred',    'age': 40 },\n       *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n       * };\n       *\n       * _.mapValues(users, function(o) { return o.age; });\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.mapValues(users, 'age');\n       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n       */\n      function mapValues(object, iteratee) {\n        var result = {};\n        iteratee = getIteratee(iteratee, 3);\n  \n        baseForOwn(object, function(value, key, object) {\n          result[key] = iteratee(value, key, object);\n        });\n        return result;\n      }\n  \n      /**\n       * Recursively merges own and inherited enumerable properties of source objects\n       * into the destination object. Source properties that resolve to `undefined`\n       * are skipped if a destination value exists. Array and plain object properties\n       * are merged recursively. Other objects and value types are overridden by\n       * assignment. Source objects are applied from left to right. Subsequent\n       * sources overwrite property assignments of previous sources.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} [sources] The source objects.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var users = {\n       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n       * };\n       *\n       * var ages = {\n       *   'data': [{ 'age': 36 }, { 'age': 40 }]\n       * };\n       *\n       * _.merge(users, ages);\n       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n       */\n      var merge = createAssigner(function(object, source, srcIndex) {\n        baseMerge(object, source, srcIndex);\n      });\n  \n      /**\n       * This method is like `_.merge` except that it accepts `customizer` which\n       * is invoked to produce the merged values of the destination and source\n       * properties. If `customizer` returns `undefined` merging is handled by the\n       * method instead. The `customizer` is invoked with seven arguments:\n       * (objValue, srcValue, key, object, source, stack).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The destination object.\n       * @param {...Object} sources The source objects.\n       * @param {Function} customizer The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * function customizer(objValue, srcValue) {\n       *   if (_.isArray(objValue)) {\n       *     return objValue.concat(srcValue);\n       *   }\n       * }\n       *\n       * var object = {\n       *   'fruits': ['apple'],\n       *   'vegetables': ['beet']\n       * };\n       *\n       * var other = {\n       *   'fruits': ['banana'],\n       *   'vegetables': ['carrot']\n       * };\n       *\n       * _.mergeWith(object, other, customizer);\n       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n       */\n      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n        baseMerge(object, source, srcIndex, customizer);\n      });\n  \n      /**\n       * The opposite of `_.pick`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that are not omitted.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to omit, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omit(object, ['a', 'c']);\n       * // => { 'b': '2' }\n       */\n      var omit = rest(function(object, props) {\n        if (object == null) {\n          return {};\n        }\n        props = arrayMap(baseFlatten(props, 1), String);\n        return basePick(object, baseDifference(keysIn(object), props));\n      });\n  \n      /**\n       * The opposite of `_.pickBy`; this method creates an object composed of the\n       * own and inherited enumerable properties of `object` that `predicate`\n       * doesn't return truthy for.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.omitBy(object, _.isNumber);\n       * // => { 'b': '2' }\n       */\n      function omitBy(object, predicate) {\n        predicate = getIteratee(predicate, 2);\n        return basePickBy(object, function(value, key) {\n          return !predicate(value, key);\n        });\n      }\n  \n      /**\n       * Creates an object composed of the picked `object` properties.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {...(string|string[])} [props] The property names to pick, specified\n       *  individually or in arrays.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pick(object, ['a', 'c']);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      var pick = rest(function(object, props) {\n        return object == null ? {} : basePick(object, baseFlatten(props, 1));\n      });\n  \n      /**\n       * Creates an object composed of the `object` properties `predicate` returns\n       * truthy for. The predicate is invoked with two arguments: (value, key).\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The source object.\n       * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.\n       * @returns {Object} Returns the new object.\n       * @example\n       *\n       * var object = { 'a': 1, 'b': '2', 'c': 3 };\n       *\n       * _.pickBy(object, _.isNumber);\n       * // => { 'a': 1, 'c': 3 }\n       */\n      function pickBy(object, predicate) {\n        return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));\n      }\n  \n      /**\n       * This method is like `_.get` except that if the resolved value is a function\n       * it's invoked with the `this` binding of its parent object and its result\n       * is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @param {Array|string} path The path of the property to resolve.\n       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n       * @returns {*} Returns the resolved value.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n       *\n       * _.result(object, 'a[0].b.c1');\n       * // => 3\n       *\n       * _.result(object, 'a[0].b.c2');\n       * // => 4\n       *\n       * _.result(object, 'a[0].b.c3', 'default');\n       * // => 'default'\n       *\n       * _.result(object, 'a[0].b.c3', _.constant('default'));\n       * // => 'default'\n       */\n      function result(object, path, defaultValue) {\n        if (!isKey(path, object)) {\n          path = baseCastPath(path);\n          var result = get(object, path);\n          object = parent(object, path);\n        } else {\n          result = object == null ? undefined : object[path];\n        }\n        if (result === undefined) {\n          result = defaultValue;\n        }\n        return isFunction(result) ? result.call(object) : result;\n      }\n  \n      /**\n       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist\n       * it's created. Arrays are created for missing index properties while objects\n       * are created for all other missing properties. Use `_.setWith` to customize\n       * `path` creation.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n       *\n       * _.set(object, 'a[0].b.c', 4);\n       * console.log(object.a[0].b.c);\n       * // => 4\n       *\n       * _.set(object, 'x[0].y.z', 5);\n       * console.log(object.x[0].y.z);\n       * // => 5\n       */\n      function set(object, path, value) {\n        return object == null ? object : baseSet(object, path, value);\n      }\n  \n      /**\n       * This method is like `_.set` except that it accepts `customizer` which is\n       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n       * path creation is handled by the method instead. The `customizer` is invoked\n       * with three arguments: (nsValue, key, nsObject).\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to set.\n       * @param {*} value The value to set.\n       * @param {Function} [customizer] The function to customize assigned values.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);\n       * // => { '0': { '1': { '2': 3 }, 'length': 2 } }\n       */\n      function setWith(object, path, value, customizer) {\n        customizer = typeof customizer == 'function' ? customizer : undefined;\n        return object == null ? object : baseSet(object, path, value, customizer);\n      }\n  \n      /**\n       * Creates an array of own enumerable key-value pairs for `object` which\n       * can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairs(new Foo);\n       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n       */\n      function toPairs(object) {\n        return baseToPairs(object, keys(object));\n      }\n  \n      /**\n       * Creates an array of own and inherited enumerable key-value pairs for\n       * `object` which can be consumed by `_.fromPairs`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the new array of key-value pairs.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.toPairsIn(new Foo);\n       * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)\n       */\n      function toPairsIn(object) {\n        return baseToPairs(object, keysIn(object));\n      }\n  \n      /**\n       * An alternative to `_.reduce`; this method transforms `object` to a new\n       * `accumulator` object which is the result of running each of its own enumerable\n       * properties through `iteratee`, with each invocation potentially mutating\n       * the `accumulator` object. The iteratee is invoked with four arguments:\n       * (accumulator, value, key, object). Iteratee functions may exit iteration\n       * early by explicitly returning `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Array|Object} object The object to iterate over.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @param {*} [accumulator] The custom accumulator value.\n       * @returns {*} Returns the accumulated value.\n       * @example\n       *\n       * _.transform([2, 3, 4], function(result, n) {\n       *   result.push(n *= n);\n       *   return n % 2 == 0;\n       * }, []);\n       * // => [4, 9]\n       *\n       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n       *   (result[value] || (result[value] = [])).push(key);\n       * }, {});\n       * // => { '1': ['a', 'c'], '2': ['b'] }\n       */\n      function transform(object, iteratee, accumulator) {\n        var isArr = isArray(object) || isTypedArray(object);\n        iteratee = getIteratee(iteratee, 4);\n  \n        if (accumulator == null) {\n          if (isArr || isObject(object)) {\n            var Ctor = object.constructor;\n            if (isArr) {\n              accumulator = isArray(object) ? new Ctor : [];\n            } else {\n              accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n            }\n          } else {\n            accumulator = {};\n          }\n        }\n        (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n          return iteratee(accumulator, value, index, object);\n        });\n        return accumulator;\n      }\n  \n      /**\n       * Removes the property at `path` of `object`.\n       *\n       * **Note:** This method mutates `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to modify.\n       * @param {Array|string} path The path of the property to unset.\n       * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n       * @example\n       *\n       * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       *\n       * _.unset(object, 'a[0].b.c');\n       * // => true\n       *\n       * console.log(object);\n       * // => { 'a': [{ 'b': {} }] };\n       */\n      function unset(object, path) {\n        return object == null ? true : baseUnset(object, path);\n      }\n  \n      /**\n       * Creates an array of the own enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.values(new Foo);\n       * // => [1, 2] (iteration order is not guaranteed)\n       *\n       * _.values('hi');\n       * // => ['h', 'i']\n       */\n      function values(object) {\n        return object ? baseValues(object, keys(object)) : [];\n      }\n  \n      /**\n       * Creates an array of the own and inherited enumerable property values of `object`.\n       *\n       * **Note:** Non-object values are coerced to objects.\n       *\n       * @static\n       * @memberOf _\n       * @category Object\n       * @param {Object} object The object to query.\n       * @returns {Array} Returns the array of property values.\n       * @example\n       *\n       * function Foo() {\n       *   this.a = 1;\n       *   this.b = 2;\n       * }\n       *\n       * Foo.prototype.c = 3;\n       *\n       * _.valuesIn(new Foo);\n       * // => [1, 2, 3] (iteration order is not guaranteed)\n       */\n      function valuesIn(object) {\n        return object == null ? [] : baseValues(object, keysIn(object));\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Clamps `number` within the inclusive `lower` and `upper` bounds.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to clamp.\n       * @param {number} [lower] The lower bound.\n       * @param {number} upper The upper bound.\n       * @returns {number} Returns the clamped number.\n       * @example\n       *\n       * _.clamp(-10, -5, 5);\n       * // => -5\n       *\n       * _.clamp(10, -5, 5);\n       * // => 5\n       */\n      function clamp(number, lower, upper) {\n        if (upper === undefined) {\n          upper = lower;\n          lower = undefined;\n        }\n        if (upper !== undefined) {\n          upper = toNumber(upper);\n          upper = upper === upper ? upper : 0;\n        }\n        if (lower !== undefined) {\n          lower = toNumber(lower);\n          lower = lower === lower ? lower : 0;\n        }\n        return baseClamp(toNumber(number), lower, upper);\n      }\n  \n      /**\n       * Checks if `n` is between `start` and up to but not including, `end`. If\n       * `end` is not specified it's set to `start` with `start` then set to `0`.\n       * If `start` is greater than `end` the params are swapped to support\n       * negative ranges.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} number The number to check.\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n       * @example\n       *\n       * _.inRange(3, 2, 4);\n       * // => true\n       *\n       * _.inRange(4, 8);\n       * // => true\n       *\n       * _.inRange(4, 2);\n       * // => false\n       *\n       * _.inRange(2, 2);\n       * // => false\n       *\n       * _.inRange(1.2, 2);\n       * // => true\n       *\n       * _.inRange(5.2, 4);\n       * // => false\n       *\n       * _.inRange(-3, -2, -6);\n       * // => true\n       */\n      function inRange(number, start, end) {\n        start = toNumber(start) || 0;\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toNumber(end) || 0;\n        }\n        number = toNumber(number);\n        return baseInRange(number, start, end);\n      }\n  \n      /**\n       * Produces a random number between the inclusive `lower` and `upper` bounds.\n       * If only one argument is provided a number between `0` and the given number\n       * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,\n       * a floating-point number is returned instead of an integer.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Number\n       * @param {number} [lower=0] The lower bound.\n       * @param {number} [upper=1] The upper bound.\n       * @param {boolean} [floating] Specify returning a floating-point number.\n       * @returns {number} Returns the random number.\n       * @example\n       *\n       * _.random(0, 5);\n       * // => an integer between 0 and 5\n       *\n       * _.random(5);\n       * // => also an integer between 0 and 5\n       *\n       * _.random(5, true);\n       * // => a floating-point number between 0 and 5\n       *\n       * _.random(1.2, 5.2);\n       * // => a floating-point number between 1.2 and 5.2\n       */\n      function random(lower, upper, floating) {\n        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n          upper = floating = undefined;\n        }\n        if (floating === undefined) {\n          if (typeof upper == 'boolean') {\n            floating = upper;\n            upper = undefined;\n          }\n          else if (typeof lower == 'boolean') {\n            floating = lower;\n            lower = undefined;\n          }\n        }\n        if (lower === undefined && upper === undefined) {\n          lower = 0;\n          upper = 1;\n        }\n        else {\n          lower = toNumber(lower) || 0;\n          if (upper === undefined) {\n            upper = lower;\n            lower = 0;\n          } else {\n            upper = toNumber(upper) || 0;\n          }\n        }\n        if (lower > upper) {\n          var temp = lower;\n          lower = upper;\n          upper = temp;\n        }\n        if (floating || lower % 1 || upper % 1) {\n          var rand = nativeRandom();\n          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n        }\n        return baseRandom(lower, upper);\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the camel cased string.\n       * @example\n       *\n       * _.camelCase('Foo Bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('--foo-bar');\n       * // => 'fooBar'\n       *\n       * _.camelCase('__foo_bar__');\n       * // => 'fooBar'\n       */\n      var camelCase = createCompounder(function(result, word, index) {\n        word = word.toLowerCase();\n        return result + (index ? capitalize(word) : word);\n      });\n  \n      /**\n       * Converts the first character of `string` to upper case and the remaining\n       * to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to capitalize.\n       * @returns {string} Returns the capitalized string.\n       * @example\n       *\n       * _.capitalize('FRED');\n       * // => 'Fred'\n       */\n      function capitalize(string) {\n        return upperFirst(toString(string).toLowerCase());\n      }\n  \n      /**\n       * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n       * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to deburr.\n       * @returns {string} Returns the deburred string.\n       * @example\n       *\n       * _.deburr('déjà vu');\n       * // => 'deja vu'\n       */\n      function deburr(string) {\n        string = toString(string);\n        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n      }\n  \n      /**\n       * Checks if `string` ends with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=string.length] The position to search from.\n       * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n       * @example\n       *\n       * _.endsWith('abc', 'c');\n       * // => true\n       *\n       * _.endsWith('abc', 'b');\n       * // => false\n       *\n       * _.endsWith('abc', 'b', 2);\n       * // => true\n       */\n      function endsWith(string, target, position) {\n        string = toString(string);\n        target = typeof target == 'string' ? target : (target + '');\n  \n        var length = string.length;\n        position = position === undefined\n          ? length\n          : baseClamp(toInteger(position), 0, length);\n  \n        position -= target.length;\n        return position >= 0 && string.indexOf(target, position) == position;\n      }\n  \n      /**\n       * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n       * their corresponding HTML entities.\n       *\n       * **Note:** No other characters are escaped. To escape additional\n       * characters use a third-party library like [_he_](https://mths.be/he).\n       *\n       * Though the \">\" character is escaped for symmetry, characters like\n       * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n       * unless they're part of a tag or unquoted attribute value.\n       * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n       * (under \"semi-related fun fact\") for more details.\n       *\n       * Backticks are escaped because in IE < 9, they can break out of\n       * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n       * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n       * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n       * for more details.\n       *\n       * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n       * to reduce XSS vectors.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escape('fred, barney, & pebbles');\n       * // => 'fred, barney, &amp; pebbles'\n       */\n      function escape(string) {\n        string = toString(string);\n        return (string && reHasUnescapedHtml.test(string))\n          ? string.replace(reUnescapedHtml, escapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n       * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to escape.\n       * @returns {string} Returns the escaped string.\n       * @example\n       *\n       * _.escapeRegExp('[lodash](https://lodash.com/)');\n       * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n       */\n      function escapeRegExp(string) {\n        string = toString(string);\n        return (string && reHasRegExpChar.test(string))\n          ? string.replace(reRegExpChar, '\\\\$&')\n          : string;\n      }\n  \n      /**\n       * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the kebab cased string.\n       * @example\n       *\n       * _.kebabCase('Foo Bar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('fooBar');\n       * // => 'foo-bar'\n       *\n       * _.kebabCase('__foo_bar__');\n       * // => 'foo-bar'\n       */\n      var kebabCase = createCompounder(function(result, word, index) {\n        return result + (index ? '-' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts `string`, as space separated words, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.lowerCase('--Foo-Bar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('fooBar');\n       * // => 'foo bar'\n       *\n       * _.lowerCase('__FOO_BAR__');\n       * // => 'foo bar'\n       */\n      var lowerCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Converts the first character of `string` to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.lowerFirst('Fred');\n       * // => 'fred'\n       *\n       * _.lowerFirst('FRED');\n       * // => 'fRED'\n       */\n      var lowerFirst = createCaseFirst('toLowerCase');\n  \n      /**\n       * Converts the first character of `string` to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the converted string.\n       * @example\n       *\n       * _.upperFirst('fred');\n       * // => 'Fred'\n       *\n       * _.upperFirst('FRED');\n       * // => 'FRED'\n       */\n      var upperFirst = createCaseFirst('toUpperCase');\n  \n      /**\n       * Pads `string` on the left and right sides if it's shorter than `length`.\n       * Padding characters are truncated if they can't be evenly divided by `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.pad('abc', 8);\n       * // => '  abc   '\n       *\n       * _.pad('abc', 8, '_-');\n       * // => '_-abc_-_'\n       *\n       * _.pad('abc', 3);\n       * // => 'abc'\n       */\n      function pad(string, length, chars) {\n        string = toString(string);\n        length = toInteger(length);\n  \n        var strLength = stringSize(string);\n        if (!length || strLength >= length) {\n          return string;\n        }\n        var mid = (length - strLength) / 2,\n            leftLength = nativeFloor(mid),\n            rightLength = nativeCeil(mid);\n  \n        return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);\n      }\n  \n      /**\n       * Pads `string` on the right side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padEnd('abc', 6);\n       * // => 'abc   '\n       *\n       * _.padEnd('abc', 6, '_-');\n       * // => 'abc_-_'\n       *\n       * _.padEnd('abc', 3);\n       * // => 'abc'\n       */\n      function padEnd(string, length, chars) {\n        string = toString(string);\n        return string + createPadding(string, length, chars);\n      }\n  \n      /**\n       * Pads `string` on the left side if it's shorter than `length`. Padding\n       * characters are truncated if they exceed `length`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to pad.\n       * @param {number} [length=0] The padding length.\n       * @param {string} [chars=' '] The string used as padding.\n       * @returns {string} Returns the padded string.\n       * @example\n       *\n       * _.padStart('abc', 6);\n       * // => '   abc'\n       *\n       * _.padStart('abc', 6, '_-');\n       * // => '_-_abc'\n       *\n       * _.padStart('abc', 3);\n       * // => 'abc'\n       */\n      function padStart(string, length, chars) {\n        string = toString(string);\n        return createPadding(string, length, chars) + string;\n      }\n  \n      /**\n       * Converts `string` to an integer of the specified radix. If `radix` is\n       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n       * in which case a `radix` of `16` is used.\n       *\n       * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)\n       * of `parseInt`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} string The string to convert.\n       * @param {number} [radix=10] The radix to interpret `value` by.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {number} Returns the converted integer.\n       * @example\n       *\n       * _.parseInt('08');\n       * // => 8\n       *\n       * _.map(['6', '08', '10'], _.parseInt);\n       * // => [6, 8, 10]\n       */\n      function parseInt(string, radix, guard) {\n        // Chrome fails to trim leading <BOM> whitespace characters.\n        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n        if (guard || radix == null) {\n          radix = 0;\n        } else if (radix) {\n          radix = +radix;\n        }\n        string = toString(string).replace(reTrim, '');\n        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n      }\n  \n      /**\n       * Repeats the given string `n` times.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to repeat.\n       * @param {number} [n=0] The number of times to repeat the string.\n       * @returns {string} Returns the repeated string.\n       * @example\n       *\n       * _.repeat('*', 3);\n       * // => '***'\n       *\n       * _.repeat('abc', 2);\n       * // => 'abcabc'\n       *\n       * _.repeat('abc', 0);\n       * // => ''\n       */\n      function repeat(string, n) {\n        string = toString(string);\n        n = toInteger(n);\n  \n        var result = '';\n        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n          return result;\n        }\n        // Leverage the exponentiation by squaring algorithm for a faster repeat.\n        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n        do {\n          if (n % 2) {\n            result += string;\n          }\n          n = nativeFloor(n / 2);\n          string += string;\n        } while (n);\n  \n        return result;\n      }\n  \n      /**\n       * Replaces matches for `pattern` in `string` with `replacement`.\n       *\n       * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to modify.\n       * @param {RegExp|string} pattern The pattern to replace.\n       * @param {Function|string} replacement The match replacement.\n       * @returns {string} Returns the modified string.\n       * @example\n       *\n       * _.replace('Hi Fred', 'Fred', 'Barney');\n       * // => 'Hi Barney'\n       */\n      function replace() {\n        var args = arguments,\n            string = toString(args[0]);\n  \n        return args.length < 3 ? string : string.replace(args[1], args[2]);\n      }\n  \n      /**\n       * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the snake cased string.\n       * @example\n       *\n       * _.snakeCase('Foo Bar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('fooBar');\n       * // => 'foo_bar'\n       *\n       * _.snakeCase('--foo-bar');\n       * // => 'foo_bar'\n       */\n      var snakeCase = createCompounder(function(result, word, index) {\n        return result + (index ? '_' : '') + word.toLowerCase();\n      });\n  \n      /**\n       * Splits `string` by `separator`.\n       *\n       * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to split.\n       * @param {RegExp|string} separator The separator pattern to split by.\n       * @param {number} [limit] The length to truncate results to.\n       * @returns {Array} Returns the new array of string segments.\n       * @example\n       *\n       * _.split('a-b-c', '-', 2);\n       * // => ['a', 'b']\n       */\n      function split(string, separator, limit) {\n        return toString(string).split(separator, limit);\n      }\n  \n      /**\n       * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the start cased string.\n       * @example\n       *\n       * _.startCase('--foo-bar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('fooBar');\n       * // => 'Foo Bar'\n       *\n       * _.startCase('__foo_bar__');\n       * // => 'Foo Bar'\n       */\n      var startCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + capitalize(word);\n      });\n  \n      /**\n       * Checks if `string` starts with the given target string.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to search.\n       * @param {string} [target] The string to search for.\n       * @param {number} [position=0] The position to search from.\n       * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n       * @example\n       *\n       * _.startsWith('abc', 'a');\n       * // => true\n       *\n       * _.startsWith('abc', 'b');\n       * // => false\n       *\n       * _.startsWith('abc', 'b', 1);\n       * // => true\n       */\n      function startsWith(string, target, position) {\n        string = toString(string);\n        position = baseClamp(toInteger(position), 0, string.length);\n        return string.lastIndexOf(target, position) == position;\n      }\n  \n      /**\n       * Creates a compiled template function that can interpolate data properties\n       * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n       * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n       * properties may be accessed as free variables in the template. If a setting\n       * object is given it takes precedence over `_.templateSettings` values.\n       *\n       * **Note:** In the development build `_.template` utilizes\n       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n       * for easier debugging.\n       *\n       * For more information on precompiling templates see\n       * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n       *\n       * For more information on Chrome extension sandboxes see\n       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The template string.\n       * @param {Object} [options] The options object.\n       * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n       * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n       * @param {Object} [options.imports] An object to import into the template as free variables.\n       * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n       * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n       * @param {string} [options.variable] The data object variable name.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Function} Returns the compiled template function.\n       * @example\n       *\n       * // Use the \"interpolate\" delimiter to create a compiled template.\n       * var compiled = _.template('hello <%= user %>!');\n       * compiled({ 'user': 'fred' });\n       * // => 'hello fred!'\n       *\n       * // Use the HTML \"escape\" delimiter to escape data property values.\n       * var compiled = _.template('<b><%- value %></b>');\n       * compiled({ 'value': '<script>' });\n       * // => '<b>&lt;script&gt;</b>'\n       *\n       * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the internal `print` function in \"evaluate\" delimiters.\n       * var compiled = _.template('<% print(\"hello \" + user); %>!');\n       * compiled({ 'user': 'barney' });\n       * // => 'hello barney!'\n       *\n       * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n       * var compiled = _.template('hello ${ user }!');\n       * compiled({ 'user': 'pebbles' });\n       * // => 'hello pebbles!'\n       *\n       * // Use custom template delimiters.\n       * _.templateSettings.interpolate = /undefined/g;\n       * var compiled = _.template('hello !');\n       * compiled({ 'user': 'mustache' });\n       * // => 'hello mustache!'\n       *\n       * // Use backslashes to treat delimiters as plain text.\n       * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n       * compiled({ 'value': 'ignored' });\n       * // => '<%- value %>'\n       *\n       * // Use the `imports` option to import `jQuery` as `jq`.\n       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n       * compiled({ 'users': ['fred', 'barney'] });\n       * // => '<li>fred</li><li>barney</li>'\n       *\n       * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n       * compiled(data);\n       * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n       *\n       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n       * compiled.source;\n       * // => function(data) {\n       * //   var __t, __p = '';\n       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n       * //   return __p;\n       * // }\n       *\n       * // Use the `source` property to inline compiled templates for meaningful\n       * // line numbers in error messages and stack traces.\n       * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n       *   var JST = {\\\n       *     \"main\": ' + _.template(mainText).source + '\\\n       *   };\\\n       * ');\n       */\n      function template(string, options, guard) {\n        // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n        // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n        var settings = lodash.templateSettings;\n  \n        if (guard && isIterateeCall(string, options, guard)) {\n          options = undefined;\n        }\n        string = toString(string);\n        options = assignInWith({}, options, settings, assignInDefaults);\n  \n        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n            importsKeys = keys(imports),\n            importsValues = baseValues(imports, importsKeys);\n  \n        var isEscaping,\n            isEvaluating,\n            index = 0,\n            interpolate = options.interpolate || reNoMatch,\n            source = \"__p += '\";\n  \n        // Compile the regexp to match each delimiter.\n        var reDelimiters = RegExp(\n          (options.escape || reNoMatch).source + '|' +\n          interpolate.source + '|' +\n          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n          (options.evaluate || reNoMatch).source + '|$'\n        , 'g');\n  \n        // Use a sourceURL for easier debugging.\n        var sourceURL = '//# sourceURL=' +\n          ('sourceURL' in options\n            ? options.sourceURL\n            : ('lodash.templateSources[' + (++templateCounter) + ']')\n          ) + '\\n';\n  \n        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n          interpolateValue || (interpolateValue = esTemplateValue);\n  \n          // Escape characters that can't be included in string literals.\n          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n  \n          // Replace delimiters with snippets.\n          if (escapeValue) {\n            isEscaping = true;\n            source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n          }\n          if (evaluateValue) {\n            isEvaluating = true;\n            source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n          }\n          if (interpolateValue) {\n            source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n          }\n          index = offset + match.length;\n  \n          // The JS engine embedded in Adobe products needs `match` returned in\n          // order to produce the correct `offset` value.\n          return match;\n        });\n  \n        source += \"';\\n\";\n  \n        // If `variable` is not specified wrap a with-statement around the generated\n        // code to add the data object to the top of the scope chain.\n        var variable = options.variable;\n        if (!variable) {\n          source = 'with (obj) {\\n' + source + '\\n}\\n';\n        }\n        // Cleanup code by stripping empty strings.\n        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n          .replace(reEmptyStringMiddle, '$1')\n          .replace(reEmptyStringTrailing, '$1;');\n  \n        // Frame code as the function body.\n        source = 'function(' + (variable || 'obj') + ') {\\n' +\n          (variable\n            ? ''\n            : 'obj || (obj = {});\\n'\n          ) +\n          \"var __t, __p = ''\" +\n          (isEscaping\n             ? ', __e = _.escape'\n             : ''\n          ) +\n          (isEvaluating\n            ? ', __j = Array.prototype.join;\\n' +\n              \"function print() { __p += __j.call(arguments, '') }\\n\"\n            : ';\\n'\n          ) +\n          source +\n          'return __p\\n}';\n  \n        var result = attempt(function() {\n          return Function(importsKeys, sourceURL + 'return ' + source)\n            .apply(undefined, importsValues);\n        });\n  \n        // Provide the compiled function's source by its `toString` method or\n        // the `source` property as a convenience for inlining compiled templates.\n        result.source = source;\n        if (isError(result)) {\n          throw result;\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `string`, as a whole, to lower case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the lower cased string.\n       * @example\n       *\n       * _.toLower('--Foo-Bar');\n       * // => '--foo-bar'\n       *\n       * _.toLower('fooBar');\n       * // => 'foobar'\n       *\n       * _.toLower('__FOO_BAR__');\n       * // => '__foo_bar__'\n       */\n      function toLower(value) {\n        return toString(value).toLowerCase();\n      }\n  \n      /**\n       * Converts `string`, as a whole, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.toUpper('--foo-bar');\n       * // => '--FOO-BAR'\n       *\n       * _.toUpper('fooBar');\n       * // => 'FOOBAR'\n       *\n       * _.toUpper('__foo_bar__');\n       * // => '__FOO_BAR__'\n       */\n      function toUpper(value) {\n        return toString(value).toUpperCase();\n      }\n  \n      /**\n       * Removes leading and trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trim('  abc  ');\n       * // => 'abc'\n       *\n       * _.trim('-_-abc-_-', '_-');\n       * // => 'abc'\n       *\n       * _.map(['  foo  ', '  bar  '], _.trim);\n       * // => ['foo', 'bar']\n       */\n      function trim(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrim, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string),\n            chrSymbols = stringToArray(chars);\n  \n        return strSymbols\n          .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes trailing whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimEnd('  abc  ');\n       * // => '  abc'\n       *\n       * _.trimEnd('-_-abc-_-', '_-');\n       * // => '-_-abc'\n       */\n      function trimEnd(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimEnd, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)\n          .join('');\n      }\n  \n      /**\n       * Removes leading whitespace or specified characters from `string`.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to trim.\n       * @param {string} [chars=whitespace] The characters to trim.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {string} Returns the trimmed string.\n       * @example\n       *\n       * _.trimStart('  abc  ');\n       * // => 'abc  '\n       *\n       * _.trimStart('-_-abc-_-', '_-');\n       * // => 'abc-_-'\n       */\n      function trimStart(string, chars, guard) {\n        string = toString(string);\n        if (!string) {\n          return string;\n        }\n        if (guard || chars === undefined) {\n          return string.replace(reTrimStart, '');\n        }\n        chars = (chars + '');\n        if (!chars) {\n          return string;\n        }\n        var strSymbols = stringToArray(string);\n        return strSymbols\n          .slice(charsStartIndex(strSymbols, stringToArray(chars)))\n          .join('');\n      }\n  \n      /**\n       * Truncates `string` if it's longer than the given maximum string length.\n       * The last characters of the truncated string are replaced with the omission\n       * string which defaults to \"...\".\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to truncate.\n       * @param {Object} [options=({})] The options object.\n       * @param {number} [options.length=30] The maximum string length.\n       * @param {string} [options.omission='...'] The string to indicate text is omitted.\n       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n       * @returns {string} Returns the truncated string.\n       * @example\n       *\n       * _.truncate('hi-diddly-ho there, neighborino');\n       * // => 'hi-diddly-ho there, neighbo...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': ' '\n       * });\n       * // => 'hi-diddly-ho there,...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'length': 24,\n       *   'separator': /,? +/\n       * });\n       * // => 'hi-diddly-ho there...'\n       *\n       * _.truncate('hi-diddly-ho there, neighborino', {\n       *   'omission': ' [...]'\n       * });\n       * // => 'hi-diddly-ho there, neig [...]'\n       */\n      function truncate(string, options) {\n        var length = DEFAULT_TRUNC_LENGTH,\n            omission = DEFAULT_TRUNC_OMISSION;\n  \n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? toInteger(options.length) : length;\n          omission = 'omission' in options ? toString(options.omission) : omission;\n        }\n        string = toString(string);\n  \n        var strLength = string.length;\n        if (reHasComplexSymbol.test(string)) {\n          var strSymbols = stringToArray(string);\n          strLength = strSymbols.length;\n        }\n        if (length >= strLength) {\n          return string;\n        }\n        var end = length - stringSize(omission);\n        if (end < 1) {\n          return omission;\n        }\n        var result = strSymbols\n          ? strSymbols.slice(0, end).join('')\n          : string.slice(0, end);\n  \n        if (separator === undefined) {\n          return result + omission;\n        }\n        if (strSymbols) {\n          end += (result.length - end);\n        }\n        if (isRegExp(separator)) {\n          if (string.slice(end).search(separator)) {\n            var match,\n                substring = result;\n  \n            if (!separator.global) {\n              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n            }\n            separator.lastIndex = 0;\n            while ((match = separator.exec(substring))) {\n              var newEnd = match.index;\n            }\n            result = result.slice(0, newEnd === undefined ? end : newEnd);\n          }\n        } else if (string.indexOf(separator, end) != end) {\n          var index = result.lastIndexOf(separator);\n          if (index > -1) {\n            result = result.slice(0, index);\n          }\n        }\n        return result + omission;\n      }\n  \n      /**\n       * The inverse of `_.escape`; this method converts the HTML entities\n       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n       * corresponding characters.\n       *\n       * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n       * entities use a third-party library like [_he_](https://mths.be/he).\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to unescape.\n       * @returns {string} Returns the unescaped string.\n       * @example\n       *\n       * _.unescape('fred, barney, &amp; pebbles');\n       * // => 'fred, barney, & pebbles'\n       */\n      function unescape(string) {\n        string = toString(string);\n        return (string && reHasEscapedHtml.test(string))\n          ? string.replace(reEscapedHtml, unescapeHtmlChar)\n          : string;\n      }\n  \n      /**\n       * Converts `string`, as space separated words, to upper case.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to convert.\n       * @returns {string} Returns the upper cased string.\n       * @example\n       *\n       * _.upperCase('--foo-bar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('fooBar');\n       * // => 'FOO BAR'\n       *\n       * _.upperCase('__foo_bar__');\n       * // => 'FOO BAR'\n       */\n      var upperCase = createCompounder(function(result, word, index) {\n        return result + (index ? ' ' : '') + word.toUpperCase();\n      });\n  \n      /**\n       * Splits `string` into an array of its words.\n       *\n       * @static\n       * @memberOf _\n       * @category String\n       * @param {string} [string=''] The string to inspect.\n       * @param {RegExp|string} [pattern] The pattern to match words.\n       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.\n       * @returns {Array} Returns the words of `string`.\n       * @example\n       *\n       * _.words('fred, barney, & pebbles');\n       * // => ['fred', 'barney', 'pebbles']\n       *\n       * _.words('fred, barney, & pebbles', /[^, ]+/g);\n       * // => ['fred', 'barney', '&', 'pebbles']\n       */\n      function words(string, pattern, guard) {\n        string = toString(string);\n        pattern = guard ? undefined : pattern;\n  \n        if (pattern === undefined) {\n          pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;\n        }\n        return string.match(pattern) || [];\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Attempts to invoke `func`, returning either the result or the caught error\n       * object. Any additional arguments are provided to `func` when it's invoked.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function} func The function to attempt.\n       * @returns {*} Returns the `func` result or error object.\n       * @example\n       *\n       * // Avoid throwing errors for invalid selectors.\n       * var elements = _.attempt(function(selector) {\n       *   return document.querySelectorAll(selector);\n       * }, '>_>');\n       *\n       * if (_.isError(elements)) {\n       *   elements = [];\n       * }\n       */\n      var attempt = rest(function(func, args) {\n        try {\n          return apply(func, undefined, args);\n        } catch (e) {\n          return isError(e) ? e : new Error(e);\n        }\n      });\n  \n      /**\n       * Binds methods of an object to the object itself, overwriting the existing\n       * method.\n       *\n       * **Note:** This method doesn't set the \"length\" property of bound functions.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to bind and assign the bound methods to.\n       * @param {...(string|string[])} methodNames The object method names to bind,\n       *  specified individually or in arrays.\n       * @returns {Object} Returns `object`.\n       * @example\n       *\n       * var view = {\n       *   'label': 'docs',\n       *   'onClick': function() {\n       *     console.log('clicked ' + this.label);\n       *   }\n       * };\n       *\n       * _.bindAll(view, 'onClick');\n       * jQuery(element).on('click', view.onClick);\n       * // => logs 'clicked docs' when clicked\n       */\n      var bindAll = rest(function(object, methodNames) {\n        arrayEach(baseFlatten(methodNames, 1), function(key) {\n          object[key] = bind(object[key], object);\n        });\n        return object;\n      });\n  \n      /**\n       * Creates a function that iterates over `pairs` invoking the corresponding\n       * function of the first predicate to return truthy. The predicate-function\n       * pairs are invoked with the `this` binding and arguments of the created\n       * function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array} pairs The predicate-function pairs.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.cond([\n       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n       *   [_.constant(true),                _.constant('no match')]\n       * ]);\n       *\n       * func({ 'a': 1, 'b': 2 });\n       * // => 'matches A'\n       *\n       * func({ 'a': 0, 'b': 1 });\n       * // => 'matches B'\n       *\n       * func({ 'a': '1', 'b': '2' });\n       * // => 'no match'\n       */\n      function cond(pairs) {\n        var length = pairs ? pairs.length : 0,\n            toIteratee = getIteratee();\n  \n        pairs = !length ? [] : arrayMap(pairs, function(pair) {\n          if (typeof pair[1] != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          return [toIteratee(pair[0]), pair[1]];\n        });\n  \n        return rest(function(args) {\n          var index = -1;\n          while (++index < length) {\n            var pair = pairs[index];\n            if (apply(pair[0], this, args)) {\n              return apply(pair[1], this, args);\n            }\n          }\n        });\n      }\n  \n      /**\n       * Creates a function that invokes the predicate properties of `source` with\n       * the corresponding property values of a given object, returning `true` if\n       * all predicates return truthy, else `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property predicates to conform to.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function conforms(source) {\n        return baseConforms(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that returns `value`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to return from the new function.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       * var getter = _.constant(object);\n       *\n       * getter() === object;\n       * // => true\n       */\n      function constant(value) {\n        return function() {\n          return value;\n        };\n      }\n  \n      /**\n       * Creates a function that returns the result of invoking the given functions\n       * with the `this` binding of the created function, where each successive\n       * invocation is supplied the return value of the previous.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flow(_.add, square);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flow = createFlow();\n  \n      /**\n       * This method is like `_.flow` except that it creates a function that\n       * invokes the given functions from right to left.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} [funcs] Functions to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * function square(n) {\n       *   return n * n;\n       * }\n       *\n       * var addSquare = _.flowRight(square, _.add);\n       * addSquare(1, 2);\n       * // => 9\n       */\n      var flowRight = createFlow(true);\n  \n      /**\n       * This method returns the first argument given to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value Any value.\n       * @returns {*} Returns `value`.\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.identity(object) === object;\n       * // => true\n       */\n      function identity(value) {\n        return value;\n      }\n  \n      /**\n       * Creates a function that invokes `func` with the arguments of the created\n       * function. If `func` is a property name the created callback returns the\n       * property value for a given element. If `func` is an object the created\n       * callback returns `true` for elements that contain the equivalent object\n       * properties, otherwise it returns `false`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} [func=_.identity] The value to convert to a callback.\n       * @returns {Function} Returns the callback.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36 },\n       *   { 'user': 'fred',   'age': 40 }\n       * ];\n       *\n       * // Create custom iteratee shorthands.\n       * _.iteratee = _.wrap(_.iteratee, function(callback, func) {\n       *   var p = /^(\\S+)\\s*([<>])\\s*(\\S+)$/.exec(func);\n       *   return !p ? callback(func) : function(object) {\n       *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);\n       *   };\n       * });\n       *\n       * _.filter(users, 'age > 36');\n       * // => [{ 'user': 'fred', 'age': 40 }]\n       */\n      function iteratee(func) {\n        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between a given\n       * object and `source`, returning `true` if the given object has equivalent\n       * property values, else `false`. The created function is equivalent to\n       * `_.isMatch` with a `source` partially applied.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} source The object of property values to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney', 'age': 36, 'active': true },\n       *   { 'user': 'fred',   'age': 40, 'active': false }\n       * ];\n       *\n       * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n       */\n      function matches(source) {\n        return baseMatches(baseClone(source, true));\n      }\n  \n      /**\n       * Creates a function that performs a partial deep comparison between the\n       * value at `path` of a given object to `srcValue`, returning `true` if the\n       * object value is equivalent, else `false`.\n       *\n       * **Note:** This method supports comparing the same values as `_.isEqual`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @param {*} srcValue The value to match.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var users = [\n       *   { 'user': 'barney' },\n       *   { 'user': 'fred' }\n       * ];\n       *\n       * _.find(users, _.matchesProperty('user', 'fred'));\n       * // => { 'user': 'fred' }\n       */\n      function matchesProperty(path, srcValue) {\n        return baseMatchesProperty(path, baseClone(srcValue, true));\n      }\n  \n      /**\n       * Creates a function that invokes the method at `path` of a given object.\n       * Any additional arguments are provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the method to invoke.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': _.constant(2) } } },\n       *   { 'a': { 'b': { 'c': _.constant(1) } } }\n       * ];\n       *\n       * _.map(objects, _.method('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      var method = rest(function(path, args) {\n        return function(object) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * The opposite of `_.method`; this method creates a function that invokes\n       * the method at a given path of `object`. Any additional arguments are\n       * provided to the invoked method.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @param {...*} [args] The arguments to invoke the method with.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = _.times(3, _.constant),\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n       * // => [2, 0]\n       */\n      var methodOf = rest(function(object, args) {\n        return function(path) {\n          return baseInvoke(object, path, args);\n        };\n      });\n  \n      /**\n       * Adds all own enumerable function properties of a source object to the\n       * destination object. If `object` is a function then methods are added to\n       * its prototype as well.\n       *\n       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n       * avoid conflicts caused by modifying the original.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Function|Object} [object=lodash] The destination object.\n       * @param {Object} source The object of functions to add.\n       * @param {Object} [options] The options object.\n       * @param {boolean} [options.chain=true] Specify whether the functions added\n       *  are chainable.\n       * @returns {Function|Object} Returns `object`.\n       * @example\n       *\n       * function vowels(string) {\n       *   return _.filter(string, function(v) {\n       *     return /[aeiou]/i.test(v);\n       *   });\n       * }\n       *\n       * _.mixin({ 'vowels': vowels });\n       * _.vowels('fred');\n       * // => ['e']\n       *\n       * _('fred').vowels().value();\n       * // => ['e']\n       *\n       * _.mixin({ 'vowels': vowels }, { 'chain': false });\n       * _('fred').vowels();\n       * // => ['e']\n       */\n      function mixin(object, source, options) {\n        var props = keys(source),\n            methodNames = baseFunctions(source, props);\n  \n        if (options == null &&\n            !(isObject(source) && (methodNames.length || !props.length))) {\n          options = source;\n          source = object;\n          object = this;\n          methodNames = baseFunctions(source, keys(source));\n        }\n        var chain = (isObject(options) && 'chain' in options) ? options.chain : true,\n            isFunc = isFunction(object);\n  \n        arrayEach(methodNames, function(methodName) {\n          var func = source[methodName];\n          object[methodName] = func;\n          if (isFunc) {\n            object.prototype[methodName] = function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = copyArray(this.__actions__);\n  \n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }\n        });\n  \n        return object;\n      }\n  \n      /**\n       * Reverts the `_` variable to its previous value and returns a reference to\n       * the `lodash` function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @returns {Function} Returns the `lodash` function.\n       * @example\n       *\n       * var lodash = _.noConflict();\n       */\n      function noConflict() {\n        if (root._ === this) {\n          root._ = oldDash;\n        }\n        return this;\n      }\n  \n      /**\n       * A no-operation function that returns `undefined` regardless of the\n       * arguments it receives.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @example\n       *\n       * var object = { 'user': 'fred' };\n       *\n       * _.noop(object) === undefined;\n       * // => true\n       */\n      function noop() {\n        // No operation performed.\n      }\n  \n      /**\n       * Creates a function that returns its nth argument.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [n=0] The index of the argument to return.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.nthArg(1);\n       *\n       * func('a', 'b', 'c');\n       * // => 'b'\n       */\n      function nthArg(n) {\n        n = toInteger(n);\n        return function() {\n          return arguments[n];\n        };\n      }\n  \n      /**\n       * Creates a function that invokes `iteratees` with the arguments provided\n       * to the created function and returns their results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} iteratees The iteratees to invoke.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.over(Math.max, Math.min);\n       *\n       * func(1, 2, 3, 4);\n       * // => [4, 1]\n       */\n      var over = createOver(arrayMap);\n  \n      /**\n       * Creates a function that checks if **all** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overEvery(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => false\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overEvery = createOver(arrayEvery);\n  \n      /**\n       * Creates a function that checks if **any** of the `predicates` return\n       * truthy when invoked with the arguments provided to the created function.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {...(Function|Function[])} predicates The predicates to check.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var func = _.overSome(Boolean, isFinite);\n       *\n       * func('1');\n       * // => true\n       *\n       * func(null);\n       * // => true\n       *\n       * func(NaN);\n       * // => false\n       */\n      var overSome = createOver(arraySome);\n  \n      /**\n       * Creates a function that returns the value at `path` of a given object.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Array|string} path The path of the property to get.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var objects = [\n       *   { 'a': { 'b': { 'c': 2 } } },\n       *   { 'a': { 'b': { 'c': 1 } } }\n       * ];\n       *\n       * _.map(objects, _.property('a.b.c'));\n       * // => [2, 1]\n       *\n       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n       * // => [1, 2]\n       */\n      function property(path) {\n        return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n      }\n  \n      /**\n       * The opposite of `_.property`; this method creates a function that returns\n       * the value at a given path of `object`.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {Object} object The object to query.\n       * @returns {Function} Returns the new function.\n       * @example\n       *\n       * var array = [0, 1, 2],\n       *     object = { 'a': array, 'b': array, 'c': array };\n       *\n       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n       * // => [2, 0]\n       *\n       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n       * // => [2, 0]\n       */\n      function propertyOf(object) {\n        return function(path) {\n          return object == null ? undefined : baseGet(object, path);\n        };\n      }\n  \n      /**\n       * Creates an array of numbers (positive and/or negative) progressing from\n       * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n       * `start` is specified without an `end` or `step`. If `end` is not specified\n       * it's set to `start` with `start` then set to `0`.\n       *\n       * **Note:** JavaScript follows the IEEE-754 standard for resolving\n       * floating-point values which can produce unexpected results.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.range(4);\n       * // => [0, 1, 2, 3]\n       *\n       * _.range(-4);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 5);\n       * // => [1, 2, 3, 4]\n       *\n       * _.range(0, 20, 5);\n       * // => [0, 5, 10, 15]\n       *\n       * _.range(0, -4, -1);\n       * // => [0, -1, -2, -3]\n       *\n       * _.range(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.range(0);\n       * // => []\n       */\n      var range = createRange();\n  \n      /**\n       * This method is like `_.range` except that it populates values in\n       * descending order.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} [start=0] The start of the range.\n       * @param {number} end The end of the range.\n       * @param {number} [step=1] The value to increment or decrement by.\n       * @returns {Array} Returns the new array of numbers.\n       * @example\n       *\n       * _.rangeRight(4);\n       * // => [3, 2, 1, 0]\n       *\n       * _.rangeRight(-4);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 5);\n       * // => [4, 3, 2, 1]\n       *\n       * _.rangeRight(0, 20, 5);\n       * // => [15, 10, 5, 0]\n       *\n       * _.rangeRight(0, -4, -1);\n       * // => [-3, -2, -1, 0]\n       *\n       * _.rangeRight(1, 4, 0);\n       * // => [1, 1, 1]\n       *\n       * _.rangeRight(0);\n       * // => []\n       */\n      var rangeRight = createRange(true);\n  \n      /**\n       * Invokes the iteratee function `n` times, returning an array of the results\n       * of each invocation. The iteratee is invoked with one argument; (index).\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {number} n The number of times to invoke `iteratee`.\n       * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n       * @returns {Array} Returns the array of results.\n       * @example\n       *\n       * _.times(3, String);\n       * // => ['0', '1', '2']\n       *\n       *  _.times(4, _.constant(true));\n       * // => [true, true, true, true]\n       */\n      function times(n, iteratee) {\n        n = toInteger(n);\n        if (n < 1 || n > MAX_SAFE_INTEGER) {\n          return [];\n        }\n        var index = MAX_ARRAY_LENGTH,\n            length = nativeMin(n, MAX_ARRAY_LENGTH);\n  \n        iteratee = baseCastFunction(iteratee);\n        n -= MAX_ARRAY_LENGTH;\n  \n        var result = baseTimes(length, iteratee);\n        while (++index < n) {\n          iteratee(index);\n        }\n        return result;\n      }\n  \n      /**\n       * Converts `value` to a property path array.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {*} value The value to convert.\n       * @returns {Array} Returns the new property path array.\n       * @example\n       *\n       * _.toPath('a.b.c');\n       * // => ['a', 'b', 'c']\n       *\n       * _.toPath('a[0].b.c');\n       * // => ['a', '0', 'b', 'c']\n       *\n       * var path = ['a', 'b', 'c'],\n       *     newPath = _.toPath(path);\n       *\n       * console.log(newPath);\n       * // => ['a', 'b', 'c']\n       *\n       * console.log(path === newPath);\n       * // => false\n       */\n      function toPath(value) {\n        return isArray(value) ? arrayMap(value, String) : stringToPath(value);\n      }\n  \n      /**\n       * Generates a unique ID. If `prefix` is given the ID is appended to it.\n       *\n       * @static\n       * @memberOf _\n       * @category Util\n       * @param {string} [prefix=''] The value to prefix the ID with.\n       * @returns {string} Returns the unique ID.\n       * @example\n       *\n       * _.uniqueId('contact_');\n       * // => 'contact_104'\n       *\n       * _.uniqueId();\n       * // => '105'\n       */\n      function uniqueId(prefix) {\n        var id = ++idCounter;\n        return toString(prefix) + id;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * Adds two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} augend The first number in an addition.\n       * @param {number} addend The second number in an addition.\n       * @returns {number} Returns the total.\n       * @example\n       *\n       * _.add(6, 4);\n       * // => 10\n       */\n      function add(augend, addend) {\n        var result;\n        if (augend === undefined && addend === undefined) {\n          return 0;\n        }\n        if (augend !== undefined) {\n          result = augend;\n        }\n        if (addend !== undefined) {\n          result = result === undefined ? addend : (result + addend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes `number` rounded up to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round up.\n       * @param {number} [precision=0] The precision to round up to.\n       * @returns {number} Returns the rounded up number.\n       * @example\n       *\n       * _.ceil(4.006);\n       * // => 5\n       *\n       * _.ceil(6.004, 2);\n       * // => 6.01\n       *\n       * _.ceil(6040, -2);\n       * // => 6100\n       */\n      var ceil = createRound('ceil');\n  \n      /**\n       * Computes `number` rounded down to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round down.\n       * @param {number} [precision=0] The precision to round down to.\n       * @returns {number} Returns the rounded down number.\n       * @example\n       *\n       * _.floor(4.006);\n       * // => 4\n       *\n       * _.floor(0.046, 2);\n       * // => 0.04\n       *\n       * _.floor(4060, -2);\n       * // => 4000\n       */\n      var floor = createRound('floor');\n  \n      /**\n       * Computes the maximum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * _.max([4, 2, 8, 6]);\n       * // => 8\n       *\n       * _.max([]);\n       * // => undefined\n       */\n      function max(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, gt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.max` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the maximum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.maxBy(objects, function(o) { return o.n; });\n       * // => { 'n': 2 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.maxBy(objects, 'n');\n       * // => { 'n': 2 }\n       */\n      function maxBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), gt)\n          : undefined;\n      }\n  \n      /**\n       * Computes the mean of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the mean.\n       * @example\n       *\n       * _.mean([4, 2, 8, 6]);\n       * // => 5\n       */\n      function mean(array) {\n        return sum(array) / (array ? array.length : 0);\n      }\n  \n      /**\n       * Computes the minimum value of `array`. If `array` is empty or falsey\n       * `undefined` is returned.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * _.min([4, 2, 8, 6]);\n       * // => 2\n       *\n       * _.min([]);\n       * // => undefined\n       */\n      function min(array) {\n        return (array && array.length)\n          ? baseExtremum(array, identity, lt)\n          : undefined;\n      }\n  \n      /**\n       * This method is like `_.min` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the criterion by which\n       * the value is ranked. The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {*} Returns the minimum value.\n       * @example\n       *\n       * var objects = [{ 'n': 1 }, { 'n': 2 }];\n       *\n       * _.minBy(objects, function(o) { return o.n; });\n       * // => { 'n': 1 }\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.minBy(objects, 'n');\n       * // => { 'n': 1 }\n       */\n      function minBy(array, iteratee) {\n        return (array && array.length)\n          ? baseExtremum(array, getIteratee(iteratee), lt)\n          : undefined;\n      }\n  \n      /**\n       * Computes `number` rounded to `precision`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} number The number to round.\n       * @param {number} [precision=0] The precision to round to.\n       * @returns {number} Returns the rounded number.\n       * @example\n       *\n       * _.round(4.006);\n       * // => 4\n       *\n       * _.round(4.006, 2);\n       * // => 4.01\n       *\n       * _.round(4060, -2);\n       * // => 4100\n       */\n      var round = createRound('round');\n  \n      /**\n       * Subtract two numbers.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {number} minuend The first number in a subtraction.\n       * @param {number} subtrahend The second number in a subtraction.\n       * @returns {number} Returns the difference.\n       * @example\n       *\n       * _.subtract(6, 4);\n       * // => 2\n       */\n      function subtract(minuend, subtrahend) {\n        var result;\n        if (minuend === undefined && subtrahend === undefined) {\n          return 0;\n        }\n        if (minuend !== undefined) {\n          result = minuend;\n        }\n        if (subtrahend !== undefined) {\n          result = result === undefined ? subtrahend : (result - subtrahend);\n        }\n        return result;\n      }\n  \n      /**\n       * Computes the sum of the values in `array`.\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * _.sum([4, 2, 8, 6]);\n       * // => 20\n       */\n      function sum(array) {\n        return (array && array.length)\n          ? baseSum(array, identity)\n          : 0;\n      }\n  \n      /**\n       * This method is like `_.sum` except that it accepts `iteratee` which is\n       * invoked for each element in `array` to generate the value to be summed.\n       * The iteratee is invoked with one argument: (value).\n       *\n       * @static\n       * @memberOf _\n       * @category Math\n       * @param {Array} array The array to iterate over.\n       * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.\n       * @returns {number} Returns the sum.\n       * @example\n       *\n       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n       *\n       * _.sumBy(objects, function(o) { return o.n; });\n       * // => 20\n       *\n       * // The `_.property` iteratee shorthand.\n       * _.sumBy(objects, 'n');\n       * // => 20\n       */\n      function sumBy(array, iteratee) {\n        return (array && array.length)\n          ? baseSum(array, getIteratee(iteratee))\n          : 0;\n      }\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Ensure wrappers are instances of `baseLodash`.\n      lodash.prototype = baseLodash.prototype;\n  \n      LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n      LodashWrapper.prototype.constructor = LodashWrapper;\n  \n      LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n      LazyWrapper.prototype.constructor = LazyWrapper;\n  \n      // Avoid inheriting from `Object.prototype` when possible.\n      Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;\n  \n      // Add functions to the `MapCache`.\n      MapCache.prototype.clear = mapClear;\n      MapCache.prototype['delete'] = mapDelete;\n      MapCache.prototype.get = mapGet;\n      MapCache.prototype.has = mapHas;\n      MapCache.prototype.set = mapSet;\n  \n      // Add functions to the `SetCache`.\n      SetCache.prototype.push = cachePush;\n  \n      // Add functions to the `Stack` cache.\n      Stack.prototype.clear = stackClear;\n      Stack.prototype['delete'] = stackDelete;\n      Stack.prototype.get = stackGet;\n      Stack.prototype.has = stackHas;\n      Stack.prototype.set = stackSet;\n  \n      // Assign cache to `_.memoize`.\n      memoize.Cache = MapCache;\n  \n      // Add functions that return wrapped values when chaining.\n      lodash.after = after;\n      lodash.ary = ary;\n      lodash.assign = assign;\n      lodash.assignIn = assignIn;\n      lodash.assignInWith = assignInWith;\n      lodash.assignWith = assignWith;\n      lodash.at = at;\n      lodash.before = before;\n      lodash.bind = bind;\n      lodash.bindAll = bindAll;\n      lodash.bindKey = bindKey;\n      lodash.castArray = castArray;\n      lodash.chain = chain;\n      lodash.chunk = chunk;\n      lodash.compact = compact;\n      lodash.concat = concat;\n      lodash.cond = cond;\n      lodash.conforms = conforms;\n      lodash.constant = constant;\n      lodash.countBy = countBy;\n      lodash.create = create;\n      lodash.curry = curry;\n      lodash.curryRight = curryRight;\n      lodash.debounce = debounce;\n      lodash.defaults = defaults;\n      lodash.defaultsDeep = defaultsDeep;\n      lodash.defer = defer;\n      lodash.delay = delay;\n      lodash.difference = difference;\n      lodash.differenceBy = differenceBy;\n      lodash.differenceWith = differenceWith;\n      lodash.drop = drop;\n      lodash.dropRight = dropRight;\n      lodash.dropRightWhile = dropRightWhile;\n      lodash.dropWhile = dropWhile;\n      lodash.fill = fill;\n      lodash.filter = filter;\n      lodash.flatMap = flatMap;\n      lodash.flatten = flatten;\n      lodash.flattenDeep = flattenDeep;\n      lodash.flattenDepth = flattenDepth;\n      lodash.flip = flip;\n      lodash.flow = flow;\n      lodash.flowRight = flowRight;\n      lodash.fromPairs = fromPairs;\n      lodash.functions = functions;\n      lodash.functionsIn = functionsIn;\n      lodash.groupBy = groupBy;\n      lodash.initial = initial;\n      lodash.intersection = intersection;\n      lodash.intersectionBy = intersectionBy;\n      lodash.intersectionWith = intersectionWith;\n      lodash.invert = invert;\n      lodash.invertBy = invertBy;\n      lodash.invokeMap = invokeMap;\n      lodash.iteratee = iteratee;\n      lodash.keyBy = keyBy;\n      lodash.keys = keys;\n      lodash.keysIn = keysIn;\n      lodash.map = map;\n      lodash.mapKeys = mapKeys;\n      lodash.mapValues = mapValues;\n      lodash.matches = matches;\n      lodash.matchesProperty = matchesProperty;\n      lodash.memoize = memoize;\n      lodash.merge = merge;\n      lodash.mergeWith = mergeWith;\n      lodash.method = method;\n      lodash.methodOf = methodOf;\n      lodash.mixin = mixin;\n      lodash.negate = negate;\n      lodash.nthArg = nthArg;\n      lodash.omit = omit;\n      lodash.omitBy = omitBy;\n      lodash.once = once;\n      lodash.orderBy = orderBy;\n      lodash.over = over;\n      lodash.overArgs = overArgs;\n      lodash.overEvery = overEvery;\n      lodash.overSome = overSome;\n      lodash.partial = partial;\n      lodash.partialRight = partialRight;\n      lodash.partition = partition;\n      lodash.pick = pick;\n      lodash.pickBy = pickBy;\n      lodash.property = property;\n      lodash.propertyOf = propertyOf;\n      lodash.pull = pull;\n      lodash.pullAll = pullAll;\n      lodash.pullAllBy = pullAllBy;\n      lodash.pullAt = pullAt;\n      lodash.range = range;\n      lodash.rangeRight = rangeRight;\n      lodash.rearg = rearg;\n      lodash.reject = reject;\n      lodash.remove = remove;\n      lodash.rest = rest;\n      lodash.reverse = reverse;\n      lodash.sampleSize = sampleSize;\n      lodash.set = set;\n      lodash.setWith = setWith;\n      lodash.shuffle = shuffle;\n      lodash.slice = slice;\n      lodash.sortBy = sortBy;\n      lodash.sortedUniq = sortedUniq;\n      lodash.sortedUniqBy = sortedUniqBy;\n      lodash.split = split;\n      lodash.spread = spread;\n      lodash.tail = tail;\n      lodash.take = take;\n      lodash.takeRight = takeRight;\n      lodash.takeRightWhile = takeRightWhile;\n      lodash.takeWhile = takeWhile;\n      lodash.tap = tap;\n      lodash.throttle = throttle;\n      lodash.thru = thru;\n      lodash.toArray = toArray;\n      lodash.toPairs = toPairs;\n      lodash.toPairsIn = toPairsIn;\n      lodash.toPath = toPath;\n      lodash.toPlainObject = toPlainObject;\n      lodash.transform = transform;\n      lodash.unary = unary;\n      lodash.union = union;\n      lodash.unionBy = unionBy;\n      lodash.unionWith = unionWith;\n      lodash.uniq = uniq;\n      lodash.uniqBy = uniqBy;\n      lodash.uniqWith = uniqWith;\n      lodash.unset = unset;\n      lodash.unzip = unzip;\n      lodash.unzipWith = unzipWith;\n      lodash.values = values;\n      lodash.valuesIn = valuesIn;\n      lodash.without = without;\n      lodash.words = words;\n      lodash.wrap = wrap;\n      lodash.xor = xor;\n      lodash.xorBy = xorBy;\n      lodash.xorWith = xorWith;\n      lodash.zip = zip;\n      lodash.zipObject = zipObject;\n      lodash.zipObjectDeep = zipObjectDeep;\n      lodash.zipWith = zipWith;\n  \n      // Add aliases.\n      lodash.extend = assignIn;\n      lodash.extendWith = assignInWith;\n  \n      // Add functions to `lodash.prototype`.\n      mixin(lodash, lodash);\n  \n      /*------------------------------------------------------------------------*/\n  \n      // Add functions that return unwrapped values when chaining.\n      lodash.add = add;\n      lodash.attempt = attempt;\n      lodash.camelCase = camelCase;\n      lodash.capitalize = capitalize;\n      lodash.ceil = ceil;\n      lodash.clamp = clamp;\n      lodash.clone = clone;\n      lodash.cloneDeep = cloneDeep;\n      lodash.cloneDeepWith = cloneDeepWith;\n      lodash.cloneWith = cloneWith;\n      lodash.deburr = deburr;\n      lodash.endsWith = endsWith;\n      lodash.eq = eq;\n      lodash.escape = escape;\n      lodash.escapeRegExp = escapeRegExp;\n      lodash.every = every;\n      lodash.find = find;\n      lodash.findIndex = findIndex;\n      lodash.findKey = findKey;\n      lodash.findLast = findLast;\n      lodash.findLastIndex = findLastIndex;\n      lodash.findLastKey = findLastKey;\n      lodash.floor = floor;\n      lodash.forEach = forEach;\n      lodash.forEachRight = forEachRight;\n      lodash.forIn = forIn;\n      lodash.forInRight = forInRight;\n      lodash.forOwn = forOwn;\n      lodash.forOwnRight = forOwnRight;\n      lodash.get = get;\n      lodash.gt = gt;\n      lodash.gte = gte;\n      lodash.has = has;\n      lodash.hasIn = hasIn;\n      lodash.head = head;\n      lodash.identity = identity;\n      lodash.includes = includes;\n      lodash.indexOf = indexOf;\n      lodash.inRange = inRange;\n      lodash.invoke = invoke;\n      lodash.isArguments = isArguments;\n      lodash.isArray = isArray;\n      lodash.isArrayBuffer = isArrayBuffer;\n      lodash.isArrayLike = isArrayLike;\n      lodash.isArrayLikeObject = isArrayLikeObject;\n      lodash.isBoolean = isBoolean;\n      lodash.isBuffer = isBuffer;\n      lodash.isDate = isDate;\n      lodash.isElement = isElement;\n      lodash.isEmpty = isEmpty;\n      lodash.isEqual = isEqual;\n      lodash.isEqualWith = isEqualWith;\n      lodash.isError = isError;\n      lodash.isFinite = isFinite;\n      lodash.isFunction = isFunction;\n      lodash.isInteger = isInteger;\n      lodash.isLength = isLength;\n      lodash.isMap = isMap;\n      lodash.isMatch = isMatch;\n      lodash.isMatchWith = isMatchWith;\n      lodash.isNaN = isNaN;\n      lodash.isNative = isNative;\n      lodash.isNil = isNil;\n      lodash.isNull = isNull;\n      lodash.isNumber = isNumber;\n      lodash.isObject = isObject;\n      lodash.isObjectLike = isObjectLike;\n      lodash.isPlainObject = isPlainObject;\n      lodash.isRegExp = isRegExp;\n      lodash.isSafeInteger = isSafeInteger;\n      lodash.isSet = isSet;\n      lodash.isString = isString;\n      lodash.isSymbol = isSymbol;\n      lodash.isTypedArray = isTypedArray;\n      lodash.isUndefined = isUndefined;\n      lodash.isWeakMap = isWeakMap;\n      lodash.isWeakSet = isWeakSet;\n      lodash.join = join;\n      lodash.kebabCase = kebabCase;\n      lodash.last = last;\n      lodash.lastIndexOf = lastIndexOf;\n      lodash.lowerCase = lowerCase;\n      lodash.lowerFirst = lowerFirst;\n      lodash.lt = lt;\n      lodash.lte = lte;\n      lodash.max = max;\n      lodash.maxBy = maxBy;\n      lodash.mean = mean;\n      lodash.min = min;\n      lodash.minBy = minBy;\n      lodash.noConflict = noConflict;\n      lodash.noop = noop;\n      lodash.now = now;\n      lodash.pad = pad;\n      lodash.padEnd = padEnd;\n      lodash.padStart = padStart;\n      lodash.parseInt = parseInt;\n      lodash.random = random;\n      lodash.reduce = reduce;\n      lodash.reduceRight = reduceRight;\n      lodash.repeat = repeat;\n      lodash.replace = replace;\n      lodash.result = result;\n      lodash.round = round;\n      lodash.runInContext = runInContext;\n      lodash.sample = sample;\n      lodash.size = size;\n      lodash.snakeCase = snakeCase;\n      lodash.some = some;\n      lodash.sortedIndex = sortedIndex;\n      lodash.sortedIndexBy = sortedIndexBy;\n      lodash.sortedIndexOf = sortedIndexOf;\n      lodash.sortedLastIndex = sortedLastIndex;\n      lodash.sortedLastIndexBy = sortedLastIndexBy;\n      lodash.sortedLastIndexOf = sortedLastIndexOf;\n      lodash.startCase = startCase;\n      lodash.startsWith = startsWith;\n      lodash.subtract = subtract;\n      lodash.sum = sum;\n      lodash.sumBy = sumBy;\n      lodash.template = template;\n      lodash.times = times;\n      lodash.toInteger = toInteger;\n      lodash.toLength = toLength;\n      lodash.toLower = toLower;\n      lodash.toNumber = toNumber;\n      lodash.toSafeInteger = toSafeInteger;\n      lodash.toString = toString;\n      lodash.toUpper = toUpper;\n      lodash.trim = trim;\n      lodash.trimEnd = trimEnd;\n      lodash.trimStart = trimStart;\n      lodash.truncate = truncate;\n      lodash.unescape = unescape;\n      lodash.uniqueId = uniqueId;\n      lodash.upperCase = upperCase;\n      lodash.upperFirst = upperFirst;\n  \n      // Add aliases.\n      lodash.each = forEach;\n      lodash.eachRight = forEachRight;\n      lodash.first = head;\n  \n      mixin(lodash, (function() {\n        var source = {};\n        baseForOwn(lodash, function(func, methodName) {\n          if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n            source[methodName] = func;\n          }\n        });\n        return source;\n      }()), { 'chain': false });\n  \n      /*------------------------------------------------------------------------*/\n  \n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf _\n       * @type {string}\n       */\n      lodash.VERSION = VERSION;\n  \n      // Assign default placeholders.\n      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n        lodash[methodName].placeholder = lodash;\n      });\n  \n      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n      arrayEach(['drop', 'take'], function(methodName, index) {\n        LazyWrapper.prototype[methodName] = function(n) {\n          var filtered = this.__filtered__;\n          if (filtered && !index) {\n            return new LazyWrapper(this);\n          }\n          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n  \n          var result = this.clone();\n          if (filtered) {\n            result.__takeCount__ = nativeMin(n, result.__takeCount__);\n          } else {\n            result.__views__.push({\n              'size': nativeMin(n, MAX_ARRAY_LENGTH),\n              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n            });\n          }\n          return result;\n        };\n  \n        LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n          return this.reverse()[methodName](n).reverse();\n        };\n      });\n  \n      // Add `LazyWrapper` methods that accept an `iteratee` value.\n      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n        var type = index + 1,\n            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n  \n        LazyWrapper.prototype[methodName] = function(iteratee) {\n          var result = this.clone();\n          result.__iteratees__.push({\n            'iteratee': getIteratee(iteratee, 3),\n            'type': type\n          });\n          result.__filtered__ = result.__filtered__ || isFilter;\n          return result;\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.head` and `_.last`.\n      arrayEach(['head', 'last'], function(methodName, index) {\n        var takeName = 'take' + (index ? 'Right' : '');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this[takeName](1).value()[0];\n        };\n      });\n  \n      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n      arrayEach(['initial', 'tail'], function(methodName, index) {\n        var dropName = 'drop' + (index ? '' : 'Right');\n  \n        LazyWrapper.prototype[methodName] = function() {\n          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n        };\n      });\n  \n      LazyWrapper.prototype.compact = function() {\n        return this.filter(identity);\n      };\n  \n      LazyWrapper.prototype.find = function(predicate) {\n        return this.filter(predicate).head();\n      };\n  \n      LazyWrapper.prototype.findLast = function(predicate) {\n        return this.reverse().find(predicate);\n      };\n  \n      LazyWrapper.prototype.invokeMap = rest(function(path, args) {\n        if (typeof path == 'function') {\n          return new LazyWrapper(this);\n        }\n        return this.map(function(value) {\n          return baseInvoke(value, path, args);\n        });\n      });\n  \n      LazyWrapper.prototype.reject = function(predicate) {\n        predicate = getIteratee(predicate, 3);\n        return this.filter(function(value) {\n          return !predicate(value);\n        });\n      };\n  \n      LazyWrapper.prototype.slice = function(start, end) {\n        start = toInteger(start);\n  \n        var result = this;\n        if (result.__filtered__ && (start > 0 || end < 0)) {\n          return new LazyWrapper(result);\n        }\n        if (start < 0) {\n          result = result.takeRight(-start);\n        } else if (start) {\n          result = result.drop(start);\n        }\n        if (end !== undefined) {\n          end = toInteger(end);\n          result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n        }\n        return result;\n      };\n  \n      LazyWrapper.prototype.takeRightWhile = function(predicate) {\n        return this.reverse().takeWhile(predicate).reverse();\n      };\n  \n      LazyWrapper.prototype.toArray = function() {\n        return this.take(MAX_ARRAY_LENGTH);\n      };\n  \n      // Add `LazyWrapper` methods to `lodash.prototype`.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n            isTaker = /^(?:head|last)$/.test(methodName),\n            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n            retUnwrapped = isTaker || /^find/.test(methodName);\n  \n        if (!lodashFunc) {\n          return;\n        }\n        lodash.prototype[methodName] = function() {\n          var value = this.__wrapped__,\n              args = isTaker ? [1] : arguments,\n              isLazy = value instanceof LazyWrapper,\n              iteratee = args[0],\n              useLazy = isLazy || isArray(value);\n  \n          var interceptor = function(value) {\n            var result = lodashFunc.apply(lodash, arrayPush([value], args));\n            return (isTaker && chainAll) ? result[0] : result;\n          };\n  \n          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n            // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n            isLazy = useLazy = false;\n          }\n          var chainAll = this.__chain__,\n              isHybrid = !!this.__actions__.length,\n              isUnwrapped = retUnwrapped && !chainAll,\n              onlyLazy = isLazy && !isHybrid;\n  \n          if (!retUnwrapped && useLazy) {\n            value = onlyLazy ? value : new LazyWrapper(this);\n            var result = func.apply(value, args);\n            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n            return new LodashWrapper(result, chainAll);\n          }\n          if (isUnwrapped && onlyLazy) {\n            return func.apply(this, args);\n          }\n          result = this.thru(interceptor);\n          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n        };\n      });\n  \n      // Add `Array` and `String` methods to `lodash.prototype`.\n      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n        var func = arrayProto[methodName],\n            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n            retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n  \n        lodash.prototype[methodName] = function() {\n          var args = arguments;\n          if (retUnwrapped && !this.__chain__) {\n            return func.apply(this.value(), args);\n          }\n          return this[chainName](function(value) {\n            return func.apply(value, args);\n          });\n        };\n      });\n  \n      // Map minified function names to their real names.\n      baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n        var lodashFunc = lodash[methodName];\n        if (lodashFunc) {\n          var key = (lodashFunc.name + ''),\n              names = realNames[key] || (realNames[key] = []);\n  \n          names.push({ 'name': methodName, 'func': lodashFunc });\n        }\n      });\n  \n      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{\n        'name': 'wrapper',\n        'func': undefined\n      }];\n  \n      // Add functions to the lazy wrapper.\n      LazyWrapper.prototype.clone = lazyClone;\n      LazyWrapper.prototype.reverse = lazyReverse;\n      LazyWrapper.prototype.value = lazyValue;\n  \n      // Add chaining functions to the `lodash` wrapper.\n      lodash.prototype.at = wrapperAt;\n      lodash.prototype.chain = wrapperChain;\n      lodash.prototype.commit = wrapperCommit;\n      lodash.prototype.flatMap = wrapperFlatMap;\n      lodash.prototype.next = wrapperNext;\n      lodash.prototype.plant = wrapperPlant;\n      lodash.prototype.reverse = wrapperReverse;\n      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n  \n      if (iteratorSymbol) {\n        lodash.prototype[iteratorSymbol] = wrapperToIterator;\n      }\n      return lodash;\n    }\n  \n    /*--------------------------------------------------------------------------*/\n  \n    // Export lodash.\n    var _ = runInContext();\n  \n    // Expose lodash on the free variable `window` or `self` when available. This\n    // prevents errors in cases where lodash is loaded by a script tag in the presence\n    // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.\n    (freeWindow || freeSelf || {})._ = _;\n  \n    // Some AMD build optimizers like r.js check for condition patterns like the following:\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      // Define as an anonymous module so, through path mapping, it can be\n      // referenced as the \"underscore\" module.\n      define(function() {\n        return _;\n      });\n    }\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    else if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = _)._ = _;\n      }\n      // Export for CommonJS support.\n      freeExports._ = _;\n    }\n    else {\n      // Export to the global object.\n      root._ = _;\n    }\n  }.call(this));"}],"Post":[{"title":"css基础积累之 attr-content","date":"2017-08-11T08:42:28.000Z","_content":"\nCss越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入`content`。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。\n\n\n<!--more-->\n\n1. 为了优雅，我们再html中加入`data-tips`属性\n2. 使用`attr`获取`data-tips`内容，并放入`content`中\n3. 使用`white-space: pre`解决空格问题\n4. 使用`Unicode `码解决换行问题\n\n\n[实例](../demo/css-attr-content.html)\n","source":"_posts/css-attr-content.md","raw":"title: css基础积累之 attr-content\ndate: 2017-08-11 16:42:28\ntags:\n- Css 积累\ncategories:\n- Css\n---\n\nCss越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入`content`。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。\n\n\n<!--more-->\n\n1. 为了优雅，我们再html中加入`data-tips`属性\n2. 使用`attr`获取`data-tips`内容，并放入`content`中\n3. 使用`white-space: pre`解决空格问题\n4. 使用`Unicode `码解决换行问题\n\n\n[实例](../demo/css-attr-content.html)\n","slug":"css-attr-content","published":1,"updated":"2019-04-30T06:04:29.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768g0000dkhsgmwzgz89","content":"<p>Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入<code>content</code>。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。</p>\n<a id=\"more\"></a>\n<ol>\n<li>为了优雅，我们再html中加入<code>data-tips</code>属性</li>\n<li>使用<code>attr</code>获取<code>data-tips</code>内容，并放入<code>content</code>中</li>\n<li>使用<code>white-space: pre</code>解决空格问题</li>\n<li>使用<code>Unicode</code>码解决换行问题</li>\n</ol>\n<p><a href=\"../demo/css-attr-content.html\">实例</a></p>\n","excerpt":"<p>Css越来越强大，最近看到attr，发现css都可以获取节点的data属性内容并放入<code>content</code>。有了这个属性，我们可以完全只使用css的情况下，写出一些需要JS的效果（譬如tips），而且还很优雅。</p>","more":"<ol>\n<li>为了优雅，我们再html中加入<code>data-tips</code>属性</li>\n<li>使用<code>attr</code>获取<code>data-tips</code>内容，并放入<code>content</code>中</li>\n<li>使用<code>white-space: pre</code>解决空格问题</li>\n<li>使用<code>Unicode</code>码解决换行问题</li>\n</ol>\n<p><a href=\"../demo/css-attr-content.html\">实例</a></p>"},{"title":"css3-transfrom","date":"2017-11-07T02:42:59.000Z","_content":"\n\n{% blockquote W3C https://www.w3.org/TR/css-transforms-1/ css-transforms %}\nCSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. \n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。\n<!--more-->\n## Transition\n````\ntransform：none | matrix(<number>,<number>,<number>,<number>,<number>,<number>)? translate(<length>[,<length>])? translateX(<length>)? translateY(<length>)? rotate(<angle>)? scale(<number>[,<number>])? scaleX(<number>)? scaleY(<number>)? skew(<angle>[,<angle>])? skewX(<<angle>) || skewY(<angle>)?\n````\n````css\n    /* 实际用法*/\n    -webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+\n    -moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+\n    -o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+\n    -ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+\n    transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准\n````\n\nTransform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transfrom（变形）取值\n\n- translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- translateX(<length>)：指定对象X轴（水平方向）的平移 \n- translateY(<length>)：指定对象Y轴（垂直方向）的平移\n- rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center\n- scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n- scaleX(<number>)：指定对象X轴的（水平方向）缩放\n- scaleY(<number>)：指定对象Y轴的（垂直方向）缩放\n- skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- skewX(<angle>)：指定对象X轴的（水平方向）扭曲\n- skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 \n- matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\n\n直接看DEMO，加深印象\n\n\n<div class=\"transfrom\">\n<ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n### transform-origin（改变元素基点）\n\n````\ntransform-origin：[ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ]?\n/* 实际用法*/\n-webkit-transform-origin:top left;//chrome1.0x+ safari3.1+\n-moz-transform-origin:top left;//firefox3.5+\n-o-transform-origin:top left;//opera 10.5+\n-ms-transform-origin:top left;//IE9+\n-transform-origin:top left;//W3C标准\n````\n\n- <percentage>：用百分比指定坐标值。可以为负值。\n- <length>：用长度值指定坐标值。可以为负值。\n- left：指定原点的横坐标为left\n- center：指定原点的横坐标为center\n- right：指定原点的横坐标为right\n- top：指定原点的纵坐标为top\n- center：指定原点的纵坐标为center \n- bottom：指定原点的纵坐标为bottom \n\nleft,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/css3-transfrom.md","raw":"title: css3-transfrom\ndate: 2017-11-07 10:42:59\ntags:\n---\n\n\n{% blockquote W3C https://www.w3.org/TR/css-transforms-1/ css-transforms %}\nCSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. \n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。\n<!--more-->\n## Transition\n````\ntransform：none | matrix(<number>,<number>,<number>,<number>,<number>,<number>)? translate(<length>[,<length>])? translateX(<length>)? translateY(<length>)? rotate(<angle>)? scale(<number>[,<number>])? scaleX(<number>)? scaleY(<number>)? skew(<angle>[,<angle>])? skewX(<<angle>) || skewY(<angle>)?\n````\n````css\n    /* 实际用法*/\n    -webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+\n    -moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+\n    -o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+\n    -ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+\n    transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准\n````\n\nTransform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transfrom（变形）取值\n\n- translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- translateX(<length>)：指定对象X轴（水平方向）的平移 \n- translateY(<length>)：指定对象Y轴（垂直方向）的平移\n- rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center\n- scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n- scaleX(<number>)：指定对象X轴的（水平方向）缩放\n- scaleY(<number>)：指定对象Y轴的（垂直方向）缩放\n- skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n- skewX(<angle>)：指定对象X轴的（水平方向）扭曲\n- skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 \n- matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\n\n直接看DEMO，加深印象\n\n\n<div class=\"transfrom\">\n<ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n### transform-origin（改变元素基点）\n\n````\ntransform-origin：[ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ]?\n/* 实际用法*/\n-webkit-transform-origin:top left;//chrome1.0x+ safari3.1+\n-moz-transform-origin:top left;//firefox3.5+\n-o-transform-origin:top left;//opera 10.5+\n-ms-transform-origin:top left;//IE9+\n-transform-origin:top left;//W3C标准\n````\n\n- <percentage>：用百分比指定坐标值。可以为负值。\n- <length>：用长度值指定坐标值。可以为负值。\n- left：指定原点的横坐标为left\n- center：指定原点的横坐标为center\n- right：指定原点的横坐标为right\n- top：指定原点的纵坐标为top\n- center：指定原点的纵坐标为center \n- bottom：指定原点的纵坐标为bottom \n\nleft,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"css3-transfrom","published":1,"updated":"2019-04-30T06:04:29.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768m0002dkhscl47bxc2","content":"<blockquote><p>CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. </p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css-transforms-1/\" target=\"_blank\" rel=\"external\">css-transforms</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。<br><a id=\"more\"></a></p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform：<span class=\"keyword\">none</span> | matrix(<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>)? translate(<span class=\"variable\">&lt;length&gt;</span>[,<span class=\"variable\">&lt;length&gt;</span>])? translateX(<span class=\"variable\">&lt;length&gt;</span>)? translateY(<span class=\"variable\">&lt;length&gt;</span>)? rotate(<span class=\"variable\">&lt;angle&gt;</span>)? scale(<span class=\"variable\">&lt;number&gt;</span>[,<span class=\"variable\">&lt;number&gt;</span>])? scaleX(<span class=\"variable\">&lt;number&gt;</span>)? scaleY(<span class=\"variable\">&lt;number&gt;</span>)? skew(<span class=\"variable\">&lt;angle&gt;</span>[,<span class=\"variable\">&lt;angle&gt;</span>])? skewX(<span class=\"variable\">&lt;&lt;angle&gt;</span>) || skewY(<span class=\"variable\">&lt;angle&gt;</span>)?</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 实际用法*/</span><br><span class=\"line\">-webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+</span><br><span class=\"line\">-moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+</span><br><span class=\"line\">-o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+</span><br><span class=\"line\">-ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+</span><br><span class=\"line\">transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准</span><br></pre></td></tr></table></figure>\n<p>Transform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transfrom（变形）取值\"><a href=\"#Transfrom（变形）取值\" class=\"headerlink\" title=\"Transfrom（变形）取值\"></a>Transfrom（变形）取值</h3><ul>\n<li>translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</length></length></li>\n<li>translateX(<length>)：指定对象X轴（水平方向）的平移 </length></li>\n<li>translateY(<length>)：指定对象Y轴（垂直方向）的平移</length></li>\n<li>rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center</angle></li>\n<li>scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值</number></number></li>\n<li>scaleX(<number>)：指定对象X轴的（水平方向）缩放</number></li>\n<li>scaleY(<number>)：指定对象Y轴的（垂直方向）缩放</number></li>\n<li>skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</angle></angle></li>\n<li>skewX(<angle>)：指定对象X轴的（水平方向）扭曲</angle></li>\n<li>skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 </angle></li>\n<li>matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵</number></number></number></number></number></number></li>\n</ul>\n<p>直接看DEMO，加深印象</p>\n<div class=\"transfrom\"><br><ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n<h3 id=\"transform-origin（改变元素基点）\"><a href=\"#transform-origin（改变元素基点）\" class=\"headerlink\" title=\"transform-origin（改变元素基点）\"></a>transform-origin（改变元素基点）</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-origin</span>：<span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | left | center | right ]</span> <span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | top | center | bottom ]</span>?</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\">-webkit-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//chrome1.0x+ safari3.1+</span></span><br><span class=\"line\">-moz-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//firefox3.5+</span></span><br><span class=\"line\">-o-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//opera 10.5+</span></span><br><span class=\"line\">-ms-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//IE9+</span></span><br><span class=\"line\">-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//W3C标准</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><percentage>：用百分比指定坐标值。可以为负值。</percentage></li>\n<li><length>：用长度值指定坐标值。可以为负值。</length></li>\n<li>left：指定原点的横坐标为left</li>\n<li>center：指定原点的横坐标为center</li>\n<li>right：指定原点的横坐标为right</li>\n<li>top：指定原点的纵坐标为top</li>\n<li>center：指定原点的纵坐标为center </li>\n<li>bottom：指定原点的纵坐标为bottom </li>\n</ul>\n<p>left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变</p>\n","excerpt":"<blockquote><p>CSS transforms allows elements styled with CSS to be transformed in two-dimensional or three-dimensional space. </p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css-transforms-1/\">css-transforms</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：transforms 可以让元素的css在二维或者三维空间变化。<br>","more":"</p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform：<span class=\"keyword\">none</span> | matrix(<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>,<span class=\"variable\">&lt;number&gt;</span>)? translate(<span class=\"variable\">&lt;length&gt;</span>[,<span class=\"variable\">&lt;length&gt;</span>])? translateX(<span class=\"variable\">&lt;length&gt;</span>)? translateY(<span class=\"variable\">&lt;length&gt;</span>)? rotate(<span class=\"variable\">&lt;angle&gt;</span>)? scale(<span class=\"variable\">&lt;number&gt;</span>[,<span class=\"variable\">&lt;number&gt;</span>])? scaleX(<span class=\"variable\">&lt;number&gt;</span>)? scaleY(<span class=\"variable\">&lt;number&gt;</span>)? skew(<span class=\"variable\">&lt;angle&gt;</span>[,<span class=\"variable\">&lt;angle&gt;</span>])? skewX(<span class=\"variable\">&lt;&lt;angle&gt;</span>) || skewY(<span class=\"variable\">&lt;angle&gt;</span>)?</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 实际用法*/</span><br><span class=\"line\">-webkit-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//chrome1.0x+ safari3.1+</span><br><span class=\"line\">-moz-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//firefox3.5+</span><br><span class=\"line\">-o-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//opera 10.5+</span><br><span class=\"line\">-ms-transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//IE9+</span><br><span class=\"line\">transform: rotate(4deg) scale(1) skew(1deg) translate(10px);//W3C标准</span><br></pre></td></tr></table></figure>\n<p>Transform 属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transfrom（变形）取值\"><a href=\"#Transfrom（变形）取值\" class=\"headerlink\" title=\"Transfrom（变形）取值\"></a>Transfrom（变形）取值</h3><ul>\n<li>translate(<length>[, <length>])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</li>\n<li>translateX(<length>)：指定对象X轴（水平方向）的平移 </li>\n<li>translateY(<length>)：指定对象Y轴（垂直方向）的平移</li>\n<li>rotate(<angle>)：指定对象的2D rotation（2D旋转），按照 ransform-origin 属性的定义为基点，默认为 center,center</li>\n<li>scale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值</li>\n<li>scaleX(<number>)：指定对象X轴的（水平方向）缩放</li>\n<li>scaleY(<number>)：指定对象Y轴的（垂直方向）缩放</li>\n<li>skew(<angle> [, <angle>])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0</li>\n<li>skewX(<angle>)：指定对象X轴的（水平方向）扭曲</li>\n<li>skewY(<angle>)：指定对象Y轴的（垂直方向）扭曲 </li>\n<li>matrix(<number>,<number>,<number>,<number>,<number>,<number>)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵</li>\n</ul>\n<p>直接看DEMO，加深印象</p>\n<div class=\"transfrom\"><br><ul class=\"clearfix\"> <li class=\"item translate\">Translate</li> <li class=\"item translate-x\">TranslateX</li> <li class=\"item translate-y\">TranslateY</li> <li class=\"item rotate\">Rotate</li> <li class=\"item scale\">Scale</li> <li class=\"item scale-x\">ScaleX</li> <li class=\"item scale-y\">ScaleY</li> <li class=\"item skew\">Skew</li> <li class=\"item skew-x\">SkewX</li> <li class=\"item skew-y\">SkewY</li> <li class=\"item matrix\">Matrix</li> </ul> </div>\n\n<style type=\"text/css\">.transfrom{padding: 20px;overflow:hidden;}.transfrom ul li{ color: #222; float: left; margin: .9em; padding:0 .4em; font-size: 14px; height: 50px; line-height: 50px; text-align: center; width: 70px; border:1px #ddd solid; background: #fff; box-shadow: 0 0 1px #ccc,inset 0 0 2px #fff; text-shadow: 0 1px 1px #686868; list-style:none; } .transfrom ul li.translate a:hover { -moz-transform: translate(-10px,-10px); -webkit-transform: translate(-10px,-10px); -o-transform: translate(-10px,-10px); -ms-transform: translate(-10px, -10px); transform: translate(-10px,-10px); } .transfrom ul li.translate-x{ -moz-transform: translateX(-10px); -webkit-transform: translateX(-10px); -o-transform: translateX(-10px); -ms-transform: translateX(-10px); transform: translateX(-10px); } .transfrom ul li.translate-y{ -moz-transform: translateY(-10px); -webkit-transform: translateY(-10px); -o-transform: translateY(-10px); -ms-transform: translateY(-10px); transform: translateY(-10px); } .transfrom ul li.rotate{ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .transfrom ul li.scale{ -moz-transform: scale(0.8,0.8); -webkit-transform: scale(0.8,0.8); -o-transform: scale(0.8,0.8); -ms-transform: scale(0.8,0.8); transform: scale(0.8,0.8); } .transfrom ul li.scale-x{ -moz-transform: scaleX(0.8); -webkit-transform: scaleX(0.8); -o-transform: scaleX(0.8); -ms-transform: scaleX(0.8); transform: scaleX(0.8); } .transfrom ul li.scale-y{ -moz-transform: scaleY(1.2); -webkit-transform: scaleY(1.2); -o-transform: scaleY(1.2); -ms-transform: scaleY(1.2); transform: scaleY(1.2); } .transfrom ul li.skew{ -moz-transform: skew(45deg,15deg); -webkit-transform: skew(45deg,15deg); -o-transform: skew(45deg,15deg); -ms-transform: skew(45deg,15deg); transform: skew(45deg,15deg); } .transfrom ul li.skew-x{ -moz-transform: skewX(-30deg); -webkit-transform: skewX(-30deg); -o-transform: skewX(-30deg); -ms-transform: skewX(-30deg); transform: skewX(-30deg); } .transfrom ul li.skew-y{ -moz-transform: skewY(30deg); -webkit-transform: skewY(30deg); -o-transform: skewY(30deg); -ms-transform: skewY(30deg); transform: skewY(30deg); } .transfrom ul li.matrix{ -moz-transform: matrix(1,1,-1,0,0,0); -webkit-transform: matrix(1,1,-1,0,0,0); -o-transform: matrix(1,1,-1,0,0,0); -ms-transform: matrix(1,1,-1,0,0,0); transform: matrix(1,1,-1,0,0,0); -moz-transform-origin:top left; }</style>\n\n\n<h3 id=\"transform-origin（改变元素基点）\"><a href=\"#transform-origin（改变元素基点）\" class=\"headerlink\" title=\"transform-origin（改变元素基点）\"></a>transform-origin（改变元素基点）</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-origin</span>：<span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | left | center | right ]</span> <span class=\"selector-attr\">[ &lt;percentage&gt; | &lt;length&gt; | top | center | bottom ]</span>?</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\">-webkit-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//chrome1.0x+ safari3.1+</span></span><br><span class=\"line\">-moz-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//firefox3.5+</span></span><br><span class=\"line\">-o-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//opera 10.5+</span></span><br><span class=\"line\">-ms-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//IE9+</span></span><br><span class=\"line\">-<span class=\"attribute\">transform-origin</span>:top left;<span class=\"comment\">//W3C标准</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><percentage>：用百分比指定坐标值。可以为负值。</li>\n<li><length>：用长度值指定坐标值。可以为负值。</li>\n<li>left：指定原点的横坐标为left</li>\n<li>center：指定原点的横坐标为center</li>\n<li>right：指定原点的横坐标为right</li>\n<li>top：指定原点的纵坐标为top</li>\n<li>center：指定原点的纵坐标为center </li>\n<li>bottom：指定原点的纵坐标为bottom </li>\n</ul>\n<p>left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%；top center bottom是垂直方向的取值，对应的百分值为top=0%;center=50%;bottom=100%;如果只取一个值，表示垂直方向值不变</p>"},{"title":"跨平台设置NODE_ENV","date":"2017-06-28T05:53:51.000Z","_content":"\n## 使用cross-env解决跨平台设置NODE_ENV\n今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 `npm start`，报如下错误：\n<!--more-->\n````bash\nNODE_ENV=development webpack  --progress\n'NODE_ENV' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n\npm-cli.js\" \"run\" \"dev\"\nnpm ERR! node v6.10.3\nnpm ERR! npm  v3.4.0\nnpm ERR! code ELIFECYCLE\nnpm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack@1.0.0 dev script 'NODE_ENV=development webpack  --progress'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the webpack package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     NODE_ENV=development webpack  --progress\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls webpack\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\learn\\webpack2\\npm-debug.log\n````\n意思是说，windows不支持通过 `NODE_ENV`的来设置环境变量（默认为`development`）。\nwebpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。\n\n### 解决方法\n后来网上查了查知道不同系统通过`NODE_ENV`设置环境变量命令是不同的。\n- linux && mac:\n````bash\nNODE_ENV=production\n````\n- windows:\n````bash\nset NODE_ENV=production\n````\n通过google找到了解决方案：{% link cross-env https://www.npmjs.com/package/cross-env  %}\n### 使用方法\n\n- 安装cross：`npm install cross-env --save-dev`\n- 在`NODE_ENV=xxx`前面加上`cross-env`\n\n这样就OK了。\n\n\n","source":"_posts/cross-env.md","raw":"title: 跨平台设置NODE_ENV\ndate: 2017-06-28 13:53:51\ntags:\n- 技术细节 cross-dev\ncategories:\n- nodeJs\n---\n\n## 使用cross-env解决跨平台设置NODE_ENV\n今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 `npm start`，报如下错误：\n<!--more-->\n````bash\nNODE_ENV=development webpack  --progress\n'NODE_ENV' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n\npm-cli.js\" \"run\" \"dev\"\nnpm ERR! node v6.10.3\nnpm ERR! npm  v3.4.0\nnpm ERR! code ELIFECYCLE\nnpm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack@1.0.0 dev script 'NODE_ENV=development webpack  --progress'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the webpack package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     NODE_ENV=development webpack  --progress\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls webpack\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\learn\\webpack2\\npm-debug.log\n````\n意思是说，windows不支持通过 `NODE_ENV`的来设置环境变量（默认为`development`）。\nwebpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。\n\n### 解决方法\n后来网上查了查知道不同系统通过`NODE_ENV`设置环境变量命令是不同的。\n- linux && mac:\n````bash\nNODE_ENV=production\n````\n- windows:\n````bash\nset NODE_ENV=production\n````\n通过google找到了解决方案：{% link cross-env https://www.npmjs.com/package/cross-env  %}\n### 使用方法\n\n- 安装cross：`npm install cross-env --save-dev`\n- 在`NODE_ENV=xxx`前面加上`cross-env`\n\n这样就OK了。\n\n\n","slug":"cross-env","published":1,"updated":"2019-04-30T06:04:29.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768p0006dkhswywafo9s","content":"<h2 id=\"使用cross-env解决跨平台设置NODE-ENV\"><a href=\"#使用cross-env解决跨平台设置NODE-ENV\" class=\"headerlink\" title=\"使用cross-env解决跨平台设置NODE_ENV\"></a>使用cross-env解决跨平台设置NODE_ENV</h2><p>今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 <code>npm start</code>，报如下错误：<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=development webpack  --progress</span><br><span class=\"line\"><span class=\"string\">'NODE_ENV'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class=\"line\">或批处理文件。</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv <span class=\"string\">\"C:\\\\Program Files\\\\nodejs\\\\node.exe\"</span> <span class=\"string\">\"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n</span><br><span class=\"line\">pm-cli.js\"</span> <span class=\"string\">\"run\"</span> <span class=\"string\">\"dev\"</span></span><br><span class=\"line\">npm ERR! node v6.10.3</span><br><span class=\"line\">npm ERR! npm  v3.4.0</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack@1.0.0 dev script <span class=\"string\">'NODE_ENV=development webpack  --progress'</span>.</span><br><span class=\"line\">npm ERR! Make sure you have the latest version of node.js and npm installed.</span><br><span class=\"line\">npm ERR! If you <span class=\"keyword\">do</span>, this is most likely a problem with the webpack package,</span><br><span class=\"line\">npm ERR! not with npm itself.</span><br><span class=\"line\">npm ERR! Tell the author that this fails on your system:</span><br><span class=\"line\">npm ERR!     NODE_ENV=development webpack  --progress</span><br><span class=\"line\">npm ERR! You can get their info via:</span><br><span class=\"line\">npm ERR!     npm owner ls webpack</span><br><span class=\"line\">npm ERR! There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     D:\\learn\\webpack2\\npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>意思是说，windows不支持通过 <code>NODE_ENV</code>的来设置环境变量（默认为<code>development</code>）。<br>webpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>后来网上查了查知道不同系统通过<code>NODE_ENV</code>设置环境变量命令是不同的。</p>\n<ul>\n<li><p>linux &amp;&amp; mac:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过google找到了解决方案：<a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"external\">cross-env</a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li>安装cross：<code>npm install cross-env --save-dev</code></li>\n<li>在<code>NODE_ENV=xxx</code>前面加上<code>cross-env</code></li>\n</ul>\n<p>这样就OK了。</p>\n","excerpt":"<h2 id=\"使用cross-env解决跨平台设置NODE-ENV\"><a href=\"#使用cross-env解决跨平台设置NODE-ENV\" class=\"headerlink\" title=\"使用cross-env解决跨平台设置NODE_ENV\"></a>使用cross-env解决跨平台设置NODE_ENV</h2><p>今天把之前写的webpack打包程序从自己电脑（mac）拷贝到公司电脑（windows）使用，运行 <code>npm start</code>，报如下错误：<br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=development webpack  --progress</span><br><span class=\"line\"><span class=\"string\">'NODE_ENV'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class=\"line\">或批处理文件。</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv <span class=\"string\">\"C:\\\\Program Files\\\\nodejs\\\\node.exe\"</span> <span class=\"string\">\"d:\\\\Users\\\\wei.gu\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\n</span><br><span class=\"line\">pm-cli.js\"</span> <span class=\"string\">\"run\"</span> <span class=\"string\">\"dev\"</span></span><br><span class=\"line\">npm ERR! node v6.10.3</span><br><span class=\"line\">npm ERR! npm  v3.4.0</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! webpack@1.0.0 dev: `NODE_ENV=development webpack  --progress`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack@1.0.0 dev script <span class=\"string\">'NODE_ENV=development webpack  --progress'</span>.</span><br><span class=\"line\">npm ERR! Make sure you have the latest version of node.js and npm installed.</span><br><span class=\"line\">npm ERR! If you <span class=\"keyword\">do</span>, this is most likely a problem with the webpack package,</span><br><span class=\"line\">npm ERR! not with npm itself.</span><br><span class=\"line\">npm ERR! Tell the author that this fails on your system:</span><br><span class=\"line\">npm ERR!     NODE_ENV=development webpack  --progress</span><br><span class=\"line\">npm ERR! You can get their info via:</span><br><span class=\"line\">npm ERR!     npm owner ls webpack</span><br><span class=\"line\">npm ERR! There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     D:\\learn\\webpack2\\npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>意思是说，windows不支持通过 <code>NODE_ENV</code>的来设置环境变量（默认为<code>development</code>）。<br>webpack打包系统希望通过检查NODE_ENV来分别对开发环境和生成环境做不同处理，但是windows下报了如上的错误。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>后来网上查了查知道不同系统通过<code>NODE_ENV</code>设置环境变量命令是不同的。</p>\n<ul>\n<li><p>linux &amp;&amp; mac:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=production</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过google找到了解决方案：<a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li>安装cross：<code>npm install cross-env --save-dev</code></li>\n<li>在<code>NODE_ENV=xxx</code>前面加上<code>cross-env</code></li>\n</ul>\n<p>这样就OK了。</p>"},{"title":"graphql初探","date":"2019-05-08T06:07:58.000Z","_content":"\n编写graphql的大致过程如下：\n* 定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。\n* 定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作类型query(查询)或mutation(变更)等。 ","source":"_posts/graphql-introduction.md","raw":"title: graphql初探\ndate: 2019-05-08 14:07:58\ntags: \n- GraphQL\n- Koa\n- Mongoose\ncategories:\n- Node.js \n- MongoDB\n- React\n---\n\n编写graphql的大致过程如下：\n* 定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。\n* 定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作类型query(查询)或mutation(变更)等。 ","slug":"graphql-introduction","published":1,"updated":"2019-07-15T02:28:24.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768r0007dkhsl13rfyji","content":"<p>编写graphql的大致过程如下：</p>\n<ul>\n<li>定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。</li>\n<li>定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作类型query(查询)或mutation(变更)等。 </li>\n</ul>\n","excerpt":"","more":"<p>编写graphql的大致过程如下：</p>\n<ul>\n<li>定义查询数据的结构，也就是schema。因为查询跟返回数据的结构几乎一样，所以首先编写schema来定义返回的数据类型。</li>\n<li>定义查询方法，这里就是定义处理数据之后返回的是什么数据了。处理数据的操作类型query(查询)或mutation(变更)等。 </li>\n</ul>\n"},{"title":"css3-transition","date":"2017-11-06T09:29:25.000Z","_content":"{% blockquote W3C https://www.w3.org/TR/css3-transitions/ css3-transitions %}\nCSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。\n<!--more-->\n## Transition\n````\n    transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n    /* 实际用法*/\n    /*缩写方式：*/\n    -webkit-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*chrome2.0x+ safari3.1+*/\n    -moz-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*Firefox 4 */\n    -o-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*opera 10.5+ */\n    /*IE9不支持，所以-ms-就没了 */\n    transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*W3C */\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    transition-property:border-color, background-color, color;\n    transition-duration:.5s, .5s, .5s;\n    transition-timing-function:ease-in, ease-in, ease-in;\n    transition-delay:.1s, .1s, .1s;\n````\n\nTransitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transitions取值\n- [ transition-property ]：设置对象中的参与过渡的属性\n- [ transition-duration ]：设置对象过渡的持续时间\n- [ transition-timing-function ]：设置对象中过渡的动画类型\n- [ transition-delay ]：设置对象延迟过渡的时间\n\n### 参与过渡的属性\n\ntransition-property是用来指定元素需要过渡的css属性。语法如下：\n````\n    transition-property：all | none | <property>[ ,<property> ]*\n````\n#### transition-property取值\n- all：所有可以进行过渡的css属性\n- none：不指定过渡的css属性\n- <property>：指定要进行过渡的css属性\n\n当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性{% link 点击查看 https://www.w3.org/TR/css3-animations/  %} \n\n### 过渡持续时间\ntransition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：\n````\n    transition-duration：<time>[ ,<time> ]*\n````\n\n### 过渡的变化速率\ntransition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：\n````\n    transition-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)[ ,linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n所有过渡效果都涉及到一个：贝塞尔曲线 的东西{% link 点击 https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A  %}了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：\n1. ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).\n2. linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). \n3. ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).\n4. ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).\n5. ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).\n6. cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.\n\n 贝塞尔曲线，如下图\n\n {% img [贝塞尔曲线（cubic-bezier曲线）] http://om64pi295.bkt.clouddn.com/TimingFunction.png %}\n\n 图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。\n\n 所以所有值需在[0, 1]区域内，否则无效。`cubic-bezier(x1, y1, x2, y2)` 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。\n\n ### 过渡的延迟执行时间\ntransition-delay是用来指定一个过渡延迟执行的时间。语法如下：\n````\n    transition-delay：<time>[ ,<time> ]*\n````\n## Transitions实现的简单hover按钮\nasda\n<style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;\n}</style>\n<figure>\n<div id=\"demo\">\n    <a class=\"button\" href=\"\">Transitions按钮</a>\n</div>\n</figure>","source":"_posts/css3-transition.md","raw":"title: css3-transition\ndate: 2017-11-06 17:29:25\ntags:\n---\n{% blockquote W3C https://www.w3.org/TR/css3-transitions/ css3-transitions %}\nCSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。\n<!--more-->\n## Transition\n````\n    transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n    /* 实际用法*/\n    /*缩写方式：*/\n    -webkit-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*chrome2.0x+ safari3.1+*/\n    -moz-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*Firefox 4 */\n    -o-transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*opera 10.5+ */\n    /*IE9不支持，所以-ms-就没了 */\n    transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;/*W3C */\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    transition-property:border-color, background-color, color;\n    transition-duration:.5s, .5s, .5s;\n    transition-timing-function:ease-in, ease-in, ease-in;\n    transition-delay:.1s, .1s, .1s;\n````\n\nTransitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。\n\n### Transitions取值\n- [ transition-property ]：设置对象中的参与过渡的属性\n- [ transition-duration ]：设置对象过渡的持续时间\n- [ transition-timing-function ]：设置对象中过渡的动画类型\n- [ transition-delay ]：设置对象延迟过渡的时间\n\n### 参与过渡的属性\n\ntransition-property是用来指定元素需要过渡的css属性。语法如下：\n````\n    transition-property：all | none | <property>[ ,<property> ]*\n````\n#### transition-property取值\n- all：所有可以进行过渡的css属性\n- none：不指定过渡的css属性\n- <property>：指定要进行过渡的css属性\n\n当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性{% link 点击查看 https://www.w3.org/TR/css3-animations/  %} \n\n### 过渡持续时间\ntransition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：\n````\n    transition-duration：<time>[ ,<time> ]*\n````\n\n### 过渡的变化速率\ntransition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：\n````\n    transition-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)[ ,linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n所有过渡效果都涉及到一个：贝塞尔曲线 的东西{% link 点击 https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A  %}了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：\n1. ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).\n2. linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). \n3. ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).\n4. ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).\n5. ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).\n6. cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.\n\n 贝塞尔曲线，如下图\n\n {% img [贝塞尔曲线（cubic-bezier曲线）] http://om64pi295.bkt.clouddn.com/TimingFunction.png %}\n\n 图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。\n\n 所以所有值需在[0, 1]区域内，否则无效。`cubic-bezier(x1, y1, x2, y2)` 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。\n\n ### 过渡的延迟执行时间\ntransition-delay是用来指定一个过渡延迟执行的时间。语法如下：\n````\n    transition-delay：<time>[ ,<time> ]*\n````\n## Transitions实现的简单hover按钮\nasda\n<style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;\n}</style>\n<figure>\n<div id=\"demo\">\n    <a class=\"button\" href=\"\">Transitions按钮</a>\n</div>\n</figure>","slug":"css3-transition","published":1,"updated":"2019-04-30T06:04:29.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768s0009dkhsyigw609x","content":"<blockquote><p>CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-transitions/\" target=\"_blank\" rel=\"external\">css3-transitions</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。<br><a id=\"more\"></a></p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-<span class=\"built_in\">delay</span> ]</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\">-webkit-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*chrome2.0x+ safari3.1+*/</span></span><br><span class=\"line\">-moz-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*Firefox 4 */</span></span><br><span class=\"line\">-o-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*opera 10.5+ */</span></span><br><span class=\"line\"><span class=\"comment\">/*IE9不支持，所以-ms-就没了 */</span></span><br><span class=\"line\">transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*W3C */</span></span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\">transition-property:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">color</span>;</span><br><span class=\"line\">transition-duration:.5s, .5s, .5s;</span><br><span class=\"line\">transition-timing-function:ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>;</span><br><span class=\"line\">transition-<span class=\"built_in\">delay</span>:.1s, .1s, .1s;</span><br></pre></td></tr></table></figure>\n<p>Transitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transitions取值\"><a href=\"#Transitions取值\" class=\"headerlink\" title=\"Transitions取值\"></a>Transitions取值</h3><ul>\n<li>[ transition-property ]：设置对象中的参与过渡的属性</li>\n<li>[ transition-duration ]：设置对象过渡的持续时间</li>\n<li>[ transition-timing-function ]：设置对象中过渡的动画类型</li>\n<li>[ transition-delay ]：设置对象延迟过渡的时间</li>\n</ul>\n<h3 id=\"参与过渡的属性\"><a href=\"#参与过渡的属性\" class=\"headerlink\" title=\"参与过渡的属性\"></a>参与过渡的属性</h3><p>transition-property是用来指定元素需要过渡的css属性。语法如下：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-property：<span class=\"literal\">all</span> | <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;property&gt;</span>[ ,<span class=\"variable\">&lt;property&gt;</span> ]*</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"transition-property取值\"><a href=\"#transition-property取值\" class=\"headerlink\" title=\"transition-property取值\"></a>transition-property取值</h4><ul>\n<li>all：所有可以进行过渡的css属性</li>\n<li>none：不指定过渡的css属性</li>\n<li><property>：指定要进行过渡的css属性</property></li>\n</ul>\n<p>当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性<a href=\"https://www.w3.org/TR/css3-animations/\" target=\"_blank\" rel=\"external\">点击查看</a> </p>\n<h3 id=\"过渡持续时间\"><a href=\"#过渡持续时间\" class=\"headerlink\" title=\"过渡持续时间\"></a>过渡持续时间</h3><p>transition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-duration：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"过渡的变化速率\"><a href=\"#过渡的变化速率\" class=\"headerlink\" title=\"过渡的变化速率\"></a>过渡的变化速率</h3><p>transition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;)[ ,linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<p>所有过渡效果都涉及到一个：贝塞尔曲线 的东西<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"external\">点击</a>了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：</p>\n<ol>\n<li>ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).</li>\n<li>linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). </li>\n<li>ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).</li>\n<li>ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).</li>\n<li>ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).</li>\n<li><p>cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.</p>\n<p>贝塞尔曲线，如下图</p>\n<img src=\"http://om64pi295.bkt.clouddn.com/TimingFunction.png\" class=\"[贝塞尔曲线（cubic-bezier曲线）]\">\n<p>图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。</p>\n<p>所以所有值需在[0, 1]区域内，否则无效。<code>cubic-bezier(x1, y1, x2, y2)</code> 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。</p>\n<h3 id=\"过渡的延迟执行时间\"><a href=\"#过渡的延迟执行时间\" class=\"headerlink\" title=\"过渡的延迟执行时间\"></a>过渡的延迟执行时间</h3><p>transition-delay是用来指定一个过渡延迟执行的时间。语法如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Transitions实现的简单hover按钮\"><a href=\"#Transitions实现的简单hover按钮\" class=\"headerlink\" title=\"Transitions实现的简单hover按钮\"></a>Transitions实现的简单hover按钮</h2><p>asda</p>\n<p><style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;<br>}</style></p>\n<figure><br><div id=\"demo\"><br>    <a class=\"button\" href=\"\">Transitions按钮</a><br></div><br></figure>","excerpt":"<blockquote><p>CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-transitions/\">css3-transitions</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是在某段时间内，按照预定过程的来改变某个CSS属性。<br>","more":"</p>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-<span class=\"built_in\">delay</span> ]</span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\">-webkit-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*chrome2.0x+ safari3.1+*/</span></span><br><span class=\"line\">-moz-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*Firefox 4 */</span></span><br><span class=\"line\">-o-transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*opera 10.5+ */</span></span><br><span class=\"line\"><span class=\"comment\">/*IE9不支持，所以-ms-就没了 */</span></span><br><span class=\"line\">transition:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s, <span class=\"built_in\">color</span> .5s ease-<span class=\"keyword\">in</span> .1s;<span class=\"comment\">/*W3C */</span></span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\">transition-property:<span class=\"built_in\">border</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">background</span>-<span class=\"built_in\">color</span>, <span class=\"built_in\">color</span>;</span><br><span class=\"line\">transition-duration:.5s, .5s, .5s;</span><br><span class=\"line\">transition-timing-function:ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>, ease-<span class=\"keyword\">in</span>;</span><br><span class=\"line\">transition-<span class=\"built_in\">delay</span>:.1s, .1s, .1s;</span><br></pre></td></tr></table></figure>\n<p>Transitions属性中如果提供多个属性值，都是以逗号（“，”）隔开。</p>\n<h3 id=\"Transitions取值\"><a href=\"#Transitions取值\" class=\"headerlink\" title=\"Transitions取值\"></a>Transitions取值</h3><ul>\n<li>[ transition-property ]：设置对象中的参与过渡的属性</li>\n<li>[ transition-duration ]：设置对象过渡的持续时间</li>\n<li>[ transition-timing-function ]：设置对象中过渡的动画类型</li>\n<li>[ transition-delay ]：设置对象延迟过渡的时间</li>\n</ul>\n<h3 id=\"参与过渡的属性\"><a href=\"#参与过渡的属性\" class=\"headerlink\" title=\"参与过渡的属性\"></a>参与过渡的属性</h3><p>transition-property是用来指定元素需要过渡的css属性。语法如下：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-property：<span class=\"literal\">all</span> | <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;property&gt;</span>[ ,<span class=\"variable\">&lt;property&gt;</span> ]*</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"transition-property取值\"><a href=\"#transition-property取值\" class=\"headerlink\" title=\"transition-property取值\"></a>transition-property取值</h4><ul>\n<li>all：所有可以进行过渡的css属性</li>\n<li>none：不指定过渡的css属性</li>\n<li><property>：指定要进行过渡的css属性</li>\n</ul>\n<p>当指定为all时，这个也是其默认值，则元素产生任何属性值变化时都将执行transition效果；当其值为none时，transition马上停止执行；property是可以指定元素的某一个属性值，如 background-color、opacity、right、width、z-index、text-indent、text-shadow、padding等。具体哪些属性<a href=\"https://www.w3.org/TR/css3-animations/\">点击查看</a> </p>\n<h3 id=\"过渡持续时间\"><a href=\"#过渡持续时间\" class=\"headerlink\" title=\"过渡持续时间\"></a>过渡持续时间</h3><p>transition-duration针对过渡效果的持续时间，用来指定元素转换过程的持续时间，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-duration：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"过渡的变化速率\"><a href=\"#过渡的变化速率\" class=\"headerlink\" title=\"过渡的变化速率\"></a>过渡的变化速率</h3><p>transition-timing-function 针对了过渡效果的变化速率，有多种特效展示。语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;)[ ,linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<p>所有过渡效果都涉及到一个：贝塞尔曲线 的东西<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\">点击</a>了解贝塞尔曲线。但是W3C预留的几个过渡效果来供我们使用，如下：</p>\n<ol>\n<li>ease（逐渐变慢）：默认值，ease函数等同于贝塞尔曲线（cubic-bezier曲线）(0.25, 0.1, 0.25, 1.0).</li>\n<li>linear（匀速）：linear 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.0, 0.0, 1.0, 1.0). </li>\n<li>ease-in(加速)：ease-in 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 1.0, 1.0).</li>\n<li>ease-out（减速）：ease-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0, 0, 0.58, 1.0).</li>\n<li>ease-in-out（加速然后减速）：ease-in-out 函数等同于贝塞尔曲线（cubic-bezier曲线）(0.42, 0, 0.58, 1.0).</li>\n<li><p>cubic-bezier（该值允许你去自定义一个时间曲线）： 特定的贝塞尔曲线（cubic-bezier曲线）.</p>\n<p>贝塞尔曲线，如下图</p>\n<img src=\"http://om64pi295.bkt.clouddn.com/TimingFunction.png\" class=\"[贝塞尔曲线（cubic-bezier曲线）]\">\n<p>图上有四点，P0-3，其中P0[0,0]、P3[1,1]是默认的点且是固定不变的。而剩下的P1、P2两点则是我们通过cubic-bezier自定义的。</p>\n<p>所以所有值需在[0, 1]区域内，否则无效。<code>cubic-bezier(x1, y1, x2, y2)</code> 四个 x1, y1, x2, y2 值就等于曲线上点P1[x1, y1] 和点P2[x2, y2]的坐标值。</p>\n<h3 id=\"过渡的延迟执行时间\"><a href=\"#过渡的延迟执行时间\" class=\"headerlink\" title=\"过渡的延迟执行时间\"></a>过渡的延迟执行时间</h3><p>transition-delay是用来指定一个过渡延迟执行的时间。语法如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt;[ ,&lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Transitions实现的简单hover按钮\"><a href=\"#Transitions实现的简单hover按钮\" class=\"headerlink\" title=\"Transitions实现的简单hover按钮\"></a>Transitions实现的简单hover按钮</h2><p>asda</p>\n<p><style type=\"text/css\">#demo a.button{ background-color: #700; border-radius: 10px; box-shadow: 0 0 3px #212121; color: #fff; padding: 5px 10px; -webkit-transition: all 1s ease-in-out 0s; -moz-transition: all 1s ease-in-out 0s; -ms-transition: all 1s ease-in-out 0s; -o-transition: all 1s ease-in-out 0s; transition: all 1s ease-in-out 0s; text-decoration: none } #demo a.button:hover{ background-color: #b00; box-shadow: 0 0 10px #000;<br>}</style></p>\n<figure><br><div id=\"demo\"><br>    <a class=\"button\" href=\"\">Transitions按钮</a><br></div><br></figure>"},{"title":"函数式编程","date":"2019-07-15T01:46:49.000Z","_content":"","source":"_posts/functional-programming.md","raw":"title: 函数式编程\ndate: 2019-07-15 09:46:49\ntags: \n- JavaScript\ncategories:\n- JavaScript\n---\n","slug":"functional-programming","published":1,"updated":"2019-07-16T01:30:25.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768t000cdkhsl1yiwq98","content":"","excerpt":"","more":""},{"title":"Eslint 小结","date":"2017-08-04T07:28:56.000Z","_content":"\n一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。\n<!-- more -->\n## 什么是Eslint\nESLint最初是由[Nicholas C. Zakas](https://www.nczonline.net/)于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。\n### Eslint的优势\n- 可以自定义规则\n- 规则可以配置成off、warn、error三种状态\n- 支持插件扩展\n\n\n## 如何使用\n首先得安装\n````bash\nnpm install -g eslint\n````\n\n使用：\n````bash\neslint file1.js file2.js\n````\n\n有两种主要的方式来配置ESlint：\n- 在JavaScript中添加注释格式的配置信息\n- 使用 `.eslintrc` 文件或者在 `package.json` 添加配置\n\nPS:  `.eslintrc` 放在根目录，则会应用到整个项目；如果子目录也包含 `.eslintrc` 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。\n\n## 配置规则\n\n- env：定义JS的使用环境。譬如：`browser `表示在浏览器中使用；`node `表示在node中使用；`commonjs `表示使用了CommonJS模块规范;`es6 `表示支持es6特性;`amd`表示使用`require()`以及`define()`;\n- globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 `WeixinJSBridge`,但是我们不可能在文件中定义 `WeixinJSBridge`，所以这种情况下只需要定义在globals里。\n- plugins： 使用第三方插件。\n- rules： 核心部分。具体哪些可以配置可查看[官网说明](http://eslint.org/docs/rules/)ESlint的规则定义\n    - \"off\" 或 0 - 关闭规则\n    - \"warn\" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n    - \"error\" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 `eslint -f html --ext .js File -o ./test.html` 就导出html格式的File文件夹内所有.js结尾的文件的报告。\n","source":"_posts/eslint.md","raw":"title: Eslint 小结\ndate: 2017-08-04 15:28:56\ntags:\n- JavaScript\n- JS工具\n---\n\n一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。\n<!-- more -->\n## 什么是Eslint\nESLint最初是由[Nicholas C. Zakas](https://www.nczonline.net/)于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。\n### Eslint的优势\n- 可以自定义规则\n- 规则可以配置成off、warn、error三种状态\n- 支持插件扩展\n\n\n## 如何使用\n首先得安装\n````bash\nnpm install -g eslint\n````\n\n使用：\n````bash\neslint file1.js file2.js\n````\n\n有两种主要的方式来配置ESlint：\n- 在JavaScript中添加注释格式的配置信息\n- 使用 `.eslintrc` 文件或者在 `package.json` 添加配置\n\nPS:  `.eslintrc` 放在根目录，则会应用到整个项目；如果子目录也包含 `.eslintrc` 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。\n\n## 配置规则\n\n- env：定义JS的使用环境。譬如：`browser `表示在浏览器中使用；`node `表示在node中使用；`commonjs `表示使用了CommonJS模块规范;`es6 `表示支持es6特性;`amd`表示使用`require()`以及`define()`;\n- globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 `WeixinJSBridge`,但是我们不可能在文件中定义 `WeixinJSBridge`，所以这种情况下只需要定义在globals里。\n- plugins： 使用第三方插件。\n- rules： 核心部分。具体哪些可以配置可查看[官网说明](http://eslint.org/docs/rules/)ESlint的规则定义\n    - \"off\" 或 0 - 关闭规则\n    - \"warn\" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n    - \"error\" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 `eslint -f html --ext .js File -o ./test.html` 就导出html格式的File文件夹内所有.js结尾的文件的报告。\n","slug":"eslint","published":1,"updated":"2019-04-30T06:04:29.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768v000edkhsjcyncefe","content":"<p>一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是Eslint\"><a href=\"#什么是Eslint\" class=\"headerlink\" title=\"什么是Eslint\"></a>什么是Eslint</h2><p>ESLint最初是由<a href=\"https://www.nczonline.net/\" target=\"_blank\" rel=\"external\">Nicholas C. Zakas</a>于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>\n<h3 id=\"Eslint的优势\"><a href=\"#Eslint的优势\" class=\"headerlink\" title=\"Eslint的优势\"></a>Eslint的优势</h3><ul>\n<li>可以自定义规则</li>\n<li>规则可以配置成off、warn、error三种状态</li>\n<li>支持插件扩展</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>首先得安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g eslint</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint file1.js file2.js</span><br></pre></td></tr></table></figure></p>\n<p>有两种主要的方式来配置ESlint：</p>\n<ul>\n<li>在JavaScript中添加注释格式的配置信息</li>\n<li>使用 <code>.eslintrc</code> 文件或者在 <code>package.json</code> 添加配置</li>\n</ul>\n<p>PS:  <code>.eslintrc</code> 放在根目录，则会应用到整个项目；如果子目录也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。</p>\n<h2 id=\"配置规则\"><a href=\"#配置规则\" class=\"headerlink\" title=\"配置规则\"></a>配置规则</h2><ul>\n<li>env：定义JS的使用环境。譬如：<code>browser</code>表示在浏览器中使用；<code>node</code>表示在node中使用；<code>commonjs</code>表示使用了CommonJS模块规范;<code>es6</code>表示支持es6特性;<code>amd</code>表示使用<code>require()</code>以及<code>define()</code>;</li>\n<li>globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 <code>WeixinJSBridge</code>,但是我们不可能在文件中定义 <code>WeixinJSBridge</code>，所以这种情况下只需要定义在globals里。</li>\n<li>plugins： 使用第三方插件。</li>\n<li>rules： 核心部分。具体哪些可以配置可查看<a href=\"http://eslint.org/docs/rules/\" target=\"_blank\" rel=\"external\">官网说明</a>ESlint的规则定义<ul>\n<li>“off” 或 0 - 关闭规则</li>\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\n</ul>\n</li>\n</ul>\n<p>市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 <code>eslint -f html --ext .js File -o ./test.html</code> 就导出html格式的File文件夹内所有.js结尾的文件的报告。</p>\n","excerpt":"<p>一般团队内为了促进团队协作和降低维护成本，都会制定一套代码规范。而Eslin能帮我们辅助编码规范的执行，幼儿有效控制项目的质量。<br>","more":"</p>\n<h2 id=\"什么是Eslint\"><a href=\"#什么是Eslint\" class=\"headerlink\" title=\"什么是Eslint\"></a>什么是Eslint</h2><p>ESLint最初是由<a href=\"https://www.nczonline.net/\">Nicholas C. Zakas</a>于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>\n<h3 id=\"Eslint的优势\"><a href=\"#Eslint的优势\" class=\"headerlink\" title=\"Eslint的优势\"></a>Eslint的优势</h3><ul>\n<li>可以自定义规则</li>\n<li>规则可以配置成off、warn、error三种状态</li>\n<li>支持插件扩展</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>首先得安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g eslint</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint file1.js file2.js</span><br></pre></td></tr></table></figure></p>\n<p>有两种主要的方式来配置ESlint：</p>\n<ul>\n<li>在JavaScript中添加注释格式的配置信息</li>\n<li>使用 <code>.eslintrc</code> 文件或者在 <code>package.json</code> 添加配置</li>\n</ul>\n<p>PS:  <code>.eslintrc</code> 放在根目录，则会应用到整个项目；如果子目录也包含 <code>.eslintrc</code> 文件，则子目录会忽略根目录的配置文件，使用该目录中的配置文件。</p>\n<h2 id=\"配置规则\"><a href=\"#配置规则\" class=\"headerlink\" title=\"配置规则\"></a>配置规则</h2><ul>\n<li>env：定义JS的使用环境。譬如：<code>browser</code>表示在浏览器中使用；<code>node</code>表示在node中使用；<code>commonjs</code>表示使用了CommonJS模块规范;<code>es6</code>表示支持es6特性;<code>amd</code>表示使用<code>require()</code>以及<code>define()</code>;</li>\n<li>globals： 定义未在文件中定义的全局变量，譬如在代码中使用了 <code>WeixinJSBridge</code>,但是我们不可能在文件中定义 <code>WeixinJSBridge</code>，所以这种情况下只需要定义在globals里。</li>\n<li>plugins： 使用第三方插件。</li>\n<li>rules： 核心部分。具体哪些可以配置可查看<a href=\"http://eslint.org/docs/rules/\">官网说明</a>ESlint的规则定义<ul>\n<li>“off” 或 0 - 关闭规则</li>\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\n</ul>\n</li>\n</ul>\n<p>市面上很多编辑器都有ESlint的插件，各种JS的打包工具也有各自版本，所以使用起来很方便。如果你想得到Js报告的话，可以使用命令导出，譬如 <code>eslint -f html --ext .js File -o ./test.html</code> 就导出html格式的File文件夹内所有.js结尾的文件的报告。</p>"},{"title":"验证身份证号是否正确","date":"2017-07-31T06:22:34.000Z","_content":"\n\n\n在[正则基础深入应用](../javascript-reg-2#匹配身份证号码)中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。\n<!--more-->\n验证方法：\n1. 将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这18位数字和系数相乘的结果相加。\n3. 用加出来的和除以11，得出余数。\n4. 除以11，余数只能是0-10这11个数的一个。\n5. 以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。\n\n根据以上结论，使用JS写相应程序，得出如下代码：\n````js\n/**\n * [checkID 验证身份证号码是否正确]\n * @param  {[String]} strIDCardnumber [必须是字符串，不然会触发大整数精度问题]\n * @return {[Boolean]}                [返回布尔值]\n */\nfunction checkID(strIDCardnumber){\n    var _isIDRule = false,\n        _sum = 0,\n        _strIDCardnumber = strIDCardnumber.toString(),\n        _coefficient = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],\n        _mantissa = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n\n    for (var i = 0; i < 17; i++) {\n        _sum += Number(_strIDCardnumber.substring(i, i + 1)) * _coefficient[i];\n    }\n\n    if (_strIDCardnumber.substring(17) == _mantissa[_sum % 11]) {\n        _isIDRule = true;\n    }\n\n    return _isIDRule;\n}\n````\n\n以上就是验证身份证的程序代码，只要`checkID('430404196710021020')`调用就ok了。\n调用时必须要注意传入的值必须是字符类型，不然大于`2^53`时，就会触发大数字的精度问题。\n","source":"_posts/identity-number.md","raw":"title: 验证身份证号是否正确\ndate: 2017-07-31 14:22:34\ntags: \n- JavaScript\n- JS实际应用\ncategories:\n- JavaScript\n---\n\n\n\n在[正则基础深入应用](../javascript-reg-2#匹配身份证号码)中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。\n<!--more-->\n验证方法：\n1. 将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这18位数字和系数相乘的结果相加。\n3. 用加出来的和除以11，得出余数。\n4. 除以11，余数只能是0-10这11个数的一个。\n5. 以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。\n\n根据以上结论，使用JS写相应程序，得出如下代码：\n````js\n/**\n * [checkID 验证身份证号码是否正确]\n * @param  {[String]} strIDCardnumber [必须是字符串，不然会触发大整数精度问题]\n * @return {[Boolean]}                [返回布尔值]\n */\nfunction checkID(strIDCardnumber){\n    var _isIDRule = false,\n        _sum = 0,\n        _strIDCardnumber = strIDCardnumber.toString(),\n        _coefficient = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],\n        _mantissa = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n\n    for (var i = 0; i < 17; i++) {\n        _sum += Number(_strIDCardnumber.substring(i, i + 1)) * _coefficient[i];\n    }\n\n    if (_strIDCardnumber.substring(17) == _mantissa[_sum % 11]) {\n        _isIDRule = true;\n    }\n\n    return _isIDRule;\n}\n````\n\n以上就是验证身份证的程序代码，只要`checkID('430404196710021020')`调用就ok了。\n调用时必须要注意传入的值必须是字符类型，不然大于`2^53`时，就会触发大数字的精度问题。\n","slug":"identity-number","published":1,"updated":"2019-04-30T06:04:29.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768x000idkhs5b8x9o6d","content":"<p>在<a href=\"../javascript-reg-2#匹配身份证号码\">正则基础深入应用</a>中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。<br><a id=\"more\"></a><br>验证方法：</p>\n<ol>\n<li>将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。</li>\n<li>将这18位数字和系数相乘的结果相加。</li>\n<li>用加出来的和除以11，得出余数。</li>\n<li>除以11，余数只能是0-10这11个数的一个。</li>\n<li>以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。</li>\n</ol>\n<p>根据以上结论，使用JS写相应程序，得出如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * [checkID 验证身份证号码是否正确]</span><br><span class=\"line\"> * @param  &#123;[String]&#125; strIDCardnumber [必须是字符串，不然会触发大整数精度问题]</span><br><span class=\"line\"> * @return &#123;[Boolean]&#125;                [返回布尔值]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\">strIDCardnumber</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _isIDRule = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        _sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">        _strIDCardnumber = strIDCardnumber.toString(),</span><br><span class=\"line\">        _coefficient = [<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        _mantissa = [<span class=\"string\">'1'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        _sum += <span class=\"built_in\">Number</span>(_strIDCardnumber.substring(i, i + <span class=\"number\">1</span>)) * _coefficient[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_strIDCardnumber.substring(<span class=\"number\">17</span>) == _mantissa[_sum % <span class=\"number\">11</span>]) &#123;</span><br><span class=\"line\">        _isIDRule = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isIDRule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是验证身份证的程序代码，只要<code>checkID(&#39;430404196710021020&#39;)</code>调用就ok了。<br>调用时必须要注意传入的值必须是字符类型，不然大于<code>2^53</code>时，就会触发大数字的精度问题。</p>\n","excerpt":"<p>在<a href=\"../javascript-reg-2#匹配身份证号码\">正则基础深入应用</a>中，我们使用了正则去验证身份证号，虽然根据规律写的那个正则能满足多数情况，但是还是会有一些漏网之鱼。后来发现有一个计算方法可以去判定这个身份证号是否正确。<br>","more":"<br>验证方法：</p>\n<ol>\n<li>将身份证的前17位分别乘以不同的系数。从第一位到第十七位的系数分别为： 7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。</li>\n<li>将这18位数字和系数相乘的结果相加。</li>\n<li>用加出来的和除以11，得出余数。</li>\n<li>除以11，余数只能是0-10这11个数的一个。</li>\n<li>以上得出的余数，对应着 [1,0,X,9,8,7,6,5,4,3,2]。</li>\n</ol>\n<p>根据以上结论，使用JS写相应程序，得出如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * [checkID 验证身份证号码是否正确]</span><br><span class=\"line\"> * @param  &#123;[String]&#125; strIDCardnumber [必须是字符串，不然会触发大整数精度问题]</span><br><span class=\"line\"> * @return &#123;[Boolean]&#125;                [返回布尔值]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\">strIDCardnumber</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _isIDRule = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        _sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">        _strIDCardnumber = strIDCardnumber.toString(),</span><br><span class=\"line\">        _coefficient = [<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        _mantissa = [<span class=\"string\">'1'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        _sum += <span class=\"built_in\">Number</span>(_strIDCardnumber.substring(i, i + <span class=\"number\">1</span>)) * _coefficient[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_strIDCardnumber.substring(<span class=\"number\">17</span>) == _mantissa[_sum % <span class=\"number\">11</span>]) &#123;</span><br><span class=\"line\">        _isIDRule = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isIDRule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是验证身份证的程序代码，只要<code>checkID(&#39;430404196710021020&#39;)</code>调用就ok了。<br>调用时必须要注意传入的值必须是字符类型，不然大于<code>2^53</code>时，就会触发大数字的精度问题。</p>"},{"title":"hexo博客相关命令","date":"2016-02-07T14:44:12.000Z","_content":"\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","source":"_posts/hello-world.md","raw":"title: hexo博客相关命令\ndate: 2016-02-07 22:44:12\npermalink: hexo\ntags:\n- hexo\ncategories:\n- hexo\n---\n\nhexo相关笔记\n<!--more-->\n\n## Markdown语法\n\n1、 __分段__ 一个或多个回车\n2、 __换行__ 一个回车\n3、 __标题__ `#~######` 井号的个数表示几级标题\n4、 __引用__ `>`\n5、 __列表__ `*`，`+`，`-`，`1.`，选其中之一，注意后面有个空格\n6、 __链接__ `[文字](链接地址)`\n7、 __图片__ `![图片说明](图片地址)`，图片地址可以是本地路劲，也可以是网络地址\n8、 __强调__ `**文字**`，`__文字__`，`_文字_`，`*文字*`\n9、 __行内代码__ `` `代码` ``\n10、 __代码区块__ 四个空格开头 三个\\`\\`\\` 三个 \\~\\~\\~\n[更多markdown语法](http://markdown.tw/)\n[hexo扩充标签](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n## hexo常用命令\n\n+ **新建**\n\n    hexo new \"my blog\"\n新建的文件在hexo/source/_posts/my-blog.md\n\n+ **编译**\n\n    hexo generate\n部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\n\n+ **开启本地服务**\n\n    hexo server\n开启本地hexo服务\n\n+ **部署**\n\n    hexo deploy\n部署到github和gitcoffe上\n\n+ **清除public**\n\n    hexo clean\n清除source内多余的文件。\n\n+ **一般部署命令**\n{% codeblock lang:bash %}\nhexo clean\nhexo g\nhexo d\n// 合并 hexo d -g\n{% endcodeblock %}\n\n[官方文档](https://hexo.io/zh-cn/docs/commands.html)\n\n##  其他笔记\n_ 同时部署到 github 和 coding上 `_config.yml` 配置\n~~~\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:guwei4321/guwei4321.github.io.git,master\n    coding: https://git.coding.net/guwei1989/guwei1989.git,coding-pages\n~~~\n\n## 其他同学的笔记\n<http://sfau.lt/b5lc0k>","slug":"hexo","published":1,"updated":"2019-04-30T06:04:29.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl768y000jdkhs8b8w9dhc","content":"<p>hexo相关笔记<br><a id=\"more\"></a></p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\" target=\"_blank\" rel=\"external\">http://sfau.lt/b5lc0k</a></p>\n","excerpt":"<p>hexo相关笔记<br>","more":"</p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><p>1、 <strong>分段</strong> 一个或多个回车<br>2、 <strong>换行</strong> 一个回车<br>3、 <strong>标题</strong> <code>#~######</code> 井号的个数表示几级标题<br>4、 <strong>引用</strong> <code>&gt;</code><br>5、 <strong>列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格<br>6、 <strong>链接</strong> <code>[文字](链接地址)</code><br>7、 <strong>图片</strong> <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址<br>8、 <strong>强调</strong> <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code><br>9、 <strong>行内代码</strong> <code>`代码` </code><br>10、 <strong>代码区块</strong> 四个空格开头 三个``` 三个 ~~~<br><a href=\"http://markdown.tw/\">更多markdown语法</a><br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">hexo扩充标签</a></p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><ul>\n<li><p><strong>新建</strong></p>\n<p>  hexo new “my blog”<br>新建的文件在hexo/source/_posts/my-blog.md</p>\n</li>\n<li><p><strong>编译</strong></p>\n<p>  hexo generate<br>部署前需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</p>\n</li>\n<li><p><strong>开启本地服务</strong></p>\n<p>  hexo server<br>开启本地hexo服务</p>\n</li>\n<li><p><strong>部署</strong></p>\n<p>  hexo deploy<br>部署到github和gitcoffe上</p>\n</li>\n<li><p><strong>清除public</strong></p>\n<p>  hexo clean<br>清除source内多余的文件。</p>\n</li>\n<li><p><strong>一般部署命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">// 合并 hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/commands.html\">官方文档</a></p>\n<h2 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h2><p>_ 同时部署到 github 和 coding上 <code>_config.yml</code> 配置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>:</span><br><span class=\"line\">    <span class=\"attribute\">github</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:guwei4321/guwei4321.github.io.git,master</span><br><span class=\"line\">    <span class=\"attribute\">coding</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//git.coding.net/guwei1989/guwei1989.git,coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他同学的笔记\"><a href=\"#其他同学的笔记\" class=\"headerlink\" title=\"其他同学的笔记\"></a>其他同学的笔记</h2><p><a href=\"http://sfau.lt/b5lc0k\">http://sfau.lt/b5lc0k</a></p>"},{"title":"mongoose联表查询","date":"2019-08-01T06:07:19.000Z","_content":"\n很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲`populate`方法和聚合查询。\n<!--more-->\n\n## Schema增加外键增加联系\n增加一张书籍和人物的表，通过外键指向需要关联的对象。\n````javascript\nvar personSchema = Schema({\n    _id: Schema.Types.ObjectId,\n    name: String,\n    age: Number,\n    stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }] // 以id作为外键值\n})\n\nvar storySchema = Schema({\n    author: { type: Schema.Types.ObjectId, ref: 'Person' },  // 以id作为外键值\n    title: String\n})\nvar Story = mongoose.model('Story', storySchema)\nvar Person = mongoose.model('Person', personSchema)\n````\n\n## 保存数据\n保存时，只要把关联的文档的`_id`值赋给它就好了:\n````javascript\nvar author = new Person({\n    _id: new mongoose.Types.ObjectId(),\n    name: 'Ian Flemin',\n    age: 50\n})\nvar story = new Story({\n    title: 'Casino Royale',\n    author: author._id    // 将author的_id赋值给story实例\n});\nauthor.save(); // 保存\nstory.save(); // 保存\n````\n\n## 获取数据\n使用`populate()`方法查询\n````javascript\nStory.\n    find().\n    populate('author').\n    exec( (err, stories) => {\n        if (err) return console.log(err)\n        console.log(stories) // [ { fans: [],_id: 5d4a65c2fa5ac0f1403b9e86,title: 'Casino Royale',author:{ stories: [],_id: 5d4a65c2fa5ac0f1403b9e85, name: 'Ian Flemin',age: 50,__v: 0 },__v: 0 } ] } )\n    } )\n````\n\n##聚合方法\n\n### 定义Schema\n````javascript\nvar bankSchema = Schema({\n    bank_id: String, // 定义表之间关联的键\n    name: String,\n})\n\nvar BankModel = mongoose.model('Bank',bankSchema,'banks');\n\nvar projectSchema = Schema({\n    bank_id: String, // 定义表之间关联的键\n    title:String,\n    rate:String,\n})\n\nvar ProjectModel = mongoose.model('Project',projectSchema,'projects'); // 定义集合名称，聚合查询会用到\n````\n\n### 保存数据\n````javascript\nvar insetArray = [\n    {\"bank_id\":\"1\",\"name\":\"众邦银行\"},\n    {\"bank_id\":\"2\",\"name\":\"营口银行\"},\n    {\"bank_id\":\"2\",\"name\":\"金城金行\"},\n]\nBankModel.create(insetArray, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n\nvar insetArrayP = [\n    {\"bank_id\":\"1\",\"title\":'众邦宝活期',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"1\",\"title\":'众邦宝定期',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"2\",\"title\":'祥云宝1号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存1号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存2号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存3号',\"rate\":\"4.6%\"},\n]\nProjectModel.create(insetArrayP, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### 聚合查询\n````javascript\n BankModel.aggregate([{\n            $lookup:{\n                from:\"projects\",\n                localField:\"bank_id\",\n                foreignField:\"bank_id\",\n                as:\"projects_item\"\n            }\n        }],(err,docs)=>{\n            if(err){\n                console.log(err);\n                return;\n            }\n            console.log(docs) // [{\"_id\":\"5d4a972f70be25ec68f35f6b\",\"bank_id\":\"1\",\"name\":\"众邦银行\",\"__v\":0,\"projects_item\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be2:[{\"_id\":\"5d4a972f70be25ec68f35f6e\",\"bank_id\":\"1\",\"title\":\"众邦宝活期\",\"rate\":\"4.6%\",\"__v\":0},{\"_id\":\"5d4a972f70be25ec68f35f6f\",\"bank_id\":\"1\",\"title\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be25ec68f35f6c\",\"bank_id\":\"2\",\"name\":\"营口银行\",\"__v\":0,\"projects_item\":[{\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be25ec68f35f6d\",\"bank_id\":\"2\",\"name\":\"金城金行\",\"__v\":0,\"projects_item\":[{\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0}]}]\n        })\n````","source":"_posts/mongoose-populate.md","raw":"title: mongoose联表查询\ndate: 2019-08-01 14:07:19\ntags:\n- mongoose\n- nodeJs\n- mongoDB\ncategories:\n- mongoDB\n---\n\n很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲`populate`方法和聚合查询。\n<!--more-->\n\n## Schema增加外键增加联系\n增加一张书籍和人物的表，通过外键指向需要关联的对象。\n````javascript\nvar personSchema = Schema({\n    _id: Schema.Types.ObjectId,\n    name: String,\n    age: Number,\n    stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }] // 以id作为外键值\n})\n\nvar storySchema = Schema({\n    author: { type: Schema.Types.ObjectId, ref: 'Person' },  // 以id作为外键值\n    title: String\n})\nvar Story = mongoose.model('Story', storySchema)\nvar Person = mongoose.model('Person', personSchema)\n````\n\n## 保存数据\n保存时，只要把关联的文档的`_id`值赋给它就好了:\n````javascript\nvar author = new Person({\n    _id: new mongoose.Types.ObjectId(),\n    name: 'Ian Flemin',\n    age: 50\n})\nvar story = new Story({\n    title: 'Casino Royale',\n    author: author._id    // 将author的_id赋值给story实例\n});\nauthor.save(); // 保存\nstory.save(); // 保存\n````\n\n## 获取数据\n使用`populate()`方法查询\n````javascript\nStory.\n    find().\n    populate('author').\n    exec( (err, stories) => {\n        if (err) return console.log(err)\n        console.log(stories) // [ { fans: [],_id: 5d4a65c2fa5ac0f1403b9e86,title: 'Casino Royale',author:{ stories: [],_id: 5d4a65c2fa5ac0f1403b9e85, name: 'Ian Flemin',age: 50,__v: 0 },__v: 0 } ] } )\n    } )\n````\n\n##聚合方法\n\n### 定义Schema\n````javascript\nvar bankSchema = Schema({\n    bank_id: String, // 定义表之间关联的键\n    name: String,\n})\n\nvar BankModel = mongoose.model('Bank',bankSchema,'banks');\n\nvar projectSchema = Schema({\n    bank_id: String, // 定义表之间关联的键\n    title:String,\n    rate:String,\n})\n\nvar ProjectModel = mongoose.model('Project',projectSchema,'projects'); // 定义集合名称，聚合查询会用到\n````\n\n### 保存数据\n````javascript\nvar insetArray = [\n    {\"bank_id\":\"1\",\"name\":\"众邦银行\"},\n    {\"bank_id\":\"2\",\"name\":\"营口银行\"},\n    {\"bank_id\":\"2\",\"name\":\"金城金行\"},\n]\nBankModel.create(insetArray, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n\nvar insetArrayP = [\n    {\"bank_id\":\"1\",\"title\":'众邦宝活期',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"1\",\"title\":'众邦宝定期',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"2\",\"title\":'祥云宝1号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存1号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存2号',\"rate\":\"4.6%\"},\n    {\"bank_id\":\"3\",\"title\":'金慧存3号',\"rate\":\"4.6%\"},\n]\nProjectModel.create(insetArrayP, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### 聚合查询\n````javascript\n BankModel.aggregate([{\n            $lookup:{\n                from:\"projects\",\n                localField:\"bank_id\",\n                foreignField:\"bank_id\",\n                as:\"projects_item\"\n            }\n        }],(err,docs)=>{\n            if(err){\n                console.log(err);\n                return;\n            }\n            console.log(docs) // [{\"_id\":\"5d4a972f70be25ec68f35f6b\",\"bank_id\":\"1\",\"name\":\"众邦银行\",\"__v\":0,\"projects_item\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be2:[{\"_id\":\"5d4a972f70be25ec68f35f6e\",\"bank_id\":\"1\",\"title\":\"众邦宝活期\",\"rate\":\"4.6%\",\"__v\":0},{\"_id\":\"5d4a972f70be25ec68f35f6f\",\"bank_id\":\"1\",\"title\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be25ec68f35f6c\",\"bank_id\":\"2\",\"name\":\"营口银行\",\"__v\":0,\"projects_item\":[{\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0}]},{\"_id\":\"5d4a972f70be25ec68f35f6d\",\"bank_id\":\"2\",\"name\":\"金城金行\",\"__v\":0,\"projects_item\":[{\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0}]}]\n        })\n````","slug":"mongoose-populate","published":1,"updated":"2019-08-07T11:13:59.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7690000ndkhsyrpvsqvt","content":"<p>很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲<code>populate</code>方法和聚合查询。<br><a id=\"more\"></a></p>\n<h2 id=\"Schema增加外键增加联系\"><a href=\"#Schema增加外键增加联系\" class=\"headerlink\" title=\"Schema增加外键增加联系\"></a>Schema增加外键增加联系</h2><p>增加一张书籍和人物的表，通过外键指向需要关联的对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    _id: Schema.Types.ObjectId,</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    stories: [&#123; type: Schema.Types.ObjectId, ref: <span class=\"string\">'Story'</span> &#125;] <span class=\"comment\">// 以id作为外键值</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> storySchema = Schema(&#123;</span><br><span class=\"line\">    author: &#123; type: Schema.Types.ObjectId, ref: <span class=\"string\">'Person'</span> &#125;,  <span class=\"comment\">// 以id作为外键值</span></span><br><span class=\"line\">    title: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Story = mongoose.model(<span class=\"string\">'Story'</span>, storySchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>保存时，只要把关联的文档的<code>_id</code>值赋给它就好了:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person(&#123;</span><br><span class=\"line\">    _id: <span class=\"keyword\">new</span> mongoose.Types.ObjectId(),</span><br><span class=\"line\">    name: <span class=\"string\">'Ian Flemin'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">50</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> story = <span class=\"keyword\">new</span> Story(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Casino Royale'</span>,</span><br><span class=\"line\">    author: author._id    <span class=\"comment\">// 将author的_id赋值给story实例</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">author.save(); <span class=\"comment\">// 保存</span></span><br><span class=\"line\">story.save(); <span class=\"comment\">// 保存</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><p>使用<code>populate()</code>方法查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Story.</span><br><span class=\"line\">    find().</span><br><span class=\"line\">    populate(<span class=\"string\">'author'</span>).</span><br><span class=\"line\">    exec( (err, stories) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stories) <span class=\"comment\">// [ &#123; fans: [],_id: 5d4a65c2fa5ac0f1403b9e86,title: 'Casino Royale',author:&#123; stories: [],_id: 5d4a65c2fa5ac0f1403b9e85, name: 'Ian Flemin',age: 50,__v: 0 &#125;,__v: 0 &#125; ] &#125; )</span></span><br><span class=\"line\">    &#125; )</span><br></pre></td></tr></table></figure></p>\n<p>##聚合方法</p>\n<h3 id=\"定义Schema\"><a href=\"#定义Schema\" class=\"headerlink\" title=\"定义Schema\"></a>定义Schema</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bankSchema = Schema(&#123;</span><br><span class=\"line\">    bank_id: <span class=\"built_in\">String</span>, <span class=\"comment\">// 定义表之间关联的键</span></span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BankModel = mongoose.model(<span class=\"string\">'Bank'</span>,bankSchema,<span class=\"string\">'banks'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> projectSchema = Schema(&#123;</span><br><span class=\"line\">    bank_id: <span class=\"built_in\">String</span>, <span class=\"comment\">// 定义表之间关联的键</span></span><br><span class=\"line\">    title:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    rate:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ProjectModel = mongoose.model(<span class=\"string\">'Project'</span>,projectSchema,<span class=\"string\">'projects'</span>); <span class=\"comment\">// 定义集合名称，聚合查询会用到</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"保存数据-1\"><a href=\"#保存数据-1\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> insetArray = [</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"众邦银行\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"营口银行\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"金城金行\"</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">BankModel.create(insetArray, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> insetArrayP = [</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'众邦宝活期'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'众邦宝定期'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'祥云宝1号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存1号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存2号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存3号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">ProjectModel.create(insetArrayP, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BankModel.aggregate([&#123;</span><br><span class=\"line\">           $lookup:&#123;</span><br><span class=\"line\">               <span class=\"keyword\">from</span>:<span class=\"string\">\"projects\"</span>,</span><br><span class=\"line\">               localField:<span class=\"string\">\"bank_id\"</span>,</span><br><span class=\"line\">               foreignField:<span class=\"string\">\"bank_id\"</span>,</span><br><span class=\"line\">               <span class=\"keyword\">as</span>:<span class=\"string\">\"projects_item\"</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;],(err,docs)=&gt;&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">               <span class=\"keyword\">return</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(docs) <span class=\"comment\">// [&#123;\"_id\":\"5d4a972f70be25ec68f35f6b\",\"bank_id\":\"1\",\"name\":\"众邦银行\",\"__v\":0,\"projects_item\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be2:[&#123;\"_id\":\"5d4a972f70be25ec68f35f6e\",\"bank_id\":\"1\",\"title\":\"众邦宝活期\",\"rate\":\"4.6%\",\"__v\":0&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6f\",\"bank_id\":\"1\",\"title\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6c\",\"bank_id\":\"2\",\"name\":\"营口银行\",\"__v\":0,\"projects_item\":[&#123;\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6d\",\"bank_id\":\"2\",\"name\":\"金城金行\",\"__v\":0,\"projects_item\":[&#123;\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;]</span></span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>","excerpt":"<p>很多情况下，不可能单独只查询一个表来获取数据，经常会多表联查。这里我们只讲<code>populate</code>方法和聚合查询。<br>","more":"</p>\n<h2 id=\"Schema增加外键增加联系\"><a href=\"#Schema增加外键增加联系\" class=\"headerlink\" title=\"Schema增加外键增加联系\"></a>Schema增加外键增加联系</h2><p>增加一张书籍和人物的表，通过外键指向需要关联的对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    _id: Schema.Types.ObjectId,</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    stories: [&#123; type: Schema.Types.ObjectId, ref: <span class=\"string\">'Story'</span> &#125;] <span class=\"comment\">// 以id作为外键值</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> storySchema = Schema(&#123;</span><br><span class=\"line\">    author: &#123; type: Schema.Types.ObjectId, ref: <span class=\"string\">'Person'</span> &#125;,  <span class=\"comment\">// 以id作为外键值</span></span><br><span class=\"line\">    title: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Story = mongoose.model(<span class=\"string\">'Story'</span>, storySchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>保存时，只要把关联的文档的<code>_id</code>值赋给它就好了:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person(&#123;</span><br><span class=\"line\">    _id: <span class=\"keyword\">new</span> mongoose.Types.ObjectId(),</span><br><span class=\"line\">    name: <span class=\"string\">'Ian Flemin'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">50</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> story = <span class=\"keyword\">new</span> Story(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Casino Royale'</span>,</span><br><span class=\"line\">    author: author._id    <span class=\"comment\">// 将author的_id赋值给story实例</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">author.save(); <span class=\"comment\">// 保存</span></span><br><span class=\"line\">story.save(); <span class=\"comment\">// 保存</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><p>使用<code>populate()</code>方法查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Story.</span><br><span class=\"line\">    find().</span><br><span class=\"line\">    populate(<span class=\"string\">'author'</span>).</span><br><span class=\"line\">    exec( (err, stories) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stories) <span class=\"comment\">// [ &#123; fans: [],_id: 5d4a65c2fa5ac0f1403b9e86,title: 'Casino Royale',author:&#123; stories: [],_id: 5d4a65c2fa5ac0f1403b9e85, name: 'Ian Flemin',age: 50,__v: 0 &#125;,__v: 0 &#125; ] &#125; )</span></span><br><span class=\"line\">    &#125; )</span><br></pre></td></tr></table></figure></p>\n<p>##聚合方法</p>\n<h3 id=\"定义Schema\"><a href=\"#定义Schema\" class=\"headerlink\" title=\"定义Schema\"></a>定义Schema</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bankSchema = Schema(&#123;</span><br><span class=\"line\">    bank_id: <span class=\"built_in\">String</span>, <span class=\"comment\">// 定义表之间关联的键</span></span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BankModel = mongoose.model(<span class=\"string\">'Bank'</span>,bankSchema,<span class=\"string\">'banks'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> projectSchema = Schema(&#123;</span><br><span class=\"line\">    bank_id: <span class=\"built_in\">String</span>, <span class=\"comment\">// 定义表之间关联的键</span></span><br><span class=\"line\">    title:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    rate:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ProjectModel = mongoose.model(<span class=\"string\">'Project'</span>,projectSchema,<span class=\"string\">'projects'</span>); <span class=\"comment\">// 定义集合名称，聚合查询会用到</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"保存数据-1\"><a href=\"#保存数据-1\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> insetArray = [</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"众邦银行\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"营口银行\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"金城金行\"</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">BankModel.create(insetArray, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> insetArrayP = [</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'众邦宝活期'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'众邦宝定期'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'祥云宝1号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存1号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存2号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"bank_id\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"title\"</span>:<span class=\"string\">'金慧存3号'</span>,<span class=\"string\">\"rate\"</span>:<span class=\"string\">\"4.6%\"</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">ProjectModel.create(insetArrayP, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BankModel.aggregate([&#123;</span><br><span class=\"line\">           $lookup:&#123;</span><br><span class=\"line\">               <span class=\"keyword\">from</span>:<span class=\"string\">\"projects\"</span>,</span><br><span class=\"line\">               localField:<span class=\"string\">\"bank_id\"</span>,</span><br><span class=\"line\">               foreignField:<span class=\"string\">\"bank_id\"</span>,</span><br><span class=\"line\">               <span class=\"keyword\">as</span>:<span class=\"string\">\"projects_item\"</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;],(err,docs)=&gt;&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">               <span class=\"keyword\">return</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(docs) <span class=\"comment\">// [&#123;\"_id\":\"5d4a972f70be25ec68f35f6b\",\"bank_id\":\"1\",\"name\":\"众邦银行\",\"__v\":0,\"projects_item\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be2:[&#123;\"_id\":\"5d4a972f70be25ec68f35f6e\",\"bank_id\":\"1\",\"title\":\"众邦宝活期\",\"rate\":\"4.6%\",\"__v\":0&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6f\",\"bank_id\":\"1\",\"title\":\"众邦宝定期\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6c\",\"bank_id\":\"2\",\"name\":\"营口银行\",\"__v\":0,\"projects_item\":[&#123;\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;,&#123;\"_id\":\"5d4a972f70be25ec68f35f6d\",\"bank_id\":\"2\",\"name\":\"金城金行\",\"__v\":0,\"projects_item\":[&#123;\"_id\":\"5d4a972f70be25ec68f35f70\",\"bank_id\":\"2\",\"title\":\"祥云宝1号\",\"rate\":\"4.6%\",\"__v\":0&#125;]&#125;]</span></span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>"},{"title":"正则基础深入应用","date":"2017-07-24T06:54:16.000Z","_content":"\n\n本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。\n\n写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。\n\n<!--more-->\n## 密码强度\n\n### 密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\n\n用到了前瞻，如果还不清楚可以移步 [正则基础学习](../javascript-reg-1)\n\n正则一\n````javascript\n(?!^[a-z]+$)(?!^[0-9]+$)(?!^[A-Z]+$)^[a-zA-Z0-9]{6,12}$\n\n````\n\n其中 `(?!)` 这种写法是对后面数据的一种限定，过滤匹配的数据。如 `(?!2)[0-9]` 就是匹配除了2之外的所有数字。\n\n然后，上面那段正则就可以分以下四段分析，因为`(?!)`只是限定条件，不匹配结果，所以前面三个`(?!)`只是三个条件，后面的才是匹配结果：\n* `(?!^[a-z]+$)`: 排除纯小写\n* `(?!^[A-Z]+$)`: 排除纯大写\n* `(?!^[0-9]+$)`: 排除纯数字\n* `^[a-zA-Z0-9]{6,16}$`: 匹配6到12个 [a-zA-Z0-9] 范围中字符\n\n正则二\n````javascript\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{6,12}$\n````\n\n这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以`^` 跟 `$` 位置不同。\n这段正则分以下也三段分析：\n\n* `^(?=.*\\d)[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有数字。\n* `^(?=.*[a-z])[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。\n* `^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$`:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。\n\n\n## 整数部分千分位\n现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，\n互利网中也是如此。\n我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。\n因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。\n\n方法如下：\n````javascript\n99999999999'.replace(/\\d{1,3}(?=(\\d{3})+)/g, '$&,');\n````\n\n* `(\\d{3})+`表示一组及以上3的倍数个数字加小数点\n* 然后用正向肯定查找 `(?=)` 包起来，说明 `(\\d{3})+` 只是一个条件\n* `g` 表示匹配多次直到没匹配到结果\n* `$&` 表示 `\\d{1,3}` 正向查找条件成立时匹配到的结果\n\n所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，`$&`提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足`\\d{1,3}` 后才停止匹配。\n\n* [怎么引用replace匹配到的结果](../javascript-reg-1#字符串替代：) 知识点。\n\n## 匹配身份证号码\n\n正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：\n\n````javascript\n(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])(?:(0[1-9])|[1-6][1-9]|70)(?:(0[1-9])|1[0-8]|[2-9][1-9])(?:(?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)(?:[0-9]{3}[0-9X]);\n````\n\n\n### 正则分析\n#### 前六位地址码\n\n百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：\n{% blockquote %}\n华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，\n东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，\n华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，\n华中地区： 河南省|410000，湖北省|420000，湖南省|430000，\n华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，\n西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，\n西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，\n特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000\n\n第一、二位表示省（自治区、直辖市、特别行政区）。\n第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。\n第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。\n{% endblockquote %}\n\n根据以上规则得出以下地址码正则：\n* 第一二位省码：`(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])`\n* 第三四位市码：`(?:(0[1-9])|[1-6][1-9]|70)`\n* 第五六位县码：`(?:(0[1-9])|1[0-8]|[2-9][1-9])` \n\n#### 中间八位生日期码\n\n中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。\n首先从每个月都有的1-28号开始\n`(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])`\n\n然后除2月之外都有29号跟30号\n`(?:0[13-9]|1[0-2])(?:29|30)`\n\n接着1、3、5、7、8、10、12月有31号\n`(?:0[13578]|1[02])31`\n\n以上日期码前面再加上年 `(19[0-9]{2}|200[0-9]|201[0-7])`，这样子除了闰年的所有日期就都ok了，最后再来写闰年。\n闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位\n`(0[48]|[2468][048]|[13579][26])`\n能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。\n最后我我们用`|`连接起来。\n\n 1900到2017年\n`((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)`\n\n\n#### 最后四位验证码\n有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：\n````javascript\n([0-9]{3}[0-9X])\n````\n\n","source":"_posts/javascript-reg-2.md","raw":"title: 正则基础深入应用\ndate: 2017-07-24 14:54:16\ntags:\n- JavaScript\n- 正则\ncategories:\n- JavaScript\n---\n\n\n本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。\n\n写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。\n\n<!--more-->\n## 密码强度\n\n### 密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\n\n用到了前瞻，如果还不清楚可以移步 [正则基础学习](../javascript-reg-1)\n\n正则一\n````javascript\n(?!^[a-z]+$)(?!^[0-9]+$)(?!^[A-Z]+$)^[a-zA-Z0-9]{6,12}$\n\n````\n\n其中 `(?!)` 这种写法是对后面数据的一种限定，过滤匹配的数据。如 `(?!2)[0-9]` 就是匹配除了2之外的所有数字。\n\n然后，上面那段正则就可以分以下四段分析，因为`(?!)`只是限定条件，不匹配结果，所以前面三个`(?!)`只是三个条件，后面的才是匹配结果：\n* `(?!^[a-z]+$)`: 排除纯小写\n* `(?!^[A-Z]+$)`: 排除纯大写\n* `(?!^[0-9]+$)`: 排除纯数字\n* `^[a-zA-Z0-9]{6,16}$`: 匹配6到12个 [a-zA-Z0-9] 范围中字符\n\n正则二\n````javascript\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{6,12}$\n````\n\n这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以`^` 跟 `$` 位置不同。\n这段正则分以下也三段分析：\n\n* `^(?=.*\\d)[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有数字。\n* `^(?=.*[a-z])[a-zA-Z0-9]{6,12}$`: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。\n* `^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$`:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。\n\n\n## 整数部分千分位\n现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，\n互利网中也是如此。\n我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。\n因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。\n\n方法如下：\n````javascript\n99999999999'.replace(/\\d{1,3}(?=(\\d{3})+)/g, '$&,');\n````\n\n* `(\\d{3})+`表示一组及以上3的倍数个数字加小数点\n* 然后用正向肯定查找 `(?=)` 包起来，说明 `(\\d{3})+` 只是一个条件\n* `g` 表示匹配多次直到没匹配到结果\n* `$&` 表示 `\\d{1,3}` 正向查找条件成立时匹配到的结果\n\n所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，`$&`提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足`\\d{1,3}` 后才停止匹配。\n\n* [怎么引用replace匹配到的结果](../javascript-reg-1#字符串替代：) 知识点。\n\n## 匹配身份证号码\n\n正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：\n\n````javascript\n(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])(?:(0[1-9])|[1-6][1-9]|70)(?:(0[1-9])|1[0-8]|[2-9][1-9])(?:(?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)(?:[0-9]{3}[0-9X]);\n````\n\n\n### 正则分析\n#### 前六位地址码\n\n百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：\n{% blockquote %}\n华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，\n东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，\n华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，\n华中地区： 河南省|410000，湖北省|420000，湖南省|430000，\n华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，\n西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，\n西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，\n特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000\n\n第一、二位表示省（自治区、直辖市、特别行政区）。\n第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。\n第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。\n{% endblockquote %}\n\n根据以上规则得出以下地址码正则：\n* 第一二位省码：`(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])`\n* 第三四位市码：`(?:(0[1-9])|[1-6][1-9]|70)`\n* 第五六位县码：`(?:(0[1-9])|1[0-8]|[2-9][1-9])` \n\n#### 中间八位生日期码\n\n中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。\n首先从每个月都有的1-28号开始\n`(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])`\n\n然后除2月之外都有29号跟30号\n`(?:0[13-9]|1[0-2])(?:29|30)`\n\n接着1、3、5、7、8、10、12月有31号\n`(?:0[13578]|1[02])31`\n\n以上日期码前面再加上年 `(19[0-9]{2}|200[0-9]|201[0-7])`，这样子除了闰年的所有日期就都ok了，最后再来写闰年。\n闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位\n`(0[48]|[2468][048]|[13579][26])`\n能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。\n最后我我们用`|`连接起来。\n\n 1900到2017年\n`((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)`\n\n\n#### 最后四位验证码\n有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：\n````javascript\n([0-9]{3}[0-9X])\n````\n\n","slug":"javascript-reg-2","published":1,"updated":"2019-04-30T06:04:29.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7691000odkhs4xgejyfe","content":"<p>本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。</p>\n<p>写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。</p>\n<a id=\"more\"></a>\n<h2 id=\"密码强度\"><a href=\"#密码强度\" class=\"headerlink\" title=\"密码强度\"></a>密码强度</h2><h3 id=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"><a href=\"#密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\" class=\"headerlink\" title=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"></a>密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间</h3><p>用到了前瞻，如果还不清楚可以移步 <a href=\"../javascript-reg-1\">正则基础学习</a></p>\n<p>正则一<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^[a-z]+$)(?!^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$)(?!^[A-Z]+$)^[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>(?!)</code> 这种写法是对后面数据的一种限定，过滤匹配的数据。如 <code>(?!2)[0-9]</code> 就是匹配除了2之外的所有数字。</p>\n<p>然后，上面那段正则就可以分以下四段分析，因为<code>(?!)</code>只是限定条件，不匹配结果，所以前面三个<code>(?!)</code>只是三个条件，后面的才是匹配结果：</p>\n<ul>\n<li><code>(?!^[a-z]+$)</code>: 排除纯小写</li>\n<li><code>(?!^[A-Z]+$)</code>: 排除纯大写</li>\n<li><code>(?!^[0-9]+$)</code>: 排除纯数字</li>\n<li><code>^[a-zA-Z0-9]{6,16}$</code>: 匹配6到12个 [a-zA-Z0-9] 范围中字符</li>\n</ul>\n<p>正则二<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以<code>^</code> 跟 <code>$</code> 位置不同。<br>这段正则分以下也三段分析：</p>\n<ul>\n<li><code>^(?=.*\\d)[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有数字。</li>\n<li><code>^(?=.*[a-z])[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。</li>\n<li><code>^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$</code>:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。</li>\n</ul>\n<h2 id=\"整数部分千分位\"><a href=\"#整数部分千分位\" class=\"headerlink\" title=\"整数部分千分位\"></a>整数部分千分位</h2><p>现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，<br>互利网中也是如此。<br>我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。<br>因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。</p>\n<p>方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">99999999999</span><span class=\"string\">'.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+)/g, '</span>$&amp;,<span class=\"string\">');</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>(\\d{3})+</code>表示一组及以上3的倍数个数字加小数点</li>\n<li>然后用正向肯定查找 <code>(?=)</code> 包起来，说明 <code>(\\d{3})+</code> 只是一个条件</li>\n<li><code>g</code> 表示匹配多次直到没匹配到结果</li>\n<li><code>$&amp;</code> 表示 <code>\\d{1,3}</code> 正向查找条件成立时匹配到的结果</li>\n</ul>\n<p>所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，<code>$&amp;</code>提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足<code>\\d{1,3}</code> 后才停止匹配。</p>\n<ul>\n<li><a href=\"../javascript-reg-1#字符串替代：\">怎么引用replace匹配到的结果</a> 知识点。</li>\n</ul>\n<h2 id=\"匹配身份证号码\"><a href=\"#匹配身份证号码\" class=\"headerlink\" title=\"匹配身份证号码\"></a>匹配身份证号码</h2><p>正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?:<span class=\"number\">1</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">2</span>[<span class=\"number\">1</span><span class=\"number\">-3</span>]|<span class=\"number\">3</span>[<span class=\"number\">1</span><span class=\"number\">-7</span>]|<span class=\"number\">4</span>[<span class=\"number\">1</span><span class=\"number\">-6</span>]|<span class=\"number\">5</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]|<span class=\"number\">6</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">71</span>|<span class=\"number\">8</span>[<span class=\"number\">12</span>])(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|[<span class=\"number\">1</span><span class=\"number\">-6</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">70</span>)(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]|[<span class=\"number\">2</span><span class=\"number\">-9</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>])(?:(?:(<span class=\"number\">19</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">200</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">201</span>[<span class=\"number\">0</span><span class=\"number\">-7</span>])(?:(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]))|(?:(?:<span class=\"number\">0</span>[<span class=\"number\">13</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>))|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])<span class=\"number\">31</span>))|(?:(?:(<span class=\"number\">19</span>|<span class=\"number\">20</span>)(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>]))|<span class=\"number\">2000</span>)<span class=\"number\">0229</span>)(?:[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则分析\"><a href=\"#正则分析\" class=\"headerlink\" title=\"正则分析\"></a>正则分析</h3><h4 id=\"前六位地址码\"><a href=\"#前六位地址码\" class=\"headerlink\" title=\"前六位地址码\"></a>前六位地址码</h4><p>百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：<br><blockquote><p>华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000，<br>华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，<br>西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，<br>特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p>\n<p>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p>\n</blockquote></p>\n<p>根据以上规则得出以下地址码正则：</p>\n<ul>\n<li>第一二位省码：<code>(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])</code></li>\n<li>第三四位市码：<code>(?:(0[1-9])|[1-6][1-9]|70)</code></li>\n<li>第五六位县码：<code>(?:(0[1-9])|1[0-8]|[2-9][1-9])</code> </li>\n</ul>\n<h4 id=\"中间八位生日期码\"><a href=\"#中间八位生日期码\" class=\"headerlink\" title=\"中间八位生日期码\"></a>中间八位生日期码</h4><p>中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。<br>首先从每个月都有的1-28号开始<br><code>(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])</code></p>\n<p>然后除2月之外都有29号跟30号<br><code>(?:0[13-9]|1[0-2])(?:29|30)</code></p>\n<p>接着1、3、5、7、8、10、12月有31号<br><code>(?:0[13578]|1[02])31</code></p>\n<p>以上日期码前面再加上年 <code>(19[0-9]{2}|200[0-9]|201[0-7])</code>，这样子除了闰年的所有日期就都ok了，最后再来写闰年。<br>闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位<br><code>(0[48]|[2468][048]|[13579][26])</code><br>能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。<br>最后我我们用<code>|</code>连接起来。</p>\n<p> 1900到2017年<br><code>((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)</code></p>\n<h4 id=\"最后四位验证码\"><a href=\"#最后四位验证码\" class=\"headerlink\" title=\"最后四位验证码\"></a>最后四位验证码</h4><p>有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X])</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>本文是一篇真这个表达式的高级教程，主要通过一些例子，深入探讨正则表达式的高级功能。</p>\n<p>写好正则首先第一点得对正则的支持都烂熟于心，第二点就是找到我们要取的数据的唯一特点。接下来我们通过几个例子来加强训练。</p>","more":"<h2 id=\"密码强度\"><a href=\"#密码强度\" class=\"headerlink\" title=\"密码强度\"></a>密码强度</h2><h3 id=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"><a href=\"#密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\" class=\"headerlink\" title=\"密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间\"></a>密码必须包含大小写字母和字母和数字，排除特殊自字符，长度在6-12之间</h3><p>用到了前瞻，如果还不清楚可以移步 <a href=\"../javascript-reg-1\">正则基础学习</a></p>\n<p>正则一<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^[a-z]+$)(?!^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$)(?!^[A-Z]+$)^[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>(?!)</code> 这种写法是对后面数据的一种限定，过滤匹配的数据。如 <code>(?!2)[0-9]</code> 就是匹配除了2之外的所有数字。</p>\n<p>然后，上面那段正则就可以分以下四段分析，因为<code>(?!)</code>只是限定条件，不匹配结果，所以前面三个<code>(?!)</code>只是三个条件，后面的才是匹配结果：</p>\n<ul>\n<li><code>(?!^[a-z]+$)</code>: 排除纯小写</li>\n<li><code>(?!^[A-Z]+$)</code>: 排除纯大写</li>\n<li><code>(?!^[0-9]+$)</code>: 排除纯数字</li>\n<li><code>^[a-zA-Z0-9]{6,16}$</code>: 匹配6到12个 [a-zA-Z0-9] 范围中字符</li>\n</ul>\n<p>正则二<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">6</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure></p>\n<p>这段正则是上面的相反逻辑，所以结构有所不一样。上面那段正则是排除，这段正则是限定条件，所以<code>^</code> 跟 <code>$</code> 位置不同。<br>这段正则分以下也三段分析：</p>\n<ul>\n<li><code>^(?=.*\\d)[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有数字。</li>\n<li><code>^(?=.*[a-z])[a-zA-Z0-9]{6,12}$</code>: 匹配大小写字母以及数字，匹配的字符中必须有小写字母。</li>\n<li><code>^(?=.*[A-Z])[a-zA-Z0-9]{6,12}$</code>:  匹配大小写字母以及数字，匹配的字符中必须有大写字母。</li>\n</ul>\n<h2 id=\"整数部分千分位\"><a href=\"#整数部分千分位\" class=\"headerlink\" title=\"整数部分千分位\"></a>整数部分千分位</h2><p>现实中，土豪的存折里存的钱会是天文数字，没有千分位隔开，不好数自己的钱，<br>互利网中也是如此。<br>我们需要将数字整数部分加千分位，小数部分加千分位没必要，一般只精确到后两位。<br>因为js没有后瞻，所以首先大家可以将小数点前面的整数提取出来。</p>\n<p>方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">99999999999</span><span class=\"string\">'.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+)/g, '</span>$&amp;,<span class=\"string\">');</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>(\\d{3})+</code>表示一组及以上3的倍数个数字加小数点</li>\n<li>然后用正向肯定查找 <code>(?=)</code> 包起来，说明 <code>(\\d{3})+</code> 只是一个条件</li>\n<li><code>g</code> 表示匹配多次直到没匹配到结果</li>\n<li><code>$&amp;</code> 表示 <code>\\d{1,3}</code> 正向查找条件成立时匹配到的结果</li>\n</ul>\n<p>所以，这个正则匹配过程可以理解成：如果匹配到数字1~3个，如果后面的数字刚好是3的倍数，那就符合规则，<code>$&amp;</code>提取再加上千分位符，接着继续匹配，知道读到百位后，已经不能满足<code>\\d{1,3}</code> 后才停止匹配。</p>\n<ul>\n<li><a href=\"../javascript-reg-1#字符串替代：\">怎么引用replace匹配到的结果</a> 知识点。</li>\n</ul>\n<h2 id=\"匹配身份证号码\"><a href=\"#匹配身份证号码\" class=\"headerlink\" title=\"匹配身份证号码\"></a>匹配身份证号码</h2><p>正则匹配身份证号，根据身份证号码的规律，我们得出以下正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?:<span class=\"number\">1</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">2</span>[<span class=\"number\">1</span><span class=\"number\">-3</span>]|<span class=\"number\">3</span>[<span class=\"number\">1</span><span class=\"number\">-7</span>]|<span class=\"number\">4</span>[<span class=\"number\">1</span><span class=\"number\">-6</span>]|<span class=\"number\">5</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]|<span class=\"number\">6</span>[<span class=\"number\">1</span><span class=\"number\">-5</span>]|<span class=\"number\">71</span>|<span class=\"number\">8</span>[<span class=\"number\">12</span>])(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|[<span class=\"number\">1</span><span class=\"number\">-6</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">70</span>)(?:(<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>])|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]|[<span class=\"number\">2</span><span class=\"number\">-9</span>][<span class=\"number\">1</span><span class=\"number\">-9</span>])(?:(?:(<span class=\"number\">19</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">200</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">201</span>[<span class=\"number\">0</span><span class=\"number\">-7</span>])(?:(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">0</span>[<span class=\"number\">1</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-8</span>]))|(?:(?:<span class=\"number\">0</span>[<span class=\"number\">13</span><span class=\"number\">-9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>])(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>))|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])<span class=\"number\">31</span>))|(?:(?:(<span class=\"number\">19</span>|<span class=\"number\">20</span>)(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>]))|<span class=\"number\">2000</span>)<span class=\"number\">0229</span>)(?:[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则分析\"><a href=\"#正则分析\" class=\"headerlink\" title=\"正则分析\"></a>正则分析</h3><h4 id=\"前六位地址码\"><a href=\"#前六位地址码\" class=\"headerlink\" title=\"前六位地址码\"></a>前六位地址码</h4><p>百度百科上对于前六位中国大陆居民身份证号码中的地址码的数字编码规则解释：<br><blockquote><p>华北地区： 北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000，<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000，<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000，<br>华南地区： 广东省|440000，广西壮族自治区|450000，海南省|460000，<br>西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000，<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000，<br>特别地区：台湾地区(886)|710000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p>\n<p>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p>\n</blockquote></p>\n<p>根据以上规则得出以下地址码正则：</p>\n<ul>\n<li>第一二位省码：<code>(?:1[1-5]|2[1-3]|3[1-7]|4[1-6]|5[0-4]|6[1-5]|71|8[12])</code></li>\n<li>第三四位市码：<code>(?:(0[1-9])|[1-6][1-9]|70)</code></li>\n<li>第五六位县码：<code>(?:(0[1-9])|1[0-8]|[2-9][1-9])</code> </li>\n</ul>\n<h4 id=\"中间八位生日期码\"><a href=\"#中间八位生日期码\" class=\"headerlink\" title=\"中间八位生日期码\"></a>中间八位生日期码</h4><p>中间八位是生日器码，YYYYMMDD 格式。因为日期不仅有大小月，还有闰年，但是这里只需要19和20开头的闰年，正则长度小了不少。<br>首先从每个月都有的1-28号开始<br><code>(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8])</code></p>\n<p>然后除2月之外都有29号跟30号<br><code>(?:0[13-9]|1[0-2])(?:29|30)</code></p>\n<p>接着1、3、5、7、8、10、12月有31号<br><code>(?:0[13578]|1[02])31</code></p>\n<p>以上日期码前面再加上年 <code>(19[0-9]{2}|200[0-9]|201[0-7])</code>，这样子除了闰年的所有日期就都ok了，最后再来写闰年。<br>闰年的规则是能被4整除单不能被100整除，或者能被400整除。这里我们只写19和20开头的的年份。能被4整除不能被100整除的后两位<br><code>(0[48]|[2468][048]|[13579][26])</code><br>能被400整除的1900之后也就只有2000符合规则，2400年得过400年。这些年份写好了，再加上0229就ok了。<br>最后我我们用<code>|</code>连接起来。</p>\n<p> 1900到2017年<br><code>((?:(19[0-9]{2}|200[0-9]|201[0-7])(?:(?:(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-8]))|(?:(?:0[13-9]|1[0-2])(?:29|30))|(?:0[13578]|1[02])31))|(?:(?:(19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229)</code></p>\n<h4 id=\"最后四位验证码\"><a href=\"#最后四位验证码\" class=\"headerlink\" title=\"最后四位验证码\"></a>最后四位验证码</h4><p>有了地区码和日期码，但是一个地方那一天出生的人肯定不止一人，所以就有了后四位。其中倒数第二个数字男的是单数女的双数，最后一位有可能是罗马数字的X：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>X])</span><br></pre></td></tr></table></figure></p>"},{"title":"javascript-number-range","date":"2018-03-09T03:11:52.000Z","_content":"\nJavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用`Number.MAX_VALUE`和`Number.MIN_VALUE` 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。\n<!--more-->\n\n## JavaScript运算\n在JavaScript里面，数字使用[IEEE 754](https://zh.wikipedia.org/wiki/IEEE_754)中规定的[双精度浮点类型](https://zh.wikipedia.org/wiki/雙精度浮點數)。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用`Number.MIN_SAFE_INTEGER`,`Number.MAX_SAFE_INTEGER`来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码\n````js\n    var num = 9007199254740992;\n    console.log(num + 5); // 9007199254740996\n````\n正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。\n\n\n## JavaScript位运算\nJavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。\n````js\n    var maxSum = Math.pow(2,31);\n    console.log(pow&pow) // -2147483648\n    console.log(pow>>1) // -1073741824\n````\n自己与自己正确应该是还是自己，但是他显示`-2147483648`, `pow>>1` 正确结果应该是跟`pow/2`的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。","source":"_posts/javascript-number-range.md","raw":"title: javascript-number-range\ndate: 2018-03-09 11:11:52\ntags: \n- JavaScript\n- JS实际应用\ncategories:\n- JavaScript\n---\n\nJavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用`Number.MAX_VALUE`和`Number.MIN_VALUE` 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。\n<!--more-->\n\n## JavaScript运算\n在JavaScript里面，数字使用[IEEE 754](https://zh.wikipedia.org/wiki/IEEE_754)中规定的[双精度浮点类型](https://zh.wikipedia.org/wiki/雙精度浮點數)。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用`Number.MIN_SAFE_INTEGER`,`Number.MAX_SAFE_INTEGER`来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码\n````js\n    var num = 9007199254740992;\n    console.log(num + 5); // 9007199254740996\n````\n正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。\n\n\n## JavaScript位运算\nJavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。\n````js\n    var maxSum = Math.pow(2,31);\n    console.log(pow&pow) // -2147483648\n    console.log(pow>>1) // -1073741824\n````\n自己与自己正确应该是还是自己，但是他显示`-2147483648`, `pow>>1` 正确结果应该是跟`pow/2`的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。","slug":"javascript-number-range","published":1,"updated":"2019-04-30T06:04:29.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7693000rdkhs9f7i7vml","content":"<p>JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code> 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。<br><a id=\"more\"></a></p>\n<h2 id=\"JavaScript运算\"><a href=\"#JavaScript运算\" class=\"headerlink\" title=\"JavaScript运算\"></a>JavaScript运算</h2><p>在JavaScript里面，数字使用<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"external\">IEEE 754</a>中规定的<a href=\"https://zh.wikipedia.org/wiki/雙精度浮點數\" target=\"_blank\" rel=\"external\">双精度浮点类型</a>。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用<code>Number.MIN_SAFE_INTEGER</code>,<code>Number.MAX_SAFE_INTEGER</code>来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9007199254740992</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"number\">5</span>); <span class=\"comment\">// 9007199254740996</span></span><br></pre></td></tr></table></figure></p>\n<p>正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。</p>\n<h2 id=\"JavaScript位运算\"><a href=\"#JavaScript位运算\" class=\"headerlink\" title=\"JavaScript位运算\"></a>JavaScript位运算</h2><p>JavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxSum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&amp;pow) <span class=\"comment\">// -2147483648</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&gt;&gt;<span class=\"number\">1</span>) <span class=\"comment\">// -1073741824</span></span><br></pre></td></tr></table></figure></p>\n<p>自己与自己正确应该是还是自己，但是他显示<code>-2147483648</code>, <code>pow&gt;&gt;1</code> 正确结果应该是跟<code>pow/2</code>的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。</p>\n","excerpt":"<p>JavaScript是弱类型语言，所以JavaScript中所有的数字，无论是整数还是小数，起类型均为Number。JavaScript所能表示的数值范围为[5e-324,1.7976931348623157e+308]，这两个边界值可以分别用<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code> 获得。对于超出JavaScript数值范围的，将显示 Infinity 和 -Infinity。<br>","more":"</p>\n<h2 id=\"JavaScript运算\"><a href=\"#JavaScript运算\" class=\"headerlink\" title=\"JavaScript运算\"></a>JavaScript运算</h2><p>在JavaScript里面，数字使用<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\">IEEE 754</a>中规定的<a href=\"https://zh.wikipedia.org/wiki/雙精度浮點數\">双精度浮点类型</a>。在这个规定中，JavaScript能表示并精确算术运算的整数范围为[-(2^53 - 1),2^53 - 1]，也就是 [-9007199254740991,9007199254740991]，这两个边界值可分别使用<code>Number.MIN_SAFE_INTEGER</code>,<code>Number.MAX_SAFE_INTEGER</code>来获得。 超出这个范围的算术运算将会JavaScript将不保证运算结果的精度。譬如以下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9007199254740992</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num + <span class=\"number\">5</span>); <span class=\"comment\">// 9007199254740996</span></span><br></pre></td></tr></table></figure></p>\n<p>正确的应该是显示 9007199254740997，但是已经超出JavaScript的运算精度范围，所以得到了错误结果。</p>\n<h2 id=\"JavaScript位运算\"><a href=\"#JavaScript位运算\" class=\"headerlink\" title=\"JavaScript位运算\"></a>JavaScript位运算</h2><p>JavaScript中对于位运算，JavaScript仅支持32位整数，又有一位要表示正负号，所以其范围：[-(2^31 - 1)，(2^31 - 1)]，超出也JavaScript也不将保证精度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxSum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&amp;pow) <span class=\"comment\">// -2147483648</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pow&gt;&gt;<span class=\"number\">1</span>) <span class=\"comment\">// -1073741824</span></span><br></pre></td></tr></table></figure></p>\n<p>自己与自己正确应该是还是自己，但是他显示<code>-2147483648</code>, <code>pow&gt;&gt;1</code> 正确结果应该是跟<code>pow/2</code>的值一样。因为超出了位运算的范围，以上运算都得出了错误结果。</p>"},{"title":"webpack-4-x","date":"2019-04-30T06:17:27.000Z","_content":"\n占坑","source":"_posts/webpack-4-x.md","raw":"title: webpack-4-x\ndate: 2019-04-30 14:17:27\ntags:\n- webpack\n- webpack4.x\ncategories:\n- 前端构建工具\n---\n\n占坑","slug":"webpack-4-x","published":1,"updated":"2019-04-30T06:18:57.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7695000sdkhsycmnqpzv","content":"<p>占坑</p>\n","excerpt":"","more":"<p>占坑</p>\n"},{"title":"send-beacon","date":"2018-06-14T08:06:45.000Z","_content":"\n\n````javascript\nfunction imgPing(url, callback) {\n    var key = '__SOME_RANDOM_KEY__' + (+new Date());\n    var img = new Image();\n    window[key] = img;\n    img.onload = img.onerror = img.onabort = function () {\n        img.onload = img.onerror = img.onabort = null;\n        window[key] = null;\n        img = null;\n        if (callback) {\n            callback();\n        }\n    };\n    img.src = concatUrl;\n    return true;\n}\n\n````","source":"_posts/send-beacon.md","raw":"title: send-beacon\ndate: 2018-06-14 16:06:45\ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n\n````javascript\nfunction imgPing(url, callback) {\n    var key = '__SOME_RANDOM_KEY__' + (+new Date());\n    var img = new Image();\n    window[key] = img;\n    img.onload = img.onerror = img.onabort = function () {\n        img.onload = img.onerror = img.onabort = null;\n        window[key] = null;\n        img = null;\n        if (callback) {\n            callback();\n        }\n    };\n    img.src = concatUrl;\n    return true;\n}\n\n````","slug":"send-beacon","published":1,"updated":"2019-04-30T06:04:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7697000wdkhsjl31rbx8","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgPing</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'__SOME_RANDOM_KEY__'</span> + (+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[key] = img;</span><br><span class=\"line\">    img.onload = img.onerror = img.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        img.onload = img.onerror = img.onabort = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>[key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        img = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = concatUrl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgPing</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'__SOME_RANDOM_KEY__'</span> + (+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>[key] = img;</span><br><span class=\"line\">    img.onload = img.onerror = img.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        img.onload = img.onerror = img.onabort = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>[key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        img = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    img.src = concatUrl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"react-communication","date":"2019-08-15T02:06:44.000Z","_content":"","source":"_posts/react-communication.md","raw":"title: react-communication\ndate: 2019-08-15 10:06:44\ntags:\n---\n","slug":"react-communication","published":1,"updated":"2019-08-15T02:06:44.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl7698000zdkhsnaahdn7k","content":"","excerpt":"","more":""},{"title":"哪些会导致重绘和回流","date":"2018-05-15T05:53:51.000Z","_content":"\n\n{% blockquote paulirish/what-forces-layout, https://gist.github.com/paulirish/5d52fb081b3570c81e3a %}\n翻译自 《What forces layout / reflow》\n{% endblockquote %}\n\n当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。\n<!--more-->\n## Element\n\n### 盒子度量\n* `elem.offsetLeft`, `elem.offsetTop`, `elem.offsetWidth`, `elem.offsetHeight`, `elem.offsetParent`\n* `elem.clientLeft`, `elem.clientTop`, `elem.clientWidth`, `elem.clientHeight`\n* `elem.getClientRects()`, `elem.getBoundingClientRect()`\n\n### Scroll之类的\n* `elem.scrollBy()`, `elem.scrollTo()`\n* `elem.scrollIntoView()`, `elem.scrollIntoViewIfNeeded()`\n* `elem.scrollWidth`, `elem.scrollHeight`\n* `elem.scrollLeft`, `elem.scrollTop` 设置也会影响他们\n\n### Focus\n* `elem.focus()` 会触发两次重绘 [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=2923\n\n### 还有...\n* `elem.computedRole`, `elem.computedName`\n* `elem.innerText` [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=3440\n\n### getComputedStyle\n\n`window.getComputedStyle()` 会触发典型的样式重新计算\n`window.getComputedStyle()` 会触发重绘:\n\n1. 任何`Shadow DOM`\n2. 使用了 media queries （viewport-related中的其中一些）,以下属性\n    * `min-width`, `min-height`, `max-width`, `max-height`, `width`, `height`\n    * `aspect-ratio`, `min-aspect-ratio`, `max-aspect-ratio`\n    * `device-pixel-ratio`, `resolution`, `orientation` , `min-device-pixel-ratio`, `max-device-pixel-ratio`\n2. 获取以下任一属性\n    * `height`, `width`\n    * `top`, `right`, `bottom`, `left`\n    * `margin` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`margin`是固定的.\n    * `padding` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`padding`是固定的.\n    * `transform`, `transform-origin`, `perspective-origin`\n    * `translate`, `rotate`, `scale`\n    * `grid`, `grid-template`, `grid-template-columns`, `grid-template-rows`\n    * `perspective-origin`\n    * 以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): `motion-path`, `motion-offset`, `motion-rotation`, `x`, `y`, `rx`, `ry`\n\n### window\n1. `window.scrollX`, `window.scrollY`\n2. `window.innerHeight`, `window.innerWidth`\n3. `window.getMatchedCSSRules()` 仅重新计算样式\n\n### Forms\n1. `inputElem.focus()`\n2. `inputElem.select()`, `textareaElem.select()`\n\n### 鼠标事件\n1. `mouseEvt.layerX`, `mouseEvt.layerY`, `mouseEvt.offsetX`, `mouseEvt.offsetY`\n\n### document\n1. `doc.scrollingElement` 仅重新计算样式\n\n### Range\n1. `range.getClientRects()`, `range.getBoundingClientRect()`\n\n### SVG\n1. 很多，没有详尽的列表，但是(Tony Gentilcore's 2011 Layout Triggering List )[http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\n\n### contenteditable\n1. 很多很多。\n\n## 附录\n* 回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）\n* 如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。\n* 改怎么避免回流跟重绘呢？\n    1. 尽量避免在 for 循环中重绘和改变DOM\n    2. 使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。\n    3. 批处理读/写DOM，可以使用(FastDom)[https://github.com/wilsonpage/fastdom]或者虚拟DOM\n\n### 浏览器兼容性\n    因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n\n## CSS Triggers\n(CSS Triggers)[https://csstriggers.com/] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。\n\n## 更多参考资料\n* [Avoiding layout thrashing — Web Fundamentals](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en)\n* [Fixing Layout thrashing in the real world | Matt Andrews](https://mattandre.ws/2014/05/really-fixing-layout-thrashing/)\n* [Timeline demo: Diagnosing forced synchronous layouts - Google Chrome](https://developer.chrome.com/devtools/docs/demos/too-much-layout)\n* [Preventing &apos;layout thrashing&apos; | Wilson Page](http://wilsonpage.co.uk/preventing-layout-thrashing/)\n* [wilsonpage/fastdom](https://github.com/wilsonpage/fastdom)\n* [Rendering: repaint, reflow/relayout, restyle / Stoyan](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n* [We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog](http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/)\n* [Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers](https://developers.google.com/speed/articles/reflow?hl=en)\n* [Optimizing Web Content in UIWebViews and Websites on iOS](https://developer.apple.com/videos/wwdc/2012/?id=601)\n* [Accelerated Rendering in Chrome](http://www.html5rocks.com/en/tutorials/speed/layers/)\n* [web performance for the curious](https://www.igvita.com/slides/2012/web-performance-for-the-curious/)\n* [Jank Free](http://jankfree.org/)\n\n\n","source":"_posts/what-forces-layout-reflow.md","raw":"title: 哪些会导致重绘和回流\ndate: 2018-05-15 13:53:51\ntags:\n- 技术细节\n- reflow\n- 前端性能\ncategories:\n- Js\n---\n\n\n{% blockquote paulirish/what-forces-layout, https://gist.github.com/paulirish/5d52fb081b3570c81e3a %}\n翻译自 《What forces layout / reflow》\n{% endblockquote %}\n\n当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。\n<!--more-->\n## Element\n\n### 盒子度量\n* `elem.offsetLeft`, `elem.offsetTop`, `elem.offsetWidth`, `elem.offsetHeight`, `elem.offsetParent`\n* `elem.clientLeft`, `elem.clientTop`, `elem.clientWidth`, `elem.clientHeight`\n* `elem.getClientRects()`, `elem.getBoundingClientRect()`\n\n### Scroll之类的\n* `elem.scrollBy()`, `elem.scrollTo()`\n* `elem.scrollIntoView()`, `elem.scrollIntoViewIfNeeded()`\n* `elem.scrollWidth`, `elem.scrollHeight`\n* `elem.scrollLeft`, `elem.scrollTop` 设置也会影响他们\n\n### Focus\n* `elem.focus()` 会触发两次重绘 [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=2923\n\n### 还有...\n* `elem.computedRole`, `elem.computedName`\n* `elem.innerText` [source](https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&sq=package:chromium&dr=C)&l=3440\n\n### getComputedStyle\n\n`window.getComputedStyle()` 会触发典型的样式重新计算\n`window.getComputedStyle()` 会触发重绘:\n\n1. 任何`Shadow DOM`\n2. 使用了 media queries （viewport-related中的其中一些）,以下属性\n    * `min-width`, `min-height`, `max-width`, `max-height`, `width`, `height`\n    * `aspect-ratio`, `min-aspect-ratio`, `max-aspect-ratio`\n    * `device-pixel-ratio`, `resolution`, `orientation` , `min-device-pixel-ratio`, `max-device-pixel-ratio`\n2. 获取以下任一属性\n    * `height`, `width`\n    * `top`, `right`, `bottom`, `left`\n    * `margin` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`margin`是固定的.\n    * `padding` [`-top`, `-right`, `-bottom`, `-left`, 或者简写] 仅当`padding`是固定的.\n    * `transform`, `transform-origin`, `perspective-origin`\n    * `translate`, `rotate`, `scale`\n    * `grid`, `grid-template`, `grid-template-columns`, `grid-template-rows`\n    * `perspective-origin`\n    * 以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): `motion-path`, `motion-offset`, `motion-rotation`, `x`, `y`, `rx`, `ry`\n\n### window\n1. `window.scrollX`, `window.scrollY`\n2. `window.innerHeight`, `window.innerWidth`\n3. `window.getMatchedCSSRules()` 仅重新计算样式\n\n### Forms\n1. `inputElem.focus()`\n2. `inputElem.select()`, `textareaElem.select()`\n\n### 鼠标事件\n1. `mouseEvt.layerX`, `mouseEvt.layerY`, `mouseEvt.offsetX`, `mouseEvt.offsetY`\n\n### document\n1. `doc.scrollingElement` 仅重新计算样式\n\n### Range\n1. `range.getClientRects()`, `range.getBoundingClientRect()`\n\n### SVG\n1. 很多，没有详尽的列表，但是(Tony Gentilcore's 2011 Layout Triggering List )[http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\n\n### contenteditable\n1. 很多很多。\n\n## 附录\n* 回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）\n* 如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。\n* 改怎么避免回流跟重绘呢？\n    1. 尽量避免在 for 循环中重绘和改变DOM\n    2. 使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。\n    3. 批处理读/写DOM，可以使用(FastDom)[https://github.com/wilsonpage/fastdom]或者虚拟DOM\n\n### 浏览器兼容性\n    因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n\n## CSS Triggers\n(CSS Triggers)[https://csstriggers.com/] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。\n\n## 更多参考资料\n* [Avoiding layout thrashing — Web Fundamentals](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en)\n* [Fixing Layout thrashing in the real world | Matt Andrews](https://mattandre.ws/2014/05/really-fixing-layout-thrashing/)\n* [Timeline demo: Diagnosing forced synchronous layouts - Google Chrome](https://developer.chrome.com/devtools/docs/demos/too-much-layout)\n* [Preventing &apos;layout thrashing&apos; | Wilson Page](http://wilsonpage.co.uk/preventing-layout-thrashing/)\n* [wilsonpage/fastdom](https://github.com/wilsonpage/fastdom)\n* [Rendering: repaint, reflow/relayout, restyle / Stoyan](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n* [We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog](http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/)\n* [Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers](https://developers.google.com/speed/articles/reflow?hl=en)\n* [Optimizing Web Content in UIWebViews and Websites on iOS](https://developer.apple.com/videos/wwdc/2012/?id=601)\n* [Accelerated Rendering in Chrome](http://www.html5rocks.com/en/tutorials/speed/layers/)\n* [web performance for the curious](https://www.igvita.com/slides/2012/web-performance-for-the-curious/)\n* [Jank Free](http://jankfree.org/)\n\n\n","slug":"what-forces-layout-reflow","published":1,"updated":"2019-04-30T06:04:29.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl769a0012dkhsznnbiku4","content":"<blockquote><p>翻译自 《What forces layout / reflow》</p>\n<footer><strong>paulirish/what-forces-layout,</strong><cite><a href=\"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\" target=\"_blank\" rel=\"external\">gist.github.com/paulirish/5d52fb081b3570c81e3a</a></cite></footer></blockquote>\n<p>当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。<br><a id=\"more\"></a></p>\n<h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><h3 id=\"盒子度量\"><a href=\"#盒子度量\" class=\"headerlink\" title=\"盒子度量\"></a>盒子度量</h3><ul>\n<li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>, <code>elem.offsetParent</code></li>\n<li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>, <code>elem.clientHeight</code></li>\n<li><code>elem.getClientRects()</code>, <code>elem.getBoundingClientRect()</code></li>\n</ul>\n<h3 id=\"Scroll之类的\"><a href=\"#Scroll之类的\" class=\"headerlink\" title=\"Scroll之类的\"></a>Scroll之类的</h3><ul>\n<li><code>elem.scrollBy()</code>, <code>elem.scrollTo()</code></li>\n<li><code>elem.scrollIntoView()</code>, <code>elem.scrollIntoViewIfNeeded()</code></li>\n<li><code>elem.scrollWidth</code>, <code>elem.scrollHeight</code></li>\n<li><code>elem.scrollLeft</code>, <code>elem.scrollTop</code> 设置也会影响他们</li>\n</ul>\n<h3 id=\"Focus\"><a href=\"#Focus\" class=\"headerlink\" title=\"Focus\"></a>Focus</h3><ul>\n<li><code>elem.focus()</code> 会触发两次重绘 <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\" target=\"_blank\" rel=\"external\">source</a>&amp;l=2923</li>\n</ul>\n<h3 id=\"还有…\"><a href=\"#还有…\" class=\"headerlink\" title=\"还有…\"></a>还有…</h3><ul>\n<li><code>elem.computedRole</code>, <code>elem.computedName</code></li>\n<li><code>elem.innerText</code> <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\" target=\"_blank\" rel=\"external\">source</a>&amp;l=3440</li>\n</ul>\n<h3 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle\"></a>getComputedStyle</h3><p><code>window.getComputedStyle()</code> 会触发典型的样式重新计算<br><code>window.getComputedStyle()</code> 会触发重绘:</p>\n<ol>\n<li>任何<code>Shadow DOM</code></li>\n<li>使用了 media queries （viewport-related中的其中一些）,以下属性<ul>\n<li><code>min-width</code>, <code>min-height</code>, <code>max-width</code>, <code>max-height</code>, <code>width</code>, <code>height</code></li>\n<li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code></li>\n<li><code>device-pixel-ratio</code>, <code>resolution</code>, <code>orientation</code> , <code>min-device-pixel-ratio</code>, <code>max-device-pixel-ratio</code></li>\n</ul>\n</li>\n<li>获取以下任一属性<ul>\n<li><code>height</code>, <code>width</code></li>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></li>\n<li><code>margin</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>margin</code>是固定的.</li>\n<li><code>padding</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>padding</code>是固定的.</li>\n<li><code>transform</code>, <code>transform-origin</code>, <code>perspective-origin</code></li>\n<li><code>translate</code>, <code>rotate</code>, <code>scale</code></li>\n<li><code>grid</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code></li>\n<li><code>perspective-origin</code></li>\n<li>以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): <code>motion-path</code>, <code>motion-offset</code>, <code>motion-rotation</code>, <code>x</code>, <code>y</code>, <code>rx</code>, <code>ry</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><code>window.scrollX</code>, <code>window.scrollY</code></li>\n<li><code>window.innerHeight</code>, <code>window.innerWidth</code></li>\n<li><code>window.getMatchedCSSRules()</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><ol>\n<li><code>inputElem.focus()</code></li>\n<li><code>inputElem.select()</code>, <code>textareaElem.select()</code></li>\n</ol>\n<h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><ol>\n<li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code></li>\n</ol>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><ol>\n<li><code>doc.scrollingElement</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><ol>\n<li><code>range.getClientRects()</code>, <code>range.getBoundingClientRect()</code></li>\n</ol>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><ol>\n<li>很多，没有详尽的列表，但是(Tony Gentilcore’s 2011 Layout Triggering List )[<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\" target=\"_blank\" rel=\"external\">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。</a></li>\n</ol>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><ol>\n<li>很多很多。</li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）</li>\n<li>如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。</li>\n<li>改怎么避免回流跟重绘呢？<ol>\n<li>尽量避免在 for 循环中重绘和改变DOM</li>\n<li>使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。</li>\n<li>批处理读/写DOM，可以使用(FastDom)[<a href=\"https://github.com/wilsonpage/fastdom]或者虚拟DOM\" target=\"_blank\" rel=\"external\">https://github.com/wilsonpage/fastdom]或者虚拟DOM</a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><pre><code>因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n</code></pre><h2 id=\"CSS-Triggers\"><a href=\"#CSS-Triggers\" class=\"headerlink\" title=\"CSS Triggers\"></a>CSS Triggers</h2><p>(CSS Triggers)[<a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"external\">https://csstriggers.com/</a>] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。</p>\n<h2 id=\"更多参考资料\"><a href=\"#更多参考资料\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en\" target=\"_blank\" rel=\"external\">Avoiding layout thrashing — Web Fundamentals</a></li>\n<li><a href=\"https://mattandre.ws/2014/05/really-fixing-layout-thrashing/\" target=\"_blank\" rel=\"external\">Fixing Layout thrashing in the real world | Matt Andrews</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/too-much-layout\" target=\"_blank\" rel=\"external\">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a></li>\n<li><a href=\"http://wilsonpage.co.uk/preventing-layout-thrashing/\" target=\"_blank\" rel=\"external\">Preventing &apos;layout thrashing&apos; | Wilson Page</a></li>\n<li><a href=\"https://github.com/wilsonpage/fastdom\" target=\"_blank\" rel=\"external\">wilsonpage/fastdom</a></li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\" target=\"_blank\" rel=\"external\">Rendering: repaint, reflow/relayout, restyle / Stoyan</a></li>\n<li><a href=\"http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/\" target=\"_blank\" rel=\"external\">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a></li>\n<li><a href=\"https://developers.google.com/speed/articles/reflow?hl=en\" target=\"_blank\" rel=\"external\">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=601\" target=\"_blank\" rel=\"external\">Optimizing Web Content in UIWebViews and Websites on iOS</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/speed/layers/\" target=\"_blank\" rel=\"external\">Accelerated Rendering in Chrome</a></li>\n<li><a href=\"https://www.igvita.com/slides/2012/web-performance-for-the-curious/\" target=\"_blank\" rel=\"external\">web performance for the curious</a></li>\n<li><a href=\"http://jankfree.org/\" target=\"_blank\" rel=\"external\">Jank Free</a></li>\n</ul>\n","excerpt":"<blockquote><p>翻译自 《What forces layout / reflow》</p>\n<footer><strong>paulirish/what-forces-layout,</strong><cite><a href=\"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\">gist.github.com/paulirish/5d52fb081b3570c81e3a</a></cite></footer></blockquote>\n<p>当调用以下所有属性/方法时，会触发浏览器重绘。重绘就是让让浏览器同步计算样式和布局，通常是浏览器性能瓶颈。<br>","more":"</p>\n<h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><h3 id=\"盒子度量\"><a href=\"#盒子度量\" class=\"headerlink\" title=\"盒子度量\"></a>盒子度量</h3><ul>\n<li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>, <code>elem.offsetParent</code></li>\n<li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>, <code>elem.clientHeight</code></li>\n<li><code>elem.getClientRects()</code>, <code>elem.getBoundingClientRect()</code></li>\n</ul>\n<h3 id=\"Scroll之类的\"><a href=\"#Scroll之类的\" class=\"headerlink\" title=\"Scroll之类的\"></a>Scroll之类的</h3><ul>\n<li><code>elem.scrollBy()</code>, <code>elem.scrollTo()</code></li>\n<li><code>elem.scrollIntoView()</code>, <code>elem.scrollIntoViewIfNeeded()</code></li>\n<li><code>elem.scrollWidth</code>, <code>elem.scrollHeight</code></li>\n<li><code>elem.scrollLeft</code>, <code>elem.scrollTop</code> 设置也会影响他们</li>\n</ul>\n<h3 id=\"Focus\"><a href=\"#Focus\" class=\"headerlink\" title=\"Focus\"></a>Focus</h3><ul>\n<li><code>elem.focus()</code> 会触发两次重绘 <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\">source</a>&amp;l=2923</li>\n</ul>\n<h3 id=\"还有…\"><a href=\"#还有…\" class=\"headerlink\" title=\"还有…\"></a>还有…</h3><ul>\n<li><code>elem.computedRole</code>, <code>elem.computedName</code></li>\n<li><code>elem.innerText</code> <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Element.cpp?q=updateLayoutIgnorePendingStylesheets+-f:out+-f:test&amp;sq=package:chromium&amp;dr=C\">source</a>&amp;l=3440</li>\n</ul>\n<h3 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle\"></a>getComputedStyle</h3><p><code>window.getComputedStyle()</code> 会触发典型的样式重新计算<br><code>window.getComputedStyle()</code> 会触发重绘:</p>\n<ol>\n<li>任何<code>Shadow DOM</code></li>\n<li>使用了 media queries （viewport-related中的其中一些）,以下属性<ul>\n<li><code>min-width</code>, <code>min-height</code>, <code>max-width</code>, <code>max-height</code>, <code>width</code>, <code>height</code></li>\n<li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code></li>\n<li><code>device-pixel-ratio</code>, <code>resolution</code>, <code>orientation</code> , <code>min-device-pixel-ratio</code>, <code>max-device-pixel-ratio</code></li>\n</ul>\n</li>\n<li>获取以下任一属性<ul>\n<li><code>height</code>, <code>width</code></li>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></li>\n<li><code>margin</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>margin</code>是固定的.</li>\n<li><code>padding</code> [<code>-top</code>, <code>-right</code>, <code>-bottom</code>, <code>-left</code>, 或者简写] 仅当<code>padding</code>是固定的.</li>\n<li><code>transform</code>, <code>transform-origin</code>, <code>perspective-origin</code></li>\n<li><code>translate</code>, <code>rotate</code>, <code>scale</code></li>\n<li><code>grid</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code></li>\n<li><code>perspective-origin</code></li>\n<li>以下这些项目出现在列表中，但现在看来已经不存在了。 (截至2018年2月): <code>motion-path</code>, <code>motion-offset</code>, <code>motion-rotation</code>, <code>x</code>, <code>y</code>, <code>rx</code>, <code>ry</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><code>window.scrollX</code>, <code>window.scrollY</code></li>\n<li><code>window.innerHeight</code>, <code>window.innerWidth</code></li>\n<li><code>window.getMatchedCSSRules()</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><ol>\n<li><code>inputElem.focus()</code></li>\n<li><code>inputElem.select()</code>, <code>textareaElem.select()</code></li>\n</ol>\n<h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><ol>\n<li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code></li>\n</ol>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><ol>\n<li><code>doc.scrollingElement</code> 仅重新计算样式</li>\n</ol>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><ol>\n<li><code>range.getClientRects()</code>, <code>range.getBoundingClientRect()</code></li>\n</ol>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><ol>\n<li>很多，没有详尽的列表，但是(Tony Gentilcore’s 2011 Layout Triggering List )[<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。\">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html]列出了一些。</a></li>\n</ol>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><ol>\n<li>很多很多。</li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>回流只在Dom结构有改变会有一定性能消耗，在设置无效的样式和布局的时候会触发。通常，部分原因是因为DOM节点变化（改变类名，增加/删除节点，甚至是增加伪元素，譬如:focus）</li>\n<li>如果布局发生变化，样式肯定会重新计算。所以重绘会触发布局以及样式的重新计算。重绘的消耗非常依赖于内容/位置的变化，但是这两个的消耗又差不多。</li>\n<li>改怎么避免回流跟重绘呢？<ol>\n<li>尽量避免在 for 循环中重绘和改变DOM</li>\n<li>使用 DevTools Timeline，分析页面加载或用户交互后的每个时间。你可能会发现很多意想不到的事情。</li>\n<li>批处理读/写DOM，可以使用(FastDom)[<a href=\"https://github.com/wilsonpage/fastdom]或者虚拟DOM\">https://github.com/wilsonpage/fastdom]或者虚拟DOM</a></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><pre><code>因为每个浏览器渲染页面原理都不一样，所以使用 Chrome 的 DevTools看到的数据不一定在每个浏览器都适用。\n</code></pre><h2 id=\"CSS-Triggers\"><a href=\"#CSS-Triggers\" class=\"headerlink\" title=\"CSS Triggers\"></a>CSS Triggers</h2><p>(CSS Triggers)[<a href=\"https://csstriggers.com/\">https://csstriggers.com/</a>] 列出了在各个引擎下，Js设置/改变CSS的值时候是否触发回滚的情况，使用三种色块来表示是否会触发Layout/Paint/Composite。</p>\n<h2 id=\"更多参考资料\"><a href=\"#更多参考资料\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=en\">Avoiding layout thrashing — Web Fundamentals</a></li>\n<li><a href=\"https://mattandre.ws/2014/05/really-fixing-layout-thrashing/\">Fixing Layout thrashing in the real world | Matt Andrews</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/too-much-layout\">Timeline demo: Diagnosing forced synchronous layouts - Google Chrome</a></li>\n<li><a href=\"http://wilsonpage.co.uk/preventing-layout-thrashing/\">Preventing &apos;layout thrashing&apos; | Wilson Page</a></li>\n<li><a href=\"https://github.com/wilsonpage/fastdom\">wilsonpage/fastdom</a></li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\">Rendering: repaint, reflow/relayout, restyle / Stoyan</a></li>\n<li><a href=\"http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/\">We spent a week making Trello boards load extremely fast. Here’s how we did it. - Fog Creek Blog</a></li>\n<li><a href=\"https://developers.google.com/speed/articles/reflow?hl=en\">Minimizing browser reflow  |  PageSpeed Insights  |  Google Developers</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=601\">Optimizing Web Content in UIWebViews and Websites on iOS</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/speed/layers/\">Accelerated Rendering in Chrome</a></li>\n<li><a href=\"https://www.igvita.com/slides/2012/web-performance-for-the-curious/\">web performance for the curious</a></li>\n<li><a href=\"http://jankfree.org/\">Jank Free</a></li>\n</ul>"},{"title":"webpack-1.x 总结","date":"2016-02-15T09:25:04.000Z","_content":"\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n<!--more-->\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n```\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n```\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\nwebpack 可以将代码切割成不同的 chunk，实现按需加载。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，通过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array,\n    query: String | Object\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## 常用Loaders\n### 加载 CSS\n加载css需要 `css-loader`和`style-loader`，分别做以下两件事：\n1. css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们\n2. style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中\n````js\n{\n  // loader配置\n    test: /\\.css$/,\n    loader: 'style!css' // 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左\n  }\n````\n### 图片处理\n图片处理需要 `url-loader` 和 `file-loader`\n````js\n{\n  // loader配置\n  test: /\\.(png|jpg|gif|jpeg)$/,\n  loader: 'url?limit=25000'\n}\n````\n传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n\n#### eslint\n````js\n  module : {\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ],\n  }\n````\n\n## 常用Plugin\n###UglifyJsPlugin webpack自带的插件\n一般配置如下：\n````js\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n          compress: {\n              warnings: false\n          }\n      })\n  ]\n````\n\n### extractTextWebpackPlugin\n在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。\n````js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nplugins: [\n  new ExtractTextPlugin(\"app.css\")\n]\n````\n\n### htmlWebpackPlugin\n生成HTML\n\n````js\nconst path = require('path');\n\nconst HTMLWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    index: './pages/index.js',\n    page1: './pages/page1.js',\n    page2: './pages/page2.js'\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      filename: 'index.html',\n      template: 'templates/index.html',\n      inject: true,\n      chunks: ['index']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page1.html',\n      template: 'templates/page1.html',\n      inject: true,\n      chunks: ['page1']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page2.html',\n      template: 'templates/page2.html',\n      inject: true,\n      chunks: ['page2']\n    })\n  ]\n};\n````\n\n\n#### 提取公共Js插件\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n#### ProvidePlugin插件\n将模块暴露到全局\n\n````js\nnew webpack.ProvidePlugin({\n    \"R\": \"report\",\n}),\n````\n\n#### 删除目录插件\nclean-webpack-plugin\n````js\n\n  var CleanPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    new CleanPlugin(['dist']),\n  ]\n````\n#### 拷贝文件插件\n\ncopy-webpack-plugin\n````js\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nplugins: [\n  new CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n  }])\n]\n````\n\n\n#### 优化第三方包插件\n````js\nplugins: [\n  new webpack.DefinePlugin({\n      //去掉react中的警告，react会自己判断\n      'process.env': {\n          NODE_ENV: '\"production\"'\n      }\n  })\n]\n````\n\n#### 自动打开浏览器插件\nopen-browser-webpack-plugin\n````js\n  // 自动打开浏览器插件\n  var OpenBrowserPlugin = require('open-browser-webpack-plugin');\n  plugins: [\n      new OpenBrowserPlugin({url: 'http://localhost:8080/', browser: 'chrome'})\n  ]\n````\n\nplugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，点击\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins %}\n\n\n### Resolve属性\nwebpack 在构建包的时候会按配置进行模块的查找\n````js\n resolve: {\n      //查找module的话从这里开始查找\n      root: '/pomy/github/flux-example/src', //绝对路径\n      //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n      //注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.\n      extensions: ['', '.js', '.json', '.scss',’jsx’],\n\n      //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n      alias: {\n          AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n          ActionType : 'js/actions/ActionType.js',\n          AppAction : 'js/actions/AppAction.js'\n      }\n  }\n````\n\n\n\n### Externals属性\n外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：`<script src=\"//code.jquery.com/jquery-1.12.0.min.js\"></script>`，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：\n\n其实就是不是通过require或者import引入的，而是直接写在html中的js地址。\n\n````js\n    // 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了\n    // 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react\n    externals: {\n        'react1': 'react',\n        'react-dom1': 'react-dom',\n        '$1': 'jQuery'\n    }\n````\n\n这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。\n\n### noParse属性\nmodule.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。\n````js\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n````","source":"_posts/webpack-1-x.md","raw":"title: webpack-1.x 总结\ndate: 2016-02-15 17:25:04\ntags:\n- webpack\n- webpack1.x\ncategories:\n- 前端构建工具\n---\n\n\n## webpack\n\nwebpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。\n<!--more-->\n### webpack是什么\n\n{% blockquote  官方解释 https://webpack.github.io/docs/what-is-webpack.html %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n\n{% img [what is webpack] http://om64pi295.bkt.clouddn.com/what-is-webpack.png %}\n\nWebpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。\n\n### 为什么要webpack\n网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 `<script>`标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。\n\n## Webpack配置\n**Webpack 的三个核心概念**\n\n1.**loader**：通过各种资源转换器，将它们转换成对应模块引入\n2.**chunk**：实现按需加载，避免Js文件过大导致阻塞加载。\n\n### 安装配置\n**第一步：Node.js**\n\nwebpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js\n\n**第二步：全局安装webpack-和webpack-dev-server**\n\n```bash\n// -g 参数表示全局安装\n$ npm i -g webpack webpack-dev-server\n```\n\n**第三步：新建前端项目以及安装webpack**\n\n```\n├── index.html      // 入口 HTML  \n├── main.js         // 入口 JS\n```\n\n````html\n<html>\n  <body>\n    <script type=\"text/javascript\" src=\"bundle.js\"></script>\n  </body>\n</html>\n````\n\n````js\ndocument.write('<h1>Hello World</h1>');\n````\n\n**第四步：在项目中安装webpack**\n````bash\n// 初始化 package.json,  根据提示填写 package.json 的相关信息\n$ npm init\n\n// 下载 webpack 依赖 \n// --save-dev 表示将依赖添加到 package.json 中的 'devDependencies' 对象中\n$  npm install webpack --save-dev\n````\n\n**第五步 调用**\n**命令行调用**\n````bash\nwebpack main.js\n````\n\n````bash\nHash: 000934e5d93f498db0f5\nVersion: webpack 1.14.0\nTime: 49ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.57 kB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n   [1] ./main.js 41 bytes {0} [built]\n````\n\n执行后，可在浏览器打开 index.html\n\n**通过配置文件执行**\n\n````bash\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};\n\n````\n\n文件编译执行\n\n````bash\nwebpack\n````\n\n内存编译执行\n\n````bash\nwebpack-dev-server\n````\n\n一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 {% link webpack-demo https://github.com/ruanyf/webpack-demos webpack-demo %}写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。\n\n\n## Chunk\n### Chunk是什么？\nwebpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。\n### Chuck包含了哪些内容\n* 同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中\n* 异步情况下：所有被切割点分开的依赖被加载到一个 Chunk\n\n**require.ensure跟require都会被加载到一个 Chunk中**\n\n### Chunk 分类\n第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。\n\nwebpack将chunk类型分为三种**Entry chunk**，**Normal chunk**，**Initial chunk**。\n**Entry Chunk**\n包括两部分代码：webpack运行代码（如webpackJsonp, __webpack_require__ 等函数）和模块代码。\n\n**Normal Chunk**\n只包含模块代码\n\n**Initial  Chunk**\n本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。\n\nwebpack 可以将代码切割成不同的 chunk，实现按需加载。\n\n\n## loaders\n\n\n### 什么是loaders \n{% blockquote %}\nLoaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.\n{% endblockquote %}\n\n意思就是在webpack中，通过loader可以显示静态资源的转换。\n\n### loader 功能\n\n1. loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步\n2. loader 可以接收配置参数\n\n3. loader 可以通过正则表达式或者文件后缀指定特定类型的源文件\n\n4. 插件可以提供给 loader 更多功能\n\n5. loader 除了做文件转换以外，还可以创建额外的文件\n\n### loader 配置\n在webpack.config.js 的module.loaders数组中新增一个loader配置。\n\n一个 loader 的配置：\n```` js\n{\n    // 通过扩展名称和正则表单时来匹配资源文件\n    test: String,\n    loader: String | Array,\n    query: String | Object\n}\n\n````\n### 使用 loader\n\n**第一步：安装**\nloader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装\n````bash\n$ npm install xx-loader --save-dev\n\n// eg css loader\n$ npm install css-loader style-loader --save-dev\n````\n**第二步：修改配置**\n````js\n{\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: './dist/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel',\n            query: {\n                presets: ['es2015', 'stage-0', 'react']\n            }\n        }, {\n            test: /\\.css$/, \n            loader: \"style-loader!css-loader\" \n        }]\n    }\n}\n````\n\n**第三步：使用**\n\n前面我们已经使用过 jsx loader 了， loader 的使用方式有多种\n\n1. 在配置文件中配置\n\n2. 显示的通过 require 调用\n\n3. 命令行调用\n\n__显示的调用 require 会增加模块的耦合度，应尽量避免这种方式__\n\n\nsrc/style.css\n\n````css\nbody {\n    background: red;\n    color: white;\n}\n````\n修改 webpack 配置 entry 添加\n````js\nentry: {\n    index: ['./index.js', './style.css']\n}\n````\n最终的编译结果会将  css 被转化为了 javascript。\n\n另一种方法是直接 require，修改./index.js:\n````js\nvar css = require(\"css!./style.css\");\n````\n结果一样\n\n## 常用Loaders\n### 加载 CSS\n加载css需要 `css-loader`和`style-loader`，分别做以下两件事：\n1. css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们\n2. style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中\n````js\n{\n  // loader配置\n    test: /\\.css$/,\n    loader: 'style!css' // 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左\n  }\n````\n### 图片处理\n图片处理需要 `url-loader` 和 `file-loader`\n````js\n{\n  // loader配置\n  test: /\\.(png|jpg|gif|jpeg)$/,\n  loader: 'url?limit=25000'\n}\n````\n传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n\n#### eslint\n````js\n  module : {\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ],\n  }\n````\n\n## 常用Plugin\n###UglifyJsPlugin webpack自带的插件\n一般配置如下：\n````js\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n          compress: {\n              warnings: false\n          }\n      })\n  ]\n````\n\n### extractTextWebpackPlugin\n在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。\n````js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nplugins: [\n  new ExtractTextPlugin(\"app.css\")\n]\n````\n\n### htmlWebpackPlugin\n生成HTML\n\n````js\nconst path = require('path');\n\nconst HTMLWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    index: './pages/index.js',\n    page1: './pages/page1.js',\n    page2: './pages/page2.js'\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      filename: 'index.html',\n      template: 'templates/index.html',\n      inject: true,\n      chunks: ['index']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page1.html',\n      template: 'templates/page1.html',\n      inject: true,\n      chunks: ['page1']\n    }),\n    new HTMLWebpackPlugin({\n      filename: 'page2.html',\n      template: 'templates/page2.html',\n      inject: true,\n      chunks: ['page2']\n    })\n  ]\n};\n````\n\n\n#### 提取公共Js插件\n通过 `CommonsChunkPlugin` 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到`common chunk` 中，原来的 `entry chunk` 也降变为 `initial chunk`。\n\n`entry vendor`配合`CommonsChunkPlugin`使用，可以分离第三方库和app代码。\n\n````js\nentry: {\n   app: './app.js',\n   vendor: ['jquery', 'lodash']\n},\nplugins: {\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')   \n}\n````\n\n这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 `vendor.bundle.js`。\n\n**CommonsChunkPlugin配置项：**\n\n- names: chunk的名称，字符串或数组。\n- filename: chunk文件名称，默认为output.filename或者output.chunkFilename\n- minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中\nchunks: 需要提前common的源文件，默认为全部入口文件。\n- children: 如果设置为 `true`，所有  公共chunk 的子模块都会被选择\n- async:  如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。 它会与 `options.chunks` 并行被加载。可以通过提供想要的字符串，而不是 `true` 来对输出的文件进行更换名称。\n- minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。\n\n#### ProvidePlugin插件\n将模块暴露到全局\n\n````js\nnew webpack.ProvidePlugin({\n    \"R\": \"report\",\n}),\n````\n\n#### 删除目录插件\nclean-webpack-plugin\n````js\n\n  var CleanPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    new CleanPlugin(['dist']),\n  ]\n````\n#### 拷贝文件插件\n\ncopy-webpack-plugin\n````js\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nplugins: [\n  new CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n  }])\n]\n````\n\n\n#### 优化第三方包插件\n````js\nplugins: [\n  new webpack.DefinePlugin({\n      //去掉react中的警告，react会自己判断\n      'process.env': {\n          NODE_ENV: '\"production\"'\n      }\n  })\n]\n````\n\n#### 自动打开浏览器插件\nopen-browser-webpack-plugin\n````js\n  // 自动打开浏览器插件\n  var OpenBrowserPlugin = require('open-browser-webpack-plugin');\n  plugins: [\n      new OpenBrowserPlugin({url: 'http://localhost:8080/', browser: 'chrome'})\n  ]\n````\n\nplugin 为 webpack 提供了更多的自定义功能。\n就不一一列举了，点击\n {% link webpack-plugins https://github.com/webpack-contrib/awesome-webpack#webpack-plugins %}\n\n\n### Resolve属性\nwebpack 在构建包的时候会按配置进行模块的查找\n````js\n resolve: {\n      //查找module的话从这里开始查找\n      root: '/pomy/github/flux-example/src', //绝对路径\n      //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n      //注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.\n      extensions: ['', '.js', '.json', '.scss',’jsx’],\n\n      //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n      alias: {\n          AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n          ActionType : 'js/actions/ActionType.js',\n          AppAction : 'js/actions/AppAction.js'\n      }\n  }\n````\n\n\n\n### Externals属性\n外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：`<script src=\"//code.jquery.com/jquery-1.12.0.min.js\"></script>`，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：\n\n其实就是不是通过require或者import引入的，而是直接写在html中的js地址。\n\n````js\n    // 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了\n    // 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react\n    externals: {\n        'react1': 'react',\n        'react-dom1': 'react-dom',\n        '$1': 'jQuery'\n    }\n````\n\n这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。\n\n### noParse属性\nmodule.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。\n````js\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n````","slug":"webpack-1-x","published":1,"updated":"2019-04-30T06:18:01.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl769x002kdkhsgg2373zq","content":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。<br><a id=\"more\"></a></p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\" target=\"_blank\" rel=\"external\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\" target=\"_blank\" rel=\"external\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<p>webpack 可以将代码切割成不同的 chunk，实现按需加载。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，通过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    query: <span class=\"built_in\">String</span> | <span class=\"built_in\">Object</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"常用Loaders\"><a href=\"#常用Loaders\" class=\"headerlink\" title=\"常用Loaders\"></a>常用Loaders</h2><h3 id=\"加载-CSS\"><a href=\"#加载-CSS\" class=\"headerlink\" title=\"加载 CSS\"></a>加载 CSS</h3><p>加载css需要 <code>css-loader</code>和<code>style-loader</code>，分别做以下两件事：</p>\n<ol>\n<li>css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们</li>\n<li>style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h3><p>图片处理需要 <code>url-loader</code> 和 <code>file-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'url?limit=25000'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。</p>\n<h4 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span> : &#123;</span><br><span class=\"line\">  preLoaders: [</span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"eslint-loader\"</span>, exclude: <span class=\"regexp\">/node_modules/</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Plugin\"><a href=\"#常用Plugin\" class=\"headerlink\" title=\"常用Plugin\"></a>常用Plugin</h2><p>###UglifyJsPlugin webpack自带的插件<br>一般配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">            warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"extractTextWebpackPlugin\"><a href=\"#extractTextWebpackPlugin\" class=\"headerlink\" title=\"extractTextWebpackPlugin\"></a>extractTextWebpackPlugin</h3><p>在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"app.css\"</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"htmlWebpackPlugin\"><a href=\"#htmlWebpackPlugin\" class=\"headerlink\" title=\"htmlWebpackPlugin\"></a>htmlWebpackPlugin</h3><p>生成HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./pages/index.js'</span>,</span><br><span class=\"line\">    page1: <span class=\"string\">'./pages/page1.js'</span>,</span><br><span class=\"line\">    page2: <span class=\"string\">'./pages/page2.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'index'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page1.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page1.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page1'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page2.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page2.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page2'</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提取公共Js插件\"><a href=\"#提取公共Js插件\" class=\"headerlink\" title=\"提取公共Js插件\"></a>提取公共Js插件</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h4 id=\"ProvidePlugin插件\"><a href=\"#ProvidePlugin插件\" class=\"headerlink\" title=\"ProvidePlugin插件\"></a>ProvidePlugin插件</h4><p>将模块暴露到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"R\"</span>: <span class=\"string\">\"report\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除目录插件\"><a href=\"#删除目录插件\" class=\"headerlink\" title=\"删除目录插件\"></a>删除目录插件</h4><p>clean-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> CleanPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"拷贝文件插件\"><a href=\"#拷贝文件插件\" class=\"headerlink\" title=\"拷贝文件插件\"></a>拷贝文件插件</h4><p>copy-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"优化第三方包插件\"><a href=\"#优化第三方包插件\" class=\"headerlink\" title=\"优化第三方包插件\"></a>优化第三方包插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//去掉react中的警告，react会自己判断</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">          NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动打开浏览器插件\"><a href=\"#自动打开浏览器插件\" class=\"headerlink\" title=\"自动打开浏览器插件\"></a>自动打开浏览器插件</h4><p>open-browser-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动打开浏览器插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OpenBrowserPlugin(&#123;url: <span class=\"string\">'http://localhost:8080/'</span>, browser: <span class=\"string\">'chrome'</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，点击<br> <a href=\"https://github.com/webpack-contrib/awesome-webpack#webpack-plugins\" target=\"_blank\" rel=\"external\">webpack-plugins</a></p>\n<h3 id=\"Resolve属性\"><a href=\"#Resolve属性\" class=\"headerlink\" title=\"Resolve属性\"></a>Resolve属性</h3><p>webpack 在构建包的时候会按配置进行模块的查找<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">     <span class=\"comment\">//查找module的话从这里开始查找</span></span><br><span class=\"line\">     root: <span class=\"string\">'/pomy/github/flux-example/src'</span>, <span class=\"comment\">//绝对路径</span></span><br><span class=\"line\">     <span class=\"comment\">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class=\"line\">     <span class=\"comment\">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class=\"line\">     extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>,’jsx’],</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class=\"line\">     alias: &#123;</span><br><span class=\"line\">         AppStore : <span class=\"string\">'js/stores/AppStores.js'</span>,<span class=\"comment\">//后续直接 require('AppStore') 即可</span></span><br><span class=\"line\">         ActionType : <span class=\"string\">'js/actions/ActionType.js'</span>,</span><br><span class=\"line\">         AppAction : <span class=\"string\">'js/actions/AppAction.js'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Externals属性\"><a href=\"#Externals属性\" class=\"headerlink\" title=\"Externals属性\"></a>Externals属性</h3><p>外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：<code>&lt;script src=&quot;//code.jquery.com/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;</code>，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：</p>\n<p>其实就是不是通过require或者import引入的，而是直接写在html中的js地址。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span></span><br><span class=\"line\"><span class=\"comment\">// 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react</span></span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    <span class=\"string\">'react1'</span>: <span class=\"string\">'react'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom1'</span>: <span class=\"string\">'react-dom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'$1'</span>: <span class=\"string\">'jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。</p>\n<h3 id=\"noParse属性\"><a href=\"#noParse属性\" class=\"headerlink\" title=\"noParse属性\"></a>noParse属性</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  noParse: [<span class=\"regexp\">/moment-with-locales/</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>webpack在前端工程中越来越多见，当前流行的vue、react、weex等都推荐webpack作为打包工具。所以在这前端打包工具众多，但是没有一个最好用的时代，这应该是最值得去学习的前端打包工具。<br>","more":"</p>\n<h3 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n<footer><strong>官方解释</strong><cite><a href=\"https://webpack.github.io/docs/what-is-webpack.html\">webpack.github.io/docs/what-is-webpack.html</a></cite></footer></blockquote>\n<img src=\"http://om64pi295.bkt.clouddn.com/what-is-webpack.png\" class=\"[what is webpack]\">\n<p>Webpack是一个模块打包工具，将包含有依赖关系的模块集打包合并。Webpack 不仅支持 CommonJs 和 AMD 的模块定义方式的Js，还可以将css、图片、文本等前端资源视为模板。</p>\n<h3 id=\"为什么要webpack\"><a href=\"#为什么要webpack\" class=\"headerlink\" title=\"为什么要webpack\"></a>为什么要webpack</h3><p>网站进化成Web app，交互越来越复杂，JavaScript文件体积越来越大。通过 <code>&lt;script&gt;</code>标签加载js容易引起冲突、阻塞加载等问题，虽然之后出现了RequireJs、Seajs等模块载入框架解决了以上问题，随着定义模块以及模块依赖的方法层出不穷，Webpack获得追捧 。Webpack不仅支持支持多种模块系统风格，而且也支持分段加载、延迟加载等功能，可谓集大成者。</p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>Webpack 的三个核心概念</strong></p>\n<p>1.<strong>loader</strong>：通过各种资源转换器，将它们转换成对应模块引入<br>2.<strong>chunk</strong>：实现按需加载，避免Js文件过大导致阻塞加载。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p><strong>第一步：Node.js</strong></p>\n<p>webpack 是 Node 实现，首先需要到 Node.js 下载安装最新版本的 Node.js</p>\n<p><strong>第二步：全局安装webpack-和webpack-dev-server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g 参数表示全局安装</span><br><span class=\"line\">$ npm i -g webpack webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：新建前端项目以及安装webpack</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index<span class=\"selector-class\">.html</span>      <span class=\"comment\">// 入口 HTML  </span></span><br><span class=\"line\">├── main<span class=\"selector-class\">.js</span>         <span class=\"comment\">// 入口 JS</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：在项目中安装webpack</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 package.json,  根据提示填写 package.json 的相关信息</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 下载 webpack 依赖 </span><br><span class=\"line\">// --save-dev 表示将依赖添加到 package.json 中的 <span class=\"string\">'devDependencies'</span> 对象中</span><br><span class=\"line\">$  npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第五步 调用</strong><br><strong>命令行调用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack main.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 000934e5d93f498db0f5</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 49ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  1.57 kB       0  [emitted]  main</span><br><span class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</span><br><span class=\"line\">   [1] ./main.js 41 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure>\n<p>执行后，可在浏览器打开 index.html</p>\n<p><strong>通过配置文件执行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>文件编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>内存编译执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>一般我们都是通过配置文件投入生产，我们可以在配置指定多个入口文件、代码分离、暴露JS全局变量、编译CSS、压缩图片等等。阮老师做了一个 <a href=\"https://github.com/ruanyf/webpack-demos\" title=\"webpack-demo\">webpack-demo</a>写了很多简单的例子，是份不错的学习资料。所以这篇文章就不再介绍基本用法了。</p>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><h3 id=\"Chunk是什么？\"><a href=\"#Chunk是什么？\" class=\"headerlink\" title=\"Chunk是什么？\"></a>Chunk是什么？</h3><p>webpack中 Chunk 实际上就是输出的 .js 文件，可能包含多个模块，主要的作用是为了优化异步加载。</p>\n<h3 id=\"Chuck包含了哪些内容\"><a href=\"#Chuck包含了哪些内容\" class=\"headerlink\" title=\"Chuck包含了哪些内容\"></a>Chuck包含了哪些内容</h3><ul>\n<li>同步情况下：一个 Check 会把模块中的所有依赖都加载到 Chunk 中</li>\n<li>异步情况下：所有被切割点分开的依赖被加载到一个 Chunk</li>\n</ul>\n<p><strong>require.ensure跟require都会被加载到一个 Chunk中</strong></p>\n<h3 id=\"Chunk-分类\"><a href=\"#Chunk-分类\" class=\"headerlink\" title=\"Chunk 分类\"></a>Chunk 分类</h3><p>第三方库不需要打包到发布的文件中，这是几需要vendor，将第三方库打包成一个chunk。</p>\n<p>webpack将chunk类型分为三种<strong>Entry chunk</strong>，<strong>Normal chunk</strong>，<strong>Initial chunk</strong>。<br><strong>Entry Chunk</strong><br>包括两部分代码：webpack运行代码（如webpackJsonp, <strong>webpack_require</strong> 等函数）和模块代码。</p>\n<p><strong>Normal Chunk</strong><br>只包含模块代码</p>\n<p><strong>Initial  Chunk</strong><br>本质上为Normal Chunk。但是他计算载入时间，比Normal Chunk更重要。一般在使用 CommonsChunkPlugin 时出现。</p>\n<p>webpack 可以将代码切割成不同的 chunk，实现按需加载。</p>\n<h2 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h2><h3 id=\"什么是loaders\"><a href=\"#什么是loaders\" class=\"headerlink\" title=\"什么是loaders\"></a>什么是loaders</h3><blockquote><p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n</blockquote>\n<p>意思就是在webpack中，通过loader可以显示静态资源的转换。</p>\n<h3 id=\"loader-功能\"><a href=\"#loader-功能\" class=\"headerlink\" title=\"loader 功能\"></a>loader 功能</h3><ol>\n<li>loader 管道：在同一种类型的源文件上，可以同时执行多个 loader ， loader 的执行方式可以类似管道的方式，管道执行的方式是从右到左的方式loader 可以支持同步和异步</li>\n<li><p>loader 可以接收配置参数</p>\n</li>\n<li><p>loader 可以通过正则表达式或者文件后缀指定特定类型的源文件</p>\n</li>\n<li><p>插件可以提供给 loader 更多功能</p>\n</li>\n<li><p>loader 除了做文件转换以外，还可以创建额外的文件</p>\n</li>\n</ol>\n<h3 id=\"loader-配置\"><a href=\"#loader-配置\" class=\"headerlink\" title=\"loader 配置\"></a>loader 配置</h3><p>在webpack.config.js 的module.loaders数组中新增一个loader配置。</p>\n<p>一个 loader 的配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过扩展名称和正则表单时来匹配资源文件</span></span><br><span class=\"line\">    test: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    loader: <span class=\"built_in\">String</span> | <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    query: <span class=\"built_in\">String</span> | <span class=\"built_in\">Object</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p><strong>第一步：安装</strong><br>loader 和 webpack 一样都是Node.js实现，发布到 npm 当中，需要使用loader的时候，只需要如下安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install xx-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// eg css loader</span><br><span class=\"line\">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二步：修改配置</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        a: <span class=\"string\">'./src/a.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'stage-0'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader!css-loader\"</span> </span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第三步：使用</strong></p>\n<p>前面我们已经使用过 jsx loader 了， loader 的使用方式有多种</p>\n<ol>\n<li><p>在配置文件中配置</p>\n</li>\n<li><p>显示的通过 require 调用</p>\n</li>\n<li><p>命令行调用</p>\n</li>\n</ol>\n<p><strong>显示的调用 require 会增加模块的耦合度，应尽量避免这种方式</strong></p>\n<p>src/style.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 webpack 配置 entry 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: [<span class=\"string\">'./index.js'</span>, <span class=\"string\">'./style.css'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终的编译结果会将  css 被转化为了 javascript。</p>\n<p>另一种方法是直接 require，修改./index.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">\"css!./style.css\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>结果一样</p>\n<h2 id=\"常用Loaders\"><a href=\"#常用Loaders\" class=\"headerlink\" title=\"常用Loaders\"></a>常用Loaders</h2><h3 id=\"加载-CSS\"><a href=\"#加载-CSS\" class=\"headerlink\" title=\"加载 CSS\"></a>加载 CSS</h3><p>加载css需要 <code>css-loader</code>和<code>style-loader</code>，分别做以下两件事：</p>\n<ol>\n<li>css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们</li>\n<li>style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h3><p>图片处理需要 <code>url-loader</code> 和 <code>file-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'url?limit=25000'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。</p>\n<h4 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span> : &#123;</span><br><span class=\"line\">  preLoaders: [</span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"eslint-loader\"</span>, exclude: <span class=\"regexp\">/node_modules/</span>&#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Plugin\"><a href=\"#常用Plugin\" class=\"headerlink\" title=\"常用Plugin\"></a>常用Plugin</h2><p>###UglifyJsPlugin webpack自带的插件<br>一般配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">            warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"extractTextWebpackPlugin\"><a href=\"#extractTextWebpackPlugin\" class=\"headerlink\" title=\"extractTextWebpackPlugin\"></a>extractTextWebpackPlugin</h3><p>在webpack中，可以通过require引入css，通过loader对文件自动解析并打包文件。通常会将css以在页面的header切入style形式加载样式。但是我们如果你想通过外链形式加载css的话，通过extract-text-webpack-plugin就可以办到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"app.css\"</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"htmlWebpackPlugin\"><a href=\"#htmlWebpackPlugin\" class=\"headerlink\" title=\"htmlWebpackPlugin\"></a>htmlWebpackPlugin</h3><p>生成HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./pages/index.js'</span>,</span><br><span class=\"line\">    page1: <span class=\"string\">'./pages/page1.js'</span>,</span><br><span class=\"line\">    page2: <span class=\"string\">'./pages/page2.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'index'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page1.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page1.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page1'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'page2.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'templates/page2.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'page2'</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提取公共Js插件\"><a href=\"#提取公共Js插件\" class=\"headerlink\" title=\"提取公共Js插件\"></a>提取公共Js插件</h4><p>通过 <code>CommonsChunkPlugin</code> 可以将个模块的公共依赖单独打包成一个 chunk，这时webpack的运行代码会被移到<code>common chunk</code> 中，原来的 <code>entry chunk</code> 也降变为 <code>initial chunk</code>。</p>\n<p><code>entry vendor</code>配合<code>CommonsChunkPlugin</code>使用，可以分离第三方库和app代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">   app: <span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">   vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子的话，app.js 只包含依赖的JS，但是对第三方依赖的都被排除掉了。第三方库被打包成 <code>vendor.bundle.js</code>。</p>\n<p><strong>CommonsChunkPlugin配置项：</strong></p>\n<ul>\n<li>names: chunk的名称，字符串或数组。</li>\n<li>filename: chunk文件名称，默认为output.filename或者output.chunkFilename</li>\n<li>minChunks 被几个chunk调用的moudule才会加入common chunk中，最小值为2。如果设置为Infinity，则不会有module加入到common chunk中<br>chunks: 需要提前common的源文件，默认为全部入口文件。</li>\n<li>children: 如果设置为 <code>true</code>，所有  公共chunk 的子模块都会被选择</li>\n<li>async:  如果设置为 <code>true</code>，一个异步的  公共chunk 会作为 <code>options.name</code> 的子模块，和 <code>options.chunks</code> 的兄弟模块被创建。 它会与 <code>options.chunks</code> 并行被加载。可以通过提供想要的字符串，而不是 <code>true</code> 来对输出的文件进行更换名称。</li>\n<li>minSize: 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</li>\n</ul>\n<h4 id=\"ProvidePlugin插件\"><a href=\"#ProvidePlugin插件\" class=\"headerlink\" title=\"ProvidePlugin插件\"></a>ProvidePlugin插件</h4><p>将模块暴露到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"R\"</span>: <span class=\"string\">\"report\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除目录插件\"><a href=\"#删除目录插件\" class=\"headerlink\" title=\"删除目录插件\"></a>删除目录插件</h4><p>clean-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> CleanPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"拷贝文件插件\"><a href=\"#拷贝文件插件\" class=\"headerlink\" title=\"拷贝文件插件\"></a>拷贝文件插件</h4><p>copy-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"优化第三方包插件\"><a href=\"#优化第三方包插件\" class=\"headerlink\" title=\"优化第三方包插件\"></a>优化第三方包插件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//去掉react中的警告，react会自己判断</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">          NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动打开浏览器插件\"><a href=\"#自动打开浏览器插件\" class=\"headerlink\" title=\"自动打开浏览器插件\"></a>自动打开浏览器插件</h4><p>open-browser-webpack-plugin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动打开浏览器插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OpenBrowserPlugin(&#123;url: <span class=\"string\">'http://localhost:8080/'</span>, browser: <span class=\"string\">'chrome'</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>plugin 为 webpack 提供了更多的自定义功能。<br>就不一一列举了，点击<br> <a href=\"https://github.com/webpack-contrib/awesome-webpack#webpack-plugins\">webpack-plugins</a></p>\n<h3 id=\"Resolve属性\"><a href=\"#Resolve属性\" class=\"headerlink\" title=\"Resolve属性\"></a>Resolve属性</h3><p>webpack 在构建包的时候会按配置进行模块的查找<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">     <span class=\"comment\">//查找module的话从这里开始查找</span></span><br><span class=\"line\">     root: <span class=\"string\">'/pomy/github/flux-example/src'</span>, <span class=\"comment\">//绝对路径</span></span><br><span class=\"line\">     <span class=\"comment\">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class=\"line\">     <span class=\"comment\">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class=\"line\">     extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>,’jsx’],</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class=\"line\">     alias: &#123;</span><br><span class=\"line\">         AppStore : <span class=\"string\">'js/stores/AppStores.js'</span>,<span class=\"comment\">//后续直接 require('AppStore') 即可</span></span><br><span class=\"line\">         ActionType : <span class=\"string\">'js/actions/ActionType.js'</span>,</span><br><span class=\"line\">         AppAction : <span class=\"string\">'js/actions/AppAction.js'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Externals属性\"><a href=\"#Externals属性\" class=\"headerlink\" title=\"Externals属性\"></a>Externals属性</h3><p>外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。 比如：在页面里通过 script 标签引用了 jQuery：<code>&lt;script src=&quot;//code.jquery.com/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;</code>，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：</p>\n<p>其实就是不是通过require或者import引入的，而是直接写在html中的js地址。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span></span><br><span class=\"line\"><span class=\"comment\">// 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react</span></span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    <span class=\"string\">'react1'</span>: <span class=\"string\">'react'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom1'</span>: <span class=\"string\">'react-dom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'$1'</span>: <span class=\"string\">'jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。</p>\n<h3 id=\"noParse属性\"><a href=\"#noParse属性\" class=\"headerlink\" title=\"noParse属性\"></a>noParse属性</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  noParse: [<span class=\"regexp\">/moment-with-locales/</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"css3-animation","date":"2017-11-03T02:16:57.000Z","_content":"\n\n{% blockquote W3C https://www.w3.org/TR/css3-animations/ css3-animations %}\nThis CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。\n<!--more-->\n看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n点击下面DEMO观看动画：\n<figure>\n<div id=\"sky\" class=\"target\">\n    <div id=\"cloud\" class=\"target\">\n    <div class=\"cloud cloud-1\"></div>\n    <div class=\"cloud cloud-2\"></div>\n    <div class=\"cloud cloud-3\"></div>\n    </div>\n    <div id=\"sun\" class=\"target\"></div>\n    <div id=\"moon\" class=\"target\">\n    <div class=\"moon\">\n    </div>\n    <div class=\"moon moon-2\">\n    </div>\n    </div>\n    <div id=\"ground\" class=\"target\"></div>\n</div>\n<p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p>\n<figcaption>animation动画 ”一天日月轮回 “</figcaption>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n                    \n</script>\n\n以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o\n\nAnimation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。\n\n\n## Animation动画\n````\n    animation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]|| [animation-fill-mode]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ] || [animation-fill-mode]]*\n    相关属性：[ animation-play-state ]\n    /* 实际用法*/\n    /*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/\n    @keyframes sky {\n        0% { background-color: #525252; }\n        33% { background-color: #6293e5; }\n        66% { background-color:#6293e5; }\n        100% { background-color: #525252; }\n    }\n    /*缩写方式：*/\n    .classname {\n        -webkit-animation:sky 10s ease 1s 1 normal forwards;\n        -webkit-animation-play-state: running;/*animation附加属性*/\n        -moz-animation:sky  10s ease 1s 1 normal forwards;\n        -moz-animation-play-state: running;/*animation附加属性*/\n        animation:sky  10s ease 1s 1 normal forwards;\n        animation-play-state: running;/*animation附加属性*/\n    }\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    animation-name: sky;\n    animation-duration: 10s;\n    animation-timing-function: ease;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n    animation-delay: 0;\n    animation-fill-mode: forwards;\n    animation-play-state: running;\n````\n\n## animation取值\n1. animation-name：设置对象所应用的动画名称\n2. animation-duration：设置对象动画的持续时间\n3. animation-timing-function：设置对象动画的过渡类型\n4. animation-delay：设置对象动画延迟的时间\n5. animation-iteration-count：设置对象动画的循环次数\n6. animation-direction：设置对象动画在循环中是否反向运动\n7. animation-fill-mode：设置对象动画结束时的状态\n8. animation-play-state：animation的相关属性，设置对象动画的状态\n\n### 动画名称以及keyframes\n#### 动画名称\nanimation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：\n\n````\n    animation-name：none | <identifier> [ , none | <identifier> ]*\n````\n动画具体名字得设置成 Keyframes 一样的名字。\n#### Keyframes\nkeyframes 语法\n````\n    keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}';\n    keyframes-blocks: [ keyframe-selectors block ]* ;\n    keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*;\n````\n````css\n    /*具体写法*/\n    /* @keyframes IDENT {*/\n    @keyframes diagonal-slide {\n        from {\n            left: 0;\n            top: 0;\n        }\n        to {\n            left: 100px;\n            top: 100px;\n        }\n    }\n    /*或者全部写成百分比的形式：*/\n    @keyframes wobble {\n        0% {\n        left: 100px;\n        }\n        40% {\n        left: 150px;\n        }\n        60% {\n        left: 75px;\n        }\n        100% {\n        left: 100px;\n        }\n    }\n````\nKeyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。\n\n这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体\n\n### 动画的持续时间\n\nanimation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下\n````css\nanimation-duration：<time> [ , <time> ]*\n````\n这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。\n\n### 动画的变化速率\n\nanimation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：\n````\nanimation-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [ , linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n\n### 动画的延迟执行时间\n\nanimation-delay是用来指定一个动画的延迟执行的时间。语法如下：\n````\nanimation-delay：<time> [ , <time> ]*\n````\n\n跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。\n\n以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。\n\n接下来介绍它们。\n\n### 动画的循环次数\nanimation-iteration-count是用来制定动画的循环次数，语法如下：\n````\nanimation-iteration-count：infinite | <number> [ , infinite | <number> ]*\n````\n- ：默认值，代表只循环一次\n- <number>：自定义对象动画的具体循环次数\n- infinite：无限循环\n\n### 动画的方向\nanimation-direction是用来指定元素动画播放的方向，语法如下：\n````\nanimation-direction：normal | alternate [ , normal | alternate ]*\n````\n- normal：动画的每次循环都是正常播放\n- alternate：动画的播放将是来回往返，一次是正常的与一次是反向的\n**注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。**\n\n### 动画结束的时的状态\nanimation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：\n````\nanimation-fill-mode：none | forwards | backwards | both [ , none | forwards | backwards | both ]*\n````\n- none：默认值。不设置对象动画之外的状态\n- forwards：设置对象状态为动画结束时的状态\n- backwards：设置对象状态为动画开始时的状态\n- both：设置对象状态为动画结束或开始的状态，为什么是或？往下看\n**注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。**\n\n### 动画的运动状态\nanimation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：\n````\nanimation-play-state：running | paused [ , running | paused ]*\n````\n### 总结\n结合以实例\n\n- 关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。\n- 动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。\n- 之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。\n- 再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。\n- animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。\n- animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。","source":"_posts/css3-animation.md","raw":"title: css3-animation\ndate: 2017-11-03 10:16:57\ntags:\n---\n\n\n{% blockquote W3C https://www.w3.org/TR/css3-animations/ css3-animations %}\nThis CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.\n{% endblockquote %}\n\n以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。\n<!--more-->\n看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n点击下面DEMO观看动画：\n<figure>\n<div id=\"sky\" class=\"target\">\n    <div id=\"cloud\" class=\"target\">\n    <div class=\"cloud cloud-1\"></div>\n    <div class=\"cloud cloud-2\"></div>\n    <div class=\"cloud cloud-3\"></div>\n    </div>\n    <div id=\"sun\" class=\"target\"></div>\n    <div id=\"moon\" class=\"target\">\n    <div class=\"moon\">\n    </div>\n    <div class=\"moon moon-2\">\n    </div>\n    </div>\n    <div id=\"ground\" class=\"target\"></div>\n</div>\n<p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p>\n<figcaption>animation动画 ”一天日月轮回 “</figcaption>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n                    \n</script>\n\n以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o\n\nAnimation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。\n\n\n## Animation动画\n````\n    animation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]|| [animation-fill-mode]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ] || [animation-fill-mode]]*\n    相关属性：[ animation-play-state ]\n    /* 实际用法*/\n    /*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/\n    @keyframes sky {\n        0% { background-color: #525252; }\n        33% { background-color: #6293e5; }\n        66% { background-color:#6293e5; }\n        100% { background-color: #525252; }\n    }\n    /*缩写方式：*/\n    .classname {\n        -webkit-animation:sky 10s ease 1s 1 normal forwards;\n        -webkit-animation-play-state: running;/*animation附加属性*/\n        -moz-animation:sky  10s ease 1s 1 normal forwards;\n        -moz-animation-play-state: running;/*animation附加属性*/\n        animation:sky  10s ease 1s 1 normal forwards;\n        animation-play-state: running;/*animation附加属性*/\n    }\n    /*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/\n    animation-name: sky;\n    animation-duration: 10s;\n    animation-timing-function: ease;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n    animation-delay: 0;\n    animation-fill-mode: forwards;\n    animation-play-state: running;\n````\n\n## animation取值\n1. animation-name：设置对象所应用的动画名称\n2. animation-duration：设置对象动画的持续时间\n3. animation-timing-function：设置对象动画的过渡类型\n4. animation-delay：设置对象动画延迟的时间\n5. animation-iteration-count：设置对象动画的循环次数\n6. animation-direction：设置对象动画在循环中是否反向运动\n7. animation-fill-mode：设置对象动画结束时的状态\n8. animation-play-state：animation的相关属性，设置对象动画的状态\n\n### 动画名称以及keyframes\n#### 动画名称\nanimation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：\n\n````\n    animation-name：none | <identifier> [ , none | <identifier> ]*\n````\n动画具体名字得设置成 Keyframes 一样的名字。\n#### Keyframes\nkeyframes 语法\n````\n    keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}';\n    keyframes-blocks: [ keyframe-selectors block ]* ;\n    keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*;\n````\n````css\n    /*具体写法*/\n    /* @keyframes IDENT {*/\n    @keyframes diagonal-slide {\n        from {\n            left: 0;\n            top: 0;\n        }\n        to {\n            left: 100px;\n            top: 100px;\n        }\n    }\n    /*或者全部写成百分比的形式：*/\n    @keyframes wobble {\n        0% {\n        left: 100px;\n        }\n        40% {\n        left: 150px;\n        }\n        60% {\n        left: 75px;\n        }\n        100% {\n        left: 100px;\n        }\n    }\n````\nKeyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。\n\n这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体\n\n### 动画的持续时间\n\nanimation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下\n````css\nanimation-duration：<time> [ , <time> ]*\n````\n这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。\n\n### 动画的变化速率\n\nanimation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：\n````\nanimation-timing-function：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [ , linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) ]*\n````\n\n\n### 动画的延迟执行时间\n\nanimation-delay是用来指定一个动画的延迟执行的时间。语法如下：\n````\nanimation-delay：<time> [ , <time> ]*\n````\n\n跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。\n\n以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。\n\n接下来介绍它们。\n\n### 动画的循环次数\nanimation-iteration-count是用来制定动画的循环次数，语法如下：\n````\nanimation-iteration-count：infinite | <number> [ , infinite | <number> ]*\n````\n- ：默认值，代表只循环一次\n- <number>：自定义对象动画的具体循环次数\n- infinite：无限循环\n\n### 动画的方向\nanimation-direction是用来指定元素动画播放的方向，语法如下：\n````\nanimation-direction：normal | alternate [ , normal | alternate ]*\n````\n- normal：动画的每次循环都是正常播放\n- alternate：动画的播放将是来回往返，一次是正常的与一次是反向的\n**注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。**\n\n### 动画结束的时的状态\nanimation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：\n````\nanimation-fill-mode：none | forwards | backwards | both [ , none | forwards | backwards | both ]*\n````\n- none：默认值。不设置对象动画之外的状态\n- forwards：设置对象状态为动画结束时的状态\n- backwards：设置对象状态为动画开始时的状态\n- both：设置对象状态为动画结束或开始的状态，为什么是或？往下看\n**注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。**\n\n### 动画的运动状态\nanimation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：\n````\nanimation-play-state：running | paused [ , running | paused ]*\n````\n### 总结\n结合以实例\n\n- 关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。\n- 动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。\n- 之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。\n- 再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。\n- animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。\n- animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。","slug":"css3-animation","published":1,"updated":"2019-04-30T06:04:29.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76a8002pdkhssbe498on","content":"<blockquote><p>This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-animations/\" target=\"_blank\" rel=\"external\">css3-animations</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。<br><a id=\"more\"></a><br>看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。</p>\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n<p>点击下面DEMO观看动画：</p>\n<p><figure></figure></p>\n<p><div id=\"sky\" class=\"target\"><br>    <div id=\"cloud\" class=\"target\"><br>    <div class=\"cloud cloud-1\"></div><br>    <div class=\"cloud cloud-2\"></div><br>    <div class=\"cloud cloud-3\"></div><br>    </div><br>    <div id=\"sun\" class=\"target\"></div><br>    <div id=\"moon\" class=\"target\"><br>    <div class=\"moon\"><br>    </div><br>    <div class=\"moon moon-2\"><br>    </div><br>    </div><br>    <div id=\"ground\" class=\"target\"></div><br></div></p>\n<p></p><p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p><p></p>\n<p><figcaption>animation动画 ”一天日月轮回 “</figcaption></p>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n\n</script>\n\n<p>以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o</p>\n<p>Animation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。</p>\n<h2 id=\"Animation动画\"><a href=\"#Animation动画\" class=\"headerlink\" title=\"Animation动画\"></a>Animation动画</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>：<span class=\"selector-attr\">[[ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span>|| <span class=\"selector-attr\">[animation-fill-mode]</span>] <span class=\"selector-attr\">[ , [ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span> || <span class=\"selector-attr\">[animation-fill-mode]</span>]*</span><br><span class=\"line\">相关属性：<span class=\"selector-attr\">[ animation-play-state ]</span></span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/</span></span><br><span class=\"line\">@<span class=\"selector-tag\">keyframes</span> <span class=\"selector-tag\">sky</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">0%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">33%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">66%</span> &#123; <span class=\"attribute\">background-color</span>:<span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">100%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.classname</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>:sky <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\"><span class=\"attribute\">animation-name</span>: sky;</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>: <span class=\"number\">10s</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: ease;</span><br><span class=\"line\"><span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-direction</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">animation-delay</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-fill-mode</span>: forwards;</span><br><span class=\"line\"><span class=\"attribute\">animation-play-state</span>: running;</span><br></pre></td></tr></table></figure>\n<h2 id=\"animation取值\"><a href=\"#animation取值\" class=\"headerlink\" title=\"animation取值\"></a>animation取值</h2><ol>\n<li>animation-name：设置对象所应用的动画名称</li>\n<li>animation-duration：设置对象动画的持续时间</li>\n<li>animation-timing-function：设置对象动画的过渡类型</li>\n<li>animation-delay：设置对象动画延迟的时间</li>\n<li>animation-iteration-count：设置对象动画的循环次数</li>\n<li>animation-direction：设置对象动画在循环中是否反向运动</li>\n<li>animation-fill-mode：设置对象动画结束时的状态</li>\n<li>animation-play-state：animation的相关属性，设置对象动画的状态</li>\n</ol>\n<h3 id=\"动画名称以及keyframes\"><a href=\"#动画名称以及keyframes\" class=\"headerlink\" title=\"动画名称以及keyframes\"></a>动画名称以及keyframes</h3><h4 id=\"动画名称\"><a href=\"#动画名称\" class=\"headerlink\" title=\"动画名称\"></a>动画名称</h4><p>animation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-name：<span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> [ , <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> ]*</span><br></pre></td></tr></table></figure>\n<p>动画具体名字得设置成 Keyframes 一样的名字。</p>\n<h4 id=\"Keyframes\"><a href=\"#Keyframes\" class=\"headerlink\" title=\"Keyframes\"></a>Keyframes</h4><p>keyframes 语法<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyframes-rule: <span class=\"string\">'@keyframes'</span> <span class=\"symbol\">IDENT</span> <span class=\"string\">'&#123;'</span> keyframes-blocks <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">keyframes-blocks: [ keyframe-selectors block ]* ;</span><br><span class=\"line\">keyframe-selectors: [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] [ <span class=\"string\">','</span> [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] ]*;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*具体写法*/</span></span><br><span class=\"line\"><span class=\"comment\">/* @keyframes IDENT &#123;*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> diagonal-slide &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者全部写成百分比的形式：*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> wobble &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    40% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    60% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。</p>\n<p>这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体</p>\n<h3 id=\"动画的持续时间\"><a href=\"#动画的持续时间\" class=\"headerlink\" title=\"动画的持续时间\"></a>动画的持续时间</h3><p>animation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation-duration</span>：&lt;<span class=\"selector-tag\">time</span>&gt; <span class=\"selector-attr\">[ , &lt;time&gt; ]</span>*</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。</p>\n<h3 id=\"动画的变化速率\"><a href=\"#动画的变化速率\" class=\"headerlink\" title=\"动画的变化速率\"></a>动画的变化速率</h3><p>animation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) [ , linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动画的延迟执行时间\"><a href=\"#动画的延迟执行时间\" class=\"headerlink\" title=\"动画的延迟执行时间\"></a>动画的延迟执行时间</h3><p>animation-delay是用来指定一个动画的延迟执行的时间。语法如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">animation</span>-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt; [ , &lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<p>跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。</p>\n<p>以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。</p>\n<p>接下来介绍它们。</p>\n<h3 id=\"动画的循环次数\"><a href=\"#动画的循环次数\" class=\"headerlink\" title=\"动画的循环次数\"></a>动画的循环次数</h3><p>animation-iteration-count是用来制定动画的循环次数，语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-iteration-<span class=\"built_in\">count</span>：infinite | &lt;<span class=\"built_in\">number</span>&gt; [ , infinite | &lt;<span class=\"built_in\">number</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>：默认值，代表只循环一次</li>\n<li><number>：自定义对象动画的具体循环次数</number></li>\n<li>infinite：无限循环</li>\n</ul>\n<h3 id=\"动画的方向\"><a href=\"#动画的方向\" class=\"headerlink\" title=\"动画的方向\"></a>动画的方向</h3><p>animation-direction是用来指定元素动画播放的方向，语法如下：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-direction：<span class=\"built-in\">normal</span> | alternate [ , <span class=\"built-in\">normal</span> | alternate ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>normal：动画的每次循环都是正常播放</li>\n<li>alternate：动画的播放将是来回往返，一次是正常的与一次是反向的<br><strong>注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。</strong></li>\n</ul>\n<h3 id=\"动画结束的时的状态\"><a href=\"#动画结束的时的状态\" class=\"headerlink\" title=\"动画结束的时的状态\"></a>动画结束的时的状态</h3><p>animation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-fill-mode：none |<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both [ , none </span>|<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both ]*</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>none：默认值。不设置对象动画之外的状态</li>\n<li>forwards：设置对象状态为动画结束时的状态</li>\n<li>backwards：设置对象状态为动画开始时的状态</li>\n<li>both：设置对象状态为动画结束或开始的状态，为什么是或？往下看<br><strong>注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。</strong></li>\n</ul>\n<h3 id=\"动画的运动状态\"><a href=\"#动画的运动状态\" class=\"headerlink\" title=\"动画的运动状态\"></a>动画的运动状态</h3><p>animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state：<span class=\"built_in\">running</span> | paused [ , <span class=\"built_in\">running</span> | paused ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>结合以实例</p>\n<ul>\n<li>关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。</li>\n<li>动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。</li>\n<li>之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。</li>\n<li>再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。</li>\n<li>animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。</li>\n<li>animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。</li>\n</ul>\n</figure>","excerpt":"<blockquote><p>This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.</p>\n<footer><strong>W3C</strong><cite><a href=\"https://www.w3.org/TR/css3-animations/\">css3-animations</a></cite></footer></blockquote>\n<p>以上是W3C官方解释，翻译过来大概意思就是：animation使用关键帧的方式，并且可以控制动画持续时间、循环次数，过渡类型。<br>","more":"<br>看了以上解释是不是觉得 animations 能实现的效果貌似用transfrom（过渡）搭配Transition（变形），transition（变形） 搭配 transfrom（过渡）确实是可以完成 animation 的一些效果，但是官网上说了 animation 这个属性是transition属性的扩展，而它比transition复杂的地方就是：keyframes（关键帧），我觉得不仅仅只有关键帧。</p>\n<style type=\"text/css\">#sky { width: 500px; height: 500px; position: relative; z-index: 1; overflow: hidden; background-color: #525252; }\n    #sky.animate { -webkit-animation:sky  10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sky  10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sky  10s ease 1s 1 normal forwards; -ms-animation-fill-mode: forwards; animation:sky  10s ease 1s 1 normal forwards; animation-fill-mode: forwards; }\n    @-webkit-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-moz-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @-ms-keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n    @keyframes sky { 0% { background-color: #525252; } 33% { background-color: #6293e5; } 66% { background-color: #6293e5; } 100% { background-color: #525252; } }\n\n    #ground { position: absolute; bottom: 0; left: 0; width: 500px; height: 154px; background: #6c5228; z-index: 4; }\n    #ground.animate { -webkit-animation:ground 10s ease 1s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:ground 10s ease 1s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:ground 10s ease 1s 1 normal forwards; -ms-animation-play-state: running; animation:ground 10s ease 1s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-moz-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @-ms-keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n    @keyframes ground { 0% { background: #6c5228; } 33% { background: #48a037; } 66% { background: #48a037; } 100% { background: #6c5228; } }\n\n    #sun { background: #ffd630; width: 130px; height: 130px; position: absolute; border-radius: 70px; z-index: 2; bottom: 0; left: 340px; }\n    #sun.animate { -webkit-animation:sunrise 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:sunrise 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:sunrise 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:sunrise 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-moz-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @-ms-keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n    @keyframes sunrise { 0% { bottom: 0; left: 340px; background: #f00; } 33% { bottom: 340px; left: 340px; background: #ffd630; } 66% { bottom: 340px; left: 40px; background: #ffd630; } 100% { bottom: 0; left: 40px; background: #f00; } }\n\n    #cloud { position: relative; top: 50px; left: -100px; opacity: 0; z-index: 3; }\n    #cloud.animate { -weblit-animation:cloud 12s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:cloud 12s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms-animation:cloud 12s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:cloud 12s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-moz-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @-ms-keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    @keyframes cloud { 0% { opacity: 0; left: -100px; } 50% { opacity: 1; left: 60px; } 75% { opacity: 1; left: 100px; } 100% { opacity: 0; left: 500px; } }\n    .cloud { border-radius: 90px / 30px; width: 160px; height: 50px; background: #fff; position: absolute; top: 10px; }\n    .cloud-2 { left: 50px; top: 0; }\n    .cloud-3 { left: 110px; top: 20px; }\n\n    #moon { position: relative; opacity: 0; top: 50px; left: -100px; }\n    #moon.animate { -webkit-animation:moon 10s ease 0s 1 normal forwards; -webkit-animation-play-state: running; -moz-animation:moon 10s ease 0s 1 normal forwards; -moz-animation-play-state: running; -ms--animation:moon 10s ease 0s 1 normal forwards; -ms-animation-play-state: running; animation:moon 10s ease 0s 1 normal forwards; animation-play-state: running; }\n    @-webkit-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }\n    @-moz-keyframes moon { 0% { opacity: 0; left: -100px; } 50% { opacity: 0; left: -100px; } 90% { opacity: 0; left: -100px; } 100% { opacity: 1; left: 50px; } }</style>\n\n<p>点击下面DEMO观看动画：</p>\n<p><figure></p>\n<p><div id=\"sky\" class=\"target\"><br>    <div id=\"cloud\" class=\"target\"><br>    <div class=\"cloud cloud-1\"></div><br>    <div class=\"cloud cloud-2\"></div><br>    <div class=\"cloud cloud-3\"></div><br>    </div><br>    <div id=\"sun\" class=\"target\"></div><br>    <div id=\"moon\" class=\"target\"><br>    <div class=\"moon\"><br>    </div><br>    <div class=\"moon moon-2\"><br>    </div><br>    </div><br>    <div id=\"ground\" class=\"target\"></div><br></div></p>\n<p><p><input type=\"button\" id=\"startbutton\" value=\"开始动画\"></p></p>\n<p><figcaption>animation动画 ”一天日月轮回 “</figcaption></p>\n<figure>\n\n<script type=\"text/javascript\">\nwindow.onload = function(){\n    jQuery.noConflict();\njQuery(document).ready(function ($) {var s = null, AnimationSpace = { settings:{ startButton: $(\"#startbutton\") }, init:function () { this.startAnimation(); }, startAnimation: function () { s = this.settings; s.startButton.click(function() { $(\"div.target\").toggleClass(\"animate\"); if (s.startButton.attr(\"value\") === \"开始动画\") { s.startButton.attr(\"value\", \"重置动画\"); } else { s.startButton.attr(\"value\", \"开始动画\"); } }); } }; AnimationSpace.init(); });\n}\n\n</script>\n\n<p>以上DEMOjs只是控制动画开始和重置，其他都是利用CSS3的 animation 属性。还是很神奇的吧，是不是觉得很有必要了解一下CSS3的 animation 属性呢。o(∩_∩)o</p>\n<p>Animation包含了8个独立的属性，分别为animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction、animation-fill-mode，animation-play-state，其中 animation-play-state 为animation的相关属性。下面来一一介绍它们和各自的语法。</p>\n<h2 id=\"Animation动画\"><a href=\"#Animation动画\" class=\"headerlink\" title=\"Animation动画\"></a>Animation动画</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>：<span class=\"selector-attr\">[[ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span>|| <span class=\"selector-attr\">[animation-fill-mode]</span>] <span class=\"selector-attr\">[ , [ animation-name ]</span> || <span class=\"selector-attr\">[ animation-duration ]</span> || <span class=\"selector-attr\">[ animation-timing-function ]</span> || <span class=\"selector-attr\">[ animation-delay ]</span> || <span class=\"selector-attr\">[ animation-iteration-count ]</span> || <span class=\"selector-attr\">[ animation-direction ]</span> || <span class=\"selector-attr\">[animation-fill-mode]</span>]*</span><br><span class=\"line\">相关属性：<span class=\"selector-attr\">[ animation-play-state ]</span></span><br><span class=\"line\"><span class=\"comment\">/* 实际用法*/</span></span><br><span class=\"line\"><span class=\"comment\">/*关键帧名字前得加浏览器前缀，这里为了减少文章篇幅，就略掉了~*/</span></span><br><span class=\"line\">@<span class=\"selector-tag\">keyframes</span> <span class=\"selector-tag\">sky</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">0%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">33%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">66%</span> &#123; <span class=\"attribute\">background-color</span>:<span class=\"number\">#6293e5</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">100%</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#525252</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*缩写方式：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.classname</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>:sky <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:sky  <span class=\"number\">10s</span> ease <span class=\"number\">1s</span> <span class=\"number\">1</span> normal forwards;</span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;<span class=\"comment\">/*animation附加属性*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*拆分方式跟缩写方式一样前面得加浏览器前缀，一个一个写太占位置，所以就只写W3C标准的*/</span></span><br><span class=\"line\"><span class=\"attribute\">animation-name</span>: sky;</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>: <span class=\"number\">10s</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: ease;</span><br><span class=\"line\"><span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-direction</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">animation-delay</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">animation-fill-mode</span>: forwards;</span><br><span class=\"line\"><span class=\"attribute\">animation-play-state</span>: running;</span><br></pre></td></tr></table></figure>\n<h2 id=\"animation取值\"><a href=\"#animation取值\" class=\"headerlink\" title=\"animation取值\"></a>animation取值</h2><ol>\n<li>animation-name：设置对象所应用的动画名称</li>\n<li>animation-duration：设置对象动画的持续时间</li>\n<li>animation-timing-function：设置对象动画的过渡类型</li>\n<li>animation-delay：设置对象动画延迟的时间</li>\n<li>animation-iteration-count：设置对象动画的循环次数</li>\n<li>animation-direction：设置对象动画在循环中是否反向运动</li>\n<li>animation-fill-mode：设置对象动画结束时的状态</li>\n<li>animation-play-state：animation的相关属性，设置对象动画的状态</li>\n</ol>\n<h3 id=\"动画名称以及keyframes\"><a href=\"#动画名称以及keyframes\" class=\"headerlink\" title=\"动画名称以及keyframes\"></a>动画名称以及keyframes</h3><h4 id=\"动画名称\"><a href=\"#动画名称\" class=\"headerlink\" title=\"动画名称\"></a>动画名称</h4><p>animation-nam指定元素的 animation 的名称，必须与规则@keyframes配合使用。animation-name具体语法如下：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-name：<span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> [ , <span class=\"keyword\">none</span> | <span class=\"variable\">&lt;identifier&gt;</span> ]*</span><br></pre></td></tr></table></figure>\n<p>动画具体名字得设置成 Keyframes 一样的名字。</p>\n<h4 id=\"Keyframes\"><a href=\"#Keyframes\" class=\"headerlink\" title=\"Keyframes\"></a>Keyframes</h4><p>keyframes 语法<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyframes-rule: <span class=\"string\">'@keyframes'</span> <span class=\"symbol\">IDENT</span> <span class=\"string\">'&#123;'</span> keyframes-blocks <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">keyframes-blocks: [ keyframe-selectors block ]* ;</span><br><span class=\"line\">keyframe-selectors: [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] [ <span class=\"string\">','</span> [ <span class=\"string\">'from'</span> | <span class=\"string\">'to'</span> | <span class=\"symbol\">PERCENTAGE</span> ] ]*;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*具体写法*/</span></span><br><span class=\"line\"><span class=\"comment\">/* @keyframes IDENT &#123;*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> diagonal-slide &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者全部写成百分比的形式：*/</span></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> wobble &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    40% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    60% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keyframes的命名是”动画的名称”前带 @符号，后面紧接着一对花括号“{}”，括号中就是一些样式属性，多个属性的话 可以用 ，逗号隔开。</p>\n<p>这个 Keyframes 就是Flash里的 时间轴 和 关键帧 的结合体</p>\n<h3 id=\"动画的持续时间\"><a href=\"#动画的持续时间\" class=\"headerlink\" title=\"动画的持续时间\"></a>动画的持续时间</h3><p>animation-duration 指定对象动画的持续时间，跟transition的transition-duration属性一样，取值：time 为数值，单位为s（秒）。其默认值是0，也就是变换时是即时的。语法如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation-duration</span>：&lt;<span class=\"selector-tag\">time</span>&gt; <span class=\"selector-attr\">[ , &lt;time&gt; ]</span>*</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是：如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。</p>\n<h3 id=\"动画的变化速率\"><a href=\"#动画的变化速率\" class=\"headerlink\" title=\"动画的变化速率\"></a>动画的变化速率</h3><p>animation-timing-function的变化速率也跟transition的transition-timing-function属性一样，同样可以由cubic-bezier决定速率，也有同样的预留速率值 ease（逐渐变慢）、linear（匀速）等，语法如下：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span></span>：linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) [ , linear | ease | ease-<span class=\"keyword\">in</span> | ease-<span class=\"keyword\">out</span> | ease-<span class=\"keyword\">in</span>-<span class=\"keyword\">out</span> | cubic-bezier(&lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;, &lt;<span class=\"keyword\">number</span>&gt;) ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动画的延迟执行时间\"><a href=\"#动画的延迟执行时间\" class=\"headerlink\" title=\"动画的延迟执行时间\"></a>动画的延迟执行时间</h3><p>animation-delay是用来指定一个动画的延迟执行的时间。语法如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">animation</span>-<span class=\"built_in\">delay</span>：&lt;<span class=\"built_in\">time</span>&gt; [ , &lt;<span class=\"built_in\">time</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<p>跟动画持续事件一样，如果是缩写，必须得带 单位 s（秒），定义在 animation-timing-function 单独属性里可以不用加 单位。如果不带 单位 s（秒）则会把他当成下面要说的循环次数。</p>\n<p>以上介绍的 animation-duration（动画持续时间）、animation-timing-function（动画变化速率）、animation-delay（动画延迟执行）三个属性跟 transition 过渡中的效果是一样。但是animation有transtion过渡没有的属性（transtion是animation的缩减版）。</p>\n<p>接下来介绍它们。</p>\n<h3 id=\"动画的循环次数\"><a href=\"#动画的循环次数\" class=\"headerlink\" title=\"动画的循环次数\"></a>动画的循环次数</h3><p>animation-iteration-count是用来制定动画的循环次数，语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-iteration-<span class=\"built_in\">count</span>：infinite | &lt;<span class=\"built_in\">number</span>&gt; [ , infinite | &lt;<span class=\"built_in\">number</span>&gt; ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>：默认值，代表只循环一次</li>\n<li><number>：自定义对象动画的具体循环次数</li>\n<li>infinite：无限循环</li>\n</ul>\n<h3 id=\"动画的方向\"><a href=\"#动画的方向\" class=\"headerlink\" title=\"动画的方向\"></a>动画的方向</h3><p>animation-direction是用来指定元素动画播放的方向，语法如下：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-direction：<span class=\"built-in\">normal</span> | alternate [ , <span class=\"built-in\">normal</span> | alternate ]*</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>normal：动画的每次循环都是正常播放</li>\n<li>alternate：动画的播放将是来回往返，一次是正常的与一次是反向的<br><strong>注意：如果 animation-direction 设置成 alternate ，则必须得大于一次，不然 alternate 就白设置了。最好是偶数次循环。</strong></li>\n</ul>\n<h3 id=\"动画结束的时的状态\"><a href=\"#动画结束的时的状态\" class=\"headerlink\" title=\"动画结束的时的状态\"></a>动画结束的时的状态</h3><p>animation的附属属性：animation-fill-mode表示动画结束时的状态，语法如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-fill-mode：none |<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both [ , none </span>|<span class=\"string\"> forwards </span>|<span class=\"string\"> backwards </span>|<span class=\"string\"> both ]*</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>none：默认值。不设置对象动画之外的状态</li>\n<li>forwards：设置对象状态为动画结束时的状态</li>\n<li>backwards：设置对象状态为动画开始时的状态</li>\n<li>both：设置对象状态为动画结束或开始的状态，为什么是或？往下看<br><strong>注意：forwards 和 backwards 没什么好说的，就是上面那个字面意思，而如果最终状态是both的的话，如果只有一个动画是backwards和forwards是可以的，如果有多个动画而且两个动画最终位置不同，最好设置成both 。不然达不到预期效果。</strong></li>\n</ul>\n<h3 id=\"动画的运动状态\"><a href=\"#动画的运动状态\" class=\"headerlink\" title=\"动画的运动状态\"></a>动画的运动状态</h3><p>animation-play-state主要是用来控制元素动画的播放状态。其主要有两个值，running（播放）和paused（暂停）其中running为默认值。就像视频里的暂停播放一样.语法如下：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state：<span class=\"built_in\">running</span> | paused [ , <span class=\"built_in\">running</span> | paused ]*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>结合以实例</p>\n<ul>\n<li>关键帧和动画名字没什么好说的，像 flash 时间轴 一样，只是animation 用半分比来表示。</li>\n<li>动画名字之后的三个属性就是：持续事件、变化速率和延迟事件，跟 transfrom 中的属性一样，也好理解。</li>\n<li>之后的循环次数，我们设置成了 1 ，就是告诉这个动画播放一遍就够了，别再播了。</li>\n<li>再之后的是动画的运动方向，我们设置成了 normal ，动画效果就如所看到，白天→黑夜，就结束了，如果设置成 alternate ，那么动画效果则是 白天→黑夜然后又从黑夜倒回来到了白天直致刚开始的样子，不过我们得把播放次数1 改成大于一的，不然它只会播放到晚上就不往回播放了。</li>\n<li>animation最后一个属性 ，DEMO里都是forwards，任务完成就呆那里吧。不许动了。</li>\n<li>animation的附属属性，DEMO里都是 running的，如果是 paused的话就暂停了，如果js控制的话应该能更像看视频那感觉。</li>\n</ul>"},{"title":"正则基础学习","date":"2017-07-20T06:38:42.000Z","_content":"\n\n正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。\n\n虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。\n<!--more-->\n正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：\n\n**不使用正则：**\n遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。\n````javascript\n    var str = '12 javascript 34 html5 33 php 77 css';\n    var arr = [];\n    var figure = '';\n    for(var i=0;i='0' && str.charAt(i)<='9'){\n            figure += str.charAt(i);\n        }else{\n            if(figure){\n            arr.push(tmp);\n            figure ='';\n        }\n    }\n}\nconsole.log(arr)//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]\n````\n**而使用正则只需要如下短短的一行代码**：\n````javascript\nvar arr = str.match(/\\d+/g);\n````\n\n## 基础知识\n### 书写风格\n\njavascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。\n\n1. JS 风格： new RegExp('patten','ig')\n2. perl风格：/patten/ig\n\nJS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。\n\n### 什么是正则\n正则表达式的结构与数学表达式很类似。\n\n一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连\n\n为了方便理解，让我们先来看看大家一个典型的的数学表达式 `(x+3)*2+y`：\n\n这个数学表达式中`(x+3)*2`和`y`分别是两个项。每个项又由若干个__因子__组成，因子之间用乘号或除号相连。这里第一个项有两个因子`(x+3)`和`2`，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为__子表达式__。这里`x+3`就是一个子表达式。\n\n与数学表达式的__因子__相对应，构成正则表达式的部件称为__单位__；__项__则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。\n\n### 术语\n为了更好的学习正则，我们再来学习下正则表达式的一些术语\n\n1.  匹配（matching）\n    一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。\n\n2.  元字符（metacharacter）\n    只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。\n\n3. 子表达式（subexpression）\n    子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。\n\n### 匹配模式\n上例中斜杠后面的 `ig`是匹配模式，可选的值有3个：`i`,`g`,`m`。其含义如下：\n\n- `i`：为 ignore case，即 忽略大小写。\n- `g`：为 global search，即全局搜索。\n- `m`：为 moltiline search，即多行搜索。\n\n所以，一个完整正则表达式是由一个个__子表达式__组成的，而__子表达式__则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。\n\n## 元字符组成部分\n### 转义字符\n什么是转义字符？在\\后面加字符就可以转义为特殊字符。\n\n例如： `\\n`匹配一个换行符， `\\\\`匹配“\\”。\n\n### 预定义特殊字符\n\n1. `\\o`:Nol字符。\n2. `\\t`:水平制表符。\n3. `\\v`:垂直制表符。\n4. `\\n`:换行符。\n5. `\\r`:回车符。\n6. `\\b`:退格符。 只有出现在字符中才有效，即[]（中括号）中。\n\n### 字符类\n1. `[ ]`:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 `[abc]`就可以匹配\"css\"中的c；\n如果上例前面加 ^元字符，形如`[^asd]`，则表示匹配除了asd的其他字符；\n\n如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写`[a-c]`这么写，所以上例也可以这么写 `[^a-d]`\n\n2. `\\w`和`\\W`:`\\w`表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；`\\W`表示匹配不是ASCII字符组成的单词等价于`[^a-zA-Z0-9]`。\n3. `\\s`和`\\S`:`\\s`匹配空白符，等价于`[\\t\\n\\x0B\\f\\r]`；`\\S`则匹配非空白字符，等价于`[^\\t\\n\\x0B\\f\\r]`。\n4. `\\d`和`\\D`:`\\d`匹配数字字符，等价于`[0-9]`；`\\D`匹配数字字符，等价于`[^0-9]`\n5. `.`:javascript有点特殊，由于浏览器的解析引擎不同，`.`的匹配范围也有所不同。\n    1. IE8以下：\n    .匹配所有除了换行符`/n`换行符之外的任意字符。等同于`[^\\n\\r]`\n\n    2. IE9以上以及其他浏览器\n    .匹配所有除了换行符`/n`换行符和回车符`\\r`之外的任意字符。等同于`[^\\n\\r]`\n\n````javascript\ndocument.write(/./.test(\"\\r\") + \"\");\ndocument.write(/./.test(\"\\n\") + \"\");\n/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/\n````\n\n### 量词\n\n首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。\n\n而既然有贪婪模式，则一定也有非贪婪模式。\n\n对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。\n\n贪婪模式的量词，也叫简单量词，如下：\n\n`{n}`:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。\n`{n,}`:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。\n`{n,m}`:n、m都是正整数，表示至少匹配n次，至多m次。\n`?`:等价于{0,1}\n`+`:等价于{1,}\n`*`:等价于{0,}\n而在贪婪模式后加上 ?就变成了非贪婪模式。\n\n### 贪婪模式和非贪婪模式\n\n在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：\n\n````javascript\nvar pattern = 'aAaAaAb';\nconsole.log(/a+/i.exec(pattern)); //aAaAaA\nconsole.log(/a+?/i.exec(pattern)); //a\nconsole.log(/a+b/i.exec(pattern)); //aAaAaAb\nconsole.log(/a+?b/i.exec(pattern)); //aAaAaAb\n````\n\n全部是在忽略大小写的模式下：\n\n1. 第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”\n2. 第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”\n3. 第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。\n4. 第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。\n5. \n所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。\n\n\n### 匹配位置\n\n前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。\n\n1. `^`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之后的位置。\n2. `$`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之前的位置。\n3. `/b`:匹配单词边界，不匹配任何字符。\n\n所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。\n\n而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：\n\n````javascript\nvar str = \"html5_css3中文_h5$c3&汉字%\";\nconsole.log(str.match(/\\w+/g)); //\"html5_css3\" , \"_h5\" , \"c3\"\nconsole.log(str.match(/.\\b./g));//\"3中\" , \"文_\" , \"5$\" , \"3&\"\n````\n\n第一个例子中\\w+匹配了\"html5_css3\" , \"_h5\" , \"c3\"三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“_“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到\"3中\" , \"文_\" , \"5&\" ,说明这个字符串中有4个分界点5个子字符串，分别在\"3中\" , \"文_\" , \"5&\"之间，而四个子字符串分别是\"html5_css3\"，\"中文,\"_h5\",\"$c3\",\"&汉字%\"。\n\n所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。\n\n注意：\\b在[]中表示退格。\n\n\n### 分组\n学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。\n\n看实际例子吧：\n\n````javascript\n//1分组+量词\nconsole.log(/(js){2}/.test(\"jsjs\"));//true\n//2分组+范围\nconsole.log(/[JL]script/.test(\"Lscript\"));//true\n//3反向引用\nconsole.log(/([jJ])s\\1/.test(\"jsJs\"));//false\nconsole.log(/([jJ])s\\1/.test(\"jsjs\"));//true\n````\n\n例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。\n\n然后介绍第二个分组的符号|。\n\n与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：\n\n````javascript\nvar reg = /(html5|css3|js)!!/;\nconsole.log(reg.test(\"html5!!\"));//true\nconsole.log(reg.test(\"css3!!\"));//true\nconsole.log(reg.test(\"js!!\"));//true\n````\n\n### 非捕获性分组\n\n对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。\n\n从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nconsole.log(pattern1.replace(/(\\w+),(?:\\w+)/, \"$2,$1\"));//$2,JS,CSS\n````\n\n### 前瞻\n\n前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：\n\n1. `(?=p)`:要求之后的字符必须与p匹配\n2. `(?!p)`:要求之后的字符必须不与p匹配\n\n如下实例：\n````javascript\nvar reg1 = /java(?!Scrit)/;\nvar reg2 = /java(?=Scrit)/;\nconsole.log(reg1.test(\"javaScrit\")); //false\nconsole.log(reg1.test(\"javaB\"));//true\nconsole.log(reg2.test(\"javaScrit\")); //true\nconsole.log(reg2.test(\"javaB\"));//false\n````\n\n前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。\n\n\n支持正则方法有支持正则的字符串方法和正则自身的方法\n\n## 支持正则表达式的 String 对象的方法\n### 字符串搜索：\n`search()`方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。\n\n如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。\n\n````javascript\nvar pattern = \"hello html5 js css\";\nconsole.log(pattern.search(/Html5/i));//6\n````\n\n### 字符串匹配：\n\n`match()`方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。\n\n`match()`即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。\n\n````javascript\nvar pattern=\"2012 years 12 month 20 is the end of the world\";\nconsole.log(pattern.match(/\\d+/g));//[\"2012\",\"12\",\"20\"]\n````\n\n### 字符串替代：\n\n`replace()`方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。\n\n`replace()`的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：\n\n1. `$n`：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。\n2. `$&`：全部匹配的子字符串\n3. `$``：匹配子串左侧的文本\n4. `$'`：匹配子串右侧的文本\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nvar replace1 = pattern1.replace(/(\\w{1,}),(\\w+)/, \"$2,$1\");\nconsole.log(replace1);//HTML5,JS,CSS\nvar replace2 = pattern1.replace(/(\\w+),/g,\"$1-\");\nconsole.log(replace2);//JS-HTML5-CSS\n````\n\n### 字符串分割：\n\n`split()`方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。\n\n若使用 `split(\"\")` 则会将单词分割成字母\n````javascript\nvar pattern = \"HTML5 JS CSS\";\nvar sWord1 = pattern.split(\" \");\nvar sWord2 = pattern.split(\"\");\nconsole.log(sWord1);//[ \"HTML5\" , \"JS\" , \"CSS\" ]\nconsole.log(sWord2);//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]\n````\n\n## RegExp 对象的方法\n## test：\n\ntest()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false\n\n## exec：\nexec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。","source":"_posts/javascript-reg-1.md","raw":"title: 正则基础学习\ndate: 2017-07-20 14:38:42\ntags: \n- JavaScript\n- 正则\ncategories:\n- JavaScript\n---\n\n\n正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。\n\n虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。\n<!--more-->\n正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：\n\n**不使用正则：**\n遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。\n````javascript\n    var str = '12 javascript 34 html5 33 php 77 css';\n    var arr = [];\n    var figure = '';\n    for(var i=0;i='0' && str.charAt(i)<='9'){\n            figure += str.charAt(i);\n        }else{\n            if(figure){\n            arr.push(tmp);\n            figure ='';\n        }\n    }\n}\nconsole.log(arr)//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]\n````\n**而使用正则只需要如下短短的一行代码**：\n````javascript\nvar arr = str.match(/\\d+/g);\n````\n\n## 基础知识\n### 书写风格\n\njavascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。\n\n1. JS 风格： new RegExp('patten','ig')\n2. perl风格：/patten/ig\n\nJS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。\n\n### 什么是正则\n正则表达式的结构与数学表达式很类似。\n\n一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连\n\n为了方便理解，让我们先来看看大家一个典型的的数学表达式 `(x+3)*2+y`：\n\n这个数学表达式中`(x+3)*2`和`y`分别是两个项。每个项又由若干个__因子__组成，因子之间用乘号或除号相连。这里第一个项有两个因子`(x+3)`和`2`，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为__子表达式__。这里`x+3`就是一个子表达式。\n\n与数学表达式的__因子__相对应，构成正则表达式的部件称为__单位__；__项__则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。\n\n### 术语\n为了更好的学习正则，我们再来学习下正则表达式的一些术语\n\n1.  匹配（matching）\n    一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。\n\n2.  元字符（metacharacter）\n    只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。\n\n3. 子表达式（subexpression）\n    子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。\n\n### 匹配模式\n上例中斜杠后面的 `ig`是匹配模式，可选的值有3个：`i`,`g`,`m`。其含义如下：\n\n- `i`：为 ignore case，即 忽略大小写。\n- `g`：为 global search，即全局搜索。\n- `m`：为 moltiline search，即多行搜索。\n\n所以，一个完整正则表达式是由一个个__子表达式__组成的，而__子表达式__则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。\n\n## 元字符组成部分\n### 转义字符\n什么是转义字符？在\\后面加字符就可以转义为特殊字符。\n\n例如： `\\n`匹配一个换行符， `\\\\`匹配“\\”。\n\n### 预定义特殊字符\n\n1. `\\o`:Nol字符。\n2. `\\t`:水平制表符。\n3. `\\v`:垂直制表符。\n4. `\\n`:换行符。\n5. `\\r`:回车符。\n6. `\\b`:退格符。 只有出现在字符中才有效，即[]（中括号）中。\n\n### 字符类\n1. `[ ]`:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 `[abc]`就可以匹配\"css\"中的c；\n如果上例前面加 ^元字符，形如`[^asd]`，则表示匹配除了asd的其他字符；\n\n如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写`[a-c]`这么写，所以上例也可以这么写 `[^a-d]`\n\n2. `\\w`和`\\W`:`\\w`表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；`\\W`表示匹配不是ASCII字符组成的单词等价于`[^a-zA-Z0-9]`。\n3. `\\s`和`\\S`:`\\s`匹配空白符，等价于`[\\t\\n\\x0B\\f\\r]`；`\\S`则匹配非空白字符，等价于`[^\\t\\n\\x0B\\f\\r]`。\n4. `\\d`和`\\D`:`\\d`匹配数字字符，等价于`[0-9]`；`\\D`匹配数字字符，等价于`[^0-9]`\n5. `.`:javascript有点特殊，由于浏览器的解析引擎不同，`.`的匹配范围也有所不同。\n    1. IE8以下：\n    .匹配所有除了换行符`/n`换行符之外的任意字符。等同于`[^\\n\\r]`\n\n    2. IE9以上以及其他浏览器\n    .匹配所有除了换行符`/n`换行符和回车符`\\r`之外的任意字符。等同于`[^\\n\\r]`\n\n````javascript\ndocument.write(/./.test(\"\\r\") + \"\");\ndocument.write(/./.test(\"\\n\") + \"\");\n/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/\n````\n\n### 量词\n\n首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。\n\n而既然有贪婪模式，则一定也有非贪婪模式。\n\n对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。\n\n贪婪模式的量词，也叫简单量词，如下：\n\n`{n}`:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。\n`{n,}`:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。\n`{n,m}`:n、m都是正整数，表示至少匹配n次，至多m次。\n`?`:等价于{0,1}\n`+`:等价于{1,}\n`*`:等价于{0,}\n而在贪婪模式后加上 ?就变成了非贪婪模式。\n\n### 贪婪模式和非贪婪模式\n\n在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：\n\n````javascript\nvar pattern = 'aAaAaAb';\nconsole.log(/a+/i.exec(pattern)); //aAaAaA\nconsole.log(/a+?/i.exec(pattern)); //a\nconsole.log(/a+b/i.exec(pattern)); //aAaAaAb\nconsole.log(/a+?b/i.exec(pattern)); //aAaAaAb\n````\n\n全部是在忽略大小写的模式下：\n\n1. 第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”\n2. 第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”\n3. 第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。\n4. 第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。\n5. \n所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。\n\n\n### 匹配位置\n\n前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。\n\n1. `^`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之后的位置。\n2. `$`:匹配文字的开头。如果正则表达式的匹配模式设置为','m'则也匹配每个换行符或者回车符之前的位置。\n3. `/b`:匹配单词边界，不匹配任何字符。\n\n所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。\n\n而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：\n\n````javascript\nvar str = \"html5_css3中文_h5$c3&汉字%\";\nconsole.log(str.match(/\\w+/g)); //\"html5_css3\" , \"_h5\" , \"c3\"\nconsole.log(str.match(/.\\b./g));//\"3中\" , \"文_\" , \"5$\" , \"3&\"\n````\n\n第一个例子中\\w+匹配了\"html5_css3\" , \"_h5\" , \"c3\"三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“_“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到\"3中\" , \"文_\" , \"5&\" ,说明这个字符串中有4个分界点5个子字符串，分别在\"3中\" , \"文_\" , \"5&\"之间，而四个子字符串分别是\"html5_css3\"，\"中文,\"_h5\",\"$c3\",\"&汉字%\"。\n\n所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。\n\n注意：\\b在[]中表示退格。\n\n\n### 分组\n学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。\n\n看实际例子吧：\n\n````javascript\n//1分组+量词\nconsole.log(/(js){2}/.test(\"jsjs\"));//true\n//2分组+范围\nconsole.log(/[JL]script/.test(\"Lscript\"));//true\n//3反向引用\nconsole.log(/([jJ])s\\1/.test(\"jsJs\"));//false\nconsole.log(/([jJ])s\\1/.test(\"jsjs\"));//true\n````\n\n例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。\n\n然后介绍第二个分组的符号|。\n\n与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：\n\n````javascript\nvar reg = /(html5|css3|js)!!/;\nconsole.log(reg.test(\"html5!!\"));//true\nconsole.log(reg.test(\"css3!!\"));//true\nconsole.log(reg.test(\"js!!\"));//true\n````\n\n### 非捕获性分组\n\n对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。\n\n从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nconsole.log(pattern1.replace(/(\\w+),(?:\\w+)/, \"$2,$1\"));//$2,JS,CSS\n````\n\n### 前瞻\n\n前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：\n\n1. `(?=p)`:要求之后的字符必须与p匹配\n2. `(?!p)`:要求之后的字符必须不与p匹配\n\n如下实例：\n````javascript\nvar reg1 = /java(?!Scrit)/;\nvar reg2 = /java(?=Scrit)/;\nconsole.log(reg1.test(\"javaScrit\")); //false\nconsole.log(reg1.test(\"javaB\"));//true\nconsole.log(reg2.test(\"javaScrit\")); //true\nconsole.log(reg2.test(\"javaB\"));//false\n````\n\n前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。\n\n\n支持正则方法有支持正则的字符串方法和正则自身的方法\n\n## 支持正则表达式的 String 对象的方法\n### 字符串搜索：\n`search()`方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。\n\n如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。\n\n````javascript\nvar pattern = \"hello html5 js css\";\nconsole.log(pattern.search(/Html5/i));//6\n````\n\n### 字符串匹配：\n\n`match()`方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。\n\n`match()`即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。\n\n````javascript\nvar pattern=\"2012 years 12 month 20 is the end of the world\";\nconsole.log(pattern.match(/\\d+/g));//[\"2012\",\"12\",\"20\"]\n````\n\n### 字符串替代：\n\n`replace()`方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。\n\n`replace()`的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：\n\n1. `$n`：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。\n2. `$&`：全部匹配的子字符串\n3. `$``：匹配子串左侧的文本\n4. `$'`：匹配子串右侧的文本\n\n````javascript\nvar pattern1 = \"JS,HTML5,CSS\";\nvar replace1 = pattern1.replace(/(\\w{1,}),(\\w+)/, \"$2,$1\");\nconsole.log(replace1);//HTML5,JS,CSS\nvar replace2 = pattern1.replace(/(\\w+),/g,\"$1-\");\nconsole.log(replace2);//JS-HTML5-CSS\n````\n\n### 字符串分割：\n\n`split()`方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。\n\n若使用 `split(\"\")` 则会将单词分割成字母\n````javascript\nvar pattern = \"HTML5 JS CSS\";\nvar sWord1 = pattern.split(\" \");\nvar sWord2 = pattern.split(\"\");\nconsole.log(sWord1);//[ \"HTML5\" , \"JS\" , \"CSS\" ]\nconsole.log(sWord2);//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]\n````\n\n## RegExp 对象的方法\n## test：\n\ntest()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false\n\n## exec：\nexec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。","slug":"javascript-reg-1","published":1,"updated":"2019-04-30T06:04:29.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76aa002qdkhs9r4yysha","content":"<p>正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。</p>\n<p>虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。<br><a id=\"more\"></a><br>正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：</p>\n<p><strong>不使用正则：</strong><br>遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'12 javascript 34 html5 33 php 77 css'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> figure = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i=<span class=\"string\">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">            figure += str.charAt(i);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(figure)&#123;</span><br><span class=\"line\">            arr.push(tmp);</span><br><span class=\"line\">            figure =<span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>而使用正则只需要如下短短的一行代码</strong>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"书写风格\"><a href=\"#书写风格\" class=\"headerlink\" title=\"书写风格\"></a>书写风格</h3><p>javascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。</p>\n<ol>\n<li>JS 风格： new RegExp(‘patten’,’ig’)</li>\n<li>perl风格：/patten/ig</li>\n</ol>\n<p>JS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。</p>\n<h3 id=\"什么是正则\"><a href=\"#什么是正则\" class=\"headerlink\" title=\"什么是正则\"></a>什么是正则</h3><p>正则表达式的结构与数学表达式很类似。</p>\n<p>一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连</p>\n<p>为了方便理解，让我们先来看看大家一个典型的的数学表达式 <code>(x+3)*2+y</code>：</p>\n<p>这个数学表达式中<code>(x+3)*2</code>和<code>y</code>分别是两个项。每个项又由若干个<strong>因子</strong>组成，因子之间用乘号或除号相连。这里第一个项有两个因子<code>(x+3)</code>和<code>2</code>，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为<strong>子表达式</strong>。这里<code>x+3</code>就是一个子表达式。</p>\n<p>与数学表达式的<strong>因子</strong>相对应，构成正则表达式的部件称为<strong>单位</strong>；<strong>项</strong>则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。</p>\n<h3 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h3><p>为了更好的学习正则，我们再来学习下正则表达式的一些术语</p>\n<ol>\n<li><p>匹配（matching）<br>一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。</p>\n</li>\n<li><p>元字符（metacharacter）<br>只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。</p>\n</li>\n<li><p>子表达式（subexpression）<br> 子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。</p>\n</li>\n</ol>\n<h3 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h3><p>上例中斜杠后面的 <code>ig</code>是匹配模式，可选的值有3个：<code>i</code>,<code>g</code>,<code>m</code>。其含义如下：</p>\n<ul>\n<li><code>i</code>：为 ignore case，即 忽略大小写。</li>\n<li><code>g</code>：为 global search，即全局搜索。</li>\n<li><code>m</code>：为 moltiline search，即多行搜索。</li>\n</ul>\n<p>所以，一个完整正则表达式是由一个个<strong>子表达式</strong>组成的，而<strong>子表达式</strong>则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。</p>\n<h2 id=\"元字符组成部分\"><a href=\"#元字符组成部分\" class=\"headerlink\" title=\"元字符组成部分\"></a>元字符组成部分</h2><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>什么是转义字符？在\\后面加字符就可以转义为特殊字符。</p>\n<p>例如： <code>\\n</code>匹配一个换行符， <code>\\\\</code>匹配“\\”。</p>\n<h3 id=\"预定义特殊字符\"><a href=\"#预定义特殊字符\" class=\"headerlink\" title=\"预定义特殊字符\"></a>预定义特殊字符</h3><ol>\n<li><code>\\o</code>:Nol字符。</li>\n<li><code>\\t</code>:水平制表符。</li>\n<li><code>\\v</code>:垂直制表符。</li>\n<li><code>\\n</code>:换行符。</li>\n<li><code>\\r</code>:回车符。</li>\n<li><code>\\b</code>:退格符。 只有出现在字符中才有效，即[]（中括号）中。</li>\n</ol>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><ol>\n<li><code>[ ]</code>:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 <code>[abc]</code>就可以匹配”css”中的c；<br>如果上例前面加 ^元字符，形如<code>[^asd]</code>，则表示匹配除了asd的其他字符；</li>\n</ol>\n<p>如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写<code>[a-c]</code>这么写，所以上例也可以这么写 <code>[^a-d]</code></p>\n<ol>\n<li><code>\\w</code>和<code>\\W</code>:<code>\\w</code>表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；<code>\\W</code>表示匹配不是ASCII字符组成的单词等价于<code>[^a-zA-Z0-9]</code>。</li>\n<li><code>\\s</code>和<code>\\S</code>:<code>\\s</code>匹配空白符，等价于<code>[\\t\\n\\x0B\\f\\r]</code>；<code>\\S</code>则匹配非空白字符，等价于<code>[^\\t\\n\\x0B\\f\\r]</code>。</li>\n<li><code>\\d</code>和<code>\\D</code>:<code>\\d</code>匹配数字字符，等价于<code>[0-9]</code>；<code>\\D</code>匹配数字字符，等价于<code>[^0-9]</code></li>\n<li><p><code>.</code>:javascript有点特殊，由于浏览器的解析引擎不同，<code>.</code>的匹配范围也有所不同。</p>\n<ol>\n<li><p>IE8以下：<br>.匹配所有除了换行符<code>/n</code>换行符之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n<li><p>IE9以上以及其他浏览器<br>.匹配所有除了换行符<code>/n</code>换行符和回车符<code>\\r</code>之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\r\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。</p>\n<p>而既然有贪婪模式，则一定也有非贪婪模式。</p>\n<p>对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。</p>\n<p>贪婪模式的量词，也叫简单量词，如下：</p>\n<p><code>{n}</code>:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。<br><code>{n,}</code>:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。<br><code>{n,m}</code>:n、m都是正整数，表示至少匹配n次，至多m次。<br><code>?</code>:等价于{0,1}<br><code>+</code>:等价于{1,}<br><code>*</code>:等价于{0,}<br>而在贪婪模式后加上 ?就变成了非贪婪模式。</p>\n<h3 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h3><p>在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">'aAaAaAb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?/i</span>.exec(pattern)); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br></pre></td></tr></table></figure>\n<p>全部是在忽略大小写的模式下：</p>\n<ol>\n<li>第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”</li>\n<li>第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”</li>\n<li>第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。</li>\n<li>第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。</li>\n<li>所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。</li>\n</ol>\n<h3 id=\"匹配位置\"><a href=\"#匹配位置\" class=\"headerlink\" title=\"匹配位置\"></a>匹配位置</h3><p>前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。</p>\n<ol>\n<li><code>^</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之后的位置。</li>\n<li><code>$</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之前的位置。</li>\n<li><code>/b</code>:匹配单词边界，不匹配任何字符。</li>\n</ol>\n<p>所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。</p>\n<p>而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"html5_css3中文_h5$c3&amp;汉字%\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/\\w+/g</span>)); <span class=\"comment\">//\"html5_css3\" , \"_h5\" , \"c3\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/.\\b./g</span>));<span class=\"comment\">//\"3中\" , \"文_\" , \"5$\" , \"3&amp;\"</span></span><br></pre></td></tr></table></figure>\n<p>第一个例子中\\w+匹配了”html5_css3” , “<em>h5” , “c3”三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“</em>“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到”3中” , “文<em>“ , “5&amp;” ,说明这个字符串中有4个分界点5个子字符串，分别在”3中” , “文</em>“ , “5&amp;”之间，而四个子字符串分别是”html5_css3”，”中文,”_h5”,”$c3”,”&amp;汉字%”。</p>\n<p>所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。</p>\n<p>注意：\\b在[]中表示退格。</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。</p>\n<p>看实际例子吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1分组+量词</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/(js)&#123;2&#125;/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2分组+范围</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/[JL]script/</span>.test(<span class=\"string\">\"Lscript\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3反向引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsJs\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。</p>\n<p>然后介绍第二个分组的符号|。</p>\n<p>与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(html5|css3|js)!!/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"html5!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"css3!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"js!!\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非捕获性分组\"><a href=\"#非捕获性分组\" class=\"headerlink\" title=\"非捕获性分组\"></a>非捕获性分组</h3><p>对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。</p>\n<p>从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern1.replace(<span class=\"regexp\">/(\\w+),(?:\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>));<span class=\"comment\">//$2,JS,CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><p>前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：</p>\n<ol>\n<li><code>(?=p)</code>:要求之后的字符必须与p匹配</li>\n<li><code>(?!p)</code>:要求之后的字符必须不与p匹配</li>\n</ol>\n<p>如下实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/java(?!Scrit)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/java(?=Scrit)/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。</p>\n<p>支持正则方法有支持正则的字符串方法和正则自身的方法</p>\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><h3 id=\"字符串搜索：\"><a href=\"#字符串搜索：\" class=\"headerlink\" title=\"字符串搜索：\"></a>字符串搜索：</h3><p><code>search()</code>方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。</p>\n<p>如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"hello html5 js css\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.search(<span class=\"regexp\">/Html5/i</span>));<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串匹配：\"><a href=\"#字符串匹配：\" class=\"headerlink\" title=\"字符串匹配：\"></a>字符串匹配：</h3><p><code>match()</code>方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。</p>\n<p><code>match()</code>即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"string\">\"2012 years 12 month 20 is the end of the world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.match(<span class=\"regexp\">/\\d+/g</span>));<span class=\"comment\">//[\"2012\",\"12\",\"20\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串替代：\"><a href=\"#字符串替代：\" class=\"headerlink\" title=\"字符串替代：\"></a>字符串替代：</h3><p><code>replace()</code>方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。</p>\n<p><code>replace()</code>的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：</p>\n<ol>\n<li><code>$n</code>：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。</li>\n<li><code>$&amp;</code>：全部匹配的子字符串</li>\n<li>`$``：匹配子串左侧的文本</li>\n<li><code>$&#39;</code>：匹配子串右侧的文本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replace1 = pattern1.replace(<span class=\"regexp\">/(\\w&#123;1,&#125;),(\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace1);<span class=\"comment\">//HTML5,JS,CSS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> replace2 = pattern1.replace(<span class=\"regexp\">/(\\w+),/g</span>,<span class=\"string\">\"$1-\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace2);<span class=\"comment\">//JS-HTML5-CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串分割：\"><a href=\"#字符串分割：\" class=\"headerlink\" title=\"字符串分割：\"></a>字符串分割：</h3><p><code>split()</code>方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。</p>\n<p>若使用 <code>split(&quot;&quot;)</code> 则会将单词分割成字母<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"HTML5 JS CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord1 = pattern.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord2 = pattern.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord1);<span class=\"comment\">//[ \"HTML5\" , \"JS\" , \"CSS\" ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord2);<span class=\"comment\">//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RegExp-对象的方法\"><a href=\"#RegExp-对象的方法\" class=\"headerlink\" title=\"RegExp 对象的方法\"></a>RegExp 对象的方法</h2><h2 id=\"test：\"><a href=\"#test：\" class=\"headerlink\" title=\"test：\"></a>test：</h2><p>test()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false</p>\n<h2 id=\"exec：\"><a href=\"#exec：\" class=\"headerlink\" title=\"exec：\"></a>exec：</h2><p>exec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。</p>\n","excerpt":"<p>正则表达式是一个威力巨大的处理字符串的工具，能够高效、神奇得完成对字符串的操作。相比较简单的字符串比较、查找、替换，正则表达式提供了更加强大的处理能力。正则表达式的价值就在于，不用正则来解决问题会让人疯掉，但是用了之后“纠结”的问题已不再是问题了。而且因为正则表达式用的不是一个固化的、具体的字符串来匹配字符串，而是抽象的模式的，所以只要正则写的规则没问题，一般都都能高效的完成任务。</p>\n<p>虽然正则表达式看起来确实很像外星文，就像变魔术一样，魔术本身也不神奇，只是的观众不解其中奥妙。学会了其中的规则，我们再去使用，肯定会发出感慨：神奇、复杂、好用。<br>","more":"<br>正则到底强在哪里呢？我们举个简单的例子：在一串包含数字以及英文字母的字符串中中找出数字并保存在数组中。代码如下：</p>\n<p><strong>不使用正则：</strong><br>遍历字符串，利用字符串charAt()的方法将字符串中的数字检索出来，再push数组中，然后继续检索再push到数组中直到结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'12 javascript 34 html5 33 php 77 css'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> figure = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i=<span class=\"string\">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">            figure += str.charAt(i);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(figure)&#123;</span><br><span class=\"line\">            arr.push(tmp);</span><br><span class=\"line\">            figure =<span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[ \"12\" , \"34\" , \"5\" , \"33\" , \"77\" ]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>而使用正则只需要如下短短的一行代码</strong>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"书写风格\"><a href=\"#书写风格\" class=\"headerlink\" title=\"书写风格\"></a>书写风格</h3><p>javascript中的正则是Perl5的正则表达式语法的大子集，所以在javascript中创建正则有js风格和petl风格两种。</p>\n<ol>\n<li>JS 风格： new RegExp(‘patten’,’ig’)</li>\n<li>perl风格：/patten/ig</li>\n</ol>\n<p>JS风格其实就是通过RegExp对象来表示，而perl风格更普遍的叫法是RegExp直接量。这两个语法都是一样的，只是转义字符的写法不同。</p>\n<h3 id=\"什么是正则\"><a href=\"#什么是正则\" class=\"headerlink\" title=\"什么是正则\"></a>什么是正则</h3><p>正则表达式的结构与数学表达式很类似。</p>\n<p>一个数学表达式由若干个“项”组成，“项”与“项”之间用加号或减号相连</p>\n<p>为了方便理解，让我们先来看看大家一个典型的的数学表达式 <code>(x+3)*2+y</code>：</p>\n<p>这个数学表达式中<code>(x+3)*2</code>和<code>y</code>分别是两个项。每个项又由若干个<strong>因子</strong>组成，因子之间用乘号或除号相连。这里第一个项有两个因子<code>(x+3)</code>和<code>2</code>，而第二个项只有一个因子“y”。每个因子可以是一个简单的数，一个代数变量，也可以是放在括号里面的一个表达式，括号中的表达式称为<strong>子表达式</strong>。这里<code>x+3</code>就是一个子表达式。</p>\n<p>与数学表达式的<strong>因子</strong>相对应，构成正则表达式的部件称为<strong>单位</strong>；<strong>项</strong>则与正则表达式的子表达式相对应。而从逻辑上讲，子表达式之间是串接的关系，一个字符串必须与每个子表达式依次相匹配，才算与这个表达式相匹配。</p>\n<h3 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h3><p>为了更好的学习正则，我们再来学习下正则表达式的一些术语</p>\n<ol>\n<li><p>匹配（matching）<br>一个正则表达式“匹配”一个字符串，其实是指这个正则表达式能在字符串中找到匹配文本。</p>\n</li>\n<li><p>元字符（metacharacter）<br>只有在字符组外部并且是在未转义之前的情况下，才是一个元字符。</p>\n</li>\n<li><p>子表达式（subexpression）<br> 子表达式指的一般是整个正则表达式中的一部分，通常是括号内的表达式，或者有|分隔的多选分支。子表达式由不可分割的单位组成。与多选分支不同的是，量词作用的对象是他们之前紧邻的子表达式。而如果量词之前紧邻的是一个括号保卫的自表达式，则不管其多么复杂都被视为一个单元。</p>\n</li>\n</ol>\n<h3 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h3><p>上例中斜杠后面的 <code>ig</code>是匹配模式，可选的值有3个：<code>i</code>,<code>g</code>,<code>m</code>。其含义如下：</p>\n<ul>\n<li><code>i</code>：为 ignore case，即 忽略大小写。</li>\n<li><code>g</code>：为 global search，即全局搜索。</li>\n<li><code>m</code>：为 moltiline search，即多行搜索。</li>\n</ul>\n<p>所以，一个完整正则表达式是由一个个<strong>子表达式</strong>组成的，而<strong>子表达式</strong>则是由各种符号组成，这些符号按照功能可以分成以下类：转义字符、预定义特殊字符、字符类、量词、贪婪模式和非贪婪模式、匹配位置、分组、非捕获性分组、前瞻（零宽断言）。</p>\n<h2 id=\"元字符组成部分\"><a href=\"#元字符组成部分\" class=\"headerlink\" title=\"元字符组成部分\"></a>元字符组成部分</h2><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>什么是转义字符？在\\后面加字符就可以转义为特殊字符。</p>\n<p>例如： <code>\\n</code>匹配一个换行符， <code>\\\\</code>匹配“\\”。</p>\n<h3 id=\"预定义特殊字符\"><a href=\"#预定义特殊字符\" class=\"headerlink\" title=\"预定义特殊字符\"></a>预定义特殊字符</h3><ol>\n<li><code>\\o</code>:Nol字符。</li>\n<li><code>\\t</code>:水平制表符。</li>\n<li><code>\\v</code>:垂直制表符。</li>\n<li><code>\\n</code>:换行符。</li>\n<li><code>\\r</code>:回车符。</li>\n<li><code>\\b</code>:退格符。 只有出现在字符中才有效，即[]（中括号）中。</li>\n</ol>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><ol>\n<li><code>[ ]</code>:表示范围，一个字符的集合，匹配该集合中的任意一个字符，例如 <code>[abc]</code>就可以匹配”css”中的c；<br>如果上例前面加 ^元字符，形如<code>[^asd]</code>，则表示匹配除了asd的其他字符；</li>\n</ol>\n<p>如果觉得匹配的字符太多，而且类型相似，则可以用-元字符表示，那么上例就可以这么写<code>[a-c]</code>这么写，所以上例也可以这么写 <code>[^a-d]</code></p>\n<ol>\n<li><code>\\w</code>和<code>\\W</code>:<code>\\w</code>表示匹配任何ASCII字符组成的单词，等价于[a-zA-Z0-9]；<code>\\W</code>表示匹配不是ASCII字符组成的单词等价于<code>[^a-zA-Z0-9]</code>。</li>\n<li><code>\\s</code>和<code>\\S</code>:<code>\\s</code>匹配空白符，等价于<code>[\\t\\n\\x0B\\f\\r]</code>；<code>\\S</code>则匹配非空白字符，等价于<code>[^\\t\\n\\x0B\\f\\r]</code>。</li>\n<li><code>\\d</code>和<code>\\D</code>:<code>\\d</code>匹配数字字符，等价于<code>[0-9]</code>；<code>\\D</code>匹配数字字符，等价于<code>[^0-9]</code></li>\n<li><p><code>.</code>:javascript有点特殊，由于浏览器的解析引擎不同，<code>.</code>的匹配范围也有所不同。</p>\n<ol>\n<li><p>IE8以下：<br>.匹配所有除了换行符<code>/n</code>换行符之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n<li><p>IE9以上以及其他浏览器<br>.匹配所有除了换行符<code>/n</code>换行符和回车符<code>\\r</code>之外的任意字符。等同于<code>[^\\n\\r]</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\r\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"regexp\">/./</span>.test(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*IE8以下输出true false；IE9以上及其他浏览器输出 false false*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>首先我们得了解匹配量词都是匹配优先的，简单说就是匹配量词的结果总是尝试匹配尽可能多的字符，直到匹配上限为止，然后为了让整个表达式匹配成功，就需要“释放”之前优先匹配的字符，所以也被称为贪婪模式。</p>\n<p>而既然有贪婪模式，则一定也有非贪婪模式。</p>\n<p>对于贪婪模式和非贪婪模式影响的是被量词修饰的子表达式的匹配行为，既在贪婪模式下，在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在在整个表达式匹配成功的前提下，尽可能少的匹配。而且允许允许接下来的正则继续匹配。</p>\n<p>贪婪模式的量词，也叫简单量词，如下：</p>\n<p><code>{n}</code>:n是一个正整数，表示前一个子表达式匹配n次。例如： /o{2}/匹配两次o，它可以匹配”footer“，但是不能匹配hot中的o。<br><code>{n,}</code>:n是一个正整数，表示前一个子表达式至少匹配n次。例如：/o{2,}/，它可以匹配“footer”，也可以匹配“fooooooooooter”。<br><code>{n,m}</code>:n、m都是正整数，表示至少匹配n次，至多m次。<br><code>?</code>:等价于{0,1}<br><code>+</code>:等价于{1,}<br><code>*</code>:等价于{0,}<br>而在贪婪模式后加上 ?就变成了非贪婪模式。</p>\n<h3 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h3><p>在上面提到的一个前提条件就是在整个表达式匹配成功，为什么要强调这个前提条件呢，看如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">'aAaAaAb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?/i</span>.exec(pattern)); <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/a+?b/i</span>.exec(pattern)); <span class=\"comment\">//aAaAaAb</span></span><br></pre></td></tr></table></figure>\n<p>全部是在忽略大小写的模式下：</p>\n<ol>\n<li>第一个匹配结果解释：采用贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了贪婪模式，所以仍然向右匹配，向右再也没有可以成功匹配的子字串，匹配结束，最终匹配结果为“aAaAaA”</li>\n<li>第二个匹配结果解释：采用非贪婪模式，在匹配第一个“a”时，整个表达式匹配成功了，由于采用了非贪婪模式，所以结束匹配，最终匹配结果为“a。”</li>\n<li>第三个匹配结果解释：采用贪婪模式，所以a+仍然可以匹配到“aAaAaA”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须让出前面的匹配内容，所以最终匹配结果为“aAaAaAb”。</li>\n<li>第四个匹配结果解释：采用非贪婪模式，所以a+任然可以匹配到“a”，但是由于后面的 b无法匹配成功，所以为了让整个表达式匹配成功，a+必须继续匹配后面的直到“b”，所以最终匹配结果跟采用贪婪模式的匹配结果一样，也为“aAaAaAb”。</li>\n<li>所以，不管是贪婪模式还是非贪婪模式，都只有在整个表达式匹配成功的前提下量词才能影响字表达式的匹配行为。贪婪跟非贪婪模式主要功能是提高匹配效率，贪婪模式下可能会越过后面的正则，从而会导致匹配的回溯问题。所以在前面的正则坑会会越过后面的正则的情况下，请使用非贪婪模式。</li>\n</ol>\n<h3 id=\"匹配位置\"><a href=\"#匹配位置\" class=\"headerlink\" title=\"匹配位置\"></a>匹配位置</h3><p>前面说的量词是修饰子字符串的重复次数，而匹配位置则是来表示子字符串的出现位置，匹配的只是一个位置，所以是零宽度的。</p>\n<ol>\n<li><code>^</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之后的位置。</li>\n<li><code>$</code>:匹配文字的开头。如果正则表达式的匹配模式设置为’,’m’则也匹配每个换行符或者回车符之前的位置。</li>\n<li><code>/b</code>:匹配单词边界，不匹配任何字符。</li>\n</ol>\n<p>所谓的“单词”，就是位于\\w（ASCII单词）和\\W（非ASCII单词）之间的边界，或者位于ASCII单词与字符串开始或者结尾的合法位置。所以\\/bjava/b\\不匹配“javascript is more than java”中的javascript中java而只匹配之后的单词“java”。</p>\n<p>而因为javascript只支持ASCII字符不支持Unicode的，所以在javascript这门语言中\\w就可以等价于[a-zA-Z0-9]，也因为于此，javascript中\\w是不包括中文已经其他Unicode码特殊符号的，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"html5_css3中文_h5$c3&amp;汉字%\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/\\w+/g</span>)); <span class=\"comment\">//\"html5_css3\" , \"_h5\" , \"c3\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(<span class=\"regexp\">/.\\b./g</span>));<span class=\"comment\">//\"3中\" , \"文_\" , \"5$\" , \"3&amp;\"</span></span><br></pre></td></tr></table></figure>\n<p>第一个例子中\\w+匹配了”html5_css3” , “<em>h5” , “c3”三个字符串，而其他的因为javascript只能匹配ASCII码的字符，所以除了字母、数字、“</em>“以及”$“的字符就都成单词的边界；而当使用.\\b.（除了换行符之外的任意字符，.匹配了那些\\w无法识别的Unicode码字符）匹配时，我们又得到”3中” , “文<em>“ , “5&amp;” ,说明这个字符串中有4个分界点5个子字符串，分别在”3中” , “文</em>“ , “5&amp;”之间，而四个子字符串分别是”html5_css3”，”中文,”_h5”,”$c3”,”&amp;汉字%”。</p>\n<p>所以，在处理一些字符串时，如果要使用\\b得先确认是否还有ASCII码的字符。</p>\n<p>注意：\\b在[]中表示退格。</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>学习完以上的，应该会知道中括号用来限定字符类的范围，大括号则用来指定重复的次数，而小括号除了限制多选项的范围以及将若干字符组合为一个单位让量词能影响这个单元。还有一个用途就是，小括号能”记住“它们匹配成功的文本，在正则表达式的后面引用前面“记住”的匹配文本，通过 \\后加以为或者多位数字来实现，也就是“反向引用”。</p>\n<p>看实际例子吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1分组+量词</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/(js)&#123;2&#125;/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//2分组+范围</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/[JL]script/</span>.test(<span class=\"string\">\"Lscript\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3反向引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsJs\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/([jJ])s\\1/</span>.test(<span class=\"string\">\"jsjs\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>例1和例2将括号内的若干字符组合为一个单位。而例3因为\\1引用的是之前匹配成功的字符串，所以例三中\\1就只能匹配”js“而不能匹配”Js“。</p>\n<p>然后介绍第二个分组的符号|。</p>\n<p>与小括号不同，小括号内的是一个整体（独立的子表达式），而|分割开的各分支是多选分支，即你可以选择|前面的也可以选择|后面的，如果有多个|隔开则是多选几。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(html5|css3|js)!!/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"html5!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"css3!!\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(<span class=\"string\">\"js!!\"</span>));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非捕获性分组\"><a href=\"#非捕获性分组\" class=\"headerlink\" title=\"非捕获性分组\"></a>非捕获性分组</h3><p>对带圆括号的子表达式的引用确实强大，但是既然能够反向引用，正则引擎肯定是保存了括号内的一些信息。所以从效率角度来看，如果只是为了分组而不反向引用的话就采取非捕获性分组的方法。要创建一个非捕获性分组，只要在捕获性分组的左括号的后面紧跟一个问号与冒号就行了。</p>\n<p>从字面意思来看：非捕获分组能分组，但是不能捕获各个组的信息。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern1.replace(<span class=\"regexp\">/(\\w+),(?:\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>));<span class=\"comment\">//$2,JS,CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><p>前瞻也是属于零宽断言，说白了就是匹配位置的高级变体。前面我们说过的只是单纯的开头、结尾以及单词的边界，而前瞻的匹配则更加随意，如下：</p>\n<ol>\n<li><code>(?=p)</code>:要求之后的字符必须与p匹配</li>\n<li><code>(?!p)</code>:要求之后的字符必须不与p匹配</li>\n</ol>\n<p>如下实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/java(?!Scrit)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/java(?=Scrit)/</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaScrit\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.test(<span class=\"string\">\"javaB\"</span>));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>前瞻的作用就是给正则增加一个附加条件，只有满足条件，才能继续走下去，前瞻匹配的结果是不纳入结果里的，只是一个条件。</p>\n<p>支持正则方法有支持正则的字符串方法和正则自身的方法</p>\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><h3 id=\"字符串搜索：\"><a href=\"#字符串搜索：\" class=\"headerlink\" title=\"字符串搜索：\"></a>字符串搜索：</h3><p><code>search()</code>方法用于检索字符串中指定的子字符串，返回匹配的字符的位置（0-~）。</p>\n<p>如果没有找到匹配的字符，则返回-1；将忽略RegExp中的全局模式，只返回第一个匹配的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"hello html5 js css\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.search(<span class=\"regexp\">/Html5/i</span>));<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串匹配：\"><a href=\"#字符串匹配：\" class=\"headerlink\" title=\"字符串匹配：\"></a>字符串匹配：</h3><p><code>match()</code>方法可以返回匹配结果的数组，并且依赖于regexp的全局标志g。如果没有全局标志g，则只匹配一次；如果有，则匹配多次直到结束，最后返回一个存有匹配匹配文本的数组。</p>\n<p><code>match()</code>即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的索引位置。如果您需要这些信息，可以使用 RegExp.exec()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"string\">\"2012 years 12 month 20 is the end of the world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pattern.match(<span class=\"regexp\">/\\d+/g</span>));<span class=\"comment\">//[\"2012\",\"12\",\"20\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串替代：\"><a href=\"#字符串替代：\" class=\"headerlink\" title=\"字符串替代：\"></a>字符串替代：</h3><p><code>replace()</code>方法用于替换字符串或者正则表达式匹配的子字符串，并且也依赖于regexp的全局标志g。如果没有全局标志g，则只替换第一个匹配的子字符串；如果有，则替换所有匹配的子字符串。</p>\n<p><code>replace()</code>的第二个参数可以是字符串，也可以是函数。如果是字符串，则由每个匹配的字符串替换，其中 $ 具有特殊的含义：</p>\n<ol>\n<li><code>$n</code>：其中n表示1-99，表示匹配的子字符串中的第n个，n就是带圆括号的子表达式的位置。</li>\n<li><code>$&amp;</code>：全部匹配的子字符串</li>\n<li>`$``：匹配子串左侧的文本</li>\n<li><code>$&#39;</code>：匹配子串右侧的文本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"string\">\"JS,HTML5,CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replace1 = pattern1.replace(<span class=\"regexp\">/(\\w&#123;1,&#125;),(\\w+)/</span>, <span class=\"string\">\"$2,$1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace1);<span class=\"comment\">//HTML5,JS,CSS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> replace2 = pattern1.replace(<span class=\"regexp\">/(\\w+),/g</span>,<span class=\"string\">\"$1-\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(replace2);<span class=\"comment\">//JS-HTML5-CSS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串分割：\"><a href=\"#字符串分割：\" class=\"headerlink\" title=\"字符串分割：\"></a>字符串分割：</h3><p><code>split()</code>方法用于把一个字符串分割成字符串数组。该方法有两个参数，第一个参数是指定分割的边界；第二个参数是指定返回数组的长度，如果没有则字符串之间的都会被分割。</p>\n<p>若使用 <code>split(&quot;&quot;)</code> 则会将单词分割成字母<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"string\">\"HTML5 JS CSS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord1 = pattern.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sWord2 = pattern.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord1);<span class=\"comment\">//[ \"HTML5\" , \"JS\" , \"CSS\" ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sWord2);<span class=\"comment\">//[ \"H\" , \"T\" , \"M\" , \"L\" , \"5\" , \" \" , \"J\" , \"S\" , \" \" , \"C\" , \"S\" , \"S\"]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RegExp-对象的方法\"><a href=\"#RegExp-对象的方法\" class=\"headerlink\" title=\"RegExp 对象的方法\"></a>RegExp 对象的方法</h2><h2 id=\"test：\"><a href=\"#test：\" class=\"headerlink\" title=\"test：\"></a>test：</h2><p>test()方法用于检索要检测的字符串是否存在，若含有与regExp相匹配的文本，则返回true，否则返回false</p>\n<h2 id=\"exec：\"><a href=\"#exec：\" class=\"headerlink\" title=\"exec：\"></a>exec：</h2><p>exec()方法用于匹配字串，跟不是全局的match()方法很类似，但是它不仅能检索字符串中指定的值，返回找到的值，还能确定其位置。 比match()强大。如果利用 exec() 的lastIndex属性反复调用同样可以模拟match()全局检索字符串的效果。</p>"},{"title":"入门 mongoose","date":"2019-08-01T06:07:19.000Z","_content":"\n\n{% blockquote mongoose https://github.com/Automattic/mongoose  %}\nMongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nMongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。\n{% endblockquote %}\n<!--more-->\n\n## 准备工作\n1. 首先电脑必须安装 [MongoDB](https://www.mongodb.com/) 和 [NodeJS](http://nodejs.org/)。\n2. 项目中使用npm来安装mongoose `npm install mongoose --save`\n3. 引入`mongoose`就能使用了。\n    ````javascript\n        // Using Node.js `require()`\n        const mongoose = require('mongoose');\n\n        // Using ES6 imports\n        import mongoose from 'mongoose';\n    ````\n\n## 连接\n`connect`用于创建连接数据库，也可以调用使用`disconnect`断开连接。如下代码：\n````javascript\nconst dbPath = 'mongodb://localhost/test';\nconst database = () => {\n    mongoose.set('debug', true)\n\n    const connect = function(){\n        mongoose.connect(dbPath, function(err) {\n            if(err){\n                console.log('连接失败');\n            }else{\n                console.log('连接成功');\n            }\n        })\n    }\n\n    connect();\n\n    /**\n    * 断开重新连接\n    */\n    mongoose.connection.on('disconnected', () => {\n        connect();\n    })\n\n    /**\n    * 连接成功\n    */\n    mongoose.connection.on('connected', function () {    \n        console.log('已经连接成功');  \n    }); \n\n    /**\n    * 连接异常\n    */\n    mongoose.connection.on('error', err => {\n        console.error('异常' + err)\n    })\n\n    mongoose.connection.on('open', async () => {\n        console.log('Connected to MongoDB ', dbPath)\n    })\n}\n\ndatabase()\n````\n如果要指定用户，可在连接的数据库地址上形如 'mongodb://用户名:密码@IP地址/数据库名称' 结构上修改。\n\n## Schema\n每一个`schema`都是一个文档的映射结构，无法操作数据库，但是在`schema`上可以定义属性、静态方法、实例方法、查询辅助、索引、虚拟字段以及配置项。\n### 允许的类型\n文档中字段允许的属性：\n1. String\n2. Number\n3. Date\n4. Buffer\n5. Boolean\n6. Mixed\n7. ObjectId\n8. Array\n9. Decimal128\n10. Map\n\n实例如下：\n````javascript\nvar schema = new Schema({\n    name:    String,\n    binary:  Buffer,\n    living:  Boolean,\n    updated: { type: Date, default: Date.now },\n    age:     { type: Number, min: 18, max: 65 },\n    mixed:   Schema.Types.Mixed,\n    _someId: Schema.Types.ObjectId,\n    decimal: Schema.Types.Decimal128,\n    array: [],\n    ofString: [String],\n    ofNumber: [Number],\n    ofDates: [Date],\n    ofBuffer: [Buffer],\n    ofBoolean: [Boolean],\n    ofMixed: [Schema.Types.Mixed],\n    ofObjectId: [Schema.Types.ObjectId],\n    ofArrays: [[]],\n    ofArrayOfNumbers: [[Number]],\n    nested: {\n        stuff: { type: String, lowercase: true, trim: true }\n    },\n    map: Map,\n    mapOfString: {\n    type: Map,\n    of: String\n    }\n})\n// 如下使用\n\nvar Thing = mongoose.model('Thing', schema);\n\nvar m = new Thing;\nm.name = 'Statue of Liberty';\nm.age = 125;\nm.updated = new Date;\nm.binary = Buffer.alloc(0);\nm.living = false;\nm.mixed = { any: { thing: 'i want' } };\nm.markModified('mixed');\nm._someId = new mongoose.Types.ObjectId;\nm.array.push(1);\nm.ofString.push(\"strings!\");\nm.ofNumber.unshift(1,2,3,4);\nm.ofDates.addToSet(new Date);\nm.ofBuffer.pop();\nm.ofMixed = [1, [], 'three', { four: 5 }];\nm.nested.stuff = 'good';\nm.map = new Map([['key', 'value']]);\nm.save(callback);\n````\n\n### 索引\n`mongoose`自动会给每个`document`增加索引，可以在`connect`设置关闭所有的自动索引，也可以单独针对某个`doucument`设置。\n````javascript\nschema.set('autoIndex', false);\n// 或者\nnew Schema({}, {autoIndex: false});\n````\n\n### 虚拟字段\n虚拟字段不会写入数据库中，可以利用它来格式化和组合属性值。\n````javascript\nvar addressSchema = new Schema({\n    address: {   \n        city: String,   \n        street: String \n    } \n});\n// 设置获取虚拟字段的get方法\naddressSchema.virtual('address.full').get(function(){\n    return this.address.city + '/' + this.address.street\n})\n// 设置赋值虚拟字段的set方法\naddressSchema.virtual('address.full').set(function(address){\n    var split = address.split('/');\n    this.address.city = split[0];\n    this.address.street = split[1];\n})\nvar Address = mongoose.model('Address', addressSchema);\n\nvar address1 = new Address({\n    address: {\n        city: 'shanghai',\n        street: 'jinzhong road'\n    }\n})\n// 通过虚拟字段获取地址详情\nconsole.log(address1.address.full) // shanghai/jinzhong road\n// 通过虚拟字段设置地址详情\naddress1.address.full = \"beijing/gugong\";\nconsole.log(address1.address.city) // beijing\nconsole.log(address1.address.street) // gugong\naddress1.save() // address.full将不会被保存到数据库中\n\n````\n\n### 配置项\n`Schema`可以使用配置项来设置，有两种方式设置：\n````javascript\nnew Schema({…}, options)\n\nvar schema = new Schema({...});\nschema.set(option, value);\n````\n#### 有效的配置项\n* autoIndex（默认true），创建默认索引（_id）。\n* capped，限制一次操作的量。\n* collection，定义集合的名字，默认是model名+s\n* id _id（默认true），如果`schema`中没有定义id，`mongoose`默认分配一个id域\n* read \n* safe（默认true），在操作的时候要等待返回的MongoDB返回的结果；否则则不等待\n* shardKey 让mongodb做分布式操作 \n* strict（默认enabled）如果实例中的字段没在schema中定义过，那么这个字段就不会被保存进数据库\n* toJSON，实例调用toJson方法后，针对返回的数据做处理\n* toObject，实例调用toJson方法后，针对返回的数据做处理\n* versionKey 版本锁，设置在每个文档上，默认键名为 `_v`。\n* typeKey \n* validateBeforeSave 保存数据库时会自动验证\n* skipVersioning \n* timestamps 在schema设置这个选项，会被自动添加createdAt和updatedAt，默认的名字是createdAt和updatedAt\n* useNestedStrict 是否检查childSchem的配置\n* retainKeyOrder，是否改变键的顺序\n\n## 验证\n`Schmema`里只设置属性的话，缺少字段也能保存；多了属性的话，虽然不会把多余的属性保存，但是还是进入数据库了。所以可以需要增加验证属性来限制下，就能避免像上面这些情况的发生了。常用的验证如下：\n````javascript\nrequired  数据必须填写\ndefault  默认值\nvalidate  自定义匹配\nmin  最小值(只适用于数字)\nmax  最大值(只适用于数字)\nmatch  正则匹配(只适用于字符串)\nenum   枚举匹配(只适用于字符串)\n````\n1. required：将某个字段设置为必填字段，如果没有这个必填字段，则不会被保存。\n2. default: 如果不设置某个字段，则会取默认值\n3. min | max: 将某个字段设置取值范围\n4. match: 字段必须包含指定字符\n5. enum: 枚举值必须在枚举的范围内\n6. validate：定义一个函数，返回`true`则通过验证；`false`则不通过验证。\n\n## Model\n就是由`Schema`生成的模型，可以对数据进行操作。\n### 自定义静态方法\n通过`Schema`的`statics`属性给`model`添加方法，如下使用\n````javascript\n// 查询所有同名的用户\npersonSchema.statics.findByName = function(name, callback){\n    this.model('Person').find({'name':name}, callback);  \n}\nvar Person = mongoose.model('Person', personSchema)\nPerson.findByName('lan', function(err, persons) {\n    console.log(persons);\n});\n````\n\n### 查询辅助\n通过`Schema`给`model`的查询增加辅助函数，如下使用\n````javascript\nvar personSchema = Schema({\n    name: String,\n    age: Number,\n})\n// 查询所有同名的用户\npersonSchema.query.byName = function(name, callback){\n    return this.find({name: name});\n}\nvar Person = mongoose.model('Person', personSchema)\n//使用\nPerson.find().byName('lan').exec(function(err, users){\n    console.log(users);\n})\n````\n\n\n## Entity\n由`Model`生成的实例，可以定义实例方法，由生成的实例对数据进行操作。\n### 自定义实例方法\n通过`Schema`的`methods`属性给`document`添加方法，如下使用\n````javascript\nvar personSchema = Schema({\n    name: String\n})\n// 查询所有同名的用户\npersonSchema.methods.findByName = function(name, callback){\n    this.model('Person').find({'name':name}, callback);  \n}\n// 自定义 showName 方法\npersonSchema.methods.showName = function(){\n    console.log(this.name)\n}\nvar Person = mongoose.model('Person', personSchema)\nvar felyne = new Person({name: 'lan'})\nfelyne.showName()\nfelyne.findByName('lan' ,function(err, result){\n    console.log(result)\n})\n````\n\n\n以上讲完了mongoose的基本模型，接着我们介绍下mongoose的基本方法。也就是“增删改查”的四种方法。\n\n## 增\n### 实例的save方法\n先实例化，然后再调用`save`方法。\n语法：`save([options], [options.safe], [options.validateBeforeSave], [fn])`，例子如下：\n````JavaScript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nvar felyne = new Person({name: 'lan'})\nfelyne.save((err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### Model的create方法\n直接用`Model`调用`create`方法。\n语法：`Model.create(doc(s), [callback])`，例子如下：\n````javascript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nPerson.create({name: 'lan'},{name: 'van'}, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### Model的insertMany方法\n也是用`Model`调用，跟`create`相比就是多了`operation`参数。\n语法：`Model.insertMany(doc(s), [options], [callback])`，例子如下：\n````javascript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nPerson.insertMany({name: 'lan'},{name: 'van'}, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n## 删\n### 实例的remove方法\n删除实例。\n语法：`document.remove([callback])`，例子如下：\n````javascript\ndocument.remove((err, doc) => console.log(err))\n````\n\n\n### Model的remove方法\n删除符合条件的所有数据。\n语法：`model.remove(conditions, [callback])`，例子如下：\n````javascript\nmodel.remove({name:/60/},(err, doc) => console.log(err))\n````\n\n### findOneAndRemove方法\n只删除符合条件的第一条数据\n语法：`Model.findOneAndRemove(conditions, [options], [callback])`，例子如下：\n````javascript\nModel.findOneAndRemove({age:{$lt:60}},(err, doc) => console.log(err))\n````\n\n### findByIdAndRemove方法\n通过ID删数据\n语法：`Model.findByIdAndRemove(id, [options], [callback])`，例子如下：\n````javascript\nModel.findByIdAndRemove(id, (err, doc) => console.log(err))\n````\n\n## 改\n### update\n更改符合条件的数据\n语法：`Model.update(conditions, doc, [options], [callback])`，第一个参数表示查询条件，第二个参数是需要修改的数据，第三个参数控制选项，第四个参数是回调函数。options有如下选项\n* safe (boolean)： 默认为true。安全模式。\n* upsert (boolean)： 默认为false。如果不存在则创建新记录。\n* multi (boolean)： 默认为false。是否更新多个查询记录。\n* runValidators： 如果值为true，执行Validation验证。\n* setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。\n* strict (boolean)： 以strict模式进行更新。\n* overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。\n````javascript\nModel.update({age:{$gte:60}},{age:61}, (err,raw) => {\n    //{ n: 1, nModified: 1, ok: 1 }\n    console.log(raw);\n})\n````\n\n### updateMany\n只能更新多个的update，就是options为`{multi:true}`的update。\n语法：`Model.updateMany(conditions, doc, [options], [callback])`。例子如下：\n````javascript\n// 将姓名为lan的用户年龄变为70\nModel.updateMany({name:/lan/},{age:50},function(err,raw){\n    //{ n: 2, nModified: 2, ok: 1 }\n    console.log(raw);\n});\n````\n### updateOne\n只能更新一个的update，就是options为`{multi:false}`的update。\n语法：`Model.updateOne(conditions, doc, [options], [callback])`，例子如下：\n````javascript\n// 将姓名为lan的第一个用户年龄变为70\nModel.updateOne({name:/lan/},{age:70}, function(err,raw){\n    //{ n: 2, nModified: 2, ok: 1 }\n    console.log(raw);\n});\n````\n### 修改更改器\n1. `$inc`:增减修改器，只对数字有效。\n2. `$set`:指定键并修改，不存在则创建。\n3. `$unset`:删除一个键。\n````javascript\n// inc \n Model.update({\n    'age': 60\n}, {\n    '$inc': {\n        'age': 61\n    }\n});\n// 执行后: age=23\n// set \n Model.update({\n    'age': 60\n}, {\n    '$set': {\n        'age': '百岁老人'\n    }\n});\n// 执行后: age=百岁老人\n// set \n Model.update({\n    'age': 60\n}, {\n    '$unset': {\n        'age': '百岁老人'\n    }\n});\n// 执行后: 删除了age键\n````\n\n### 数组更改器\n1. `$push`: 给一个键push一个数组成员,键不存在会创建\n2. `$addToSet`:向数组中添加一个元素,如果存在就不添加。\n3. `$each`:遍历数组。\n3. `$pop`:向数组中尾部删除一个元素\n3. `$pull`:向数组中删除指定元素。\n````javascript\n// inc \n Model.update({\n    'age': 60\n}, {\n    '$push': {\n        'array': 1\n    }\n});\n// 执行后: 增加一个 array 键,类型为数组, 有一个成员 10\nModel.update({\n    'age': 60\n}, {\n    '$push': {\n        'array': {\n            '$each': [1, 2, 3, 4, 5]\n        }\n    }\n});\n// 执行后: array : [10,1,2,3,4,5]\n````\n\n\n## 查\n### find\n查询所有符合条件的数据。\n语法：`Model.find(conditions, [projection], [options], [callback])`,第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数。如果参数为空则传null\n#### 查询条件\n* $or　　　　或关系\n* $nor　　　 或关系取反\n* $gt　　　　大于\n* $gte　　　 大于等于\n* $lt　　　　小于\n* $lte　　　 小于等于\n* $ne　　　　不等于\n* $in　　　　在多个值范围内\n* $nin　　　 不在多个值范围内\n* $all　　　 匹配数组中多个值\n* $regex　　 正则，用于模糊查询\n* $size　　　匹配数组大小\n* $maxDistance　范围查询，距离（基于LBS）\n* $mod　　　　取模运算\n* $near　　　 邻域查询，查询附近的位置（基于LBS）\n* $exists　　 字段是否存在\n* $elemMatch　匹配内数组内的元素\n* $within　　　范围查询（基于LBS）\n* $box　　　　 范围查询，矩形范围（基于LBS）\n* $center　　　范围醒询，圆形范围（基于LBS）\n* $centerSphere　范围查询，球形范围（基于LBS）\n* $slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素\n* $where       可以使用任意JavaScript作为条件\n\n````javascript\n// 查询名为lan年龄大于60的用户\nModel.find({name:/lan/,age:{$gte:60}},(err,docs)=>{\n    console.log(docs);\n})\n// 查询名为lan的用户，只输出name，不输出id\nModel.find({name:/lan/},{name:1,_id:0},(err,docs)=>{\n    console.log(docs);\n})\n// 找出跳过前两条的所有数据\nModel.find(null,null,{skip:2},(err,docs)=>{\n    console.log(docs);\n})\n````\n\n### findById\n通过id查询数据。\n语法：`Model.findById(id, [projection], [options], [callback])`，除了查询条件是id，其他参数跟`find`一样，例子如下：\n````javascript\n// 查询某个id的用户\nModel.findById(id,(err,doc)=>{\n    console.log(doc);\n})      \n````\n\n### findOne\n返回查询到的第一个数据\n语法：`Model.findOne([conditions], [projection], [options], [callback])`，用法跟`find`一样，只是只返回查到的第一个数据，例子如下：\n````javascript\n// 查询某个id的用户\nModel.findOne({name:/lan/,age:{$gte:60}},(err,doc)=>{\n    console.log(doc);\n})      \n````\n\n### 查询后处理\n所谓的查询后处理，就是在查询到的结果里通过以下方法再处理，方法如下：\n* sort     排序\n* skip     跳过\n* limit    限制\n* select   显示字段\n* exect    执行\n* count    计数\n* distinct 去重\n\n\n## 前后钩子\n中间件函数，在执行某些操作之前执行某些函数，在schema上定义。\n以下函数可以设置前后钩子：\n````javascript\n    validate\n    save\n    remove\n    count\n    find\n    findOne\n    findOneAndRemove\n    findOneAndUpdate\n    insertMany\n    update\n````\n\n### pre()\n`pre()`是在执行方法之前执行的方法。\n````javascript\nvar schema = new mongoose.Schema({ age:Number, name: String, });  \nschema.pre('find',function(next){\n    console.log('我是pre方法1');\n    next();\n});\nschema.pre('find',function(next){\n    console.log('我是pre方法2');\n    next();\n});  \nvar user = mongoose.model('user', schema);\nuser.find(null, {name:1}, (err,docs) => {\n    console.log(docs[0]);\n})    \n/*\n我是pre方法1\n我是pre方法2\n{ name: 'lan'}\n*/\n````\n\n### post()\n`post()`是执行某些操作前最后执行的方法。\n````javascript\nvar schema = new mongoose.Schema({ age:Number, name: String, });  \nschema.pre('post',function(next){\n    console.log('我是pre方法1');\n    next();\n});\nschema.pre('post',function(next){\n    console.log('我是pre方法2');\n    next();\n});  \nvar user = mongoose.model('user', schema);\nuser.find(null, {name:1}, (err,docs) => {\n    console.log(docs[0]);\n})    \n/*\n我是pre方法1\n我是pre方法2\n{ name: 'lan'}\n*/\n````\n\n## 聚合管道\n可以理解为高级的查询方法。\n语法：`Model.aggregate([options], [callback])`，`options`说明如下：\n* $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。对应project()方法\n* $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。对应match()。\n* $limit：用来限制MongoDB聚合管道返回的文档数。对应limit()方法\n* $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。对应skip()。\n* $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。对应unwind()方法\n* $group：将集合中的文档分组，可用于统计结果。对应group()方法\n* $sort：将输入文档排序后输出。对应sort()方法\n* $geoNear：输出接近某一地理位置的有序文档。对应near()。\n* $sample：随机选择N个\n* $lookup：连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于populate,[联表查询](../mongoose-populate)","source":"_posts/mongoose-api.md","raw":"title: 入门 mongoose\ndate: 2019-08-01 14:07:19\ntags:\n- mongoose\n- nodeJs\n- mongoDB\ncategories:\n- mongoDB\n---\n\n\n{% blockquote mongoose https://github.com/Automattic/mongoose  %}\nMongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nMongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。\n{% endblockquote %}\n<!--more-->\n\n## 准备工作\n1. 首先电脑必须安装 [MongoDB](https://www.mongodb.com/) 和 [NodeJS](http://nodejs.org/)。\n2. 项目中使用npm来安装mongoose `npm install mongoose --save`\n3. 引入`mongoose`就能使用了。\n    ````javascript\n        // Using Node.js `require()`\n        const mongoose = require('mongoose');\n\n        // Using ES6 imports\n        import mongoose from 'mongoose';\n    ````\n\n## 连接\n`connect`用于创建连接数据库，也可以调用使用`disconnect`断开连接。如下代码：\n````javascript\nconst dbPath = 'mongodb://localhost/test';\nconst database = () => {\n    mongoose.set('debug', true)\n\n    const connect = function(){\n        mongoose.connect(dbPath, function(err) {\n            if(err){\n                console.log('连接失败');\n            }else{\n                console.log('连接成功');\n            }\n        })\n    }\n\n    connect();\n\n    /**\n    * 断开重新连接\n    */\n    mongoose.connection.on('disconnected', () => {\n        connect();\n    })\n\n    /**\n    * 连接成功\n    */\n    mongoose.connection.on('connected', function () {    \n        console.log('已经连接成功');  \n    }); \n\n    /**\n    * 连接异常\n    */\n    mongoose.connection.on('error', err => {\n        console.error('异常' + err)\n    })\n\n    mongoose.connection.on('open', async () => {\n        console.log('Connected to MongoDB ', dbPath)\n    })\n}\n\ndatabase()\n````\n如果要指定用户，可在连接的数据库地址上形如 'mongodb://用户名:密码@IP地址/数据库名称' 结构上修改。\n\n## Schema\n每一个`schema`都是一个文档的映射结构，无法操作数据库，但是在`schema`上可以定义属性、静态方法、实例方法、查询辅助、索引、虚拟字段以及配置项。\n### 允许的类型\n文档中字段允许的属性：\n1. String\n2. Number\n3. Date\n4. Buffer\n5. Boolean\n6. Mixed\n7. ObjectId\n8. Array\n9. Decimal128\n10. Map\n\n实例如下：\n````javascript\nvar schema = new Schema({\n    name:    String,\n    binary:  Buffer,\n    living:  Boolean,\n    updated: { type: Date, default: Date.now },\n    age:     { type: Number, min: 18, max: 65 },\n    mixed:   Schema.Types.Mixed,\n    _someId: Schema.Types.ObjectId,\n    decimal: Schema.Types.Decimal128,\n    array: [],\n    ofString: [String],\n    ofNumber: [Number],\n    ofDates: [Date],\n    ofBuffer: [Buffer],\n    ofBoolean: [Boolean],\n    ofMixed: [Schema.Types.Mixed],\n    ofObjectId: [Schema.Types.ObjectId],\n    ofArrays: [[]],\n    ofArrayOfNumbers: [[Number]],\n    nested: {\n        stuff: { type: String, lowercase: true, trim: true }\n    },\n    map: Map,\n    mapOfString: {\n    type: Map,\n    of: String\n    }\n})\n// 如下使用\n\nvar Thing = mongoose.model('Thing', schema);\n\nvar m = new Thing;\nm.name = 'Statue of Liberty';\nm.age = 125;\nm.updated = new Date;\nm.binary = Buffer.alloc(0);\nm.living = false;\nm.mixed = { any: { thing: 'i want' } };\nm.markModified('mixed');\nm._someId = new mongoose.Types.ObjectId;\nm.array.push(1);\nm.ofString.push(\"strings!\");\nm.ofNumber.unshift(1,2,3,4);\nm.ofDates.addToSet(new Date);\nm.ofBuffer.pop();\nm.ofMixed = [1, [], 'three', { four: 5 }];\nm.nested.stuff = 'good';\nm.map = new Map([['key', 'value']]);\nm.save(callback);\n````\n\n### 索引\n`mongoose`自动会给每个`document`增加索引，可以在`connect`设置关闭所有的自动索引，也可以单独针对某个`doucument`设置。\n````javascript\nschema.set('autoIndex', false);\n// 或者\nnew Schema({}, {autoIndex: false});\n````\n\n### 虚拟字段\n虚拟字段不会写入数据库中，可以利用它来格式化和组合属性值。\n````javascript\nvar addressSchema = new Schema({\n    address: {   \n        city: String,   \n        street: String \n    } \n});\n// 设置获取虚拟字段的get方法\naddressSchema.virtual('address.full').get(function(){\n    return this.address.city + '/' + this.address.street\n})\n// 设置赋值虚拟字段的set方法\naddressSchema.virtual('address.full').set(function(address){\n    var split = address.split('/');\n    this.address.city = split[0];\n    this.address.street = split[1];\n})\nvar Address = mongoose.model('Address', addressSchema);\n\nvar address1 = new Address({\n    address: {\n        city: 'shanghai',\n        street: 'jinzhong road'\n    }\n})\n// 通过虚拟字段获取地址详情\nconsole.log(address1.address.full) // shanghai/jinzhong road\n// 通过虚拟字段设置地址详情\naddress1.address.full = \"beijing/gugong\";\nconsole.log(address1.address.city) // beijing\nconsole.log(address1.address.street) // gugong\naddress1.save() // address.full将不会被保存到数据库中\n\n````\n\n### 配置项\n`Schema`可以使用配置项来设置，有两种方式设置：\n````javascript\nnew Schema({…}, options)\n\nvar schema = new Schema({...});\nschema.set(option, value);\n````\n#### 有效的配置项\n* autoIndex（默认true），创建默认索引（_id）。\n* capped，限制一次操作的量。\n* collection，定义集合的名字，默认是model名+s\n* id _id（默认true），如果`schema`中没有定义id，`mongoose`默认分配一个id域\n* read \n* safe（默认true），在操作的时候要等待返回的MongoDB返回的结果；否则则不等待\n* shardKey 让mongodb做分布式操作 \n* strict（默认enabled）如果实例中的字段没在schema中定义过，那么这个字段就不会被保存进数据库\n* toJSON，实例调用toJson方法后，针对返回的数据做处理\n* toObject，实例调用toJson方法后，针对返回的数据做处理\n* versionKey 版本锁，设置在每个文档上，默认键名为 `_v`。\n* typeKey \n* validateBeforeSave 保存数据库时会自动验证\n* skipVersioning \n* timestamps 在schema设置这个选项，会被自动添加createdAt和updatedAt，默认的名字是createdAt和updatedAt\n* useNestedStrict 是否检查childSchem的配置\n* retainKeyOrder，是否改变键的顺序\n\n## 验证\n`Schmema`里只设置属性的话，缺少字段也能保存；多了属性的话，虽然不会把多余的属性保存，但是还是进入数据库了。所以可以需要增加验证属性来限制下，就能避免像上面这些情况的发生了。常用的验证如下：\n````javascript\nrequired  数据必须填写\ndefault  默认值\nvalidate  自定义匹配\nmin  最小值(只适用于数字)\nmax  最大值(只适用于数字)\nmatch  正则匹配(只适用于字符串)\nenum   枚举匹配(只适用于字符串)\n````\n1. required：将某个字段设置为必填字段，如果没有这个必填字段，则不会被保存。\n2. default: 如果不设置某个字段，则会取默认值\n3. min | max: 将某个字段设置取值范围\n4. match: 字段必须包含指定字符\n5. enum: 枚举值必须在枚举的范围内\n6. validate：定义一个函数，返回`true`则通过验证；`false`则不通过验证。\n\n## Model\n就是由`Schema`生成的模型，可以对数据进行操作。\n### 自定义静态方法\n通过`Schema`的`statics`属性给`model`添加方法，如下使用\n````javascript\n// 查询所有同名的用户\npersonSchema.statics.findByName = function(name, callback){\n    this.model('Person').find({'name':name}, callback);  \n}\nvar Person = mongoose.model('Person', personSchema)\nPerson.findByName('lan', function(err, persons) {\n    console.log(persons);\n});\n````\n\n### 查询辅助\n通过`Schema`给`model`的查询增加辅助函数，如下使用\n````javascript\nvar personSchema = Schema({\n    name: String,\n    age: Number,\n})\n// 查询所有同名的用户\npersonSchema.query.byName = function(name, callback){\n    return this.find({name: name});\n}\nvar Person = mongoose.model('Person', personSchema)\n//使用\nPerson.find().byName('lan').exec(function(err, users){\n    console.log(users);\n})\n````\n\n\n## Entity\n由`Model`生成的实例，可以定义实例方法，由生成的实例对数据进行操作。\n### 自定义实例方法\n通过`Schema`的`methods`属性给`document`添加方法，如下使用\n````javascript\nvar personSchema = Schema({\n    name: String\n})\n// 查询所有同名的用户\npersonSchema.methods.findByName = function(name, callback){\n    this.model('Person').find({'name':name}, callback);  \n}\n// 自定义 showName 方法\npersonSchema.methods.showName = function(){\n    console.log(this.name)\n}\nvar Person = mongoose.model('Person', personSchema)\nvar felyne = new Person({name: 'lan'})\nfelyne.showName()\nfelyne.findByName('lan' ,function(err, result){\n    console.log(result)\n})\n````\n\n\n以上讲完了mongoose的基本模型，接着我们介绍下mongoose的基本方法。也就是“增删改查”的四种方法。\n\n## 增\n### 实例的save方法\n先实例化，然后再调用`save`方法。\n语法：`save([options], [options.safe], [options.validateBeforeSave], [fn])`，例子如下：\n````JavaScript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nvar felyne = new Person({name: 'lan'})\nfelyne.save((err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### Model的create方法\n直接用`Model`调用`create`方法。\n语法：`Model.create(doc(s), [callback])`，例子如下：\n````javascript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nPerson.create({name: 'lan'},{name: 'van'}, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n### Model的insertMany方法\n也是用`Model`调用，跟`create`相比就是多了`operation`参数。\n语法：`Model.insertMany(doc(s), [options], [callback])`，例子如下：\n````javascript\nvar personSchema = Schema({\n    name: String\n})\nvar Person = mongoose.model('Person', personSchema)\nPerson.insertMany({name: 'lan'},{name: 'van'}, (err, doc) => {\n    if(err) return console.error(err);\n    console.log(doc);\n})\n````\n\n## 删\n### 实例的remove方法\n删除实例。\n语法：`document.remove([callback])`，例子如下：\n````javascript\ndocument.remove((err, doc) => console.log(err))\n````\n\n\n### Model的remove方法\n删除符合条件的所有数据。\n语法：`model.remove(conditions, [callback])`，例子如下：\n````javascript\nmodel.remove({name:/60/},(err, doc) => console.log(err))\n````\n\n### findOneAndRemove方法\n只删除符合条件的第一条数据\n语法：`Model.findOneAndRemove(conditions, [options], [callback])`，例子如下：\n````javascript\nModel.findOneAndRemove({age:{$lt:60}},(err, doc) => console.log(err))\n````\n\n### findByIdAndRemove方法\n通过ID删数据\n语法：`Model.findByIdAndRemove(id, [options], [callback])`，例子如下：\n````javascript\nModel.findByIdAndRemove(id, (err, doc) => console.log(err))\n````\n\n## 改\n### update\n更改符合条件的数据\n语法：`Model.update(conditions, doc, [options], [callback])`，第一个参数表示查询条件，第二个参数是需要修改的数据，第三个参数控制选项，第四个参数是回调函数。options有如下选项\n* safe (boolean)： 默认为true。安全模式。\n* upsert (boolean)： 默认为false。如果不存在则创建新记录。\n* multi (boolean)： 默认为false。是否更新多个查询记录。\n* runValidators： 如果值为true，执行Validation验证。\n* setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。\n* strict (boolean)： 以strict模式进行更新。\n* overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。\n````javascript\nModel.update({age:{$gte:60}},{age:61}, (err,raw) => {\n    //{ n: 1, nModified: 1, ok: 1 }\n    console.log(raw);\n})\n````\n\n### updateMany\n只能更新多个的update，就是options为`{multi:true}`的update。\n语法：`Model.updateMany(conditions, doc, [options], [callback])`。例子如下：\n````javascript\n// 将姓名为lan的用户年龄变为70\nModel.updateMany({name:/lan/},{age:50},function(err,raw){\n    //{ n: 2, nModified: 2, ok: 1 }\n    console.log(raw);\n});\n````\n### updateOne\n只能更新一个的update，就是options为`{multi:false}`的update。\n语法：`Model.updateOne(conditions, doc, [options], [callback])`，例子如下：\n````javascript\n// 将姓名为lan的第一个用户年龄变为70\nModel.updateOne({name:/lan/},{age:70}, function(err,raw){\n    //{ n: 2, nModified: 2, ok: 1 }\n    console.log(raw);\n});\n````\n### 修改更改器\n1. `$inc`:增减修改器，只对数字有效。\n2. `$set`:指定键并修改，不存在则创建。\n3. `$unset`:删除一个键。\n````javascript\n// inc \n Model.update({\n    'age': 60\n}, {\n    '$inc': {\n        'age': 61\n    }\n});\n// 执行后: age=23\n// set \n Model.update({\n    'age': 60\n}, {\n    '$set': {\n        'age': '百岁老人'\n    }\n});\n// 执行后: age=百岁老人\n// set \n Model.update({\n    'age': 60\n}, {\n    '$unset': {\n        'age': '百岁老人'\n    }\n});\n// 执行后: 删除了age键\n````\n\n### 数组更改器\n1. `$push`: 给一个键push一个数组成员,键不存在会创建\n2. `$addToSet`:向数组中添加一个元素,如果存在就不添加。\n3. `$each`:遍历数组。\n3. `$pop`:向数组中尾部删除一个元素\n3. `$pull`:向数组中删除指定元素。\n````javascript\n// inc \n Model.update({\n    'age': 60\n}, {\n    '$push': {\n        'array': 1\n    }\n});\n// 执行后: 增加一个 array 键,类型为数组, 有一个成员 10\nModel.update({\n    'age': 60\n}, {\n    '$push': {\n        'array': {\n            '$each': [1, 2, 3, 4, 5]\n        }\n    }\n});\n// 执行后: array : [10,1,2,3,4,5]\n````\n\n\n## 查\n### find\n查询所有符合条件的数据。\n语法：`Model.find(conditions, [projection], [options], [callback])`,第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数。如果参数为空则传null\n#### 查询条件\n* $or　　　　或关系\n* $nor　　　 或关系取反\n* $gt　　　　大于\n* $gte　　　 大于等于\n* $lt　　　　小于\n* $lte　　　 小于等于\n* $ne　　　　不等于\n* $in　　　　在多个值范围内\n* $nin　　　 不在多个值范围内\n* $all　　　 匹配数组中多个值\n* $regex　　 正则，用于模糊查询\n* $size　　　匹配数组大小\n* $maxDistance　范围查询，距离（基于LBS）\n* $mod　　　　取模运算\n* $near　　　 邻域查询，查询附近的位置（基于LBS）\n* $exists　　 字段是否存在\n* $elemMatch　匹配内数组内的元素\n* $within　　　范围查询（基于LBS）\n* $box　　　　 范围查询，矩形范围（基于LBS）\n* $center　　　范围醒询，圆形范围（基于LBS）\n* $centerSphere　范围查询，球形范围（基于LBS）\n* $slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素\n* $where       可以使用任意JavaScript作为条件\n\n````javascript\n// 查询名为lan年龄大于60的用户\nModel.find({name:/lan/,age:{$gte:60}},(err,docs)=>{\n    console.log(docs);\n})\n// 查询名为lan的用户，只输出name，不输出id\nModel.find({name:/lan/},{name:1,_id:0},(err,docs)=>{\n    console.log(docs);\n})\n// 找出跳过前两条的所有数据\nModel.find(null,null,{skip:2},(err,docs)=>{\n    console.log(docs);\n})\n````\n\n### findById\n通过id查询数据。\n语法：`Model.findById(id, [projection], [options], [callback])`，除了查询条件是id，其他参数跟`find`一样，例子如下：\n````javascript\n// 查询某个id的用户\nModel.findById(id,(err,doc)=>{\n    console.log(doc);\n})      \n````\n\n### findOne\n返回查询到的第一个数据\n语法：`Model.findOne([conditions], [projection], [options], [callback])`，用法跟`find`一样，只是只返回查到的第一个数据，例子如下：\n````javascript\n// 查询某个id的用户\nModel.findOne({name:/lan/,age:{$gte:60}},(err,doc)=>{\n    console.log(doc);\n})      \n````\n\n### 查询后处理\n所谓的查询后处理，就是在查询到的结果里通过以下方法再处理，方法如下：\n* sort     排序\n* skip     跳过\n* limit    限制\n* select   显示字段\n* exect    执行\n* count    计数\n* distinct 去重\n\n\n## 前后钩子\n中间件函数，在执行某些操作之前执行某些函数，在schema上定义。\n以下函数可以设置前后钩子：\n````javascript\n    validate\n    save\n    remove\n    count\n    find\n    findOne\n    findOneAndRemove\n    findOneAndUpdate\n    insertMany\n    update\n````\n\n### pre()\n`pre()`是在执行方法之前执行的方法。\n````javascript\nvar schema = new mongoose.Schema({ age:Number, name: String, });  \nschema.pre('find',function(next){\n    console.log('我是pre方法1');\n    next();\n});\nschema.pre('find',function(next){\n    console.log('我是pre方法2');\n    next();\n});  \nvar user = mongoose.model('user', schema);\nuser.find(null, {name:1}, (err,docs) => {\n    console.log(docs[0]);\n})    \n/*\n我是pre方法1\n我是pre方法2\n{ name: 'lan'}\n*/\n````\n\n### post()\n`post()`是执行某些操作前最后执行的方法。\n````javascript\nvar schema = new mongoose.Schema({ age:Number, name: String, });  \nschema.pre('post',function(next){\n    console.log('我是pre方法1');\n    next();\n});\nschema.pre('post',function(next){\n    console.log('我是pre方法2');\n    next();\n});  \nvar user = mongoose.model('user', schema);\nuser.find(null, {name:1}, (err,docs) => {\n    console.log(docs[0]);\n})    \n/*\n我是pre方法1\n我是pre方法2\n{ name: 'lan'}\n*/\n````\n\n## 聚合管道\n可以理解为高级的查询方法。\n语法：`Model.aggregate([options], [callback])`，`options`说明如下：\n* $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。对应project()方法\n* $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。对应match()。\n* $limit：用来限制MongoDB聚合管道返回的文档数。对应limit()方法\n* $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。对应skip()。\n* $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。对应unwind()方法\n* $group：将集合中的文档分组，可用于统计结果。对应group()方法\n* $sort：将输入文档排序后输出。对应sort()方法\n* $geoNear：输出接近某一地理位置的有序文档。对应near()。\n* $sample：随机选择N个\n* $lookup：连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于populate,[联表查询](../mongoose-populate)","slug":"mongoose-api","published":1,"updated":"2019-08-07T10:04:02.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76aa002rdkhs5l5zfy9z","content":"<blockquote><p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.</p>\n<p>Mongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。</p>\n<footer><strong>mongoose</strong><cite><a href=\"https://github.com/Automattic/mongoose\" target=\"_blank\" rel=\"external\">github.com/Automattic/mongoose</a></cite></footer></blockquote>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>首先电脑必须安装 <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"external\">MongoDB</a> 和 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">NodeJS</a>。</li>\n<li>项目中使用npm来安装mongoose <code>npm install mongoose --save</code></li>\n<li>引入<code>mongoose</code>就能使用了。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using Node.js `require()`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Using ES6 imports</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p><code>connect</code>用于创建连接数据库，也可以调用使用<code>disconnect</code>断开连接。如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dbPath = <span class=\"string\">'mongodb://localhost/test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> database = () =&gt; &#123;</span><br><span class=\"line\">    mongoose.set(<span class=\"string\">'debug'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> connect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        mongoose.connect(dbPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 断开重新连接</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'disconnected'</span>, () =&gt; &#123;</span><br><span class=\"line\">        connect();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 连接成功</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'connected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'已经连接成功'</span>);  </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 连接异常</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'error'</span>, err =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'异常'</span> + err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'open'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connected to MongoDB '</span>, dbPath)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">database()</span><br></pre></td></tr></table></figure></p>\n<p>如果要指定用户，可在连接的数据库地址上形如 ‘mongodb://用户名:密码@IP地址/数据库名称’ 结构上修改。</p>\n<h2 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h2><p>每一个<code>schema</code>都是一个文档的映射结构，无法操作数据库，但是在<code>schema</code>上可以定义属性、静态方法、实例方法、查询辅助、索引、虚拟字段以及配置项。</p>\n<h3 id=\"允许的类型\"><a href=\"#允许的类型\" class=\"headerlink\" title=\"允许的类型\"></a>允许的类型</h3><p>文档中字段允许的属性：</p>\n<ol>\n<li>String</li>\n<li>Number</li>\n<li>Date</li>\n<li>Buffer</li>\n<li>Boolean</li>\n<li>Mixed</li>\n<li>ObjectId</li>\n<li>Array</li>\n<li>Decimal128</li>\n<li>Map</li>\n</ol>\n<p>实例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    name:    <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    binary:  Buffer,</span><br><span class=\"line\">    living:  <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    updated: &#123; type: <span class=\"built_in\">Date</span>, <span class=\"keyword\">default</span>: <span class=\"built_in\">Date</span>.now &#125;,</span><br><span class=\"line\">    age:     &#123; type: <span class=\"built_in\">Number</span>, min: <span class=\"number\">18</span>, max: <span class=\"number\">65</span> &#125;,</span><br><span class=\"line\">    mixed:   Schema.Types.Mixed,</span><br><span class=\"line\">    _someId: Schema.Types.ObjectId,</span><br><span class=\"line\">    decimal: Schema.Types.Decimal128,</span><br><span class=\"line\">    array: [],</span><br><span class=\"line\">    ofString: [<span class=\"built_in\">String</span>],</span><br><span class=\"line\">    ofNumber: [<span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    ofDates: [<span class=\"built_in\">Date</span>],</span><br><span class=\"line\">    ofBuffer: [Buffer],</span><br><span class=\"line\">    ofBoolean: [<span class=\"built_in\">Boolean</span>],</span><br><span class=\"line\">    ofMixed: [Schema.Types.Mixed],</span><br><span class=\"line\">    ofObjectId: [Schema.Types.ObjectId],</span><br><span class=\"line\">    ofArrays: [[]],</span><br><span class=\"line\">    ofArrayOfNumbers: [[<span class=\"built_in\">Number</span>]],</span><br><span class=\"line\">    nested: &#123;</span><br><span class=\"line\">        stuff: &#123; type: <span class=\"built_in\">String</span>, lowercase: <span class=\"literal\">true</span>, trim: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    map: <span class=\"built_in\">Map</span>,</span><br><span class=\"line\">    mapOfString: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Map</span>,</span><br><span class=\"line\">    <span class=\"keyword\">of</span>: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 如下使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Thing;</span><br><span class=\"line\">m.name = <span class=\"string\">'Statue of Liberty'</span>;</span><br><span class=\"line\">m.age = <span class=\"number\">125</span>;</span><br><span class=\"line\">m.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">m.binary = Buffer.alloc(<span class=\"number\">0</span>);</span><br><span class=\"line\">m.living = <span class=\"literal\">false</span>;</span><br><span class=\"line\">m.mixed = &#123; any: &#123; thing: <span class=\"string\">'i want'</span> &#125; &#125;;</span><br><span class=\"line\">m.markModified(<span class=\"string\">'mixed'</span>);</span><br><span class=\"line\">m._someId = <span class=\"keyword\">new</span> mongoose.Types.ObjectId;</span><br><span class=\"line\">m.array.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">m.ofString.push(<span class=\"string\">\"strings!\"</span>);</span><br><span class=\"line\">m.ofNumber.unshift(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">m.ofDates.addToSet(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>);</span><br><span class=\"line\">m.ofBuffer.pop();</span><br><span class=\"line\">m.ofMixed = [<span class=\"number\">1</span>, [], <span class=\"string\">'three'</span>, &#123; four: <span class=\"number\">5</span> &#125;];</span><br><span class=\"line\">m.nested.stuff = <span class=\"string\">'good'</span>;</span><br><span class=\"line\">m.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'key'</span>, <span class=\"string\">'value'</span>]]);</span><br><span class=\"line\">m.save(callback);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p><code>mongoose</code>自动会给每个<code>document</code>增加索引，可以在<code>connect</code>设置关闭所有的自动索引，也可以单独针对某个<code>doucument</code>设置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema.set(<span class=\"string\">'autoIndex'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Schema(&#123;&#125;, &#123;autoIndex: <span class=\"literal\">false</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"虚拟字段\"><a href=\"#虚拟字段\" class=\"headerlink\" title=\"虚拟字段\"></a>虚拟字段</h3><p>虚拟字段不会写入数据库中，可以利用它来格式化和组合属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addressSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    address: &#123;   </span><br><span class=\"line\">        city: <span class=\"built_in\">String</span>,   </span><br><span class=\"line\">        street: <span class=\"built_in\">String</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 设置获取虚拟字段的get方法</span></span><br><span class=\"line\">addressSchema.virtual(<span class=\"string\">'address.full'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address.city + <span class=\"string\">'/'</span> + <span class=\"keyword\">this</span>.address.street</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 设置赋值虚拟字段的set方法</span></span><br><span class=\"line\">addressSchema.virtual(<span class=\"string\">'address.full'</span>).set(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">address</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> split = address.split(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address.city = split[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address.street = split[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Address = mongoose.model(<span class=\"string\">'Address'</span>, addressSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address1 = <span class=\"keyword\">new</span> Address(&#123;</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'shanghai'</span>,</span><br><span class=\"line\">        street: <span class=\"string\">'jinzhong road'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 通过虚拟字段获取地址详情</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.full) <span class=\"comment\">// shanghai/jinzhong road</span></span><br><span class=\"line\"><span class=\"comment\">// 通过虚拟字段设置地址详情</span></span><br><span class=\"line\">address1.address.full = <span class=\"string\">\"beijing/gugong\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.city) <span class=\"comment\">// beijing</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.street) <span class=\"comment\">// gugong</span></span><br><span class=\"line\">address1.save() <span class=\"comment\">// address.full将不会被保存到数据库中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p><code>Schema</code>可以使用配置项来设置，有两种方式设置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Schema(&#123;…&#125;, options)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;...&#125;);</span><br><span class=\"line\">schema.set(option, value);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"有效的配置项\"><a href=\"#有效的配置项\" class=\"headerlink\" title=\"有效的配置项\"></a>有效的配置项</h4><ul>\n<li>autoIndex（默认true），创建默认索引（_id）。</li>\n<li>capped，限制一次操作的量。</li>\n<li>collection，定义集合的名字，默认是model名+s</li>\n<li>id _id（默认true），如果<code>schema</code>中没有定义id，<code>mongoose</code>默认分配一个id域</li>\n<li>read </li>\n<li>safe（默认true），在操作的时候要等待返回的MongoDB返回的结果；否则则不等待</li>\n<li>shardKey 让mongodb做分布式操作 </li>\n<li>strict（默认enabled）如果实例中的字段没在schema中定义过，那么这个字段就不会被保存进数据库</li>\n<li>toJSON，实例调用toJson方法后，针对返回的数据做处理</li>\n<li>toObject，实例调用toJson方法后，针对返回的数据做处理</li>\n<li>versionKey 版本锁，设置在每个文档上，默认键名为 <code>_v</code>。</li>\n<li>typeKey </li>\n<li>validateBeforeSave 保存数据库时会自动验证</li>\n<li>skipVersioning </li>\n<li>timestamps 在schema设置这个选项，会被自动添加createdAt和updatedAt，默认的名字是createdAt和updatedAt</li>\n<li>useNestedStrict 是否检查childSchem的配置</li>\n<li>retainKeyOrder，是否改变键的顺序</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p><code>Schmema</code>里只设置属性的话，缺少字段也能保存；多了属性的话，虽然不会把多余的属性保存，但是还是进入数据库了。所以可以需要增加验证属性来限制下，就能避免像上面这些情况的发生了。常用的验证如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">required  数据必须填写</span><br><span class=\"line\"><span class=\"keyword\">default</span>  默认值</span><br><span class=\"line\">validate  自定义匹配</span><br><span class=\"line\">min  最小值(只适用于数字)</span><br><span class=\"line\">max  最大值(只适用于数字)</span><br><span class=\"line\">match  正则匹配(只适用于字符串)</span><br><span class=\"line\">enum   枚举匹配(只适用于字符串)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>required：将某个字段设置为必填字段，如果没有这个必填字段，则不会被保存。</li>\n<li>default: 如果不设置某个字段，则会取默认值</li>\n<li>min | max: 将某个字段设置取值范围</li>\n<li>match: 字段必须包含指定字符</li>\n<li>enum: 枚举值必须在枚举的范围内</li>\n<li>validate：定义一个函数，返回<code>true</code>则通过验证；<code>false</code>则不通过验证。</li>\n</ol>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>就是由<code>Schema</code>生成的模型，可以对数据进行操作。</p>\n<h3 id=\"自定义静态方法\"><a href=\"#自定义静态方法\" class=\"headerlink\" title=\"自定义静态方法\"></a>自定义静态方法</h3><p>通过<code>Schema</code>的<code>statics</code>属性给<code>model</code>添加方法，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.statics.findByName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.model(<span class=\"string\">'Person'</span>).find(&#123;<span class=\"string\">'name'</span>:name&#125;, callback);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.findByName(<span class=\"string\">'lan'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, persons</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(persons);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询辅助\"><a href=\"#查询辅助\" class=\"headerlink\" title=\"查询辅助\"></a>查询辅助</h3><p>通过<code>Schema</code>给<code>model</code>的查询增加辅助函数，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.query.byName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.find(&#123;name: name&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">Person.find().byName(<span class=\"string\">'lan'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Entity\"><a href=\"#Entity\" class=\"headerlink\" title=\"Entity\"></a>Entity</h2><p>由<code>Model</code>生成的实例，可以定义实例方法，由生成的实例对数据进行操作。</p>\n<h3 id=\"自定义实例方法\"><a href=\"#自定义实例方法\" class=\"headerlink\" title=\"自定义实例方法\"></a>自定义实例方法</h3><p>通过<code>Schema</code>的<code>methods</code>属性给<code>document</code>添加方法，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.methods.findByName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.model(<span class=\"string\">'Person'</span>).find(&#123;<span class=\"string\">'name'</span>:name&#125;, callback);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自定义 showName 方法</span></span><br><span class=\"line\">personSchema.methods.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> felyne = <span class=\"keyword\">new</span> Person(&#123;name: <span class=\"string\">'lan'</span>&#125;)</span><br><span class=\"line\">felyne.showName()</span><br><span class=\"line\">felyne.findByName(<span class=\"string\">'lan'</span> ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上讲完了mongoose的基本模型，接着我们介绍下mongoose的基本方法。也就是“增删改查”的四种方法。</p>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><h3 id=\"实例的save方法\"><a href=\"#实例的save方法\" class=\"headerlink\" title=\"实例的save方法\"></a>实例的save方法</h3><p>先实例化，然后再调用<code>save</code>方法。<br>语法：<code>save([options], [options.safe], [options.validateBeforeSave], [fn])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> felyne = <span class=\"keyword\">new</span> Person(&#123;name: <span class=\"string\">'lan'</span>&#125;)</span><br><span class=\"line\">felyne.save((err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的create方法\"><a href=\"#Model的create方法\" class=\"headerlink\" title=\"Model的create方法\"></a>Model的create方法</h3><p>直接用<code>Model</code>调用<code>create</code>方法。<br>语法：<code>Model.create(doc(s), [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.create(&#123;name: <span class=\"string\">'lan'</span>&#125;,&#123;name: <span class=\"string\">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的insertMany方法\"><a href=\"#Model的insertMany方法\" class=\"headerlink\" title=\"Model的insertMany方法\"></a>Model的insertMany方法</h3><p>也是用<code>Model</code>调用，跟<code>create</code>相比就是多了<code>operation</code>参数。<br>语法：<code>Model.insertMany(doc(s), [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.insertMany(&#123;name: <span class=\"string\">'lan'</span>&#125;,&#123;name: <span class=\"string\">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><h3 id=\"实例的remove方法\"><a href=\"#实例的remove方法\" class=\"headerlink\" title=\"实例的remove方法\"></a>实例的remove方法</h3><p>删除实例。<br>语法：<code>document.remove([callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.remove((err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的remove方法\"><a href=\"#Model的remove方法\" class=\"headerlink\" title=\"Model的remove方法\"></a>Model的remove方法</h3><p>删除符合条件的所有数据。<br>语法：<code>model.remove(conditions, [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.remove(&#123;name:<span class=\"regexp\">/60/</span>&#125;,(err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findOneAndRemove方法\"><a href=\"#findOneAndRemove方法\" class=\"headerlink\" title=\"findOneAndRemove方法\"></a>findOneAndRemove方法</h3><p>只删除符合条件的第一条数据<br>语法：<code>Model.findOneAndRemove(conditions, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOneAndRemove(&#123;age:&#123;$lt:<span class=\"number\">60</span>&#125;&#125;,(err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findByIdAndRemove方法\"><a href=\"#findByIdAndRemove方法\" class=\"headerlink\" title=\"findByIdAndRemove方法\"></a>findByIdAndRemove方法</h3><p>通过ID删数据<br>语法：<code>Model.findByIdAndRemove(id, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findByIdAndRemove(id, (err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h2><h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h3><p>更改符合条件的数据<br>语法：<code>Model.update(conditions, doc, [options], [callback])</code>，第一个参数表示查询条件，第二个参数是需要修改的数据，第三个参数控制选项，第四个参数是回调函数。options有如下选项</p>\n<ul>\n<li>safe (boolean)： 默认为true。安全模式。</li>\n<li>upsert (boolean)： 默认为false。如果不存在则创建新记录。</li>\n<li>multi (boolean)： 默认为false。是否更新多个查询记录。</li>\n<li>runValidators： 如果值为true，执行Validation验证。</li>\n<li>setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。</li>\n<li>strict (boolean)： 以strict模式进行更新。</li>\n<li>overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.update(&#123;age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,&#123;age:<span class=\"number\">61</span>&#125;, (err,raw) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 1, nModified: 1, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><p>只能更新多个的update，就是options为<code>{multi:true}</code>的update。<br>语法：<code>Model.updateMany(conditions, doc, [options], [callback])</code>。例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将姓名为lan的用户年龄变为70</span></span><br><span class=\"line\">Model.updateMany(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;age:<span class=\"number\">50</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,raw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"updateOne\"><a href=\"#updateOne\" class=\"headerlink\" title=\"updateOne\"></a>updateOne</h3><p>只能更新一个的update，就是options为<code>{multi:false}</code>的update。<br>语法：<code>Model.updateOne(conditions, doc, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将姓名为lan的第一个用户年龄变为70</span></span><br><span class=\"line\">Model.updateOne(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;age:<span class=\"number\">70</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,raw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更改器\"><a href=\"#修改更改器\" class=\"headerlink\" title=\"修改更改器\"></a>修改更改器</h3><ol>\n<li><code>$inc</code>:增减修改器，只对数字有效。</li>\n<li><code>$set</code>:指定键并修改，不存在则创建。</li>\n<li><code>$unset</code>:删除一个键。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inc </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$inc'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"number\">61</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: age=23</span></span><br><span class=\"line\"><span class=\"comment\">// set </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$set'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"string\">'百岁老人'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: age=百岁老人</span></span><br><span class=\"line\"><span class=\"comment\">// set </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$unset'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"string\">'百岁老人'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: 删除了age键</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"数组更改器\"><a href=\"#数组更改器\" class=\"headerlink\" title=\"数组更改器\"></a>数组更改器</h3><ol>\n<li><code>$push</code>: 给一个键push一个数组成员,键不存在会创建</li>\n<li><code>$addToSet</code>:向数组中添加一个元素,如果存在就不添加。</li>\n<li><code>$each</code>:遍历数组。</li>\n<li><code>$pop</code>:向数组中尾部删除一个元素</li>\n<li><code>$pull</code>:向数组中删除指定元素。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inc </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$push'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'array'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: 增加一个 array 键,类型为数组, 有一个成员 10</span></span><br><span class=\"line\">Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$push'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'array'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'$each'</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: array : [10,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>查询所有符合条件的数据。<br>语法：<code>Model.find(conditions, [projection], [options], [callback])</code>,第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数。如果参数为空则传null</p>\n<h4 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h4><ul>\n<li>$or　　　　或关系</li>\n<li>$nor　　　 或关系取反</li>\n<li>$gt　　　　大于</li>\n<li>$gte　　　 大于等于</li>\n<li>$lt　　　　小于</li>\n<li>$lte　　　 小于等于</li>\n<li>$ne　　　　不等于</li>\n<li>$in　　　　在多个值范围内</li>\n<li>$nin　　　 不在多个值范围内</li>\n<li>$all　　　 匹配数组中多个值</li>\n<li>$regex　　 正则，用于模糊查询</li>\n<li>$size　　　匹配数组大小</li>\n<li>$maxDistance　范围查询，距离（基于LBS）</li>\n<li>$mod　　　　取模运算</li>\n<li>$near　　　 邻域查询，查询附近的位置（基于LBS）</li>\n<li>$exists　　 字段是否存在</li>\n<li>$elemMatch　匹配内数组内的元素</li>\n<li>$within　　　范围查询（基于LBS）</li>\n<li>$box　　　　 范围查询，矩形范围（基于LBS）</li>\n<li>$center　　　范围醒询，圆形范围（基于LBS）</li>\n<li>$centerSphere　范围查询，球形范围（基于LBS）</li>\n<li>$slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素</li>\n<li>$where       可以使用任意JavaScript作为条件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询名为lan年龄大于60的用户</span></span><br><span class=\"line\">Model.find(&#123;name:<span class=\"regexp\">/lan/</span>,age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询名为lan的用户，只输出name，不输出id</span></span><br><span class=\"line\">Model.find(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 找出跳过前两条的所有数据</span></span><br><span class=\"line\">Model.find(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,&#123;skip:<span class=\"number\">2</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"findById\"><a href=\"#findById\" class=\"headerlink\" title=\"findById\"></a>findById</h3><p>通过id查询数据。<br>语法：<code>Model.findById(id, [projection], [options], [callback])</code>，除了查询条件是id，其他参数跟<code>find</code>一样，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询某个id的用户</span></span><br><span class=\"line\">Model.findById(id,(err,doc)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findOne\"><a href=\"#findOne\" class=\"headerlink\" title=\"findOne\"></a>findOne</h3><p>返回查询到的第一个数据<br>语法：<code>Model.findOne([conditions], [projection], [options], [callback])</code>，用法跟<code>find</code>一样，只是只返回查到的第一个数据，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询某个id的用户</span></span><br><span class=\"line\">Model.findOne(&#123;name:<span class=\"regexp\">/lan/</span>,age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,(err,doc)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询后处理\"><a href=\"#查询后处理\" class=\"headerlink\" title=\"查询后处理\"></a>查询后处理</h3><p>所谓的查询后处理，就是在查询到的结果里通过以下方法再处理，方法如下：</p>\n<ul>\n<li>sort     排序</li>\n<li>skip     跳过</li>\n<li>limit    限制</li>\n<li>select   显示字段</li>\n<li>exect    执行</li>\n<li>count    计数</li>\n<li>distinct 去重</li>\n</ul>\n<h2 id=\"前后钩子\"><a href=\"#前后钩子\" class=\"headerlink\" title=\"前后钩子\"></a>前后钩子</h2><p>中间件函数，在执行某些操作之前执行某些函数，在schema上定义。<br>以下函数可以设置前后钩子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate</span><br><span class=\"line\">save</span><br><span class=\"line\">remove</span><br><span class=\"line\">count</span><br><span class=\"line\">find</span><br><span class=\"line\">findOne</span><br><span class=\"line\">findOneAndRemove</span><br><span class=\"line\">findOneAndUpdate</span><br><span class=\"line\">insertMany</span><br><span class=\"line\">update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre()\"></a>pre()</h3><p><code>pre()</code>是在执行方法之前执行的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123; age:<span class=\"built_in\">Number</span>, name: <span class=\"built_in\">String</span>, &#125;);  </span><br><span class=\"line\">schema.pre(<span class=\"string\">'find'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法1'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">schema.pre(<span class=\"string\">'find'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法2'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> user = mongoose.model(<span class=\"string\">'user'</span>, schema);</span><br><span class=\"line\">user.find(<span class=\"literal\">null</span>, &#123;name:<span class=\"number\">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">我是pre方法1</span><br><span class=\"line\">我是pre方法2</span><br><span class=\"line\">&#123; name: 'lan'&#125;</span><br><span class=\"line\">*/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"post()\"></a>post()</h3><p><code>post()</code>是执行某些操作前最后执行的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123; age:<span class=\"built_in\">Number</span>, name: <span class=\"built_in\">String</span>, &#125;);  </span><br><span class=\"line\">schema.pre(<span class=\"string\">'post'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法1'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">schema.pre(<span class=\"string\">'post'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法2'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> user = mongoose.model(<span class=\"string\">'user'</span>, schema);</span><br><span class=\"line\">user.find(<span class=\"literal\">null</span>, &#123;name:<span class=\"number\">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">我是pre方法1</span><br><span class=\"line\">我是pre方法2</span><br><span class=\"line\">&#123; name: 'lan'&#125;</span><br><span class=\"line\">*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"聚合管道\"><a href=\"#聚合管道\" class=\"headerlink\" title=\"聚合管道\"></a>聚合管道</h2><p>可以理解为高级的查询方法。<br>语法：<code>Model.aggregate([options], [callback])</code>，<code>options</code>说明如下：</p>\n<ul>\n<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。对应project()方法</li>\n<li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。对应match()。</li>\n<li>$limit：用来限制MongoDB聚合管道返回的文档数。对应limit()方法</li>\n<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。对应skip()。</li>\n<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。对应unwind()方法</li>\n<li>$group：将集合中的文档分组，可用于统计结果。对应group()方法</li>\n<li>$sort：将输入文档排序后输出。对应sort()方法</li>\n<li>$geoNear：输出接近某一地理位置的有序文档。对应near()。</li>\n<li>$sample：随机选择N个</li>\n<li>$lookup：连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于populate,<a href=\"../mongoose-populate\">联表查询</a></li>\n</ul>\n","excerpt":"<blockquote><p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.</p>\n<p>Mongoose是运行在异步环境中对MongoDB进行操作的对象建模工具。</p>\n<footer><strong>mongoose</strong><cite><a href=\"https://github.com/Automattic/mongoose\">github.com/Automattic/mongoose</a></cite></footer></blockquote>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>首先电脑必须安装 <a href=\"https://www.mongodb.com/\">MongoDB</a> 和 <a href=\"http://nodejs.org/\">NodeJS</a>。</li>\n<li>项目中使用npm来安装mongoose <code>npm install mongoose --save</code></li>\n<li>引入<code>mongoose</code>就能使用了。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using Node.js `require()`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Using ES6 imports</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p><code>connect</code>用于创建连接数据库，也可以调用使用<code>disconnect</code>断开连接。如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dbPath = <span class=\"string\">'mongodb://localhost/test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> database = () =&gt; &#123;</span><br><span class=\"line\">    mongoose.set(<span class=\"string\">'debug'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> connect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        mongoose.connect(dbPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 断开重新连接</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'disconnected'</span>, () =&gt; &#123;</span><br><span class=\"line\">        connect();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 连接成功</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'connected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'已经连接成功'</span>);  </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">    * 连接异常</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'error'</span>, err =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'异常'</span> + err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    mongoose.connection.on(<span class=\"string\">'open'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Connected to MongoDB '</span>, dbPath)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">database()</span><br></pre></td></tr></table></figure></p>\n<p>如果要指定用户，可在连接的数据库地址上形如 ‘mongodb://用户名:密码@IP地址/数据库名称’ 结构上修改。</p>\n<h2 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h2><p>每一个<code>schema</code>都是一个文档的映射结构，无法操作数据库，但是在<code>schema</code>上可以定义属性、静态方法、实例方法、查询辅助、索引、虚拟字段以及配置项。</p>\n<h3 id=\"允许的类型\"><a href=\"#允许的类型\" class=\"headerlink\" title=\"允许的类型\"></a>允许的类型</h3><p>文档中字段允许的属性：</p>\n<ol>\n<li>String</li>\n<li>Number</li>\n<li>Date</li>\n<li>Buffer</li>\n<li>Boolean</li>\n<li>Mixed</li>\n<li>ObjectId</li>\n<li>Array</li>\n<li>Decimal128</li>\n<li>Map</li>\n</ol>\n<p>实例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    name:    <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    binary:  Buffer,</span><br><span class=\"line\">    living:  <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    updated: &#123; type: <span class=\"built_in\">Date</span>, <span class=\"keyword\">default</span>: <span class=\"built_in\">Date</span>.now &#125;,</span><br><span class=\"line\">    age:     &#123; type: <span class=\"built_in\">Number</span>, min: <span class=\"number\">18</span>, max: <span class=\"number\">65</span> &#125;,</span><br><span class=\"line\">    mixed:   Schema.Types.Mixed,</span><br><span class=\"line\">    _someId: Schema.Types.ObjectId,</span><br><span class=\"line\">    decimal: Schema.Types.Decimal128,</span><br><span class=\"line\">    array: [],</span><br><span class=\"line\">    ofString: [<span class=\"built_in\">String</span>],</span><br><span class=\"line\">    ofNumber: [<span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    ofDates: [<span class=\"built_in\">Date</span>],</span><br><span class=\"line\">    ofBuffer: [Buffer],</span><br><span class=\"line\">    ofBoolean: [<span class=\"built_in\">Boolean</span>],</span><br><span class=\"line\">    ofMixed: [Schema.Types.Mixed],</span><br><span class=\"line\">    ofObjectId: [Schema.Types.ObjectId],</span><br><span class=\"line\">    ofArrays: [[]],</span><br><span class=\"line\">    ofArrayOfNumbers: [[<span class=\"built_in\">Number</span>]],</span><br><span class=\"line\">    nested: &#123;</span><br><span class=\"line\">        stuff: &#123; type: <span class=\"built_in\">String</span>, lowercase: <span class=\"literal\">true</span>, trim: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    map: <span class=\"built_in\">Map</span>,</span><br><span class=\"line\">    mapOfString: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Map</span>,</span><br><span class=\"line\">    <span class=\"keyword\">of</span>: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 如下使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Thing;</span><br><span class=\"line\">m.name = <span class=\"string\">'Statue of Liberty'</span>;</span><br><span class=\"line\">m.age = <span class=\"number\">125</span>;</span><br><span class=\"line\">m.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">m.binary = Buffer.alloc(<span class=\"number\">0</span>);</span><br><span class=\"line\">m.living = <span class=\"literal\">false</span>;</span><br><span class=\"line\">m.mixed = &#123; any: &#123; thing: <span class=\"string\">'i want'</span> &#125; &#125;;</span><br><span class=\"line\">m.markModified(<span class=\"string\">'mixed'</span>);</span><br><span class=\"line\">m._someId = <span class=\"keyword\">new</span> mongoose.Types.ObjectId;</span><br><span class=\"line\">m.array.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">m.ofString.push(<span class=\"string\">\"strings!\"</span>);</span><br><span class=\"line\">m.ofNumber.unshift(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">m.ofDates.addToSet(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>);</span><br><span class=\"line\">m.ofBuffer.pop();</span><br><span class=\"line\">m.ofMixed = [<span class=\"number\">1</span>, [], <span class=\"string\">'three'</span>, &#123; four: <span class=\"number\">5</span> &#125;];</span><br><span class=\"line\">m.nested.stuff = <span class=\"string\">'good'</span>;</span><br><span class=\"line\">m.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'key'</span>, <span class=\"string\">'value'</span>]]);</span><br><span class=\"line\">m.save(callback);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p><code>mongoose</code>自动会给每个<code>document</code>增加索引，可以在<code>connect</code>设置关闭所有的自动索引，也可以单独针对某个<code>doucument</code>设置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema.set(<span class=\"string\">'autoIndex'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Schema(&#123;&#125;, &#123;autoIndex: <span class=\"literal\">false</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"虚拟字段\"><a href=\"#虚拟字段\" class=\"headerlink\" title=\"虚拟字段\"></a>虚拟字段</h3><p>虚拟字段不会写入数据库中，可以利用它来格式化和组合属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addressSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    address: &#123;   </span><br><span class=\"line\">        city: <span class=\"built_in\">String</span>,   </span><br><span class=\"line\">        street: <span class=\"built_in\">String</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 设置获取虚拟字段的get方法</span></span><br><span class=\"line\">addressSchema.virtual(<span class=\"string\">'address.full'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address.city + <span class=\"string\">'/'</span> + <span class=\"keyword\">this</span>.address.street</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 设置赋值虚拟字段的set方法</span></span><br><span class=\"line\">addressSchema.virtual(<span class=\"string\">'address.full'</span>).set(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">address</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> split = address.split(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address.city = split[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.address.street = split[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Address = mongoose.model(<span class=\"string\">'Address'</span>, addressSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address1 = <span class=\"keyword\">new</span> Address(&#123;</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'shanghai'</span>,</span><br><span class=\"line\">        street: <span class=\"string\">'jinzhong road'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 通过虚拟字段获取地址详情</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.full) <span class=\"comment\">// shanghai/jinzhong road</span></span><br><span class=\"line\"><span class=\"comment\">// 通过虚拟字段设置地址详情</span></span><br><span class=\"line\">address1.address.full = <span class=\"string\">\"beijing/gugong\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.city) <span class=\"comment\">// beijing</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(address1.address.street) <span class=\"comment\">// gugong</span></span><br><span class=\"line\">address1.save() <span class=\"comment\">// address.full将不会被保存到数据库中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p><code>Schema</code>可以使用配置项来设置，有两种方式设置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Schema(&#123;…&#125;, options)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;...&#125;);</span><br><span class=\"line\">schema.set(option, value);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"有效的配置项\"><a href=\"#有效的配置项\" class=\"headerlink\" title=\"有效的配置项\"></a>有效的配置项</h4><ul>\n<li>autoIndex（默认true），创建默认索引（_id）。</li>\n<li>capped，限制一次操作的量。</li>\n<li>collection，定义集合的名字，默认是model名+s</li>\n<li>id _id（默认true），如果<code>schema</code>中没有定义id，<code>mongoose</code>默认分配一个id域</li>\n<li>read </li>\n<li>safe（默认true），在操作的时候要等待返回的MongoDB返回的结果；否则则不等待</li>\n<li>shardKey 让mongodb做分布式操作 </li>\n<li>strict（默认enabled）如果实例中的字段没在schema中定义过，那么这个字段就不会被保存进数据库</li>\n<li>toJSON，实例调用toJson方法后，针对返回的数据做处理</li>\n<li>toObject，实例调用toJson方法后，针对返回的数据做处理</li>\n<li>versionKey 版本锁，设置在每个文档上，默认键名为 <code>_v</code>。</li>\n<li>typeKey </li>\n<li>validateBeforeSave 保存数据库时会自动验证</li>\n<li>skipVersioning </li>\n<li>timestamps 在schema设置这个选项，会被自动添加createdAt和updatedAt，默认的名字是createdAt和updatedAt</li>\n<li>useNestedStrict 是否检查childSchem的配置</li>\n<li>retainKeyOrder，是否改变键的顺序</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p><code>Schmema</code>里只设置属性的话，缺少字段也能保存；多了属性的话，虽然不会把多余的属性保存，但是还是进入数据库了。所以可以需要增加验证属性来限制下，就能避免像上面这些情况的发生了。常用的验证如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">required  数据必须填写</span><br><span class=\"line\"><span class=\"keyword\">default</span>  默认值</span><br><span class=\"line\">validate  自定义匹配</span><br><span class=\"line\">min  最小值(只适用于数字)</span><br><span class=\"line\">max  最大值(只适用于数字)</span><br><span class=\"line\">match  正则匹配(只适用于字符串)</span><br><span class=\"line\">enum   枚举匹配(只适用于字符串)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>required：将某个字段设置为必填字段，如果没有这个必填字段，则不会被保存。</li>\n<li>default: 如果不设置某个字段，则会取默认值</li>\n<li>min | max: 将某个字段设置取值范围</li>\n<li>match: 字段必须包含指定字符</li>\n<li>enum: 枚举值必须在枚举的范围内</li>\n<li>validate：定义一个函数，返回<code>true</code>则通过验证；<code>false</code>则不通过验证。</li>\n</ol>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>就是由<code>Schema</code>生成的模型，可以对数据进行操作。</p>\n<h3 id=\"自定义静态方法\"><a href=\"#自定义静态方法\" class=\"headerlink\" title=\"自定义静态方法\"></a>自定义静态方法</h3><p>通过<code>Schema</code>的<code>statics</code>属性给<code>model</code>添加方法，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.statics.findByName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.model(<span class=\"string\">'Person'</span>).find(&#123;<span class=\"string\">'name'</span>:name&#125;, callback);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.findByName(<span class=\"string\">'lan'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, persons</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(persons);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询辅助\"><a href=\"#查询辅助\" class=\"headerlink\" title=\"查询辅助\"></a>查询辅助</h3><p>通过<code>Schema</code>给<code>model</code>的查询增加辅助函数，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.query.byName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.find(&#123;name: name&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">Person.find().byName(<span class=\"string\">'lan'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Entity\"><a href=\"#Entity\" class=\"headerlink\" title=\"Entity\"></a>Entity</h2><p>由<code>Model</code>生成的实例，可以定义实例方法，由生成的实例对数据进行操作。</p>\n<h3 id=\"自定义实例方法\"><a href=\"#自定义实例方法\" class=\"headerlink\" title=\"自定义实例方法\"></a>自定义实例方法</h3><p>通过<code>Schema</code>的<code>methods</code>属性给<code>document</code>添加方法，如下使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询所有同名的用户</span></span><br><span class=\"line\">personSchema.methods.findByName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.model(<span class=\"string\">'Person'</span>).find(&#123;<span class=\"string\">'name'</span>:name&#125;, callback);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自定义 showName 方法</span></span><br><span class=\"line\">personSchema.methods.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> felyne = <span class=\"keyword\">new</span> Person(&#123;name: <span class=\"string\">'lan'</span>&#125;)</span><br><span class=\"line\">felyne.showName()</span><br><span class=\"line\">felyne.findByName(<span class=\"string\">'lan'</span> ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上讲完了mongoose的基本模型，接着我们介绍下mongoose的基本方法。也就是“增删改查”的四种方法。</p>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><h3 id=\"实例的save方法\"><a href=\"#实例的save方法\" class=\"headerlink\" title=\"实例的save方法\"></a>实例的save方法</h3><p>先实例化，然后再调用<code>save</code>方法。<br>语法：<code>save([options], [options.safe], [options.validateBeforeSave], [fn])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\"><span class=\"keyword\">var</span> felyne = <span class=\"keyword\">new</span> Person(&#123;name: <span class=\"string\">'lan'</span>&#125;)</span><br><span class=\"line\">felyne.save((err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的create方法\"><a href=\"#Model的create方法\" class=\"headerlink\" title=\"Model的create方法\"></a>Model的create方法</h3><p>直接用<code>Model</code>调用<code>create</code>方法。<br>语法：<code>Model.create(doc(s), [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.create(&#123;name: <span class=\"string\">'lan'</span>&#125;,&#123;name: <span class=\"string\">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的insertMany方法\"><a href=\"#Model的insertMany方法\" class=\"headerlink\" title=\"Model的insertMany方法\"></a>Model的insertMany方法</h3><p>也是用<code>Model</code>调用，跟<code>create</code>相比就是多了<code>operation</code>参数。<br>语法：<code>Model.insertMany(doc(s), [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personSchema = Schema(&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema)</span><br><span class=\"line\">Person.insertMany(&#123;name: <span class=\"string\">'lan'</span>&#125;,&#123;name: <span class=\"string\">'van'</span>&#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><h3 id=\"实例的remove方法\"><a href=\"#实例的remove方法\" class=\"headerlink\" title=\"实例的remove方法\"></a>实例的remove方法</h3><p>删除实例。<br>语法：<code>document.remove([callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.remove((err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Model的remove方法\"><a href=\"#Model的remove方法\" class=\"headerlink\" title=\"Model的remove方法\"></a>Model的remove方法</h3><p>删除符合条件的所有数据。<br>语法：<code>model.remove(conditions, [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.remove(&#123;name:<span class=\"regexp\">/60/</span>&#125;,(err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findOneAndRemove方法\"><a href=\"#findOneAndRemove方法\" class=\"headerlink\" title=\"findOneAndRemove方法\"></a>findOneAndRemove方法</h3><p>只删除符合条件的第一条数据<br>语法：<code>Model.findOneAndRemove(conditions, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOneAndRemove(&#123;age:&#123;$lt:<span class=\"number\">60</span>&#125;&#125;,(err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findByIdAndRemove方法\"><a href=\"#findByIdAndRemove方法\" class=\"headerlink\" title=\"findByIdAndRemove方法\"></a>findByIdAndRemove方法</h3><p>通过ID删数据<br>语法：<code>Model.findByIdAndRemove(id, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findByIdAndRemove(id, (err, doc) =&gt; <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h2><h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h3><p>更改符合条件的数据<br>语法：<code>Model.update(conditions, doc, [options], [callback])</code>，第一个参数表示查询条件，第二个参数是需要修改的数据，第三个参数控制选项，第四个参数是回调函数。options有如下选项</p>\n<ul>\n<li>safe (boolean)： 默认为true。安全模式。</li>\n<li>upsert (boolean)： 默认为false。如果不存在则创建新记录。</li>\n<li>multi (boolean)： 默认为false。是否更新多个查询记录。</li>\n<li>runValidators： 如果值为true，执行Validation验证。</li>\n<li>setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。</li>\n<li>strict (boolean)： 以strict模式进行更新。</li>\n<li>overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.update(&#123;age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,&#123;age:<span class=\"number\">61</span>&#125;, (err,raw) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 1, nModified: 1, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><p>只能更新多个的update，就是options为<code>{multi:true}</code>的update。<br>语法：<code>Model.updateMany(conditions, doc, [options], [callback])</code>。例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将姓名为lan的用户年龄变为70</span></span><br><span class=\"line\">Model.updateMany(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;age:<span class=\"number\">50</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,raw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"updateOne\"><a href=\"#updateOne\" class=\"headerlink\" title=\"updateOne\"></a>updateOne</h3><p>只能更新一个的update，就是options为<code>{multi:false}</code>的update。<br>语法：<code>Model.updateOne(conditions, doc, [options], [callback])</code>，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将姓名为lan的第一个用户年龄变为70</span></span><br><span class=\"line\">Model.updateOne(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;age:<span class=\"number\">70</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,raw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//&#123; n: 2, nModified: 2, ok: 1 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(raw);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更改器\"><a href=\"#修改更改器\" class=\"headerlink\" title=\"修改更改器\"></a>修改更改器</h3><ol>\n<li><code>$inc</code>:增减修改器，只对数字有效。</li>\n<li><code>$set</code>:指定键并修改，不存在则创建。</li>\n<li><code>$unset</code>:删除一个键。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inc </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$inc'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"number\">61</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: age=23</span></span><br><span class=\"line\"><span class=\"comment\">// set </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$set'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"string\">'百岁老人'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: age=百岁老人</span></span><br><span class=\"line\"><span class=\"comment\">// set </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$unset'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: <span class=\"string\">'百岁老人'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: 删除了age键</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"数组更改器\"><a href=\"#数组更改器\" class=\"headerlink\" title=\"数组更改器\"></a>数组更改器</h3><ol>\n<li><code>$push</code>: 给一个键push一个数组成员,键不存在会创建</li>\n<li><code>$addToSet</code>:向数组中添加一个元素,如果存在就不添加。</li>\n<li><code>$each</code>:遍历数组。</li>\n<li><code>$pop</code>:向数组中尾部删除一个元素</li>\n<li><code>$pull</code>:向数组中删除指定元素。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inc </span></span><br><span class=\"line\"> Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$push'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'array'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: 增加一个 array 键,类型为数组, 有一个成员 10</span></span><br><span class=\"line\">Model.update(&#123;</span><br><span class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">'$push'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'array'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'$each'</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行后: array : [10,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>查询所有符合条件的数据。<br>语法：<code>Model.find(conditions, [projection], [options], [callback])</code>,第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数。如果参数为空则传null</p>\n<h4 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h4><ul>\n<li>$or　　　　或关系</li>\n<li>$nor　　　 或关系取反</li>\n<li>$gt　　　　大于</li>\n<li>$gte　　　 大于等于</li>\n<li>$lt　　　　小于</li>\n<li>$lte　　　 小于等于</li>\n<li>$ne　　　　不等于</li>\n<li>$in　　　　在多个值范围内</li>\n<li>$nin　　　 不在多个值范围内</li>\n<li>$all　　　 匹配数组中多个值</li>\n<li>$regex　　 正则，用于模糊查询</li>\n<li>$size　　　匹配数组大小</li>\n<li>$maxDistance　范围查询，距离（基于LBS）</li>\n<li>$mod　　　　取模运算</li>\n<li>$near　　　 邻域查询，查询附近的位置（基于LBS）</li>\n<li>$exists　　 字段是否存在</li>\n<li>$elemMatch　匹配内数组内的元素</li>\n<li>$within　　　范围查询（基于LBS）</li>\n<li>$box　　　　 范围查询，矩形范围（基于LBS）</li>\n<li>$center　　　范围醒询，圆形范围（基于LBS）</li>\n<li>$centerSphere　范围查询，球形范围（基于LBS）</li>\n<li>$slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素</li>\n<li>$where       可以使用任意JavaScript作为条件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询名为lan年龄大于60的用户</span></span><br><span class=\"line\">Model.find(&#123;name:<span class=\"regexp\">/lan/</span>,age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 查询名为lan的用户，只输出name，不输出id</span></span><br><span class=\"line\">Model.find(&#123;name:<span class=\"regexp\">/lan/</span>&#125;,&#123;name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 找出跳过前两条的所有数据</span></span><br><span class=\"line\">Model.find(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,&#123;skip:<span class=\"number\">2</span>&#125;,(err,docs)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"findById\"><a href=\"#findById\" class=\"headerlink\" title=\"findById\"></a>findById</h3><p>通过id查询数据。<br>语法：<code>Model.findById(id, [projection], [options], [callback])</code>，除了查询条件是id，其他参数跟<code>find</code>一样，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询某个id的用户</span></span><br><span class=\"line\">Model.findById(id,(err,doc)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findOne\"><a href=\"#findOne\" class=\"headerlink\" title=\"findOne\"></a>findOne</h3><p>返回查询到的第一个数据<br>语法：<code>Model.findOne([conditions], [projection], [options], [callback])</code>，用法跟<code>find</code>一样，只是只返回查到的第一个数据，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询某个id的用户</span></span><br><span class=\"line\">Model.findOne(&#123;name:<span class=\"regexp\">/lan/</span>,age:&#123;$gte:<span class=\"number\">60</span>&#125;&#125;,(err,doc)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询后处理\"><a href=\"#查询后处理\" class=\"headerlink\" title=\"查询后处理\"></a>查询后处理</h3><p>所谓的查询后处理，就是在查询到的结果里通过以下方法再处理，方法如下：</p>\n<ul>\n<li>sort     排序</li>\n<li>skip     跳过</li>\n<li>limit    限制</li>\n<li>select   显示字段</li>\n<li>exect    执行</li>\n<li>count    计数</li>\n<li>distinct 去重</li>\n</ul>\n<h2 id=\"前后钩子\"><a href=\"#前后钩子\" class=\"headerlink\" title=\"前后钩子\"></a>前后钩子</h2><p>中间件函数，在执行某些操作之前执行某些函数，在schema上定义。<br>以下函数可以设置前后钩子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate</span><br><span class=\"line\">save</span><br><span class=\"line\">remove</span><br><span class=\"line\">count</span><br><span class=\"line\">find</span><br><span class=\"line\">findOne</span><br><span class=\"line\">findOneAndRemove</span><br><span class=\"line\">findOneAndUpdate</span><br><span class=\"line\">insertMany</span><br><span class=\"line\">update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre()\"></a>pre()</h3><p><code>pre()</code>是在执行方法之前执行的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123; age:<span class=\"built_in\">Number</span>, name: <span class=\"built_in\">String</span>, &#125;);  </span><br><span class=\"line\">schema.pre(<span class=\"string\">'find'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法1'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">schema.pre(<span class=\"string\">'find'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法2'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> user = mongoose.model(<span class=\"string\">'user'</span>, schema);</span><br><span class=\"line\">user.find(<span class=\"literal\">null</span>, &#123;name:<span class=\"number\">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">我是pre方法1</span><br><span class=\"line\">我是pre方法2</span><br><span class=\"line\">&#123; name: 'lan'&#125;</span><br><span class=\"line\">*/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"post()\"></a>post()</h3><p><code>post()</code>是执行某些操作前最后执行的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123; age:<span class=\"built_in\">Number</span>, name: <span class=\"built_in\">String</span>, &#125;);  </span><br><span class=\"line\">schema.pre(<span class=\"string\">'post'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法1'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">schema.pre(<span class=\"string\">'post'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是pre方法2'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> user = mongoose.model(<span class=\"string\">'user'</span>, schema);</span><br><span class=\"line\">user.find(<span class=\"literal\">null</span>, &#123;name:<span class=\"number\">1</span>&#125;, (err,docs) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(docs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">我是pre方法1</span><br><span class=\"line\">我是pre方法2</span><br><span class=\"line\">&#123; name: 'lan'&#125;</span><br><span class=\"line\">*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"聚合管道\"><a href=\"#聚合管道\" class=\"headerlink\" title=\"聚合管道\"></a>聚合管道</h2><p>可以理解为高级的查询方法。<br>语法：<code>Model.aggregate([options], [callback])</code>，<code>options</code>说明如下：</p>\n<ul>\n<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。对应project()方法</li>\n<li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。对应match()。</li>\n<li>$limit：用来限制MongoDB聚合管道返回的文档数。对应limit()方法</li>\n<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。对应skip()。</li>\n<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。对应unwind()方法</li>\n<li>$group：将集合中的文档分组，可用于统计结果。对应group()方法</li>\n<li>$sort：将输入文档排序后输出。对应sort()方法</li>\n<li>$geoNear：输出接近某一地理位置的有序文档。对应near()。</li>\n<li>$sample：随机选择N个</li>\n<li>$lookup：连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于populate,<a href=\"../mongoose-populate\">联表查询</a></li>\n</ul>"},{"title":"Redux源码解析","date":"2019-05-24T05:53:51.000Z","_content":"\n> 此源码分析时，redux版本号是4.0.1\n\n#API\n\n`Redux`的API只有以下五个：\n1. createStore\n2. combineReducers\n3. bindActionCreators\n4. applyMiddleware\n5. compose\n\n我们分别针对这五个接口进行分析。\n<!--more-->\n\n## createStore\n`createStore`创建一个Redux store 来存储所有state，接受三个参数: `reducer`, `preloadedState`, `enhancer` ：\n* `reducer`:  reducer 是一个函数，接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 statetree，\n* `preloadedState`：初始化state，设置store中默认值 , 可以将服务端传来经过处理后的 state 传给它，如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象。\n* `enhancer`：高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。\n\n返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方：\n* `dispatch`:接收一个action， 是一个object{type：'a_action_type'}作为参数，之后其内部会调用reducer，根据这个action，和当前state，返回新的state。\n* `getState`:获取最新state。\n* `subscribe`: 订阅函数，当 dispatch 的时候调用的，从listener数组中获取当前执行的dispatch，并执行。\n* `replaceReducer`:替换reducer，改变state修改的逻辑\n\n`createStore.js` 源码分析如下：\n````javascript\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 保证 传入的 preloadedState, enhancer 是非函数 \n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function'\n    )\n  }\n  // 如果第二个参数是函数，则将 preloadedState 赋给 enhancer \n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n  // enhancer必须是函数\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  // reducer必须是函数\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer // 当前的reducer\n  let currentState = preloadedState // 当前的 state\n  let currentListeners = [] // 当前dispatch将会触发的更新函数数组\n  let nextListeners = currentListeners // 下个dispatch将会触发的函数数组 \n  let isDispatching = false // 变量开关，是否正在执行dispatch\n  \n  // 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n    // 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变\n    // 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    // 将listener推入到nextListeners数组\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n    // 将listener从nextListeners数组中删除      \n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 不能同时dispatch 多个 action 函数\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      // 通过reducer函数，获取当前的 state \n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 遍历调用\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  // 替换计算 state的 reducer。\n  function replaceReducer(nextReducer) {\n    // 必须是个函数\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n    // 将传入的 currentReducer 赋值给 currentReducer\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n \n  // 改变 state最小的 observabl\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n        // 订阅state的更新函数\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n        // 取消订阅state的更新函数\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n  // 初始化 默认的 store 里的 statetree\n  dispatch({ type: ActionTypes.INIT })\n\n  // 暴露出去的方法\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n````\n\n## combineReducers\n将多个reducer合并为一个reducer，传入的是一个对象，不定义reducer的键值的话，就是reducer的名词。\n`combineReducers.js` 源码分析如下：\n````javascript\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 检查reducers的state是否有默认返回值\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 以默认值来执行reducer \n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n /**\n 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如\n {\n   reducerA: funA\n   reducerB: funB\n }\n 并且生成新的state tree，形如：\n {\n   reducerA: {\n     key: 'value'\n   },\n   reducerB: {\n     key: 'value'\n   }\n }\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  // 过滤掉reducers中不是function的键值对\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    // 存放最终的 state 树\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      // 获取每个reducer的key名\n      const key = finalReducerKeys[i]\n      // 获取 reducer\n      const reducer = finalReducers[key]\n      // 获取传入的state树\n      const previousStateForKey = state[key]\n      // 执行该key的reducer函数，生成新state tree\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      // 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree\n      nextState[key] = nextStateForKey\n      // 判断所有的state有没有变化\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 如果state tree 变化了，就返回新的；否则，返回旧的\n    return hasChanged ? nextState : state\n  }\n}\n````\n## applyMiddleware\n回顾下`createStore`方法，`createStore(reducer, preloadedState, enhancer)`，`applyMiddleware`作为第三个参数`enhancer`传入，对dispatch进行包装，处理各种actin。\n\n`applyMiddleware.js` 源码分析如下：\n````javascript\nimport compose from './compose'\n\n /**\n applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store\n */\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 将 middlewares 作为参数注入，函数科里化后返回新的函数链。\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 以 store.dispatch 来注入 \n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n\n````\n## bindActionCreators\n自动把多个 action 创建函数 绑定到相应的 dispatch() 方法上，可直接使用，不需要引入 action。\n接受两个参数：\n* `actionCreator`可以是对象也可以是函数，如果是对象则返回对象，如果是函数则返回函数。\n* `dispatch` dispatch函数\n`bindActionCreators.js` 源码分析如下：\n````javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\n/**\n 将dispatch包装好来直接使用\n */\n \nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n  // 遍历 actionCreators ， 返回 dispatch 设置为相应key对应的 action 的对象\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n````\n## compose\n从里往外把接受到函数合成最终函数，能让传入的函数依次执行。\n\n`compose.js` 源码分析如下：\n````javascript\n/**\n 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) => f(g(h(...args)))\n*/\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n\n````","source":"_posts/redux.md","raw":"title: Redux源码解析\ndate: 2019-05-24 13:53:51\ntags:\n- JavaScript\n- React\ncategories:\n- JavaScript\n- React\n---\n\n> 此源码分析时，redux版本号是4.0.1\n\n#API\n\n`Redux`的API只有以下五个：\n1. createStore\n2. combineReducers\n3. bindActionCreators\n4. applyMiddleware\n5. compose\n\n我们分别针对这五个接口进行分析。\n<!--more-->\n\n## createStore\n`createStore`创建一个Redux store 来存储所有state，接受三个参数: `reducer`, `preloadedState`, `enhancer` ：\n* `reducer`:  reducer 是一个函数，接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 statetree，\n* `preloadedState`：初始化state，设置store中默认值 , 可以将服务端传来经过处理后的 state 传给它，如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象。\n* `enhancer`：高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。\n\n返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方：\n* `dispatch`:接收一个action， 是一个object{type：'a_action_type'}作为参数，之后其内部会调用reducer，根据这个action，和当前state，返回新的state。\n* `getState`:获取最新state。\n* `subscribe`: 订阅函数，当 dispatch 的时候调用的，从listener数组中获取当前执行的dispatch，并执行。\n* `replaceReducer`:替换reducer，改变state修改的逻辑\n\n`createStore.js` 源码分析如下：\n````javascript\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 保证 传入的 preloadedState, enhancer 是非函数 \n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function'\n    )\n  }\n  // 如果第二个参数是函数，则将 preloadedState 赋给 enhancer \n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n  // enhancer必须是函数\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  // reducer必须是函数\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer // 当前的reducer\n  let currentState = preloadedState // 当前的 state\n  let currentListeners = [] // 当前dispatch将会触发的更新函数数组\n  let nextListeners = currentListeners // 下个dispatch将会触发的函数数组 \n  let isDispatching = false // 变量开关，是否正在执行dispatch\n  \n  // 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n    // 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变\n    // 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    // 将listener推入到nextListeners数组\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n    // 将listener从nextListeners数组中删除      \n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 不能同时dispatch 多个 action 函数\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      // 通过reducer函数，获取当前的 state \n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 遍历调用\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  // 替换计算 state的 reducer。\n  function replaceReducer(nextReducer) {\n    // 必须是个函数\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n    // 将传入的 currentReducer 赋值给 currentReducer\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n \n  // 改变 state最小的 observabl\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n        // 订阅state的更新函数\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n        // 取消订阅state的更新函数\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n  // 初始化 默认的 store 里的 statetree\n  dispatch({ type: ActionTypes.INIT })\n\n  // 暴露出去的方法\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n````\n\n## combineReducers\n将多个reducer合并为一个reducer，传入的是一个对象，不定义reducer的键值的话，就是reducer的名词。\n`combineReducers.js` 源码分析如下：\n````javascript\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 检查reducers的state是否有默认返回值\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 以默认值来执行reducer \n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n /**\n 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如\n {\n   reducerA: funA\n   reducerB: funB\n }\n 并且生成新的state tree，形如：\n {\n   reducerA: {\n     key: 'value'\n   },\n   reducerB: {\n     key: 'value'\n   }\n }\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  // 过滤掉reducers中不是function的键值对\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    // 存放最终的 state 树\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      // 获取每个reducer的key名\n      const key = finalReducerKeys[i]\n      // 获取 reducer\n      const reducer = finalReducers[key]\n      // 获取传入的state树\n      const previousStateForKey = state[key]\n      // 执行该key的reducer函数，生成新state tree\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      // 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree\n      nextState[key] = nextStateForKey\n      // 判断所有的state有没有变化\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 如果state tree 变化了，就返回新的；否则，返回旧的\n    return hasChanged ? nextState : state\n  }\n}\n````\n## applyMiddleware\n回顾下`createStore`方法，`createStore(reducer, preloadedState, enhancer)`，`applyMiddleware`作为第三个参数`enhancer`传入，对dispatch进行包装，处理各种actin。\n\n`applyMiddleware.js` 源码分析如下：\n````javascript\nimport compose from './compose'\n\n /**\n applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store\n */\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 将 middlewares 作为参数注入，函数科里化后返回新的函数链。\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 以 store.dispatch 来注入 \n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n\n````\n## bindActionCreators\n自动把多个 action 创建函数 绑定到相应的 dispatch() 方法上，可直接使用，不需要引入 action。\n接受两个参数：\n* `actionCreator`可以是对象也可以是函数，如果是对象则返回对象，如果是函数则返回函数。\n* `dispatch` dispatch函数\n`bindActionCreators.js` 源码分析如下：\n````javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\n/**\n 将dispatch包装好来直接使用\n */\n \nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n  // 遍历 actionCreators ， 返回 dispatch 设置为相应key对应的 action 的对象\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n````\n## compose\n从里往外把接受到函数合成最终函数，能让传入的函数依次执行。\n\n`compose.js` 源码分析如下：\n````javascript\n/**\n 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) => f(g(h(...args)))\n*/\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n\n````","slug":"redux","published":1,"updated":"2019-06-27T02:12:58.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76ac002tdkhsvagx8mp1","content":"<blockquote>\n<p>此源码分析时，redux版本号是4.0.1</p>\n</blockquote>\n<p>#API</p>\n<p><code>Redux</code>的API只有以下五个：</p>\n<ol>\n<li>createStore</li>\n<li>combineReducers</li>\n<li>bindActionCreators</li>\n<li>applyMiddleware</li>\n<li>compose</li>\n</ol>\n<p>我们分别针对这五个接口进行分析。<br><a id=\"more\"></a></p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p><code>createStore</code>创建一个Redux store 来存储所有state，接受三个参数: <code>reducer</code>, <code>preloadedState</code>, <code>enhancer</code> ：</p>\n<ul>\n<li><code>reducer</code>:  reducer 是一个函数，接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 statetree，</li>\n<li><code>preloadedState</code>：初始化state，设置store中默认值 , 可以将服务端传来经过处理后的 state 传给它，如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象。</li>\n<li><code>enhancer</code>：高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。</li>\n</ul>\n<p>返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方：</p>\n<ul>\n<li><code>dispatch</code>:接收一个action， 是一个object{type：’a_action_type’}作为参数，之后其内部会调用reducer，根据这个action，和当前state，返回新的state。</li>\n<li><code>getState</code>:获取最新state。</li>\n<li><code>subscribe</code>: 订阅函数，当 dispatch 的时候调用的，从listener数组中获取当前执行的dispatch，并执行。</li>\n<li><code>replaceReducer</code>:替换reducer，改变state修改的逻辑</li>\n</ul>\n<p><code>createStore.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保证 传入的 preloadedState, enhancer 是非函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span>) ||</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'It looks like you are passing several store enhancers to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class=\"line\">        <span class=\"string\">'together to a single function'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果第二个参数是函数，则将 preloadedState 赋给 enhancer </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// enhancer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// reducer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer <span class=\"comment\">// 当前的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState <span class=\"comment\">// 当前的 state</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = [] <span class=\"comment\">// 当前dispatch将会触发的更新函数数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners <span class=\"comment\">// 下个dispatch将会触发的函数数组 </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span> <span class=\"comment\">// 变量开关，是否正在执行dispatch</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 将listener推入到nextListeners数组</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 将listener从nextListeners数组中删除      </span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不能同时dispatch 多个 action 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过reducer函数，获取当前的 state </span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换计算 state的 reducer。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 必须是个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将传入的 currentReducer 赋值给 currentReducer</span></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 改变 state最小的 observabl</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅state的更新函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取消订阅state的更新函数</span></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 默认的 store 里的 statetree</span></span><br><span class=\"line\">  dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露出去的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h2><p>将多个reducer合并为一个reducer，传入的是一个对象，不定义reducer的键值的话，就是reducer的名词。<br><code>combineReducers.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;String(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span><br><span class=\"line\">  inputState,</span><br><span class=\"line\">  reducers,</span><br><span class=\"line\">  action,</span><br><span class=\"line\">  unexpectedKeyCache</span><br><span class=\"line\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(key =&gt; &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; 1 ? 'keys' : 'key'&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join('\", \"')&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查reducers的state是否有默认返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 以默认值来执行reducer </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123;</span><br><span class=\"line\">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class=\"line\">      &#125;) === <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span><br><span class=\"line\">            ActionTypes.INIT</span><br><span class=\"line\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: funA</span><br><span class=\"line\">   reducerB: funB</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> 并且生成新的state tree，形如：</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   reducerB: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 过滤掉reducers中不是function的键值对</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放最终的 state 树</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取每个reducer的key名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"comment\">// 获取 reducer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"comment\">// 获取传入的state树</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"comment\">// 执行该key的reducer函数，生成新state tree</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree</span></span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      <span class=\"comment\">// 判断所有的state有没有变化</span></span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果state tree 变化了，就返回新的；否则，返回旧的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>回顾下<code>createStore</code>方法，<code>createStore(reducer, preloadedState, enhancer)</code>，<code>applyMiddleware</code>作为第三个参数<code>enhancer</code>传入，对dispatch进行包装，处理各种actin。</p>\n<p><code>applyMiddleware.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createStore =&gt; (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将 middlewares 作为参数注入，函数科里化后返回新的函数链。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 以 store.dispatch 来注入 </span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><p>自动把多个 action 创建函数 绑定到相应的 dispatch() 方法上，可直接使用，不需要引入 action。<br>接受两个参数：</p>\n<ul>\n<li><code>actionCreator</code>可以是对象也可以是函数，如果是对象则返回对象，如果是函数则返回函数。</li>\n<li><code>dispatch</code> dispatch函数<br><code>bindActionCreators.js</code> 源码分析如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 将dispatch包装好来直接使用</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span><br><span class=\"line\">        actionCreators === null ? 'null' : typeof actionCreators</span><br><span class=\"line\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 actionCreators ， 返回 dispatch 设置为相应key对应的 action 的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>从里往外把接受到函数合成最终函数，能让传入的函数依次执行。</p>\n<p><code>compose.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) =&gt; f(g(h(...args)))</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg =&gt; arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<blockquote>\n<p>此源码分析时，redux版本号是4.0.1</p>\n</blockquote>\n<p>#API</p>\n<p><code>Redux</code>的API只有以下五个：</p>\n<ol>\n<li>createStore</li>\n<li>combineReducers</li>\n<li>bindActionCreators</li>\n<li>applyMiddleware</li>\n<li>compose</li>\n</ol>\n<p>我们分别针对这五个接口进行分析。<br>","more":"</p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p><code>createStore</code>创建一个Redux store 来存储所有state，接受三个参数: <code>reducer</code>, <code>preloadedState</code>, <code>enhancer</code> ：</p>\n<ul>\n<li><code>reducer</code>:  reducer 是一个函数，接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 statetree，</li>\n<li><code>preloadedState</code>：初始化state，设置store中默认值 , 可以将服务端传来经过处理后的 state 传给它，如果使用  combineReducers 来制作root reducer，则必须是一个keys保持一致的普通对象。</li>\n<li><code>enhancer</code>：高阶函数，增加返回的 store。与第三方的 middleware 相似，通过函数改变 store 接口。</li>\n</ul>\n<p>返回一个对象，分别提供 dispatch, getState, subscribe, replaceReducer 四个方：</p>\n<ul>\n<li><code>dispatch</code>:接收一个action， 是一个object{type：’a_action_type’}作为参数，之后其内部会调用reducer，根据这个action，和当前state，返回新的state。</li>\n<li><code>getState</code>:获取最新state。</li>\n<li><code>subscribe</code>: 订阅函数，当 dispatch 的时候调用的，从listener数组中获取当前执行的dispatch，并执行。</li>\n<li><code>replaceReducer</code>:替换reducer，改变state修改的逻辑</li>\n</ul>\n<p><code>createStore.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保证 传入的 preloadedState, enhancer 是非函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span>) ||</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'It looks like you are passing several store enhancers to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class=\"line\">        <span class=\"string\">'together to a single function'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果第二个参数是函数，则将 preloadedState 赋给 enhancer </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// enhancer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// reducer必须是函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer <span class=\"comment\">// 当前的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState <span class=\"comment\">// 当前的 state</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = [] <span class=\"comment\">// 当前dispatch将会触发的更新函数数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners <span class=\"comment\">// 下个dispatch将会触发的函数数组 </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span> <span class=\"comment\">// 变量开关，是否正在执行dispatch</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果 nextListeners 和 currentListeners 是同一个引用，则拷贝一份</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在执行 dispatch 中的函数时，则抛出错误；只有在执行结束后才返回新的state</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为执行 dispatch 时会调用 listener，所以在执行dispatch的时候，必须保证 listeners 数组中的订阅更新函数不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在dispatch()执行的时候，订阅还是在取消订阅的时候都不能更新 listeners数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 将listener推入到nextListeners数组</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 将listener从nextListeners数组中删除      </span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不能同时dispatch 多个 action 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过reducer函数，获取当前的 state </span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换计算 state的 reducer。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 必须是个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将传入的 currentReducer 赋值给 currentReducer</span></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; type: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 改变 state最小的 observabl</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅state的更新函数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取消订阅state的更新函数</span></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 默认的 store 里的 statetree</span></span><br><span class=\"line\">  dispatch(&#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露出去的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h2><p>将多个reducer合并为一个reducer，传入的是一个对象，不定义reducer的键值的话，就是reducer的名词。<br><code>combineReducers.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;String(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span><br><span class=\"line\">  inputState,</span><br><span class=\"line\">  reducers,</span><br><span class=\"line\">  action,</span><br><span class=\"line\">  unexpectedKeyCache</span><br><span class=\"line\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(key =&gt; &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; 1 ? 'keys' : 'key'&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join('\", \"')&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join('\", \"')&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查reducers的state是否有默认返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 以默认值来执行reducer </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; type: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123;</span><br><span class=\"line\">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class=\"line\">      &#125;) === <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span><br><span class=\"line\">            ActionTypes.INIT</span><br><span class=\"line\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> 将传入的reducers转为，key为reducerName，value为reducer处理函数，形如</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: funA</span><br><span class=\"line\">   reducerB: funB</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> 并且生成新的state tree，形如：</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   reducerA: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   reducerB: &#123;</span><br><span class=\"line\">     key: 'value'</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 过滤掉reducers中不是function的键值对</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放最终的 state 树</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取每个reducer的key名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"comment\">// 获取 reducer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"comment\">// 获取传入的state树</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"comment\">// 执行该key的reducer函数，生成新state tree</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 以各自的reducerName作为key名，将新生成的state作为value值，生成最终的state tree</span></span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      <span class=\"comment\">// 判断所有的state有没有变化</span></span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果state tree 变化了，就返回新的；否则，返回旧的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>回顾下<code>createStore</code>方法，<code>createStore(reducer, preloadedState, enhancer)</code>，<code>applyMiddleware</code>作为第三个参数<code>enhancer</code>传入，对dispatch进行包装，处理各种actin。</p>\n<p><code>applyMiddleware.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span><br><span class=\"line\"> applyMiddleware(thunk)就是 createStore 中的enhancer，负责扩展store</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createStore =&gt; (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将 middlewares 作为参数注入，函数科里化后返回新的函数链。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 以 store.dispatch 来注入 </span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><p>自动把多个 action 创建函数 绑定到相应的 dispatch() 方法上，可直接使用，不需要引入 action。<br>接受两个参数：</p>\n<ul>\n<li><code>actionCreator</code>可以是对象也可以是函数，如果是对象则返回对象，如果是函数则返回函数。</li>\n<li><code>dispatch</code> dispatch函数<br><code>bindActionCreators.js</code> 源码分析如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 将dispatch包装好来直接使用</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span><br><span class=\"line\">        actionCreators === null ? 'null' : typeof actionCreators</span><br><span class=\"line\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 actionCreators ， 返回 dispatch 设置为相应key对应的 action 的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>从里往外把接受到函数合成最终函数，能让传入的函数依次执行。</p>\n<p><code>compose.js</code> 源码分析如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> 传入 Functions 作为参数，返回链式调用的形态。譬如，compose(f, g, h) 最终返回 (...args) =&gt; f(g(h(...args)))</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg =&gt; arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"使用原生函数代替underscore/lodash","date":"2019-07-16T01:23:26.000Z","_content":"\n为了更好的理解函数式变成，我们可以先从替换`underscore/lodash`开始。从[You-Dont-Need-Lodash-Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)代替方法的学习过程中，我们发现有些`underscore/lodash`来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生`reduce`代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。\n\n如果项目小，也没必要引入经常爆出bug的`loadsh`。\n<!--more-->\nPS：其中数组方法中的 `concat`(合并生成一个新数组)、`fill`（填充数组）、`reverse`(颠倒数组顺序)、`slice`(切割数组)等等跟原生方法一样就不列举出来了。\n## collections\n### _.each\n按顺序遍历list的所有元素。Es6的forEach只支持循环数组，可以使用`Object.entries`将对象转成数组。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\n_.each(['a', 'b', 'c'], function(value,index){\n    console.log(index  + value)\n})\n// output: 0a 1b 2c\n_.each({one: 1, two: 2, three: 3}, function(value,key){\n    console.log(key  + value)\n});\n// output: one1 two2 three3\n\n// Native \n['a', 'b', 'c'].forEach( (value, index) => console.log(index + value))\n// output: 0a 1b 2c\nObject.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n// output one1 two2 three3\n````\n\n### _.map\n`_.map`跟`_.each`都是遍历list的所有元素，`_.each`只是在原list上操作，而`_.map`会创建一个新的list。所以native中我们使用同名函数`map`来实现就够了。有两个参数：\n1. 生成新数组的回调函数三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\nvar array1 = ['a', 'b', 'c']\nvar array2 = _.map(array1, function (value, index) {\n    return 'Hi ' + value \n})\nconsole.log(array2)\n// output: [\"Hi a\", \"Hi b\", \"Hi c\"]\n\n// Native \nvar array1 = ['a', 'b', 'c']\nvar array2 = array1.map( (value, index) => 'Hi ' + value )\nconsole.log(array2)\n// output: [\"Hi a\", \"Hi b\", \"Hi c\"]\n````\n\n### _.reduce\n`reduce`可以用原生数组的`reduce`方法来模拟。`reduce`提供了两个参数：\n1. 累加器函数：四个参数分别是：上一次调用的值或者传入的初始值、正在处理的元素、正在处理元素的索引值以及调用的`reduce`的源数组。\n有。\n2. 第一次执行累加函数的初始值。\n````javascript\n// Underscore/Lodash\nvar array = [0, 1, 2, 3, 4]\nvar result = _.reduce(array, function(previousValue, currentValue, currentIndex, array){\n    return previousValue + currentValue\n})\nconsole.log(result)\n// output: 10\n\n// Native\nvar array = [0, 1, 2, 3, 4]\nvar result = array.reduce( (previousValue, currentValue, currentIndex, array) => previousValue + currentValue )\nconsole.log(result)\n// output: 10\n````\n\n### _.reduceRight\n`reduce`的从右往左累加的方法。\n````javascript\n// Underscore/Lodash\nvar array = [0, 1, 2, 3, 4]\nvar result = _.reduceRight(array, function(previousValue, currentValue, currentIndex, array){\n    return previousValue - currentValue\n})\nconsole.log(result)\n// output: -2\n\n// Native\nvar array = [0, 1, 2, 3, 4]\nvar result = array.reduceRight( (previousValue, currentValue, currentIndex, array) => previousValue - currentValue )\nconsole.log(result)\n// output: -2\n````\n\n### _.every\nevery表示是否每一项都必须都符合条件。换句话说如果全部都符合条件，则返回true；有一项不符合则返回false。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n若收到一个空数组，此方法在一切情况下都会返回 true。\n````javascript\n// Underscore/Lodash\nvar array = [10, 20, 30]\nvar result = _.every(array, function(element, index, array){\n    return element >= 10\n})\nconsole.log(result)\n// output: true\n\n// Native\nvar array = [10, 20, 30]\nvar result = array.every( (element, index, array) => element >= 10 )\nconsole.log(result)\n// output: true\n````\n\n### _.some\nsome则是只要有一项符合条件就返回true。换句话说如果有一项符合条件，则返回true；除非一项都不符合条件才返回false。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n对于空数组上的任何条件，此方法返回false。\n````javascript\n// Underscore/Lodash\nvar array = [10, 20, 30]\nvar result = _.some(array, function(element, index, array){\n    return element >= 30\n})\nconsole.log(result)\n// output: true\n\n// Native\nvar array = [10, 20, 30]\nvar result = array.some( (element, index, array) => element >= 30 )\nconsole.log(result)\n// output: true\n````\n\n### _.find\n返回第一个满足条件的元素，如果不存在则放回`undefined`。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\n var users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar result = _.find(users,  function (o) { return o.age < 40; })\nconsole.dir(result)\n// output: active: true age: 36 user: \"xiaoming\"\n// Native\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar result = users.find( (o) =>  o.age < 40 )\nconsole.dir(result)\n// output: active: true age: 36 user: \"xiaoming\"\n````\n\n### _.pluck\n原生JS中没有pluck方法，但是我们可以使用map模拟。\n`Lodash` v4.0 已经移除`pluck`函数。\n````javascript\nvar users = [{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Jeremy\"}]\nvar names = _.pluck(users, \"name\")\nconsole.log(names)\n// output: [\"Alice\", \"Bob\", \"Jeremy\"]\n// Native\nvar users = [{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Jeremy\"}]\nvar names = users.map( (o) => o.name )\nconsole.log(names)\n// output:[\"Alice\", \"Bob\", \"Jeremy\"]\n````\n\n### _.includes\n判断是否包含某个特定的值，如果有则返回true，否则返回false。\n````javascript\n// Underscore/Lodash\nvar array = [1, 2, 3]\n// Underscore/Lodash - also called _.contains\nvar isIncludes = _.includes(array, 1)\nconsole.log(isIncludes)\n// output: true\n\n// Native\nvar array = [1, 2, 3]\nvar isIncludes = array.includes(1)\nconsole.log(isIncludes)\nvar isIndexOf = array.indexOf(1) > -1;\n// output: true\nconsole.log(isIndexOf)\n// output: true\n````\n\n### _.toArray\n`toArray`方法则可以用数组扩展符以及`Array.from`来模拟。`Array.from`跟数组扩展符都是浅拷贝，只能拷贝第一层的值，第二次及其之后的值无法进行深拷贝，他们的引用地址任然是同一个。\n其中`Array.from`不仅可以生成转换成数组，也可以运行对每个元素执行回调函数。\n`Array.from({length:10})`生成的新数组，及时里面的值都是`undefined`也是可以循环遍历。`Array.from`有三个参数：\n1. 想要转为成数组的元素\n2. `map`回调函数\n3. 回调的执行函数\n所以，`Array.from(obj, mapFn, thisArg)` 就相当于 `Array.from(obj).map(mapFn, thisArg)`,\n\n````javascript\n// Underscore/Lodash\n_.toArray('abc')\n// output: [\"a\", \"b\", \"c\"]\n_.toArray([1, 2])\n// output: [1, 2]\n_.toArray({ 'a': 1, 'b': 2 })\n// output: [1, 2]\n// Native\n[...'abc']\n// output: [\"a\", \"b\", \"c\"]\nArray.from([1, 2])\n// output: [1, 2]\nArray.from(Object.values({ 'a': 1, 'b': 2 }))\n// output: [1, 2]\n````\n\n## Arrays\n\n### _.object\n`_.object`将数组转换为对象。原生js中没有此方法，但是我们可以使用数组的`reduce`方法以及对象的`assign`来模拟。\n````javascript\n// Underscore/Lodash\n_.object(['moe', 'larry', 'curly'], [30, 40, 50])\n// output: {curly: 50, larry: 40, moe: 30}\n_.object([['moe', 30], ['larry', 40], ['curly', 50]])\n// output: {curly: 50, larry: 40, moe: 30}\n\n// Native\nvar array = [['moe', 30], ['larry', 40], ['curly', 50]];\narray.reduce((result, [key, val]) => Object.assign(result, {[key]: val}), {})\n// output: {curly: 50, larry: 40, moe: 30}\nvar array = [['moe', 'larry', 'curly'], [30, 40, 50]];\narray.slice(0, 1)[0].reduce( (result, key, index, _array) => Object.assign(result, {[key]: array[1][index]}) ,{})\n// output: {curly: 50, larry: 40, moe: 30}\n````\n\n### _.compact\n去除数组中的所有false的值。原生中没有，但是可以使用filter来模拟。\n````javascript\n// Underscore/Lodash\n_.compact([0, 1, false, 2, '', 3])\n// output: [1, 2, 3]\n\n// Native\n[0, 1, false, 2, '', 3].filter(Boolean)\n// output: [1, 2, 3]\n[0, 1, false, 2, '', 3].filter(x => !!x)\n// output: [1, 2, 3]\n````\n\n### _.uniq\n数组去重。`Set` 对象可以去重，再转成数组来模拟。\n````javascript\n// Underscore/Lodash\nvar result = _.uniq([1, 2, 1, 4, 1, 3])\nconsole.log(result)\n// output: [1, 2, 4, 3]\n\n// Native\nvar result = [...new Set([1, 2, 1, 4, 1, 3])]\nconsole.log(result)\n// output: [1, 2, 4, 3]\n````\n\n### _.indexOf\n数组中寻找一个给定元素的第一个索引，如果不存在，则返回-1，跟原生数组中的`indexOf`方法一样。\n`indexOf`有两个参数：\n1. 要查找的元素\n2. 开始查找的索引位置\n````javascript\n// Underscore/Lodash\nvar result = _.indexOf([2, 9, 9], 2)\nconsole.log(result)\n// output: 0\n\n// Native\nvar result = [2, 9, 9].indexOf(2)\nconsole.log(result)\n// output: 0\n````\n\n### _.findIndex\n返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar index = _.findIndex(users, function (o) { return o.age >= 40; })\nconsole.log(index)\n// output: 0\n\n// Native\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar index = users.findIndex( (o) => o.age >=40 )\nconsole.log(index)\n// output: 0\n````\n\n### _.range\n原生Js中没有`range`。所以直接使用`map`函数来处理，并最终处理成数组。\n````javascript\n// Underscore/Lodash\n_.range(10)\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n_.range(1, 11)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n_.range(0, 30, 5)\n// output: [0, 5, 10, 15, 20, 25]\n_.range(0, -10, -1)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n_.range(0)\n// output: []\n\n// Native\nArray.from({length:10}, (_, i) => i)\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nArray.from({length:10}, (_, i) => i+1)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nArray.from({length:6}, (_, i) => i*5)\n// output: [0, 5, 10, 15, 20, 25]\nArray.from({length:10}, (_, i) => -i)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\nArray.from({length:0})\n// output: []\n\n[...Array(10).keys() ] )\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[...Array(10).keys()].map(k => k + 1)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[...Array(6).keys()].map(k => k*5 )\n// output: [0, 5, 10, 15, 20, 25]\n[...Array(10).keys()].map(k => -k)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n[]\n// output: []\n````\n\n### _.chunk\n将数组拆分成多个size长度的小数组，并且将这些小数组组成一个新的大数组，如果最后剩余的元素不够size长度，那么最后剩余的元素组成一个小数组。\n````javascript\n// Underscore/Lodash\n_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n\n// Native\nconst chunk = (input, size) => {\n    return input.reduce((previousValue, currentValue, currentIndex, array) => {\n        return currentIndex % size === 0\n        ? [...previousValue, [currentValue]] //当前索引跟size余数为0时，新增一个小数组\n        : [...previousValue.slice(0, -1), [...previousValue.slice(-1)[0], currentValue]]; //当前索引跟size余数不为0时，往length - 1的小数组里推值\n    })\n};\nchunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n````\n\n### _.difference\n原生中没有此方法，所以得模拟。`difference`会返回一个过滤值不包含排除值的新数组。接受两个参数：\n1. 原数组\n2. 要排除的值，[values]\n````javascript\nvar arrays = [[1, 2, 3, 4, 5], [5, 2, 10]];\n// Underscore/Lodash\nvar a =_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// output: [1, 3, 4]\n\n// Native\nconsole.log(arrays.reduce(function(source, target) {\n    return source.filter(function(value) { \n        return !target.includes(value); // 如果过滤数组中函数该值includes则返回true，filter则会创建返回值是true的新数组\n    });\n}));\n// output: [1, 3, 4]\nconsole.log(arrays.reduce((source, target) => source.filter(value => !target.includes(value))));\n// output: [1, 3, 4]\n````\n\n### _.drop\n原生`slice`方法的阉割版。\n````javascript\n// Underscore/Lodash\n_.drop([1, 2, 3]);\n// => [2, 3]\n_.drop([1, 2, 3], 2);\n// => [3]\n\n// Native\n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n````\n\n### _.first\n获取数组 array 的第一个元素。\n````javascript\n// Underscore/Lodash\n_.first([1, 2, 3, 4, 5]);\n// => 1\n\n_.first([1, 2, 3, 4, 5], 2);\n// => [1, 2]\n// Native\n[1, 2, 3, 4, 5][0];\n// => 1\n//or\n[].concat(1, 2, 3, 4, 5).shift()\n// => 1\n//or\n[].concat([1, 2, 3, 4, 5]).shift()\n// => 1\n\n// Native (works even with potentially undefined/null, like _.first)\n[].concat(undefined).shift()\n// => undefined\n[1, 2, 3, 4, 5].slice(0, 2);\n// => [1, 2]\n````\n\n\n### _.last\n获取array中的最后一个元素。\n````javascript\n// Underscore/Lodash\nconst numbers = [1, 2, 3, 4, 5];\n_.last(numbers);\n// => 5\n\n_.last(numbers, 2);\n// => [4, 5]\n\n// Native\nconst numbers = [1, 2, 3, 4, 5];\nnumbers[numbers.length - 1];\n// => 5\n//or\nnumbers.slice(-1)[0];\n// => 5\n[].concat(numbers).pop()\n// => 5\n\n// Native\n[].concat(undefined).pop()\n// => undefined\n\nnumbers.slice(-2);\n// => [4, 5]\n````\n\n### _.flatten\n\n````javascript\n// Underscore/Lodash\n_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n// Native\nconst flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), []) // 合并一级层级\n// => [1, 2, [3, [4]], 5]\n\n// Native(ES2019)\nconst flatten = [1, [2, [3, [4]], 5]].flat()\n// => [1, 2, [3, [4]], 5]\n````\n\n### _.flattenDeep\n\n````javascript\n// Underscore/Lodash\n_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n// Native\nconst flattenDeep = (arr) => Array.isArray(arr)\n  ? arr.reduce( (a, b) => a.concat(flattenDeep(b)) , []) // 如果是数组则继续合并\n  : [arr] // 知道不是数组为止\n\nflattenDeep([1, [[2], [3, [4]], 5]])\n// => [1, 2, 3, 4, 5]\n\n// Native(ES2019)\n[1, [2, [3, [4]], 5]].flat(Infinity) // 使用 Infinity 作为深度，展开为一维数组\n// => [1, 2, 3, 4, 5]\n````\n\n### _.isArrayBuffer\n检查 value 是否是 ArrayBuffer 对象。\n````javascript\n// Underscore/Lodash\n_.isArrayBuffer(new ArrayBuffer(2));\n// output: true\n\n// Native\nconsole.log(new ArrayBuffer(2) instanceof ArrayBuffer);\n// output: true\n````\n\n### _.intersection\n创建唯一值的数组\n````javascript\n// Underscore/Lodash\nconsole.log(_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]))\n// output: [1, 2]\n\n// Native\nvar arrays = [[1, 2, 3], [101, 2, 1, 10], [2, 1]];\nconsole.log(array.reduce(function(a, b) {\n  return a.filter(function(value) { // 因为是包含共同值，所以很自然的使用filter来过滤并创建新数组\n    return b.includes(value); // 为true则保留该元素\n  });\n})));\n// output: [1, 2]\n\n// ES6\nlet arrays = [[1, 2, 3], [101, 2, 1, 10], [2, 1]];\nconsole.log(arrays.reduce((a, b) => a.filter(c => b.includes(c))));\n// output: [1, 2]\n````\n\n### _.without\n创建一个剔除所有给定值的新数组\n````javascript\n// Underscore/Lodash\nvar array = [1, 2, 3]\nconsole.log(_.without(array, 2))\n// output: [1, 3]\n\n// Native\nvar array = [1, 2, 3]\nconsole.log(array.filter(function(value) {\n  return value !== 2;\n}));\n// output: [1, 3]\n````\n\n## Objects\n### _.keys\n返回一个可枚举的直属属性的数组。\n````javascript\n// Underscore/Lodash\n_.keys({one: 1, two: 2, three: 3})\n// output: [\"one\", \"two\", \"three\"]\n\n// Native\nvar result = Object.keys({one: 1, two: 2, three: 3})\nconsole.log(result)\n// output: [\"one\", \"two\", \"three\"]\n````\n\n### _.size\n返回对象的长度，原生没有size方法，用`keys`返回一个数组，再获取长度来模拟。\n````javascript\n// Underscore/Lodash\n_.size({one: 1, two: 2, three: 3})\n// output:3\n\n// Native\nvar result = Object.keys({one: 1, two: 2, three: 3}).length\nconsole.log(result)\n// output: 3\n````\n\n### _.allKeys\n`Reflect.enumerate(..)`：返回一个产生所有（直属和“继承的”）非symbol、可枚举的键的迭代器\n````javascript\nfunction Stooge(name) {\n    this.name = name;\n}\nStooge.prototype.silly = true;\n// Underscore/Lodash\nconsole.log(__.allKeys(new Stooge(\"Hi\")))\n// output:[\"name\", \"silly\"]\n\n// Native\nconsole.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n// output: [\"name\", \"silly\"]\n````\n\n### _.values\n返回对象所有的属性值。原生中没有`values`方法，可使用`Object.keys`和`map`来模拟。\n````javascript\n// Underscore/Lodash\n_.values({one: 1, two: 2, three: 3})\n// output: [1, 2, 3]\n\n// Native\nObject.values({one: 1, two: 2, three: 3})\n// output: [1, 2， 3]\nvar obj = {one: 1, two: 2, three: 3}\nObject.keys(obj).map(key => obj[key])\n// output: [1, 2， 3]\n````\n\n### _.create\n使用现有的对象来提供新创建的对象。基本上和`Object.create`一样。\n````javascript\nfunction Stooge(name) {\n    this.name = name;\n}\nStooge.prototype.silly = true;\n// Underscore/Lodash\n var hi = _.create(Stooge.prototype, {name: \"hi\"})\nconsole.log(hi)\n// output {name: \"hi\"}\n\n// Native\nvar hi = Object.assign(Object.create(Stooge.prototype), {name: \"hi\"})\nconsole.log( hi )\n````\n\n### _.assign\n通过合并自身属性到目标对象来创建新对象，基本上和`Object.assign`一样。\n````javascript\n// Underscore/Lodash\n_.assign({}, {b: 1,c: 2}, { a: false })\n// output {b: 1, c: 2, a: false}\n// Native\nObject.assign({}, {b: 1,c: 2}, { a: false })\n// output {b: 1, c: 2, a: false}\n{  ...{b: 1,c: 2}, a: false }\n// output {b: 1, c: 2, a: false}\n````\n### _.isArray\n判断是否是一个数组。\n````javascript\n// Underscore/Lodash\nvar array = []\nconsole.log(_.isArray(array))\n// output: true\n\n// Native\nvar array = []\nconsole.log(Array.isArray(array))\n// output: true\n````\n\n### _.isFinite\n判断是否是一个有限的数字。只要是数字就返回true，其他值都是false。\n````javascript\n// Underscore/Lodash\n_.isFinite(-101)\n// output true\n_.isFinite(-Infinity)\n// output false\n_.isFinite('a')\n// output false\n\n// Native\nvar array = []\nNumber.isFinite(-101)\n// output true\nNumber.isFinite(-Infinity)\n// output true\nNumber.isFinite('a')\n// output false\n````\n\n## Functions\n### _.bind\n指定调用函数的作用域，函数里的this都指向传入的`this`。\n````javascript\nvar objA = {\n    x: 66,\n    offsetX: function(offset) {\n        return this.x + offset;\n    }\n}\n\nvar objB = {\n    x: 67\n};\n// Underscore/Lodash\nboundOffsetX = _.bind(objA.offsetX, objB, 0);\n// output 67\n// Native\nboundOffsetX = objA.offsetX.bind(objB, 0);\n// output 67\n````\n大部分方法都从以下文章搬过来，觉得很有学习价值，就一个个修修改改搬过来。从中又熟悉了一遍ES6的函数方法，特别是逼格满满的`reduce`方法，^_^\n\n参考文章：\n1. [You-Dont-Need-Lodash-Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)\n2. [You don't (may not) need Lodash/Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)\n","source":"_posts/you-dont-not-need-lodash-underscore.md","raw":"title: 使用原生函数代替underscore/lodash\ndate: 2019-07-16 09:23:26\ntags: \n- JavaScript\ncategories:\n- JavaScript\n---\n\n为了更好的理解函数式变成，我们可以先从替换`underscore/lodash`开始。从[You-Dont-Need-Lodash-Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)代替方法的学习过程中，我们发现有些`underscore/lodash`来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生`reduce`代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。\n\n如果项目小，也没必要引入经常爆出bug的`loadsh`。\n<!--more-->\nPS：其中数组方法中的 `concat`(合并生成一个新数组)、`fill`（填充数组）、`reverse`(颠倒数组顺序)、`slice`(切割数组)等等跟原生方法一样就不列举出来了。\n## collections\n### _.each\n按顺序遍历list的所有元素。Es6的forEach只支持循环数组，可以使用`Object.entries`将对象转成数组。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\n_.each(['a', 'b', 'c'], function(value,index){\n    console.log(index  + value)\n})\n// output: 0a 1b 2c\n_.each({one: 1, two: 2, three: 3}, function(value,key){\n    console.log(key  + value)\n});\n// output: one1 two2 three3\n\n// Native \n['a', 'b', 'c'].forEach( (value, index) => console.log(index + value))\n// output: 0a 1b 2c\nObject.entries({one: 1, two: 2, three: 3}).forEach( (value, key) =>console.log(value[0] + value[1] ) )\n// output one1 two2 three3\n````\n\n### _.map\n`_.map`跟`_.each`都是遍历list的所有元素，`_.each`只是在原list上操作，而`_.map`会创建一个新的list。所以native中我们使用同名函数`map`来实现就够了。有两个参数：\n1. 生成新数组的回调函数三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\nvar array1 = ['a', 'b', 'c']\nvar array2 = _.map(array1, function (value, index) {\n    return 'Hi ' + value \n})\nconsole.log(array2)\n// output: [\"Hi a\", \"Hi b\", \"Hi c\"]\n\n// Native \nvar array1 = ['a', 'b', 'c']\nvar array2 = array1.map( (value, index) => 'Hi ' + value )\nconsole.log(array2)\n// output: [\"Hi a\", \"Hi b\", \"Hi c\"]\n````\n\n### _.reduce\n`reduce`可以用原生数组的`reduce`方法来模拟。`reduce`提供了两个参数：\n1. 累加器函数：四个参数分别是：上一次调用的值或者传入的初始值、正在处理的元素、正在处理元素的索引值以及调用的`reduce`的源数组。\n有。\n2. 第一次执行累加函数的初始值。\n````javascript\n// Underscore/Lodash\nvar array = [0, 1, 2, 3, 4]\nvar result = _.reduce(array, function(previousValue, currentValue, currentIndex, array){\n    return previousValue + currentValue\n})\nconsole.log(result)\n// output: 10\n\n// Native\nvar array = [0, 1, 2, 3, 4]\nvar result = array.reduce( (previousValue, currentValue, currentIndex, array) => previousValue + currentValue )\nconsole.log(result)\n// output: 10\n````\n\n### _.reduceRight\n`reduce`的从右往左累加的方法。\n````javascript\n// Underscore/Lodash\nvar array = [0, 1, 2, 3, 4]\nvar result = _.reduceRight(array, function(previousValue, currentValue, currentIndex, array){\n    return previousValue - currentValue\n})\nconsole.log(result)\n// output: -2\n\n// Native\nvar array = [0, 1, 2, 3, 4]\nvar result = array.reduceRight( (previousValue, currentValue, currentIndex, array) => previousValue - currentValue )\nconsole.log(result)\n// output: -2\n````\n\n### _.every\nevery表示是否每一项都必须都符合条件。换句话说如果全部都符合条件，则返回true；有一项不符合则返回false。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n若收到一个空数组，此方法在一切情况下都会返回 true。\n````javascript\n// Underscore/Lodash\nvar array = [10, 20, 30]\nvar result = _.every(array, function(element, index, array){\n    return element >= 10\n})\nconsole.log(result)\n// output: true\n\n// Native\nvar array = [10, 20, 30]\nvar result = array.every( (element, index, array) => element >= 10 )\nconsole.log(result)\n// output: true\n````\n\n### _.some\nsome则是只要有一项符合条件就返回true。换句话说如果有一项符合条件，则返回true；除非一项都不符合条件才返回false。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n对于空数组上的任何条件，此方法返回false。\n````javascript\n// Underscore/Lodash\nvar array = [10, 20, 30]\nvar result = _.some(array, function(element, index, array){\n    return element >= 30\n})\nconsole.log(result)\n// output: true\n\n// Native\nvar array = [10, 20, 30]\nvar result = array.some( (element, index, array) => element >= 30 )\nconsole.log(result)\n// output: true\n````\n\n### _.find\n返回第一个满足条件的元素，如果不存在则放回`undefined`。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\n var users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar result = _.find(users,  function (o) { return o.age < 40; })\nconsole.dir(result)\n// output: active: true age: 36 user: \"xiaoming\"\n// Native\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar result = users.find( (o) =>  o.age < 40 )\nconsole.dir(result)\n// output: active: true age: 36 user: \"xiaoming\"\n````\n\n### _.pluck\n原生JS中没有pluck方法，但是我们可以使用map模拟。\n`Lodash` v4.0 已经移除`pluck`函数。\n````javascript\nvar users = [{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Jeremy\"}]\nvar names = _.pluck(users, \"name\")\nconsole.log(names)\n// output: [\"Alice\", \"Bob\", \"Jeremy\"]\n// Native\nvar users = [{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Jeremy\"}]\nvar names = users.map( (o) => o.name )\nconsole.log(names)\n// output:[\"Alice\", \"Bob\", \"Jeremy\"]\n````\n\n### _.includes\n判断是否包含某个特定的值，如果有则返回true，否则返回false。\n````javascript\n// Underscore/Lodash\nvar array = [1, 2, 3]\n// Underscore/Lodash - also called _.contains\nvar isIncludes = _.includes(array, 1)\nconsole.log(isIncludes)\n// output: true\n\n// Native\nvar array = [1, 2, 3]\nvar isIncludes = array.includes(1)\nconsole.log(isIncludes)\nvar isIndexOf = array.indexOf(1) > -1;\n// output: true\nconsole.log(isIndexOf)\n// output: true\n````\n\n### _.toArray\n`toArray`方法则可以用数组扩展符以及`Array.from`来模拟。`Array.from`跟数组扩展符都是浅拷贝，只能拷贝第一层的值，第二次及其之后的值无法进行深拷贝，他们的引用地址任然是同一个。\n其中`Array.from`不仅可以生成转换成数组，也可以运行对每个元素执行回调函数。\n`Array.from({length:10})`生成的新数组，及时里面的值都是`undefined`也是可以循环遍历。`Array.from`有三个参数：\n1. 想要转为成数组的元素\n2. `map`回调函数\n3. 回调的执行函数\n所以，`Array.from(obj, mapFn, thisArg)` 就相当于 `Array.from(obj).map(mapFn, thisArg)`,\n\n````javascript\n// Underscore/Lodash\n_.toArray('abc')\n// output: [\"a\", \"b\", \"c\"]\n_.toArray([1, 2])\n// output: [1, 2]\n_.toArray({ 'a': 1, 'b': 2 })\n// output: [1, 2]\n// Native\n[...'abc']\n// output: [\"a\", \"b\", \"c\"]\nArray.from([1, 2])\n// output: [1, 2]\nArray.from(Object.values({ 'a': 1, 'b': 2 }))\n// output: [1, 2]\n````\n\n## Arrays\n\n### _.object\n`_.object`将数组转换为对象。原生js中没有此方法，但是我们可以使用数组的`reduce`方法以及对象的`assign`来模拟。\n````javascript\n// Underscore/Lodash\n_.object(['moe', 'larry', 'curly'], [30, 40, 50])\n// output: {curly: 50, larry: 40, moe: 30}\n_.object([['moe', 30], ['larry', 40], ['curly', 50]])\n// output: {curly: 50, larry: 40, moe: 30}\n\n// Native\nvar array = [['moe', 30], ['larry', 40], ['curly', 50]];\narray.reduce((result, [key, val]) => Object.assign(result, {[key]: val}), {})\n// output: {curly: 50, larry: 40, moe: 30}\nvar array = [['moe', 'larry', 'curly'], [30, 40, 50]];\narray.slice(0, 1)[0].reduce( (result, key, index, _array) => Object.assign(result, {[key]: array[1][index]}) ,{})\n// output: {curly: 50, larry: 40, moe: 30}\n````\n\n### _.compact\n去除数组中的所有false的值。原生中没有，但是可以使用filter来模拟。\n````javascript\n// Underscore/Lodash\n_.compact([0, 1, false, 2, '', 3])\n// output: [1, 2, 3]\n\n// Native\n[0, 1, false, 2, '', 3].filter(Boolean)\n// output: [1, 2, 3]\n[0, 1, false, 2, '', 3].filter(x => !!x)\n// output: [1, 2, 3]\n````\n\n### _.uniq\n数组去重。`Set` 对象可以去重，再转成数组来模拟。\n````javascript\n// Underscore/Lodash\nvar result = _.uniq([1, 2, 1, 4, 1, 3])\nconsole.log(result)\n// output: [1, 2, 4, 3]\n\n// Native\nvar result = [...new Set([1, 2, 1, 4, 1, 3])]\nconsole.log(result)\n// output: [1, 2, 4, 3]\n````\n\n### _.indexOf\n数组中寻找一个给定元素的第一个索引，如果不存在，则返回-1，跟原生数组中的`indexOf`方法一样。\n`indexOf`有两个参数：\n1. 要查找的元素\n2. 开始查找的索引位置\n````javascript\n// Underscore/Lodash\nvar result = _.indexOf([2, 9, 9], 2)\nconsole.log(result)\n// output: 0\n\n// Native\nvar result = [2, 9, 9].indexOf(2)\nconsole.log(result)\n// output: 0\n````\n\n### _.findIndex\n返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。有两个参数：\n1. 执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。\n2. 执行回调函数的 `this` 值\n````javascript\n// Underscore/Lodash\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar index = _.findIndex(users, function (o) { return o.age >= 40; })\nconsole.log(index)\n// output: 0\n\n// Native\nvar users = [\n    { 'user': 'xiaoming',  'age': 36, 'active': true },\n    { 'user': 'xiaohong',    'age': 40, 'active': false },\n    { 'user': 'xiaogang', 'age': 1,  'active': true }\n]\nvar index = users.findIndex( (o) => o.age >=40 )\nconsole.log(index)\n// output: 0\n````\n\n### _.range\n原生Js中没有`range`。所以直接使用`map`函数来处理，并最终处理成数组。\n````javascript\n// Underscore/Lodash\n_.range(10)\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n_.range(1, 11)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n_.range(0, 30, 5)\n// output: [0, 5, 10, 15, 20, 25]\n_.range(0, -10, -1)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n_.range(0)\n// output: []\n\n// Native\nArray.from({length:10}, (_, i) => i)\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nArray.from({length:10}, (_, i) => i+1)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nArray.from({length:6}, (_, i) => i*5)\n// output: [0, 5, 10, 15, 20, 25]\nArray.from({length:10}, (_, i) => -i)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\nArray.from({length:0})\n// output: []\n\n[...Array(10).keys() ] )\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[...Array(10).keys()].map(k => k + 1)\n// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[...Array(6).keys()].map(k => k*5 )\n// output: [0, 5, 10, 15, 20, 25]\n[...Array(10).keys()].map(k => -k)\n// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n[]\n// output: []\n````\n\n### _.chunk\n将数组拆分成多个size长度的小数组，并且将这些小数组组成一个新的大数组，如果最后剩余的元素不够size长度，那么最后剩余的元素组成一个小数组。\n````javascript\n// Underscore/Lodash\n_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n\n// Native\nconst chunk = (input, size) => {\n    return input.reduce((previousValue, currentValue, currentIndex, array) => {\n        return currentIndex % size === 0\n        ? [...previousValue, [currentValue]] //当前索引跟size余数为0时，新增一个小数组\n        : [...previousValue.slice(0, -1), [...previousValue.slice(-1)[0], currentValue]]; //当前索引跟size余数不为0时，往length - 1的小数组里推值\n    })\n};\nchunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n````\n\n### _.difference\n原生中没有此方法，所以得模拟。`difference`会返回一个过滤值不包含排除值的新数组。接受两个参数：\n1. 原数组\n2. 要排除的值，[values]\n````javascript\nvar arrays = [[1, 2, 3, 4, 5], [5, 2, 10]];\n// Underscore/Lodash\nvar a =_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// output: [1, 3, 4]\n\n// Native\nconsole.log(arrays.reduce(function(source, target) {\n    return source.filter(function(value) { \n        return !target.includes(value); // 如果过滤数组中函数该值includes则返回true，filter则会创建返回值是true的新数组\n    });\n}));\n// output: [1, 3, 4]\nconsole.log(arrays.reduce((source, target) => source.filter(value => !target.includes(value))));\n// output: [1, 3, 4]\n````\n\n### _.drop\n原生`slice`方法的阉割版。\n````javascript\n// Underscore/Lodash\n_.drop([1, 2, 3]);\n// => [2, 3]\n_.drop([1, 2, 3], 2);\n// => [3]\n\n// Native\n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n````\n\n### _.first\n获取数组 array 的第一个元素。\n````javascript\n// Underscore/Lodash\n_.first([1, 2, 3, 4, 5]);\n// => 1\n\n_.first([1, 2, 3, 4, 5], 2);\n// => [1, 2]\n// Native\n[1, 2, 3, 4, 5][0];\n// => 1\n//or\n[].concat(1, 2, 3, 4, 5).shift()\n// => 1\n//or\n[].concat([1, 2, 3, 4, 5]).shift()\n// => 1\n\n// Native (works even with potentially undefined/null, like _.first)\n[].concat(undefined).shift()\n// => undefined\n[1, 2, 3, 4, 5].slice(0, 2);\n// => [1, 2]\n````\n\n\n### _.last\n获取array中的最后一个元素。\n````javascript\n// Underscore/Lodash\nconst numbers = [1, 2, 3, 4, 5];\n_.last(numbers);\n// => 5\n\n_.last(numbers, 2);\n// => [4, 5]\n\n// Native\nconst numbers = [1, 2, 3, 4, 5];\nnumbers[numbers.length - 1];\n// => 5\n//or\nnumbers.slice(-1)[0];\n// => 5\n[].concat(numbers).pop()\n// => 5\n\n// Native\n[].concat(undefined).pop()\n// => undefined\n\nnumbers.slice(-2);\n// => [4, 5]\n````\n\n### _.flatten\n\n````javascript\n// Underscore/Lodash\n_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n// Native\nconst flatten = [1, [2, [3, [4]], 5]].reduce( (a, b) => a.concat(b), []) // 合并一级层级\n// => [1, 2, [3, [4]], 5]\n\n// Native(ES2019)\nconst flatten = [1, [2, [3, [4]], 5]].flat()\n// => [1, 2, [3, [4]], 5]\n````\n\n### _.flattenDeep\n\n````javascript\n// Underscore/Lodash\n_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n// Native\nconst flattenDeep = (arr) => Array.isArray(arr)\n  ? arr.reduce( (a, b) => a.concat(flattenDeep(b)) , []) // 如果是数组则继续合并\n  : [arr] // 知道不是数组为止\n\nflattenDeep([1, [[2], [3, [4]], 5]])\n// => [1, 2, 3, 4, 5]\n\n// Native(ES2019)\n[1, [2, [3, [4]], 5]].flat(Infinity) // 使用 Infinity 作为深度，展开为一维数组\n// => [1, 2, 3, 4, 5]\n````\n\n### _.isArrayBuffer\n检查 value 是否是 ArrayBuffer 对象。\n````javascript\n// Underscore/Lodash\n_.isArrayBuffer(new ArrayBuffer(2));\n// output: true\n\n// Native\nconsole.log(new ArrayBuffer(2) instanceof ArrayBuffer);\n// output: true\n````\n\n### _.intersection\n创建唯一值的数组\n````javascript\n// Underscore/Lodash\nconsole.log(_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]))\n// output: [1, 2]\n\n// Native\nvar arrays = [[1, 2, 3], [101, 2, 1, 10], [2, 1]];\nconsole.log(array.reduce(function(a, b) {\n  return a.filter(function(value) { // 因为是包含共同值，所以很自然的使用filter来过滤并创建新数组\n    return b.includes(value); // 为true则保留该元素\n  });\n})));\n// output: [1, 2]\n\n// ES6\nlet arrays = [[1, 2, 3], [101, 2, 1, 10], [2, 1]];\nconsole.log(arrays.reduce((a, b) => a.filter(c => b.includes(c))));\n// output: [1, 2]\n````\n\n### _.without\n创建一个剔除所有给定值的新数组\n````javascript\n// Underscore/Lodash\nvar array = [1, 2, 3]\nconsole.log(_.without(array, 2))\n// output: [1, 3]\n\n// Native\nvar array = [1, 2, 3]\nconsole.log(array.filter(function(value) {\n  return value !== 2;\n}));\n// output: [1, 3]\n````\n\n## Objects\n### _.keys\n返回一个可枚举的直属属性的数组。\n````javascript\n// Underscore/Lodash\n_.keys({one: 1, two: 2, three: 3})\n// output: [\"one\", \"two\", \"three\"]\n\n// Native\nvar result = Object.keys({one: 1, two: 2, three: 3})\nconsole.log(result)\n// output: [\"one\", \"two\", \"three\"]\n````\n\n### _.size\n返回对象的长度，原生没有size方法，用`keys`返回一个数组，再获取长度来模拟。\n````javascript\n// Underscore/Lodash\n_.size({one: 1, two: 2, three: 3})\n// output:3\n\n// Native\nvar result = Object.keys({one: 1, two: 2, three: 3}).length\nconsole.log(result)\n// output: 3\n````\n\n### _.allKeys\n`Reflect.enumerate(..)`：返回一个产生所有（直属和“继承的”）非symbol、可枚举的键的迭代器\n````javascript\nfunction Stooge(name) {\n    this.name = name;\n}\nStooge.prototype.silly = true;\n// Underscore/Lodash\nconsole.log(__.allKeys(new Stooge(\"Hi\")))\n// output:[\"name\", \"silly\"]\n\n// Native\nconsole.log( [...Reflect.enumerate( new Stooge(\"Hi\") )] )\n// output: [\"name\", \"silly\"]\n````\n\n### _.values\n返回对象所有的属性值。原生中没有`values`方法，可使用`Object.keys`和`map`来模拟。\n````javascript\n// Underscore/Lodash\n_.values({one: 1, two: 2, three: 3})\n// output: [1, 2, 3]\n\n// Native\nObject.values({one: 1, two: 2, three: 3})\n// output: [1, 2， 3]\nvar obj = {one: 1, two: 2, three: 3}\nObject.keys(obj).map(key => obj[key])\n// output: [1, 2， 3]\n````\n\n### _.create\n使用现有的对象来提供新创建的对象。基本上和`Object.create`一样。\n````javascript\nfunction Stooge(name) {\n    this.name = name;\n}\nStooge.prototype.silly = true;\n// Underscore/Lodash\n var hi = _.create(Stooge.prototype, {name: \"hi\"})\nconsole.log(hi)\n// output {name: \"hi\"}\n\n// Native\nvar hi = Object.assign(Object.create(Stooge.prototype), {name: \"hi\"})\nconsole.log( hi )\n````\n\n### _.assign\n通过合并自身属性到目标对象来创建新对象，基本上和`Object.assign`一样。\n````javascript\n// Underscore/Lodash\n_.assign({}, {b: 1,c: 2}, { a: false })\n// output {b: 1, c: 2, a: false}\n// Native\nObject.assign({}, {b: 1,c: 2}, { a: false })\n// output {b: 1, c: 2, a: false}\n{  ...{b: 1,c: 2}, a: false }\n// output {b: 1, c: 2, a: false}\n````\n### _.isArray\n判断是否是一个数组。\n````javascript\n// Underscore/Lodash\nvar array = []\nconsole.log(_.isArray(array))\n// output: true\n\n// Native\nvar array = []\nconsole.log(Array.isArray(array))\n// output: true\n````\n\n### _.isFinite\n判断是否是一个有限的数字。只要是数字就返回true，其他值都是false。\n````javascript\n// Underscore/Lodash\n_.isFinite(-101)\n// output true\n_.isFinite(-Infinity)\n// output false\n_.isFinite('a')\n// output false\n\n// Native\nvar array = []\nNumber.isFinite(-101)\n// output true\nNumber.isFinite(-Infinity)\n// output true\nNumber.isFinite('a')\n// output false\n````\n\n## Functions\n### _.bind\n指定调用函数的作用域，函数里的this都指向传入的`this`。\n````javascript\nvar objA = {\n    x: 66,\n    offsetX: function(offset) {\n        return this.x + offset;\n    }\n}\n\nvar objB = {\n    x: 67\n};\n// Underscore/Lodash\nboundOffsetX = _.bind(objA.offsetX, objB, 0);\n// output 67\n// Native\nboundOffsetX = objA.offsetX.bind(objB, 0);\n// output 67\n````\n大部分方法都从以下文章搬过来，觉得很有学习价值，就一个个修修改改搬过来。从中又熟悉了一遍ES6的函数方法，特别是逼格满满的`reduce`方法，^_^\n\n参考文章：\n1. [You-Dont-Need-Lodash-Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)\n2. [You don't (may not) need Lodash/Underscore](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore)\n","slug":"you-dont-not-need-lodash-underscore","published":1,"updated":"2019-07-25T06:39:54.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76ai0036dkhsoqwdvza7","content":"<p>为了更好的理解函数式变成，我们可以先从替换<code>underscore/lodash</code>开始。从<a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\" target=\"_blank\" rel=\"external\">You-Dont-Need-Lodash-Underscore</a>代替方法的学习过程中，我们发现有些<code>underscore/lodash</code>来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生<code>reduce</code>代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。</p>\n<p>如果项目小，也没必要引入经常爆出bug的<code>loadsh</code>。<br><a id=\"more\"></a><br>PS：其中数组方法中的 <code>concat</code>(合并生成一个新数组)、<code>fill</code>（填充数组）、<code>reverse</code>(颠倒数组顺序)、<code>slice</code>(切割数组)等等跟原生方法一样就不列举出来了。</p>\n<h2 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h2><h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a>_.each</h3><p>按顺序遍历list的所有元素。Es6的forEach只支持循环数组，可以使用<code>Object.entries</code>将对象转成数组。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.each([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index  + value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: 0a 1b 2c</span></span><br><span class=\"line\">_.each(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key  + value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// output: one1 two2 three3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native </span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].forEach( (value, index) =&gt; <span class=\"built_in\">console</span>.log(index + value))</span><br><span class=\"line\"><span class=\"comment\">// output: 0a 1b 2c</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;).forEach( (value, key) =&gt;<span class=\"built_in\">console</span>.log(value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] ) )</span><br><span class=\"line\"><span class=\"comment\">// output one1 two2 three3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h3><p><code>_.map</code>跟<code>_.each</code>都是遍历list的所有元素，<code>_.each</code>只是在原list上操作，而<code>_.map</code>会创建一个新的list。所以native中我们使用同名函数<code>map</code>来实现就够了。有两个参数：</p>\n<ol>\n<li>生成新数组的回调函数三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = _.map(array1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hi '</span> + value </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array2)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Hi a\", \"Hi b\", \"Hi c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = array1.map( (value, index) =&gt; <span class=\"string\">'Hi '</span> + value )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array2)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Hi a\", \"Hi b\", \"Hi c\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h3><p><code>reduce</code>可以用原生数组的<code>reduce</code>方法来模拟。<code>reduce</code>提供了两个参数：</p>\n<ol>\n<li>累加器函数：四个参数分别是：上一次调用的值或者传入的初始值、正在处理的元素、正在处理元素的索引值以及调用的<code>reduce</code>的源数组。<br>有。</li>\n<li>第一次执行累加函数的初始值。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.reduce(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.reduce( (previousValue, currentValue, currentIndex, array) =&gt; previousValue + currentValue )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h3><p><code>reduce</code>的从右往左累加的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.reduceRight(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue - currentValue</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: -2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.reduceRight( (previousValue, currentValue, currentIndex, array) =&gt; previousValue - currentValue )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: -2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"_.every\"></a>_.every</h3><p>every表示是否每一项都必须都符合条件。换句话说如果全部都符合条件，则返回true；有一项不符合则返回false。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<br>若收到一个空数组，此方法在一切情况下都会返回 true。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.every(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.every( (element, index, array) =&gt; element &gt;= <span class=\"number\">10</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a>_.some</h3><p>some则是只要有一项符合条件就返回true。换句话说如果有一项符合条件，则返回true；除非一项都不符合条件才返回false。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<br>对于空数组上的任何条件，此方法返回false。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.some(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">30</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.some( (element, index, array) =&gt; element &gt;= <span class=\"number\">30</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h3><p>返回第一个满足条件的元素，如果不存在则放回<code>undefined</code>。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.find(users,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br><span class=\"line\"><span class=\"comment\">// output: active: true age: 36 user: \"xiaoming\"</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = users.find( (o) =&gt;  o.age &lt; <span class=\"number\">40</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br><span class=\"line\"><span class=\"comment\">// output: active: true age: 36 user: \"xiaoming\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a>_.pluck</h3><p>原生JS中没有pluck方法，但是我们可以使用map模拟。<br><code>Lodash</code> v4.0 已经移除<code>pluck</code>函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = [&#123;name: <span class=\"string\">\"Alice\"</span>&#125;, &#123;name: <span class=\"string\">\"Bob\"</span>&#125;, &#123;name: <span class=\"string\">\"Jeremy\"</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> names = _.pluck(users, <span class=\"string\">\"name\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Alice\", \"Bob\", \"Jeremy\"]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [&#123;name: <span class=\"string\">\"Alice\"</span>&#125;, &#123;name: <span class=\"string\">\"Bob\"</span>&#125;, &#123;name: <span class=\"string\">\"Jeremy\"</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> names = users.map( (o) =&gt; o.name )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\"><span class=\"comment\">// output:[\"Alice\", \"Bob\", \"Jeremy\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"_.includes\"></a>_.includes</h3><p>判断是否包含某个特定的值，如果有则返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash - also called _.contains</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIncludes = _.includes(array, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIncludes)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> isIncludes = array.includes(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIncludes)</span><br><span class=\"line\"><span class=\"keyword\">var</span> isIndexOf = array.indexOf(<span class=\"number\">1</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIndexOf)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"_.toArray\"></a>_.toArray</h3><p><code>toArray</code>方法则可以用数组扩展符以及<code>Array.from</code>来模拟。<code>Array.from</code>跟数组扩展符都是浅拷贝，只能拷贝第一层的值，第二次及其之后的值无法进行深拷贝，他们的引用地址任然是同一个。<br>其中<code>Array.from</code>不仅可以生成转换成数组，也可以运行对每个元素执行回调函数。<br><code>Array.from({length:10})</code>生成的新数组，及时里面的值都是<code>undefined</code>也是可以循环遍历。<code>Array.from</code>有三个参数：</p>\n<ol>\n<li>想要转为成数组的元素</li>\n<li><code>map</code>回调函数</li>\n<li>回调的执行函数<br>所以，<code>Array.from(obj, mapFn, thisArg)</code> 就相当于 <code>Array.from(obj).map(mapFn, thisArg)</code>,</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.toArray(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\">_.toArray([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\">_.toArray(&#123; <span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[...<span class=\"string\">'abc'</span>]</span><br><span class=\"line\"><span class=\"comment\">// output: [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Object</span>.values(&#123; <span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span> &#125;))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h2><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"_.object\"></a>_.object</h3><p><code>_.object</code>将数组转换为对象。原生js中没有此方法，但是我们可以使用数组的<code>reduce</code>方法以及对象的<code>assign</code>来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\">_.object([[<span class=\"string\">'moe'</span>, <span class=\"number\">30</span>], [<span class=\"string\">'larry'</span>, <span class=\"number\">40</span>], [<span class=\"string\">'curly'</span>, <span class=\"number\">50</span>]])</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [[<span class=\"string\">'moe'</span>, <span class=\"number\">30</span>], [<span class=\"string\">'larry'</span>, <span class=\"number\">40</span>], [<span class=\"string\">'curly'</span>, <span class=\"number\">50</span>]];</span><br><span class=\"line\">array.reduce((result, [key, val]) =&gt; <span class=\"built_in\">Object</span>.assign(result, &#123;[key]: val&#125;), &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [[<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]];</span><br><span class=\"line\">array.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>].reduce( (result, key, index, _array) =&gt; <span class=\"built_in\">Object</span>.assign(result, &#123;[key]: array[<span class=\"number\">1</span>][index]&#125;) ,&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"_.compact\"></a>_.compact</h3><p>去除数组中的所有false的值。原生中没有，但是可以使用filter来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(x =&gt; !!x)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"_.uniq\"></a>_.uniq</h3><p>数组去重。<code>Set</code> 对象可以去重，再转成数组来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.uniq([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 4, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = [...new <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 4, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"_.indexOf\"></a>_.indexOf</h3><p>数组中寻找一个给定元素的第一个索引，如果不存在，则返回-1，跟原生数组中的<code>indexOf</code>方法一样。<br><code>indexOf</code>有两个参数：</p>\n<ol>\n<li>要查找的元素</li>\n<li>开始查找的索引位置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.indexOf([<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>].indexOf(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"_.findIndex\"></a>_.findIndex</h3><p>返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = _.findIndex(users, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &gt;= <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = users.findIndex( (o) =&gt; o.age &gt;=<span class=\"number\">40</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"_.range\"></a>_.range</h3><p>原生Js中没有<code>range</code>。所以直接使用<code>map</code>函数来处理，并最终处理成数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.range(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">-10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; i)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; i+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">6</span>&#125;, (_, i) =&gt; i*<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; -i)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys() ] )</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()].map(k =&gt; k + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">6</span>).keys()].map(k =&gt; k*<span class=\"number\">5</span> )</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()].map(k =&gt; -k)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"_.chunk\"></a>_.chunk</h3><p>将数组拆分成多个size长度的小数组，并且将这些小数组组成一个新的大数组，如果最后剩余的元素不够size长度，那么最后剩余的元素组成一个小数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunk = (input, size) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentIndex % size === <span class=\"number\">0</span></span><br><span class=\"line\">        ? [...previousValue, [currentValue]] <span class=\"comment\">//当前索引跟size余数为0时，新增一个小数组</span></span><br><span class=\"line\">        : [...previousValue.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>), [...previousValue.slice(<span class=\"number\">-1</span>)[<span class=\"number\">0</span>], currentValue]]; <span class=\"comment\">//当前索引跟size余数不为0时，往length - 1的小数组里推值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class=\"line\"></span><br><span class=\"line\">chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"_.difference\"></a>_.difference</h3><p>原生中没有此方法，所以得模拟。<code>difference</code>会返回一个过滤值不包含排除值的新数组。接受两个参数：</p>\n<ol>\n<li>原数组</li>\n<li>要排除的值，[values]<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]];</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =_.difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> !target.includes(value); <span class=\"comment\">// 如果过滤数组中函数该值includes则返回true，filter则会创建返回值是true的新数组</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce((source, target) =&gt; source.filter(value =&gt; !target.includes(value))));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"_.drop\"></a>_.drop</h3><p>原生<code>slice</code>方法的阉割版。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [2, 3]</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"_.first\"></a>_.first</h3><p>获取数组 array 的第一个元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.first([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.first([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">[].concat(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">[].concat([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native (works even with potentially undefined/null, like _.first)</span></span><br><span class=\"line\">[].concat(<span class=\"literal\">undefined</span>).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a>_.last</h3><p>获取array中的最后一个元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">_.last(numbers);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.last(numbers, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">numbers[numbers.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">numbers.slice(<span class=\"number\">-1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">[].concat(numbers).pop()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[].concat(<span class=\"literal\">undefined</span>).pop()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers.slice(<span class=\"number\">-2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [4, 5]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"_.flatten\"></a>_.flatten</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flatten = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].reduce( (a, b) =&gt; a.concat(b), []) <span class=\"comment\">// 合并一级层级</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native(ES2019)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flatten = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].flat()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"flattenDeep\"><a href=\"#flattenDeep\" class=\"headerlink\" title=\"_.flattenDeep\"></a>_.flattenDeep</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.flattenDeep([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenDeep = (arr) =&gt; <span class=\"built_in\">Array</span>.isArray(arr)</span><br><span class=\"line\">  ? arr.reduce( (a, b) =&gt; a.concat(flattenDeep(b)) , []) <span class=\"comment\">// 如果是数组则继续合并</span></span><br><span class=\"line\">  : [arr] <span class=\"comment\">// 知道不是数组为止</span></span><br><span class=\"line\"></span><br><span class=\"line\">flattenDeep([<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native(ES2019)</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].flat(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// 使用 Infinity 作为深度，展开为一维数组</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"isArrayBuffer\"><a href=\"#isArrayBuffer\" class=\"headerlink\" title=\"_.isArrayBuffer\"></a>_.isArrayBuffer</h3><p>检查 value 是否是 ArrayBuffer 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.isArrayBuffer(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">2</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"_.intersection\"></a>_.intersection</h3><p>创建唯一值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">// 因为是包含共同值，所以很自然的使用filter来过滤并创建新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.includes(value); <span class=\"comment\">// 为true则保留该元素</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce((a, b) =&gt; a.filter(c =&gt; b.includes(c))));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"_.without\"></a>_.without</h3><p>创建一个剔除所有给定值的新数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.without(array, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value !== <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Objects\"><a href=\"#Objects\" class=\"headerlink\" title=\"Objects\"></a>Objects</h2><h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"_.keys\"></a>_.keys</h3><p>返回一个可枚举的直属属性的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"one\", \"two\", \"three\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">Object</span>.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"one\", \"two\", \"three\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"_.size\"></a>_.size</h3><p>返回对象的长度，原生没有size方法，用<code>keys</code>返回一个数组，再获取长度来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.size(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output:3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">Object</span>.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;).length</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"allKeys\"><a href=\"#allKeys\" class=\"headerlink\" title=\"_.allKeys\"></a>_.allKeys</h3><p><code>Reflect.enumerate(..)</code>：返回一个产生所有（直属和“继承的”）非symbol、可枚举的键的迭代器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stooge</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Stooge.prototype.silly = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(__.allKeys(<span class=\"keyword\">new</span> Stooge(<span class=\"string\">\"Hi\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// output:[\"name\", \"silly\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( [...Reflect.enumerate( <span class=\"keyword\">new</span> Stooge(<span class=\"string\">\"Hi\"</span>) )] )</span><br><span class=\"line\"><span class=\"comment\">// output: [\"name\", \"silly\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"_.values\"></a>_.values</h3><p>返回对象所有的属性值。原生中没有<code>values</code>方法，可使用<code>Object.keys</code>和<code>map</code>来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.values(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2， 3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj).map(key =&gt; obj[key])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2， 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"_.create\"></a>_.create</h3><p>使用现有的对象来提供新创建的对象。基本上和<code>Object.create</code>一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stooge</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Stooge.prototype.silly = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> hi = _.create(Stooge.prototype, &#123;name: <span class=\"string\">\"hi\"</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hi)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;name: \"hi\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hi = <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(Stooge.prototype), &#123;name: <span class=\"string\">\"hi\"</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( hi )</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"_.assign\"></a>_.assign</h3><p>通过合并自身属性到目标对象来创建新对象，基本上和<code>Object.assign</code>一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.assign(&#123;&#125;, &#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, &#123; a: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, &#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, &#123; a: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class=\"line\">&#123;  ...&#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, a: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"isArray\"><a href=\"#isArray\" class=\"headerlink\" title=\"_.isArray\"></a>_.isArray</h3><p>判断是否是一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.isArray(array))</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array))</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"_.isFinite\"></a>_.isFinite</h3><p>判断是否是一个有限的数字。只要是数字就返回true，其他值都是false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.isFinite(<span class=\"number\">-101</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\">_.isFinite(-<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br><span class=\"line\">_.isFinite(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">-101</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(-<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"_.bind\"></a>_.bind</h3><p>指定调用函数的作用域，函数里的this都指向传入的<code>this</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">66</span>,</span><br><span class=\"line\">    offsetX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x + offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">67</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">boundOffsetX = _.bind(objA.offsetX, objB, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 67</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">boundOffsetX = objA.offsetX.bind(objB, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 67</span></span><br></pre></td></tr></table></figure></p>\n<p>大部分方法都从以下文章搬过来，觉得很有学习价值，就一个个修修改改搬过来。从中又熟悉了一遍ES6的函数方法，特别是逼格满满的<code>reduce</code>方法，^_^</p>\n<p>参考文章：</p>\n<ol>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\" target=\"_blank\" rel=\"external\">You-Dont-Need-Lodash-Underscore</a></li>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\" target=\"_blank\" rel=\"external\">You don’t (may not) need Lodash/Underscore</a></li>\n</ol>\n","excerpt":"<p>为了更好的理解函数式变成，我们可以先从替换<code>underscore/lodash</code>开始。从<a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a>代替方法的学习过程中，我们发现有些<code>underscore/lodash</code>来得通俗易懂，所以实际开发中我们根据实际情况取舍，像使用原生<code>reduce</code>代替group方法，此篇文章学习重点是理解函数式编程和ES6/S7语法。</p>\n<p>如果项目小，也没必要引入经常爆出bug的<code>loadsh</code>。<br>","more":"<br>PS：其中数组方法中的 <code>concat</code>(合并生成一个新数组)、<code>fill</code>（填充数组）、<code>reverse</code>(颠倒数组顺序)、<code>slice</code>(切割数组)等等跟原生方法一样就不列举出来了。</p>\n<h2 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h2><h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a>_.each</h3><p>按顺序遍历list的所有元素。Es6的forEach只支持循环数组，可以使用<code>Object.entries</code>将对象转成数组。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.each([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index  + value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: 0a 1b 2c</span></span><br><span class=\"line\">_.each(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key  + value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// output: one1 two2 three3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native </span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].forEach( (value, index) =&gt; <span class=\"built_in\">console</span>.log(index + value))</span><br><span class=\"line\"><span class=\"comment\">// output: 0a 1b 2c</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;).forEach( (value, key) =&gt;<span class=\"built_in\">console</span>.log(value[<span class=\"number\">0</span>] + value[<span class=\"number\">1</span>] ) )</span><br><span class=\"line\"><span class=\"comment\">// output one1 two2 three3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h3><p><code>_.map</code>跟<code>_.each</code>都是遍历list的所有元素，<code>_.each</code>只是在原list上操作，而<code>_.map</code>会创建一个新的list。所以native中我们使用同名函数<code>map</code>来实现就够了。有两个参数：</p>\n<ol>\n<li>生成新数组的回调函数三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = _.map(array1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hi '</span> + value </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array2)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Hi a\", \"Hi b\", \"Hi c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = array1.map( (value, index) =&gt; <span class=\"string\">'Hi '</span> + value )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array2)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Hi a\", \"Hi b\", \"Hi c\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h3><p><code>reduce</code>可以用原生数组的<code>reduce</code>方法来模拟。<code>reduce</code>提供了两个参数：</p>\n<ol>\n<li>累加器函数：四个参数分别是：上一次调用的值或者传入的初始值、正在处理的元素、正在处理元素的索引值以及调用的<code>reduce</code>的源数组。<br>有。</li>\n<li>第一次执行累加函数的初始值。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.reduce(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.reduce( (previousValue, currentValue, currentIndex, array) =&gt; previousValue + currentValue )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h3><p><code>reduce</code>的从右往左累加的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.reduceRight(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue - currentValue</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: -2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.reduceRight( (previousValue, currentValue, currentIndex, array) =&gt; previousValue - currentValue )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: -2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"_.every\"></a>_.every</h3><p>every表示是否每一项都必须都符合条件。换句话说如果全部都符合条件，则返回true；有一项不符合则返回false。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<br>若收到一个空数组，此方法在一切情况下都会返回 true。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.every(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.every( (element, index, array) =&gt; element &gt;= <span class=\"number\">10</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a>_.some</h3><p>some则是只要有一项符合条件就返回true。换句话说如果有一项符合条件，则返回true；除非一项都不符合条件才返回false。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<br>对于空数组上的任何条件，此方法返回false。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.some(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index, array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">30</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = array.some( (element, index, array) =&gt; element &gt;= <span class=\"number\">30</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h3><p>返回第一个满足条件的元素，如果不存在则放回<code>undefined</code>。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.find(users,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br><span class=\"line\"><span class=\"comment\">// output: active: true age: 36 user: \"xiaoming\"</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = users.find( (o) =&gt;  o.age &lt; <span class=\"number\">40</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br><span class=\"line\"><span class=\"comment\">// output: active: true age: 36 user: \"xiaoming\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a>_.pluck</h3><p>原生JS中没有pluck方法，但是我们可以使用map模拟。<br><code>Lodash</code> v4.0 已经移除<code>pluck</code>函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = [&#123;name: <span class=\"string\">\"Alice\"</span>&#125;, &#123;name: <span class=\"string\">\"Bob\"</span>&#125;, &#123;name: <span class=\"string\">\"Jeremy\"</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> names = _.pluck(users, <span class=\"string\">\"name\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"Alice\", \"Bob\", \"Jeremy\"]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [&#123;name: <span class=\"string\">\"Alice\"</span>&#125;, &#123;name: <span class=\"string\">\"Bob\"</span>&#125;, &#123;name: <span class=\"string\">\"Jeremy\"</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> names = users.map( (o) =&gt; o.name )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names)</span><br><span class=\"line\"><span class=\"comment\">// output:[\"Alice\", \"Bob\", \"Jeremy\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"_.includes\"></a>_.includes</h3><p>判断是否包含某个特定的值，如果有则返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash - also called _.contains</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIncludes = _.includes(array, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIncludes)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> isIncludes = array.includes(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIncludes)</span><br><span class=\"line\"><span class=\"keyword\">var</span> isIndexOf = array.indexOf(<span class=\"number\">1</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIndexOf)</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"_.toArray\"></a>_.toArray</h3><p><code>toArray</code>方法则可以用数组扩展符以及<code>Array.from</code>来模拟。<code>Array.from</code>跟数组扩展符都是浅拷贝，只能拷贝第一层的值，第二次及其之后的值无法进行深拷贝，他们的引用地址任然是同一个。<br>其中<code>Array.from</code>不仅可以生成转换成数组，也可以运行对每个元素执行回调函数。<br><code>Array.from({length:10})</code>生成的新数组，及时里面的值都是<code>undefined</code>也是可以循环遍历。<code>Array.from</code>有三个参数：</p>\n<ol>\n<li>想要转为成数组的元素</li>\n<li><code>map</code>回调函数</li>\n<li>回调的执行函数<br>所以，<code>Array.from(obj, mapFn, thisArg)</code> 就相当于 <code>Array.from(obj).map(mapFn, thisArg)</code>,</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.toArray(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\">_.toArray([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\">_.toArray(&#123; <span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[...<span class=\"string\">'abc'</span>]</span><br><span class=\"line\"><span class=\"comment\">// output: [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Object</span>.values(&#123; <span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span> &#125;))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h2><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"_.object\"></a>_.object</h3><p><code>_.object</code>将数组转换为对象。原生js中没有此方法，但是我们可以使用数组的<code>reduce</code>方法以及对象的<code>assign</code>来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\">_.object([[<span class=\"string\">'moe'</span>, <span class=\"number\">30</span>], [<span class=\"string\">'larry'</span>, <span class=\"number\">40</span>], [<span class=\"string\">'curly'</span>, <span class=\"number\">50</span>]])</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [[<span class=\"string\">'moe'</span>, <span class=\"number\">30</span>], [<span class=\"string\">'larry'</span>, <span class=\"number\">40</span>], [<span class=\"string\">'curly'</span>, <span class=\"number\">50</span>]];</span><br><span class=\"line\">array.reduce((result, [key, val]) =&gt; <span class=\"built_in\">Object</span>.assign(result, &#123;[key]: val&#125;), &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [[<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]];</span><br><span class=\"line\">array.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>].reduce( (result, key, index, _array) =&gt; <span class=\"built_in\">Object</span>.assign(result, &#123;[key]: array[<span class=\"number\">1</span>][index]&#125;) ,&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;curly: 50, larry: 40, moe: 30&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"_.compact\"></a>_.compact</h3><p>去除数组中的所有false的值。原生中没有，但是可以使用filter来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(x =&gt; !!x)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"_.uniq\"></a>_.uniq</h3><p>数组去重。<code>Set</code> 对象可以去重，再转成数组来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.uniq([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 4, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = [...new <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 4, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"_.indexOf\"></a>_.indexOf</h3><p>数组中寻找一个给定元素的第一个索引，如果不存在，则返回-1，跟原生数组中的<code>indexOf</code>方法一样。<br><code>indexOf</code>有两个参数：</p>\n<ol>\n<li>要查找的元素</li>\n<li>开始查找的索引位置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = _.indexOf([<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>].indexOf(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"_.findIndex\"></a>_.findIndex</h3><p>返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。有两个参数：</p>\n<ol>\n<li>执行的回调函数：三个参数分别是：元素值、元素索引以及原数组。</li>\n<li>执行回调函数的 <code>this</code> 值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = _.findIndex(users, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &gt;= <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaoming'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaohong'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'xiaogang'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = users.findIndex( (o) =&gt; o.age &gt;=<span class=\"number\">40</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\"><span class=\"comment\">// output: 0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"_.range\"></a>_.range</h3><p>原生Js中没有<code>range</code>。所以直接使用<code>map</code>函数来处理，并最终处理成数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.range(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">-10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\">_.range(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; i)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; i+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">6</span>&#125;, (_, i) =&gt; i*<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">10</span>&#125;, (_, i) =&gt; -i)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123;length:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys() ] )</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()].map(k =&gt; k + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">6</span>).keys()].map(k =&gt; k*<span class=\"number\">5</span> )</span><br><span class=\"line\"><span class=\"comment\">// output: [0, 5, 10, 15, 20, 25]</span></span><br><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()].map(k =&gt; -k)</span><br><span class=\"line\"><span class=\"comment\">// output: [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"comment\">// output: []</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"_.chunk\"></a>_.chunk</h3><p>将数组拆分成多个size长度的小数组，并且将这些小数组组成一个新的大数组，如果最后剩余的元素不够size长度，那么最后剩余的元素组成一个小数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunk = (input, size) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentIndex % size === <span class=\"number\">0</span></span><br><span class=\"line\">        ? [...previousValue, [currentValue]] <span class=\"comment\">//当前索引跟size余数为0时，新增一个小数组</span></span><br><span class=\"line\">        : [...previousValue.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>), [...previousValue.slice(<span class=\"number\">-1</span>)[<span class=\"number\">0</span>], currentValue]]; <span class=\"comment\">//当前索引跟size余数不为0时，往length - 1的小数组里推值</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class=\"line\"></span><br><span class=\"line\">chunk([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"_.difference\"></a>_.difference</h3><p>原生中没有此方法，所以得模拟。<code>difference</code>会返回一个过滤值不包含排除值的新数组。接受两个参数：</p>\n<ol>\n<li>原数组</li>\n<li>要排除的值，[values]<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]];</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =_.difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> !target.includes(value); <span class=\"comment\">// 如果过滤数组中函数该值includes则返回true，filter则会创建返回值是true的新数组</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce((source, target) =&gt; source.filter(value =&gt; !target.includes(value))));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"_.drop\"></a>_.drop</h3><p>原生<code>slice</code>方法的阉割版。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [2, 3]</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.drop([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"_.first\"></a>_.first</h3><p>获取数组 array 的第一个元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.first([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.first([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">[].concat(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">[].concat([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native (works even with potentially undefined/null, like _.first)</span></span><br><span class=\"line\">[].concat(<span class=\"literal\">undefined</span>).shift()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a>_.last</h3><p>获取array中的最后一个元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">_.last(numbers);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.last(numbers, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">numbers[numbers.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">numbers.slice(<span class=\"number\">-1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">[].concat(numbers).pop()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[].concat(<span class=\"literal\">undefined</span>).pop()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers.slice(<span class=\"number\">-2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [4, 5]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"_.flatten\"></a>_.flatten</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flatten = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].reduce( (a, b) =&gt; a.concat(b), []) <span class=\"comment\">// 合并一级层级</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native(ES2019)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flatten = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].flat()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"flattenDeep\"><a href=\"#flattenDeep\" class=\"headerlink\" title=\"_.flattenDeep\"></a>_.flattenDeep</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.flattenDeep([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenDeep = (arr) =&gt; <span class=\"built_in\">Array</span>.isArray(arr)</span><br><span class=\"line\">  ? arr.reduce( (a, b) =&gt; a.concat(flattenDeep(b)) , []) <span class=\"comment\">// 如果是数组则继续合并</span></span><br><span class=\"line\">  : [arr] <span class=\"comment\">// 知道不是数组为止</span></span><br><span class=\"line\"></span><br><span class=\"line\">flattenDeep([<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native(ES2019)</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]].flat(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// 使用 Infinity 作为深度，展开为一维数组</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"isArrayBuffer\"><a href=\"#isArrayBuffer\" class=\"headerlink\" title=\"_.isArrayBuffer\"></a>_.isArrayBuffer</h3><p>检查 value 是否是 ArrayBuffer 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.isArrayBuffer(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">2</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"_.intersection\"></a>_.intersection</h3><p>创建唯一值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">// 因为是包含共同值，所以很自然的使用filter来过滤并创建新数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.includes(value); <span class=\"comment\">// 为true则保留该元素</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrays = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">101</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrays.reduce((a, b) =&gt; a.filter(c =&gt; b.includes(c))));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"_.without\"></a>_.without</h3><p>创建一个剔除所有给定值的新数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.without(array, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value !== <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Objects\"><a href=\"#Objects\" class=\"headerlink\" title=\"Objects\"></a>Objects</h2><h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"_.keys\"></a>_.keys</h3><p>返回一个可枚举的直属属性的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"one\", \"two\", \"three\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">Object</span>.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: [\"one\", \"two\", \"three\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"_.size\"></a>_.size</h3><p>返回对象的长度，原生没有size方法，用<code>keys</code>返回一个数组，再获取长度来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.size(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output:3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">Object</span>.keys(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;).length</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"allKeys\"><a href=\"#allKeys\" class=\"headerlink\" title=\"_.allKeys\"></a>_.allKeys</h3><p><code>Reflect.enumerate(..)</code>：返回一个产生所有（直属和“继承的”）非symbol、可枚举的键的迭代器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stooge</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Stooge.prototype.silly = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(__.allKeys(<span class=\"keyword\">new</span> Stooge(<span class=\"string\">\"Hi\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// output:[\"name\", \"silly\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( [...Reflect.enumerate( <span class=\"keyword\">new</span> Stooge(<span class=\"string\">\"Hi\"</span>) )] )</span><br><span class=\"line\"><span class=\"comment\">// output: [\"name\", \"silly\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"_.values\"></a>_.values</h3><p>返回对象所有的属性值。原生中没有<code>values</code>方法，可使用<code>Object.keys</code>和<code>map</code>来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.values(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(&#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2， 3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;one: <span class=\"number\">1</span>, two: <span class=\"number\">2</span>, three: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj).map(key =&gt; obj[key])</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 2， 3]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"_.create\"></a>_.create</h3><p>使用现有的对象来提供新创建的对象。基本上和<code>Object.create</code>一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stooge</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Stooge.prototype.silly = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> hi = _.create(Stooge.prototype, &#123;name: <span class=\"string\">\"hi\"</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hi)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;name: \"hi\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hi = <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(Stooge.prototype), &#123;name: <span class=\"string\">\"hi\"</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( hi )</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"_.assign\"></a>_.assign</h3><p>通过合并自身属性到目标对象来创建新对象，基本上和<code>Object.assign</code>一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.assign(&#123;&#125;, &#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, &#123; a: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, &#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, &#123; a: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br><span class=\"line\">&#123;  ...&#123;b: <span class=\"number\">1</span>,c: <span class=\"number\">2</span>&#125;, a: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// output &#123;b: 1, c: 2, a: false&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"isArray\"><a href=\"#isArray\" class=\"headerlink\" title=\"_.isArray\"></a>_.isArray</h3><p>判断是否是一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.isArray(array))</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array))</span><br><span class=\"line\"><span class=\"comment\">// output: true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"_.isFinite\"></a>_.isFinite</h3><p>判断是否是一个有限的数字。只要是数字就返回true，其他值都是false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.isFinite(<span class=\"number\">-101</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\">_.isFinite(-<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br><span class=\"line\">_.isFinite(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = []</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">-101</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(-<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// output true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">// output false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"_.bind\"></a>_.bind</h3><p>指定调用函数的作用域，函数里的this都指向传入的<code>this</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">66</span>,</span><br><span class=\"line\">    offsetX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x + offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">67</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">boundOffsetX = _.bind(objA.offsetX, objB, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 67</span></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">boundOffsetX = objA.offsetX.bind(objB, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 67</span></span><br></pre></td></tr></table></figure></p>\n<p>大部分方法都从以下文章搬过来，觉得很有学习价值，就一个个修修改改搬过来。从中又熟悉了一遍ES6的函数方法，特别是逼格满满的<code>reduce</code>方法，^_^</p>\n<p>参考文章：</p>\n<ol>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a></li>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You don’t (may not) need Lodash/Underscore</a></li>\n</ol>"},{"title":"vue组件通信","date":"2019-08-09T07:49:50.000Z","_content":"\n`Vue`组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。\n\n## 父子组件通信\n### props / $emit\n父组件通过`props`属性传值的方式给子组件，子组件通过`$emit`定义事件向父组件传递值。\n<!--more-->\n\n#### 例子\n使用一个简单的例子来验证下`props / $emit`，其中`List.vue`是`Bank.vue`的父组件。\n````\n// List.vue\n<template>\n  <div class=\"list\">\n    <bank-item :list=\"banks\" @onEmitCurBankIndex=\"onEmitCurBankIndex\">:</bank-item>\n    <p>开户地：{{curCity}}</p>\n  </div>\n</template>\n\n<script>\nimport bankItem from './Bank.vue'\nexport default {\n  name: 'List',\n  components: { bankItem },\n  data() {\n    return {\n      banks: [\n          {name: '众邦银行', info: '武汉'},\n          {name: '营口银行', info: '营口'},\n          {name: '金城银行', info: '天津'},\n        ],\n        curCity: ''\n    }\n  },\n  methods: {\n      onEmitCurBankIndex(index) {\n          this.curCity = this.banks[index].info;\n      }\n  }\n}\n</script>\n\n\n// Bank.vue\n<template>\n    <ul>\n        <li v-for=\"(item, index) in list\" :key=\"index\" @click=\"emitCurBankIndex(index)\">\n            {{item.name}}\n        </li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  props: ['list'],\n  methods: {\n      emitCurBankIndex(index) {\n          this.$emit('onEmitCurBankIndex', index)\n      }\n  }\n}\n</script>\n````\n注意：通过prop传递的数据，子组件只能使用，不能修改；而父组件也只能通过监听事件才能获取传递的值。\n\n\n### ref / $refs\n`ref`被用来给元素或者子组件注册引用信息。在父组件中可以使用`$refs`来获取引用信息。如果用在普通的DOM元素上，则引用信息指向DOM元素，如果是子元素，引用信息则指向子组件的实例。\n#### 例子\n我们拿`props / $emit`中的例子，当前银行索引从子元素中获取。\n````\n// List.vue\n<template>\n  <div class=\"list\">\n    <bank-item :list=\"banks\" @onEmitCurBankIndex=\"onEmitCurBankIndex\"  ref=\"bankItem\">:</bank-item>\n    <p>开户地：{{curCity}}</p>\n  </div>\n</template>\n\n<script>\nimport bankItem from './Bank.vue'\nexport default {\n  name: 'List',\n  components: { bankItem },\n  data() {\n    return {\n      banks: [\n          {name: '众邦银行', info: '武汉'},\n          {name: '营口银行', info: '营口'},\n          {name: '金城银行', info: '天津'},\n        ],\n        curCity: ''\n    }\n  },\n  methods: {\n      // 父组件通过v-on监听并接受传参   \n      onEmitCurBankIndex(index) {\n          this.curCity = this.banks[index].info;\n      }\n  },\n  mounted() {\n      var bank = this.$refs.bankItem.curCity;\n      this.curCity = this.banks[bank].info; // 默认选中通过$refs从子元素中获取\n  }\n}\n</script>\n\n// Bank.vue\n<template>\n    <ul>\n        <li v-for=\"(item, index) in list\" :key=\"index\" @click=\"emitCurBankIndex(index)\">\n            {{item.name}}\n        </li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  props: ['list'],\n  data(){\n    return {\n      curCity:0\n    }\n  },\n  methods: {\n        // 自定义时间，通过传参将值传给父组件 \n        emitCurBankIndex(index) {\n          this.$emit('onEmitCurBankIndex', index)\n        }\n  }\n}\n</script>\n````\n\n### $children / $parent\n指定已创建的父实例，在两者之间建立父子关系。子实例可以用`this.$parent`访问父实例，子实例被推入父实例的`$children`数组中。`this.$parent`返回的是包含父组件实例的对象，而`$children`返回的是由该父组件所包含的所有子组件的数组。\n#### 例子\n使用一个简单的例子来验证下`$children / $parent`，其中`Parent.vue`是`Children.vue`的父组件。\n````\n// Parent.vue\n<template>\n    <div class=\"parent-el\">\n        <h1>我是父组件</h1>\n        我是子组件的值{{tmp}}\n        <children-a></children-a>\n        <button @click=\"setChildtVal\">点击改变子集的值</button>\n    </div>\n</template>\n\n<script>\nimport ChildrenA from './ChildrenA.vue'\nexport default {\n    name: 'Parent',\n    components:{\n        ChildrenA\n    },\n    data() {\n        return {\n            parentMsg: '我是父级的值',\n            tmp: ''\n        }\n    },\n    methods: {\n        setChildtVal: function(){\n            this.$children[0].childrenMsg = '改变子级的值'\n        }\n    }\n}\n</script>\n// Children.vue\n<template>\n    <div>\n        <h2>我是子组件</h2>\n        {{childrenMsg}}\n        <p>父组件的值：{{getParentVal}}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            childrenMsg: '子组件的值'\n        }\n    },\n    computed: {\n        getParentVal: function(){\n            return this.$parent.parentMsg\n        }\n    }\n}\n</script>\n````\n注意：官网建议要节制地使用`$parent`和`$children`- 它们的主要目的是作为访问组件的应急方法。更推荐用`props`和`events`实现父子组件通信。\n\n\n### 父子通信小结\n`$refs` 和 `$children` 都只有在组件渲染完成后才填充，都是在`mounted`之后才存在，所以\n\n## 跨级传递\n### provide/ inject\n`provide/ inject` 是`vue2.2.0`新增的API。它解决了不管子组件嵌套多深，只要在父级组件中使用`provide`来提供变量，在子组件中就可以通过`inject`来注入变量。所以只要在祖先组件中使用`provide`定义了变量，子孙组件就能通过`inject`来获取，而不需要通过`prop`一层层的往下传递。\n#### 例子\n`Provider.vue`使用`provide`定义`title/titleA`属性，`ChildrenB.vue`通过`inject`获取`titleA`值，`ChildrenB.vue`通过`inject`获取`title`值。如下：\n````\n// Provider.vue\n<template>\n    <div>\n        <p>父组件</p>\n        <child-b></child-b>\n    </div>\n</template>\n\n<script>\nimport ChildB from './ChildrenB.vue'\nexport default {\n    provide: {\n        title: '跨级传递',\n        titleA: '子组件传递'\n    },\n    components: {\n        ChildB\n    }\n}\n</script>\n// ChildrenB.vue\n<template>\n    <div>\n        {{tittle}}\n        <child-c></child-c>    \n    </div>\n</template>\n\n<script>\n    import ChildC from \"./ChildrenC.vue\"\n    export default {\n        name: 'ChildB',\n        inject: [ 'titleA' ], // 获取父组件定义的titleA值\n        components: {\n            ChildC\n        },\n        data() {\n            return {\n                tittle: this.titleA\n            }\n        }\n    }\n</script>\n// InjectChild.vue\n<template>\n    <div>\n        {{title}}\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'grand',\n    inject: ['title'], // 获取祖先组件定义的title值\n    data() {\n        return {\n            titie: this.titie\n        }\n    }\n}\n</script>\n````\n\n### $attrs  $listeners\n`provide/ inject`解决了`props`一级一级往下传递信息的问题，但是没解决子孙组件通过事件通信祖先组件也得一级一级网上传递。所以，在`vue2.4`中又引入了`$attrs` 和 `$listeners`。\n\n#### 例子\n`ChildrenD`组件调用`ChildrenE`组件时，使用`v-on`绑定了`$listeners`,`Ancestors`组件中能直接触发`ChildrenE`组件定义的的`postName`方法；`v-bind`绑定 `$attrs`属性，`ChildrenE`组件可以直接获取到`Ancestors`组件中传递下来的属性值。\n\n````\n// Ancestors.vue\n<template>\n    <div>\n        <p>祖先组件</p>\n        <child-d :titled=\"titleD\" :titlee=\"titleE\" v-on:postName=\"postName\"></child-d>\n    </div>\n</template>\n\n<script>\nimport ChildD from './ChildrenD'\nexport default {\n    data() {\n        return {\n            titleD: '传递给childrenD的值',\n            titleE: '传递给childrenE的值'\n        }\n    },\n    components: {\n        ChildD\n    },\n    methods: {\n        postName(val) {\n            console.log('从childrenE传递过来的值：' + val)\n        }\n    }\n}\n</script>\n// ChildrenD.vue\n<template>\n    <div>\n        <p>{{title}}</p>\n        <child-e v-bind=\"$attrs\" v-on=\"$listeners\"></child-e>\n    </div>\n</template>\n\n<script>\nimport ChildE from './ChildrenE.vue'\nexport default {\n    data() {\n        return {\n            title: this.$attrs.titled\n        }\n    },\n    components: {\n        ChildE\n    }\n}\n</script>\n// ChildrenE.vue\n<template>\n    <div>\n        <p>{{title}}</p>\n        <input type=\"text\" v-model=\"name\" @input=\"postName(name)\">\n    </div>\n</template>\n\n<script>\nexport default {\n    data(){\n        return{\n            name: '',\n            title: this.$attrs.titlee\n        }\n    },\n    methods: {\n        postName(val){\n            this.$emit('postName',val)\n        }\n    }\n}\n</script>\n````\n\n## 兄弟组件通信\n没有`API`能直接实现兄弟组件的通信。\n\n### 事件中转\n父子通信可以通过官方的`API`一步来传递，但是兄弟间的数据传递要麻烦一点。得利用`vue`内部的一个事件机制，将其作为兄弟事件处理的中转站。\n#### 例子\n将`EventBus`定义在父级元素，这样子的话子元素可以直接获取到时间对象。\n````\n//EventBus.vue\n<template>\n    <div>\n        <brother-a></brother-a>\n        <brother-b></brother-b>\n    </div>\n</template>\n<script>\nimport Vue from 'vue'\nimport BrotherA from './BrotherA.vue'\nimport BrotherB from './BrotherB.vue'\n\nconst EventBus = new Vue()\nVue.prototype.$EventBus = EventBus; // 将vue内部的事件赋值给vue的原型\n\nexport default {\n    data() {\n        return {\n\n        }\n    },\n    components: {\n        BrotherA,\n        BrotherB\n    }\n}\n</script>  \n//BrotherA.vue\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\" @input=\"passTitle(title)\">\n    </div>  \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        passTitle(val) {\n            this.$EventBus.$emit('passTitle', val) // 子元素获取到$EventBus对象，然后定义事件名passTitle\n        }\n    }\n}\n</script>\n//BrotherB.vue\n<template>\n    <div>\n        <h4>BrotherB组件</h4>\n        <h4>BrotherA组件传递过来的值：{{title}}</h4>\n    </div>\n</template>\n<script>\nexport default {\n    data(){\n        return {\n            title: ''\n        }\n    },\n    mounted() {\n        this.$EventBus.$on('passTitle', (val)=> { // 接受passTitle事件\n            this.title = val\n        })\n    }\n}\n\n</script>\n````\n当然也可以定义一个`eventBus.js`\n````javascript\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n````\n然后每次使用引入使用\n````\nimport { EventBus } from './event-bus.js'\n````\n\n### Vuex\n`Vuex`是一个专为 Vue.js 应用程序开发的状态管理模式。具体怎么使用移步[官网](https://vuex.vuejs.org/zh/)。\n\n### 兄弟组件通信小结\n事件中转和`Vuex`能实现跨级通信，所以父子间通信也是能实现的，但是相比于其他直接能实现父子通信的`API`，用事件中转和`Vuex`去实现就有点不够优雅了。\n\n### 总结\n1. `props / $emit`和`$children / $parent`只能解决父子组件的通信。\n2. `$children`和`$refs`都不是响应式的，因此不能用它们在模板中做数据绑定。\n3. `Vuex`能解决所有关系组件通信问题，但是要根据实际项目情况去使用。","source":"_posts/vue-communication.md","raw":"title: vue组件通信\ndate: 2019-08-09 15:49:50\ncategories:\n- Vue\ntags:\n- Vue\n- Vue实操\n---\n\n`Vue`组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。\n\n## 父子组件通信\n### props / $emit\n父组件通过`props`属性传值的方式给子组件，子组件通过`$emit`定义事件向父组件传递值。\n<!--more-->\n\n#### 例子\n使用一个简单的例子来验证下`props / $emit`，其中`List.vue`是`Bank.vue`的父组件。\n````\n// List.vue\n<template>\n  <div class=\"list\">\n    <bank-item :list=\"banks\" @onEmitCurBankIndex=\"onEmitCurBankIndex\">:</bank-item>\n    <p>开户地：{{curCity}}</p>\n  </div>\n</template>\n\n<script>\nimport bankItem from './Bank.vue'\nexport default {\n  name: 'List',\n  components: { bankItem },\n  data() {\n    return {\n      banks: [\n          {name: '众邦银行', info: '武汉'},\n          {name: '营口银行', info: '营口'},\n          {name: '金城银行', info: '天津'},\n        ],\n        curCity: ''\n    }\n  },\n  methods: {\n      onEmitCurBankIndex(index) {\n          this.curCity = this.banks[index].info;\n      }\n  }\n}\n</script>\n\n\n// Bank.vue\n<template>\n    <ul>\n        <li v-for=\"(item, index) in list\" :key=\"index\" @click=\"emitCurBankIndex(index)\">\n            {{item.name}}\n        </li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  props: ['list'],\n  methods: {\n      emitCurBankIndex(index) {\n          this.$emit('onEmitCurBankIndex', index)\n      }\n  }\n}\n</script>\n````\n注意：通过prop传递的数据，子组件只能使用，不能修改；而父组件也只能通过监听事件才能获取传递的值。\n\n\n### ref / $refs\n`ref`被用来给元素或者子组件注册引用信息。在父组件中可以使用`$refs`来获取引用信息。如果用在普通的DOM元素上，则引用信息指向DOM元素，如果是子元素，引用信息则指向子组件的实例。\n#### 例子\n我们拿`props / $emit`中的例子，当前银行索引从子元素中获取。\n````\n// List.vue\n<template>\n  <div class=\"list\">\n    <bank-item :list=\"banks\" @onEmitCurBankIndex=\"onEmitCurBankIndex\"  ref=\"bankItem\">:</bank-item>\n    <p>开户地：{{curCity}}</p>\n  </div>\n</template>\n\n<script>\nimport bankItem from './Bank.vue'\nexport default {\n  name: 'List',\n  components: { bankItem },\n  data() {\n    return {\n      banks: [\n          {name: '众邦银行', info: '武汉'},\n          {name: '营口银行', info: '营口'},\n          {name: '金城银行', info: '天津'},\n        ],\n        curCity: ''\n    }\n  },\n  methods: {\n      // 父组件通过v-on监听并接受传参   \n      onEmitCurBankIndex(index) {\n          this.curCity = this.banks[index].info;\n      }\n  },\n  mounted() {\n      var bank = this.$refs.bankItem.curCity;\n      this.curCity = this.banks[bank].info; // 默认选中通过$refs从子元素中获取\n  }\n}\n</script>\n\n// Bank.vue\n<template>\n    <ul>\n        <li v-for=\"(item, index) in list\" :key=\"index\" @click=\"emitCurBankIndex(index)\">\n            {{item.name}}\n        </li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  props: ['list'],\n  data(){\n    return {\n      curCity:0\n    }\n  },\n  methods: {\n        // 自定义时间，通过传参将值传给父组件 \n        emitCurBankIndex(index) {\n          this.$emit('onEmitCurBankIndex', index)\n        }\n  }\n}\n</script>\n````\n\n### $children / $parent\n指定已创建的父实例，在两者之间建立父子关系。子实例可以用`this.$parent`访问父实例，子实例被推入父实例的`$children`数组中。`this.$parent`返回的是包含父组件实例的对象，而`$children`返回的是由该父组件所包含的所有子组件的数组。\n#### 例子\n使用一个简单的例子来验证下`$children / $parent`，其中`Parent.vue`是`Children.vue`的父组件。\n````\n// Parent.vue\n<template>\n    <div class=\"parent-el\">\n        <h1>我是父组件</h1>\n        我是子组件的值{{tmp}}\n        <children-a></children-a>\n        <button @click=\"setChildtVal\">点击改变子集的值</button>\n    </div>\n</template>\n\n<script>\nimport ChildrenA from './ChildrenA.vue'\nexport default {\n    name: 'Parent',\n    components:{\n        ChildrenA\n    },\n    data() {\n        return {\n            parentMsg: '我是父级的值',\n            tmp: ''\n        }\n    },\n    methods: {\n        setChildtVal: function(){\n            this.$children[0].childrenMsg = '改变子级的值'\n        }\n    }\n}\n</script>\n// Children.vue\n<template>\n    <div>\n        <h2>我是子组件</h2>\n        {{childrenMsg}}\n        <p>父组件的值：{{getParentVal}}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            childrenMsg: '子组件的值'\n        }\n    },\n    computed: {\n        getParentVal: function(){\n            return this.$parent.parentMsg\n        }\n    }\n}\n</script>\n````\n注意：官网建议要节制地使用`$parent`和`$children`- 它们的主要目的是作为访问组件的应急方法。更推荐用`props`和`events`实现父子组件通信。\n\n\n### 父子通信小结\n`$refs` 和 `$children` 都只有在组件渲染完成后才填充，都是在`mounted`之后才存在，所以\n\n## 跨级传递\n### provide/ inject\n`provide/ inject` 是`vue2.2.0`新增的API。它解决了不管子组件嵌套多深，只要在父级组件中使用`provide`来提供变量，在子组件中就可以通过`inject`来注入变量。所以只要在祖先组件中使用`provide`定义了变量，子孙组件就能通过`inject`来获取，而不需要通过`prop`一层层的往下传递。\n#### 例子\n`Provider.vue`使用`provide`定义`title/titleA`属性，`ChildrenB.vue`通过`inject`获取`titleA`值，`ChildrenB.vue`通过`inject`获取`title`值。如下：\n````\n// Provider.vue\n<template>\n    <div>\n        <p>父组件</p>\n        <child-b></child-b>\n    </div>\n</template>\n\n<script>\nimport ChildB from './ChildrenB.vue'\nexport default {\n    provide: {\n        title: '跨级传递',\n        titleA: '子组件传递'\n    },\n    components: {\n        ChildB\n    }\n}\n</script>\n// ChildrenB.vue\n<template>\n    <div>\n        {{tittle}}\n        <child-c></child-c>    \n    </div>\n</template>\n\n<script>\n    import ChildC from \"./ChildrenC.vue\"\n    export default {\n        name: 'ChildB',\n        inject: [ 'titleA' ], // 获取父组件定义的titleA值\n        components: {\n            ChildC\n        },\n        data() {\n            return {\n                tittle: this.titleA\n            }\n        }\n    }\n</script>\n// InjectChild.vue\n<template>\n    <div>\n        {{title}}\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'grand',\n    inject: ['title'], // 获取祖先组件定义的title值\n    data() {\n        return {\n            titie: this.titie\n        }\n    }\n}\n</script>\n````\n\n### $attrs  $listeners\n`provide/ inject`解决了`props`一级一级往下传递信息的问题，但是没解决子孙组件通过事件通信祖先组件也得一级一级网上传递。所以，在`vue2.4`中又引入了`$attrs` 和 `$listeners`。\n\n#### 例子\n`ChildrenD`组件调用`ChildrenE`组件时，使用`v-on`绑定了`$listeners`,`Ancestors`组件中能直接触发`ChildrenE`组件定义的的`postName`方法；`v-bind`绑定 `$attrs`属性，`ChildrenE`组件可以直接获取到`Ancestors`组件中传递下来的属性值。\n\n````\n// Ancestors.vue\n<template>\n    <div>\n        <p>祖先组件</p>\n        <child-d :titled=\"titleD\" :titlee=\"titleE\" v-on:postName=\"postName\"></child-d>\n    </div>\n</template>\n\n<script>\nimport ChildD from './ChildrenD'\nexport default {\n    data() {\n        return {\n            titleD: '传递给childrenD的值',\n            titleE: '传递给childrenE的值'\n        }\n    },\n    components: {\n        ChildD\n    },\n    methods: {\n        postName(val) {\n            console.log('从childrenE传递过来的值：' + val)\n        }\n    }\n}\n</script>\n// ChildrenD.vue\n<template>\n    <div>\n        <p>{{title}}</p>\n        <child-e v-bind=\"$attrs\" v-on=\"$listeners\"></child-e>\n    </div>\n</template>\n\n<script>\nimport ChildE from './ChildrenE.vue'\nexport default {\n    data() {\n        return {\n            title: this.$attrs.titled\n        }\n    },\n    components: {\n        ChildE\n    }\n}\n</script>\n// ChildrenE.vue\n<template>\n    <div>\n        <p>{{title}}</p>\n        <input type=\"text\" v-model=\"name\" @input=\"postName(name)\">\n    </div>\n</template>\n\n<script>\nexport default {\n    data(){\n        return{\n            name: '',\n            title: this.$attrs.titlee\n        }\n    },\n    methods: {\n        postName(val){\n            this.$emit('postName',val)\n        }\n    }\n}\n</script>\n````\n\n## 兄弟组件通信\n没有`API`能直接实现兄弟组件的通信。\n\n### 事件中转\n父子通信可以通过官方的`API`一步来传递，但是兄弟间的数据传递要麻烦一点。得利用`vue`内部的一个事件机制，将其作为兄弟事件处理的中转站。\n#### 例子\n将`EventBus`定义在父级元素，这样子的话子元素可以直接获取到时间对象。\n````\n//EventBus.vue\n<template>\n    <div>\n        <brother-a></brother-a>\n        <brother-b></brother-b>\n    </div>\n</template>\n<script>\nimport Vue from 'vue'\nimport BrotherA from './BrotherA.vue'\nimport BrotherB from './BrotherB.vue'\n\nconst EventBus = new Vue()\nVue.prototype.$EventBus = EventBus; // 将vue内部的事件赋值给vue的原型\n\nexport default {\n    data() {\n        return {\n\n        }\n    },\n    components: {\n        BrotherA,\n        BrotherB\n    }\n}\n</script>  \n//BrotherA.vue\n<template>\n    <div>\n        <input type=\"text\" v-model=\"title\" @input=\"passTitle(title)\">\n    </div>  \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            title: ''\n        }\n    },\n    methods: {\n        passTitle(val) {\n            this.$EventBus.$emit('passTitle', val) // 子元素获取到$EventBus对象，然后定义事件名passTitle\n        }\n    }\n}\n</script>\n//BrotherB.vue\n<template>\n    <div>\n        <h4>BrotherB组件</h4>\n        <h4>BrotherA组件传递过来的值：{{title}}</h4>\n    </div>\n</template>\n<script>\nexport default {\n    data(){\n        return {\n            title: ''\n        }\n    },\n    mounted() {\n        this.$EventBus.$on('passTitle', (val)=> { // 接受passTitle事件\n            this.title = val\n        })\n    }\n}\n\n</script>\n````\n当然也可以定义一个`eventBus.js`\n````javascript\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n````\n然后每次使用引入使用\n````\nimport { EventBus } from './event-bus.js'\n````\n\n### Vuex\n`Vuex`是一个专为 Vue.js 应用程序开发的状态管理模式。具体怎么使用移步[官网](https://vuex.vuejs.org/zh/)。\n\n### 兄弟组件通信小结\n事件中转和`Vuex`能实现跨级通信，所以父子间通信也是能实现的，但是相比于其他直接能实现父子通信的`API`，用事件中转和`Vuex`去实现就有点不够优雅了。\n\n### 总结\n1. `props / $emit`和`$children / $parent`只能解决父子组件的通信。\n2. `$children`和`$refs`都不是响应式的，因此不能用它们在模板中做数据绑定。\n3. `Vuex`能解决所有关系组件通信问题，但是要根据实际项目情况去使用。","slug":"vue-communication","published":1,"updated":"2019-08-13T02:33:15.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcl76aj0037dkhsw4myc1sp","content":"<p><code>Vue</code>组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。</p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><h3 id=\"props-emit\"><a href=\"#props-emit\" class=\"headerlink\" title=\"props / $emit\"></a>props / $emit</h3><p>父组件通过<code>props</code>属性传值的方式给子组件，子组件通过<code>$emit</code>定义事件向父组件传递值。<br><a id=\"more\"></a></p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>使用一个简单的例子来验证下<code>props / $emit</code>，其中<code>List.vue</code>是<code>Bank.vue</code>的父组件。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// List.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bank-item</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"banks\"</span> @<span class=\"attr\">onEmitCurBankIndex</span>=<span class=\"string\">\"onEmitCurBankIndex\"</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">bank-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开户地：</span><span class=\"template-variable\">&#123;&#123;curCity&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bankItem <span class=\"keyword\">from</span> <span class=\"string\">'./Bank.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'List'</span>,</span><br><span class=\"line\">  components: &#123; bankItem &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      banks: [</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'众邦银行'</span>, info: <span class=\"string\">'武汉'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'营口银行'</span>, info: <span class=\"string\">'营口'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'金城银行'</span>, info: <span class=\"string\">'天津'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        curCity: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      onEmitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[index].info;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Bank.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"emitCurBankIndex(index)\"</span>&gt;</span></span><br><span class=\"line\">            </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'list'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      emitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'onEmitCurBankIndex'</span>, index)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意：通过prop传递的数据，子组件只能使用，不能修改；而父组件也只能通过监听事件才能获取传递的值。</p>\n<h3 id=\"ref-refs\"><a href=\"#ref-refs\" class=\"headerlink\" title=\"ref / $refs\"></a>ref / $refs</h3><p><code>ref</code>被用来给元素或者子组件注册引用信息。在父组件中可以使用<code>$refs</code>来获取引用信息。如果用在普通的DOM元素上，则引用信息指向DOM元素，如果是子元素，引用信息则指向子组件的实例。</p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>我们拿<code>props / $emit</code>中的例子，当前银行索引从子元素中获取。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// List.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bank-item</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"banks\"</span> @<span class=\"attr\">onEmitCurBankIndex</span>=<span class=\"string\">\"onEmitCurBankIndex\"</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"bankItem\"</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">bank-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开户地：</span><span class=\"template-variable\">&#123;&#123;curCity&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bankItem <span class=\"keyword\">from</span> <span class=\"string\">'./Bank.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'List'</span>,</span><br><span class=\"line\">  components: &#123; bankItem &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      banks: [</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'众邦银行'</span>, info: <span class=\"string\">'武汉'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'营口银行'</span>, info: <span class=\"string\">'营口'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'金城银行'</span>, info: <span class=\"string\">'天津'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        curCity: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 父组件通过v-on监听并接受传参   </span></span><br><span class=\"line\">      onEmitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[index].info;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bank = <span class=\"keyword\">this</span>.$refs.bankItem.curCity;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[bank].info; <span class=\"comment\">// 默认选中通过$refs从子元素中获取</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Bank.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"emitCurBankIndex(index)\"</span>&gt;</span></span><br><span class=\"line\">            </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'list'</span>],</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      curCity:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义时间，通过传参将值传给父组件 </span></span><br><span class=\"line\">        emitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'onEmitCurBankIndex'</span>, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"children-parent\"><a href=\"#children-parent\" class=\"headerlink\" title=\"$children / $parent\"></a>$children / $parent</h3><p>指定已创建的父实例，在两者之间建立父子关系。子实例可以用<code>this.$parent</code>访问父实例，子实例被推入父实例的<code>$children</code>数组中。<code>this.$parent</code>返回的是包含父组件实例的对象，而<code>$children</code>返回的是由该父组件所包含的所有子组件的数组。</p>\n<h4 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>使用一个简单的例子来验证下<code>$children / $parent</code>，其中<code>Parent.vue</code>是<code>Children.vue</code>的父组件。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Parent.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent-el\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        我是子组件的值</span><span class=\"template-variable\">&#123;&#123;tmp&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">children-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">children-a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"setChildtVal\"</span>&gt;</span>点击改变子集的值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildrenA <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenA.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Parent'</span>,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        ChildrenA</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            parentMsg: <span class=\"string\">'我是父级的值'</span>,</span><br><span class=\"line\">            tmp: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        setChildtVal: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].childrenMsg = <span class=\"string\">'改变子级的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// Children.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;childrenMsg&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件的值：</span><span class=\"template-variable\">&#123;&#123;getParentVal&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            childrenMsg: <span class=\"string\">'子组件的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        getParentVal: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$parent.parentMsg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意：官网建议要节制地使用<code>$parent</code>和<code>$children</code>- 它们的主要目的是作为访问组件的应急方法。更推荐用<code>props</code>和<code>events</code>实现父子组件通信。</p>\n<h3 id=\"父子通信小结\"><a href=\"#父子通信小结\" class=\"headerlink\" title=\"父子通信小结\"></a>父子通信小结</h3><p><code>$refs</code> 和 <code>$children</code> 都只有在组件渲染完成后才填充，都是在<code>mounted</code>之后才存在，所以</p>\n<h2 id=\"跨级传递\"><a href=\"#跨级传递\" class=\"headerlink\" title=\"跨级传递\"></a>跨级传递</h2><h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide/ inject\"></a>provide/ inject</h3><p><code>provide/ inject</code> 是<code>vue2.2.0</code>新增的API。它解决了不管子组件嵌套多深，只要在父级组件中使用<code>provide</code>来提供变量，在子组件中就可以通过<code>inject</code>来注入变量。所以只要在祖先组件中使用<code>provide</code>定义了变量，子孙组件就能通过<code>inject</code>来获取，而不需要通过<code>prop</code>一层层的往下传递。</p>\n<h4 id=\"例子-3\"><a href=\"#例子-3\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p><code>Provider.vue</code>使用<code>provide</code>定义<code>title/titleA</code>属性，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>titleA</code>值，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>title</code>值。如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Provider.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildB <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenB.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    provide: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'跨级传递'</span>,</span><br><span class=\"line\">        titleA: <span class=\"string\">'子组件传递'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildB</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenB.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;tittle&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-c</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-c</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">    <span class=\"keyword\">import</span> ChildC <span class=\"keyword\">from</span> <span class=\"string\">\"./ChildrenC.vue\"</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'ChildB'</span>,</span><br><span class=\"line\">        inject: [ <span class=\"string\">'titleA'</span> ], <span class=\"comment\">// 获取父组件定义的titleA值</span></span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            ChildC</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                tittle: <span class=\"keyword\">this</span>.titleA</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// InjectChild.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'grand'</span>,</span><br><span class=\"line\">    inject: [<span class=\"string\">'title'</span>], <span class=\"comment\">// 获取祖先组件定义的title值</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            titie: <span class=\"keyword\">this</span>.titie</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"attrs-listeners\"><a href=\"#attrs-listeners\" class=\"headerlink\" title=\"$attrs  $listeners\"></a>$attrs  $listeners</h3><p><code>provide/ inject</code>解决了<code>props</code>一级一级往下传递信息的问题，但是没解决子孙组件通过事件通信祖先组件也得一级一级网上传递。所以，在<code>vue2.4</code>中又引入了<code>$attrs</code> 和 <code>$listeners</code>。</p>\n<h4 id=\"例子-4\"><a href=\"#例子-4\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p><code>ChildrenD</code>组件调用<code>ChildrenE</code>组件时，使用<code>v-on</code>绑定了<code>$listeners</code>,<code>Ancestors</code>组件中能直接触发<code>ChildrenE</code>组件定义的的<code>postName</code>方法；<code>v-bind</code>绑定 <code>$attrs</code>属性，<code>ChildrenE</code>组件可以直接获取到<code>Ancestors</code>组件中传递下来的属性值。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Ancestors.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>祖先组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-d</span> <span class=\"attr\">:titled</span>=<span class=\"string\">\"titleD\"</span> <span class=\"attr\">:titlee</span>=<span class=\"string\">\"titleE\"</span> <span class=\"attr\">v-on:postName</span>=<span class=\"string\">\"postName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-d</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildD <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenD'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            titleD: <span class=\"string\">'传递给childrenD的值'</span>,</span><br><span class=\"line\">            titleE: <span class=\"string\">'传递给childrenE的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildD</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        postName(val) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'从childrenE传递过来的值：'</span> + val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenD.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-e</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"$listeners\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-e</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildE <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenE.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.$attrs.titled</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenE.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"postName(name)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            name: <span class=\"string\">''</span>,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.$attrs.titlee</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        postName(val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'postName'</span>,val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h2><p>没有<code>API</code>能直接实现兄弟组件的通信。</p>\n<h3 id=\"事件中转\"><a href=\"#事件中转\" class=\"headerlink\" title=\"事件中转\"></a>事件中转</h3><p>父子通信可以通过官方的<code>API</code>一步来传递，但是兄弟间的数据传递要麻烦一点。得利用<code>vue</code>内部的一个事件机制，将其作为兄弟事件处理的中转站。</p>\n<h4 id=\"例子-5\"><a href=\"#例子-5\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>将<code>EventBus</code>定义在父级元素，这样子的话子元素可以直接获取到时间对象。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">//EventBus.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">brother-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">brother-a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">brother-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">brother-b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BrotherA <span class=\"keyword\">from</span> <span class=\"string\">'./BrotherA.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BrotherB <span class=\"keyword\">from</span> <span class=\"string\">'./BrotherB.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\">Vue.prototype.$EventBus = EventBus; <span class=\"comment\">// 将vue内部的事件赋值给vue的原型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        BrotherA,</span><br><span class=\"line\">        BrotherB</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\">//BrotherA.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"passTitle(title)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        passTitle(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$EventBus.$emit(<span class=\"string\">'passTitle'</span>, val) <span class=\"comment\">// 子元素获取到$EventBus对象，然后定义事件名passTitle</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">//BrotherB.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>BrotherB组件<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>BrotherA组件传递过来的值：</span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$EventBus.$on(<span class=\"string\">'passTitle'</span>, (val)=&gt; &#123; <span class=\"comment\">// 接受passTitle事件</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.title = val</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>当然也可以定义一个<code>eventBus.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure></p>\n<p>然后每次使用引入使用<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventBus &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./event-bus.js'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p><code>Vuex</code>是一个专为 Vue.js 应用程序开发的状态管理模式。具体怎么使用移步<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"external\">官网</a>。</p>\n<h3 id=\"兄弟组件通信小结\"><a href=\"#兄弟组件通信小结\" class=\"headerlink\" title=\"兄弟组件通信小结\"></a>兄弟组件通信小结</h3><p>事件中转和<code>Vuex</code>能实现跨级通信，所以父子间通信也是能实现的，但是相比于其他直接能实现父子通信的<code>API</code>，用事件中转和<code>Vuex</code>去实现就有点不够优雅了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><code>props / $emit</code>和<code>$children / $parent</code>只能解决父子组件的通信。</li>\n<li><code>$children</code>和<code>$refs</code>都不是响应式的，因此不能用它们在模板中做数据绑定。</li>\n<li><code>Vuex</code>能解决所有关系组件通信问题，但是要根据实际项目情况去使用。</li>\n</ol>\n","excerpt":"<p><code>Vue</code>组件是开发，又是靠数据去驱动视图更新的。所以在开发过程中，会经常遇到组件间的通信的问题。以下内容我们从 父子组件通信 、跨级传递 、兄弟组件通信三个方面来举例说明。</p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><h3 id=\"props-emit\"><a href=\"#props-emit\" class=\"headerlink\" title=\"props / $emit\"></a>props / $emit</h3><p>父组件通过<code>props</code>属性传值的方式给子组件，子组件通过<code>$emit</code>定义事件向父组件传递值。<br>","more":"</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>使用一个简单的例子来验证下<code>props / $emit</code>，其中<code>List.vue</code>是<code>Bank.vue</code>的父组件。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// List.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bank-item</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"banks\"</span> @<span class=\"attr\">onEmitCurBankIndex</span>=<span class=\"string\">\"onEmitCurBankIndex\"</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">bank-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开户地：</span><span class=\"template-variable\">&#123;&#123;curCity&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bankItem <span class=\"keyword\">from</span> <span class=\"string\">'./Bank.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'List'</span>,</span><br><span class=\"line\">  components: &#123; bankItem &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      banks: [</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'众邦银行'</span>, info: <span class=\"string\">'武汉'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'营口银行'</span>, info: <span class=\"string\">'营口'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'金城银行'</span>, info: <span class=\"string\">'天津'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        curCity: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      onEmitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[index].info;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Bank.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"emitCurBankIndex(index)\"</span>&gt;</span></span><br><span class=\"line\">            </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'list'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      emitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'onEmitCurBankIndex'</span>, index)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意：通过prop传递的数据，子组件只能使用，不能修改；而父组件也只能通过监听事件才能获取传递的值。</p>\n<h3 id=\"ref-refs\"><a href=\"#ref-refs\" class=\"headerlink\" title=\"ref / $refs\"></a>ref / $refs</h3><p><code>ref</code>被用来给元素或者子组件注册引用信息。在父组件中可以使用<code>$refs</code>来获取引用信息。如果用在普通的DOM元素上，则引用信息指向DOM元素，如果是子元素，引用信息则指向子组件的实例。</p>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>我们拿<code>props / $emit</code>中的例子，当前银行索引从子元素中获取。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// List.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bank-item</span> <span class=\"attr\">:list</span>=<span class=\"string\">\"banks\"</span> @<span class=\"attr\">onEmitCurBankIndex</span>=<span class=\"string\">\"onEmitCurBankIndex\"</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"bankItem\"</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">bank-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开户地：</span><span class=\"template-variable\">&#123;&#123;curCity&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bankItem <span class=\"keyword\">from</span> <span class=\"string\">'./Bank.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'List'</span>,</span><br><span class=\"line\">  components: &#123; bankItem &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      banks: [</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'众邦银行'</span>, info: <span class=\"string\">'武汉'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'营口银行'</span>, info: <span class=\"string\">'营口'</span>&#125;,</span><br><span class=\"line\">          &#123;name: <span class=\"string\">'金城银行'</span>, info: <span class=\"string\">'天津'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        curCity: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 父组件通过v-on监听并接受传参   </span></span><br><span class=\"line\">      onEmitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[index].info;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bank = <span class=\"keyword\">this</span>.$refs.bankItem.curCity;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.curCity = <span class=\"keyword\">this</span>.banks[bank].info; <span class=\"comment\">// 默认选中通过$refs从子元素中获取</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Bank.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"emitCurBankIndex(index)\"</span>&gt;</span></span><br><span class=\"line\">            </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'list'</span>],</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      curCity:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义时间，通过传参将值传给父组件 </span></span><br><span class=\"line\">        emitCurBankIndex(index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'onEmitCurBankIndex'</span>, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"children-parent\"><a href=\"#children-parent\" class=\"headerlink\" title=\"$children / $parent\"></a>$children / $parent</h3><p>指定已创建的父实例，在两者之间建立父子关系。子实例可以用<code>this.$parent</code>访问父实例，子实例被推入父实例的<code>$children</code>数组中。<code>this.$parent</code>返回的是包含父组件实例的对象，而<code>$children</code>返回的是由该父组件所包含的所有子组件的数组。</p>\n<h4 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>使用一个简单的例子来验证下<code>$children / $parent</code>，其中<code>Parent.vue</code>是<code>Children.vue</code>的父组件。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Parent.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent-el\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        我是子组件的值</span><span class=\"template-variable\">&#123;&#123;tmp&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">children-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">children-a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"setChildtVal\"</span>&gt;</span>点击改变子集的值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildrenA <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenA.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Parent'</span>,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        ChildrenA</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            parentMsg: <span class=\"string\">'我是父级的值'</span>,</span><br><span class=\"line\">            tmp: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        setChildtVal: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].childrenMsg = <span class=\"string\">'改变子级的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// Children.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;childrenMsg&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件的值：</span><span class=\"template-variable\">&#123;&#123;getParentVal&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            childrenMsg: <span class=\"string\">'子组件的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        getParentVal: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$parent.parentMsg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意：官网建议要节制地使用<code>$parent</code>和<code>$children</code>- 它们的主要目的是作为访问组件的应急方法。更推荐用<code>props</code>和<code>events</code>实现父子组件通信。</p>\n<h3 id=\"父子通信小结\"><a href=\"#父子通信小结\" class=\"headerlink\" title=\"父子通信小结\"></a>父子通信小结</h3><p><code>$refs</code> 和 <code>$children</code> 都只有在组件渲染完成后才填充，都是在<code>mounted</code>之后才存在，所以</p>\n<h2 id=\"跨级传递\"><a href=\"#跨级传递\" class=\"headerlink\" title=\"跨级传递\"></a>跨级传递</h2><h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide/ inject\"></a>provide/ inject</h3><p><code>provide/ inject</code> 是<code>vue2.2.0</code>新增的API。它解决了不管子组件嵌套多深，只要在父级组件中使用<code>provide</code>来提供变量，在子组件中就可以通过<code>inject</code>来注入变量。所以只要在祖先组件中使用<code>provide</code>定义了变量，子孙组件就能通过<code>inject</code>来获取，而不需要通过<code>prop</code>一层层的往下传递。</p>\n<h4 id=\"例子-3\"><a href=\"#例子-3\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p><code>Provider.vue</code>使用<code>provide</code>定义<code>title/titleA</code>属性，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>titleA</code>值，<code>ChildrenB.vue</code>通过<code>inject</code>获取<code>title</code>值。如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Provider.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildB <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenB.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    provide: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'跨级传递'</span>,</span><br><span class=\"line\">        titleA: <span class=\"string\">'子组件传递'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildB</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenB.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;tittle&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-c</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-c</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">    <span class=\"keyword\">import</span> ChildC <span class=\"keyword\">from</span> <span class=\"string\">\"./ChildrenC.vue\"</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'ChildB'</span>,</span><br><span class=\"line\">        inject: [ <span class=\"string\">'titleA'</span> ], <span class=\"comment\">// 获取父组件定义的titleA值</span></span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            ChildC</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                tittle: <span class=\"keyword\">this</span>.titleA</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// InjectChild.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'grand'</span>,</span><br><span class=\"line\">    inject: [<span class=\"string\">'title'</span>], <span class=\"comment\">// 获取祖先组件定义的title值</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            titie: <span class=\"keyword\">this</span>.titie</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"attrs-listeners\"><a href=\"#attrs-listeners\" class=\"headerlink\" title=\"$attrs  $listeners\"></a>$attrs  $listeners</h3><p><code>provide/ inject</code>解决了<code>props</code>一级一级往下传递信息的问题，但是没解决子孙组件通过事件通信祖先组件也得一级一级网上传递。所以，在<code>vue2.4</code>中又引入了<code>$attrs</code> 和 <code>$listeners</code>。</p>\n<h4 id=\"例子-4\"><a href=\"#例子-4\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p><code>ChildrenD</code>组件调用<code>ChildrenE</code>组件时，使用<code>v-on</code>绑定了<code>$listeners</code>,<code>Ancestors</code>组件中能直接触发<code>ChildrenE</code>组件定义的的<code>postName</code>方法；<code>v-bind</code>绑定 <code>$attrs</code>属性，<code>ChildrenE</code>组件可以直接获取到<code>Ancestors</code>组件中传递下来的属性值。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">// Ancestors.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>祖先组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-d</span> <span class=\"attr\">:titled</span>=<span class=\"string\">\"titleD\"</span> <span class=\"attr\">:titlee</span>=<span class=\"string\">\"titleE\"</span> <span class=\"attr\">v-on:postName</span>=<span class=\"string\">\"postName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-d</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildD <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenD'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            titleD: <span class=\"string\">'传递给childrenD的值'</span>,</span><br><span class=\"line\">            titleE: <span class=\"string\">'传递给childrenE的值'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildD</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        postName(val) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'从childrenE传递过来的值：'</span> + val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenD.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-e</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"$listeners\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-e</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ChildE <span class=\"keyword\">from</span> <span class=\"string\">'./ChildrenE.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.$attrs.titled</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        ChildE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// ChildrenE.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"postName(name)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            name: <span class=\"string\">''</span>,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.$attrs.titlee</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        postName(val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'postName'</span>,val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h2><p>没有<code>API</code>能直接实现兄弟组件的通信。</p>\n<h3 id=\"事件中转\"><a href=\"#事件中转\" class=\"headerlink\" title=\"事件中转\"></a>事件中转</h3><p>父子通信可以通过官方的<code>API</code>一步来传递，但是兄弟间的数据传递要麻烦一点。得利用<code>vue</code>内部的一个事件机制，将其作为兄弟事件处理的中转站。</p>\n<h4 id=\"例子-5\"><a href=\"#例子-5\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>将<code>EventBus</code>定义在父级元素，这样子的话子元素可以直接获取到时间对象。<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">//EventBus.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">brother-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">brother-a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">brother-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">brother-b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BrotherA <span class=\"keyword\">from</span> <span class=\"string\">'./BrotherA.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BrotherB <span class=\"keyword\">from</span> <span class=\"string\">'./BrotherB.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\">Vue.prototype.$EventBus = EventBus; <span class=\"comment\">// 将vue内部的事件赋值给vue的原型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        BrotherA,</span><br><span class=\"line\">        BrotherB</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\">//BrotherA.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"title\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"passTitle(title)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        passTitle(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$EventBus.$emit(<span class=\"string\">'passTitle'</span>, val) <span class=\"comment\">// 子元素获取到$EventBus对象，然后定义事件名passTitle</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">//BrotherB.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>BrotherB组件<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>BrotherA组件传递过来的值：</span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            title: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$EventBus.$on(<span class=\"string\">'passTitle'</span>, (val)=&gt; &#123; <span class=\"comment\">// 接受passTitle事件</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.title = val</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>当然也可以定义一个<code>eventBus.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure></p>\n<p>然后每次使用引入使用<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventBus &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./event-bus.js'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p><code>Vuex</code>是一个专为 Vue.js 应用程序开发的状态管理模式。具体怎么使用移步<a href=\"https://vuex.vuejs.org/zh/\">官网</a>。</p>\n<h3 id=\"兄弟组件通信小结\"><a href=\"#兄弟组件通信小结\" class=\"headerlink\" title=\"兄弟组件通信小结\"></a>兄弟组件通信小结</h3><p>事件中转和<code>Vuex</code>能实现跨级通信，所以父子间通信也是能实现的，但是相比于其他直接能实现父子通信的<code>API</code>，用事件中转和<code>Vuex</code>去实现就有点不够优雅了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><code>props / $emit</code>和<code>$children / $parent</code>只能解决父子组件的通信。</li>\n<li><code>$children</code>和<code>$refs</code>都不是响应式的，因此不能用它们在模板中做数据绑定。</li>\n<li><code>Vuex</code>能解决所有关系组件通信问题，但是要根据实际项目情况去使用。</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzcl768g0000dkhsgmwzgz89","category_id":"cjzcl768p0005dkhsqcsw1lm5","_id":"cjzcl768v000ddkhshej6629z"},{"post_id":"cjzcl768p0006dkhswywafo9s","category_id":"cjzcl768t000adkhsdbungasz","_id":"cjzcl768z000kdkhsd0lvfvff"},{"post_id":"cjzcl768t000cdkhsl1yiwq98","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl7696000tdkhsbamzbwvr"},{"post_id":"cjzcl7691000odkhs4xgejyfe","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl7698000xdkhsl3h79nrc"},{"post_id":"cjzcl7693000rdkhs9f7i7vml","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl76990010dkhscd9xrscq"},{"post_id":"cjzcl768x000idkhs5b8x9o6d","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl769b0015dkhssq56x1d7"},{"post_id":"cjzcl7697000wdkhsjl31rbx8","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl769c0017dkhsylz6n4u9"},{"post_id":"cjzcl768y000jdkhs8b8w9dhc","category_id":"cjzcl769a0013dkhs78va7acj","_id":"cjzcl769d001bdkhsu6tqd1q6"},{"post_id":"cjzcl7690000ndkhsyrpvsqvt","category_id":"cjzcl769d001adkhsnmfa12wy","_id":"cjzcl769f001gdkhs74lvh4w3"},{"post_id":"cjzcl7695000sdkhsycmnqpzv","category_id":"cjzcl769e001ddkhsnkocfdj2","_id":"cjzcl769g001jdkhsz81m4rnw"},{"post_id":"cjzcl768r0007dkhsl13rfyji","category_id":"cjzcl768x000gdkhsokcnk0hx","_id":"cjzcl769i001odkhs3uodidwc"},{"post_id":"cjzcl768r0007dkhsl13rfyji","category_id":"cjzcl7696000udkhsuufovbhv","_id":"cjzcl769i001rdkhsq7c405qf"},{"post_id":"cjzcl768r0007dkhsl13rfyji","category_id":"cjzcl769g001idkhs2490rvu7","_id":"cjzcl769j001sdkhsw60xmk3y"},{"post_id":"cjzcl769a0012dkhsznnbiku4","category_id":"cjzcl769h001ldkhsf6qan8oo","_id":"cjzcl769j001udkhs7n0t8iff"},{"post_id":"cjzcl769x002kdkhsgg2373zq","category_id":"cjzcl769e001ddkhsnkocfdj2","_id":"cjzcl769z002mdkhsud315829"},{"post_id":"cjzcl76aa002qdkhs9r4yysha","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl76ad002vdkhsmpnaguo3"},{"post_id":"cjzcl76aa002rdkhs5l5zfy9z","category_id":"cjzcl769d001adkhsnmfa12wy","_id":"cjzcl76ae002ydkhs71r1zppg"},{"post_id":"cjzcl76ac002tdkhsvagx8mp1","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl76ag0034dkhslcvm0yoe"},{"post_id":"cjzcl76ac002tdkhsvagx8mp1","category_id":"cjzcl76ae002zdkhsmj44eaip","_id":"cjzcl76ag0035dkhsk76lamsu"},{"post_id":"cjzcl76ai0036dkhsoqwdvza7","category_id":"cjzcl768z000mdkhscuey7pb0","_id":"cjzcl76al003bdkhsy889n4mj"},{"post_id":"cjzcl76aj0037dkhsw4myc1sp","category_id":"cjzcl76ak003adkhsbiwr5d7e","_id":"cjzcl76al003ddkhsk1xbib48"}],"PostTag":[{"post_id":"cjzcl768g0000dkhsgmwzgz89","tag_id":"cjzcl768n0004dkhs0qeh22gq","_id":"cjzcl768t000bdkhso7eg8wla"},{"post_id":"cjzcl768p0006dkhswywafo9s","tag_id":"cjzcl768r0008dkhsm0w9yt6y","_id":"cjzcl768x000hdkhsrk8fvdky"},{"post_id":"cjzcl768r0007dkhsl13rfyji","tag_id":"cjzcl768w000fdkhsqs7is162","_id":"cjzcl7698000ydkhssh6wspz4"},{"post_id":"cjzcl768r0007dkhsl13rfyji","tag_id":"cjzcl768z000ldkhss6xazgzr","_id":"cjzcl76990011dkhs8nyg48cd"},{"post_id":"cjzcl768r0007dkhsl13rfyji","tag_id":"cjzcl7692000pdkhs24b3nh45","_id":"cjzcl769c0016dkhsenq4q82k"},{"post_id":"cjzcl768t000cdkhsl1yiwq98","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769c0018dkhs9vxvpunf"},{"post_id":"cjzcl768v000edkhsjcyncefe","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769e001edkhsfdq96ytz"},{"post_id":"cjzcl768v000edkhsjcyncefe","tag_id":"cjzcl769d0019dkhsmcf0jbu5","_id":"cjzcl769f001fdkhsenp92nmt"},{"post_id":"cjzcl768x000idkhs5b8x9o6d","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769h001mdkhsjnmgaxjw"},{"post_id":"cjzcl768x000idkhs5b8x9o6d","tag_id":"cjzcl769f001hdkhsqdjs3t6v","_id":"cjzcl769h001ndkhs3rvhcnw5"},{"post_id":"cjzcl768y000jdkhs8b8w9dhc","tag_id":"cjzcl769g001kdkhsq7y7kgvn","_id":"cjzcl769i001qdkhs2qr6r6em"},{"post_id":"cjzcl7690000ndkhsyrpvsqvt","tag_id":"cjzcl769i001pdkhskia32oax","_id":"cjzcl769l001xdkhsrifsr9p4"},{"post_id":"cjzcl7690000ndkhsyrpvsqvt","tag_id":"cjzcl769j001tdkhskqckiofb","_id":"cjzcl769l001ydkhsi98naslb"},{"post_id":"cjzcl7690000ndkhsyrpvsqvt","tag_id":"cjzcl769k001vdkhstzqhpmo2","_id":"cjzcl769l0020dkhsbuayeamj"},{"post_id":"cjzcl7691000odkhs4xgejyfe","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769m0022dkhs0cspcon3"},{"post_id":"cjzcl7691000odkhs4xgejyfe","tag_id":"cjzcl769l001zdkhsxvxeavgh","_id":"cjzcl769m0023dkhsl8emkpxo"},{"post_id":"cjzcl7693000rdkhs9f7i7vml","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769o0026dkhsirrucd0c"},{"post_id":"cjzcl7693000rdkhs9f7i7vml","tag_id":"cjzcl769f001hdkhsqdjs3t6v","_id":"cjzcl769p0027dkhslywcefa7"},{"post_id":"cjzcl7695000sdkhsycmnqpzv","tag_id":"cjzcl769o0025dkhsudj1owl2","_id":"cjzcl769q002adkhsg23bry00"},{"post_id":"cjzcl7695000sdkhsycmnqpzv","tag_id":"cjzcl769p0028dkhslezwj1k6","_id":"cjzcl769q002bdkhsogbwumux"},{"post_id":"cjzcl7697000wdkhsjl31rbx8","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl769r002ddkhsos0iylyw"},{"post_id":"cjzcl769a0012dkhsznnbiku4","tag_id":"cjzcl769q002cdkhs3v3tmch6","_id":"cjzcl769s002gdkhshmka6l90"},{"post_id":"cjzcl769a0012dkhsznnbiku4","tag_id":"cjzcl769r002edkhsf3wjzpwb","_id":"cjzcl769s002hdkhsd6edswe1"},{"post_id":"cjzcl769a0012dkhsznnbiku4","tag_id":"cjzcl769s002fdkhsfv2t8d01","_id":"cjzcl769s002idkhshzjgfjzx"},{"post_id":"cjzcl769x002kdkhsgg2373zq","tag_id":"cjzcl769o0025dkhsudj1owl2","_id":"cjzcl769z002ndkhs481wy1zf"},{"post_id":"cjzcl769x002kdkhsgg2373zq","tag_id":"cjzcl769y002ldkhsxpxztrqz","_id":"cjzcl76a0002odkhs6k78464n"},{"post_id":"cjzcl76aa002qdkhs9r4yysha","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl76ab002sdkhsjvxz0k81"},{"post_id":"cjzcl76aa002qdkhs9r4yysha","tag_id":"cjzcl769l001zdkhsxvxeavgh","_id":"cjzcl76ad002udkhsf4yhnlza"},{"post_id":"cjzcl76aa002rdkhs5l5zfy9z","tag_id":"cjzcl769i001pdkhskia32oax","_id":"cjzcl76ae002xdkhsna20ftuq"},{"post_id":"cjzcl76aa002rdkhs5l5zfy9z","tag_id":"cjzcl769j001tdkhskqckiofb","_id":"cjzcl76af0030dkhsdywgz431"},{"post_id":"cjzcl76aa002rdkhs5l5zfy9z","tag_id":"cjzcl769k001vdkhstzqhpmo2","_id":"cjzcl76af0031dkhsrp7zbibt"},{"post_id":"cjzcl76ac002tdkhsvagx8mp1","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl76af0032dkhs6sgxsfn0"},{"post_id":"cjzcl76ac002tdkhsvagx8mp1","tag_id":"cjzcl76ae002wdkhsnawxs7dh","_id":"cjzcl76ag0033dkhsi712y73r"},{"post_id":"cjzcl76ai0036dkhsoqwdvza7","tag_id":"cjzcl7696000vdkhs6jwbem07","_id":"cjzcl76ak0038dkhsgy57tj42"},{"post_id":"cjzcl76aj0037dkhsw4myc1sp","tag_id":"cjzcl76ak0039dkhsg0x1zeh9","_id":"cjzcl76am003edkhs042vrn3j"},{"post_id":"cjzcl76aj0037dkhsw4myc1sp","tag_id":"cjzcl76al003cdkhspiajh74u","_id":"cjzcl76am003fdkhsat158mq6"}],"Tag":[{"name":"Css 积累","_id":"cjzcl768n0004dkhs0qeh22gq"},{"name":"技术细节 cross-dev","_id":"cjzcl768r0008dkhsm0w9yt6y"},{"name":"GraphQL","_id":"cjzcl768w000fdkhsqs7is162"},{"name":"Koa","_id":"cjzcl768z000ldkhss6xazgzr"},{"name":"Mongoose","_id":"cjzcl7692000pdkhs24b3nh45"},{"name":"JavaScript","_id":"cjzcl7696000vdkhs6jwbem07"},{"name":"JS工具","_id":"cjzcl769d0019dkhsmcf0jbu5"},{"name":"JS实际应用","_id":"cjzcl769f001hdkhsqdjs3t6v"},{"name":"hexo","_id":"cjzcl769g001kdkhsq7y7kgvn"},{"name":"mongoose","_id":"cjzcl769i001pdkhskia32oax"},{"name":"nodeJs","_id":"cjzcl769j001tdkhskqckiofb"},{"name":"mongoDB","_id":"cjzcl769k001vdkhstzqhpmo2"},{"name":"正则","_id":"cjzcl769l001zdkhsxvxeavgh"},{"name":"webpack","_id":"cjzcl769o0025dkhsudj1owl2"},{"name":"webpack4.x","_id":"cjzcl769p0028dkhslezwj1k6"},{"name":"技术细节","_id":"cjzcl769q002cdkhs3v3tmch6"},{"name":"reflow","_id":"cjzcl769r002edkhsf3wjzpwb"},{"name":"前端性能","_id":"cjzcl769s002fdkhsfv2t8d01"},{"name":"webpack1.x","_id":"cjzcl769y002ldkhsxpxztrqz"},{"name":"React","_id":"cjzcl76ae002wdkhsnawxs7dh"},{"name":"Vue","_id":"cjzcl76ak0039dkhsg0x1zeh9"},{"name":"Vue实操","_id":"cjzcl76al003cdkhspiajh74u"}]}}